==============================================================================
20190402 06:17:21.190 - INFO - + START SUITE: Sanity-Test [ ]
==============================================================================
20190402 06:17:21.191 - INFO - +- START SUITE: Sanity-Test.Sanity-OpenStack [ ]
==============================================================================
20190402 06:17:21.308 - INFO - +-- START SUITE: Sanity-Test.Sanity-OpenStack.01-Instance-From-Image [ ]
==============================================================================
20190402 06:17:21.308 - INFO - +--- START SETUP: Utils.Stx Suite Setup [ ]
20190402 06:17:21.309 - INFO - +---- START KW: Utils.Open Master Controller Connection [ ]
20190402 06:17:21.309 - INFO - +----- START KW: Utils.Connect to Controller Node [ ${CONFIG.credentials.STX_DEPLOY_USER_NAME} | ${CONFIG.credentials.STX_DEPLOY_USER_PSWD} | ${CONFIG.general.IP_UNIT_0_ADDRESS} ]
20190402 06:17:21.309 - INFO - +------ START KW: SSHLibrary.Open Connection [ ${ip_address} prompt=${prompt} | timeout=${timeout} ]
20190402 06:17:21.310 - INFO - ${controller_connection} = 1
20190402 06:17:21.310 - INFO - +------ END KW: SSHLibrary.Open Connection (1)
20190402 06:17:21.310 - INFO - +------ START KW: Utils.Flexible_SSH_Login [ ${user} | ${password} ]
20190402 06:17:21.310 - INFO - +------- START KW: BuiltIn.Get Length [ ${password} ]
20190402 06:17:21.310 - INFO - Length is 10
20190402 06:17:21.310 - INFO - ${pwd_length} = 10
20190402 06:17:21.310 - INFO - +------- END KW: BuiltIn.Get Length (0)
20190402 06:17:21.311 - INFO - +------- START KW: BuiltIn.Run Keyword And Return If [ ${pwd_length} > 0 | SSHLibrary.Login | ${user} | ${password} | delay=${delay} ]
20190402 06:17:21.311 - INFO - +-------- START KW: SSHLibrary.Login [ ${user} | ${password} | delay=${delay} ]
20190402 06:17:21.311 - INFO - Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.
20190402 06:17:22.415 - INFO - Read output: Last login: Tue Apr  2 11:32:22 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$
20190402 06:17:22.416 - INFO - /home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/paramiko/kex_ecdh_nist.py:39: CryptographyDeprecationWarning: encode_point has been deprecated on EllipticCurvePublicNumbers and will be removed in a future version. Please use EllipticCurvePublicKey.public_bytes to obtain both compressed and uncompressed point encoding.
  m.add_string(self.Q_C.public_numbers().encode_point())
/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/paramiko/kex_ecdh_nist.py:96: CryptographyDeprecationWarning: Support for unsafe construction of public numbers from encoded data will be removed in a future version. Please use EllipticCurvePublicKey.from_encoded_point
  self.curve, Q_S_bytes
/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/paramiko/kex_ecdh_nist.py:111: CryptographyDeprecationWarning: encode_point has been deprecated on EllipticCurvePublicNumbers and will be removed in a future version. Please use EllipticCurvePublicKey.public_bytes to obtain both compressed and uncompressed point encoding.
  hm.add_string(self.Q_C.public_numbers().encode_point())
20190402 06:17:22.416 - INFO - +-------- END KW: SSHLibrary.Login (1105)
20190402 06:17:22.417 - INFO - Returning from the enclosing user keyword.
20190402 06:17:22.417 - INFO - +------- END KW: BuiltIn.Run Keyword And Return If (1106)
20190402 06:17:22.418 - INFO - +------ END KW: Utils.Flexible_SSH_Login (1107)
20190402 06:17:22.418 - INFO - ${master_controller_connection} = 1
20190402 06:17:22.418 - INFO - +----- END KW: Utils.Connect to Controller Node (1109)
20190402 06:17:22.419 - INFO - +----- START KW: BuiltIn.Set Suite Variable [ ${master_controller_connection} ]
20190402 06:17:22.420 - INFO - ${master_controller_connection} = 1
20190402 06:17:22.420 - INFO - +----- END KW: BuiltIn.Set Suite Variable (1)
20190402 06:17:22.420 - INFO - +----- START KW: BuiltIn.Log [ ${master_controller_connection} ]
20190402 06:17:22.421 - INFO - 1
20190402 06:17:22.421 - INFO - +----- END KW: BuiltIn.Log (1)
20190402 06:17:22.421 - INFO - +---- END KW: Utils.Open Master Controller Connection (1112)
20190402 06:17:22.422 - INFO - +---- START KW: Utils.Set Env Vars From Openrc [ ]
20190402 06:17:22.423 - INFO - +----- START KW: Utils.Run Command [ source /etc/platform/openrc | True ]
20190402 06:17:22.424 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:17:22.424 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:17:22.425 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:17:22.425 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:17:22.427 - INFO - &{result_dict} = { stdout= }
20190402 06:17:22.427 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:22.428 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:17:22.428 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:17:22.429 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:17:22.429 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:17:22.430 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:17:22.430 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (5)
20190402 06:17:22.431 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 06:17:22.431 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 06:17:22.431 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:17:22.442 - INFO - source /etc/platform/openrc
20190402 06:17:22.442 - INFO - +------ END KW: SSHLibrary.Write (11)
20190402 06:17:22.442 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:17:22.850 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:17:22.850 - INFO - ${output} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:17:22.850 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (408)
20190402 06:17:22.851 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:17:22.851 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:17:22.851 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:17:22.851 - INFO - +------- END KW: String.Get Line (0)
20190402 06:17:22.851 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:17:22.851 - INFO - ${clean_out} =
20190402 06:17:22.852 - INFO - +------- END KW: String.Remove String (0)
20190402 06:17:22.852 - INFO - ${output} =
20190402 06:17:22.852 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 06:17:22.852 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 06:17:22.852 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:17:22.853 - INFO - echo $?
20190402 06:17:22.854 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 06:17:22.854 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:17:22.854 - INFO - 0
20190402 06:17:22.854 - INFO - ${rc} = 0
20190402 06:17:22.854 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 06:17:22.854 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:17:22.855 - INFO - 0
20190402 06:17:22.855 - INFO - +------- END KW: BuiltIn.Log (1)
20190402 06:17:22.855 - INFO - ${rc} = 0
20190402 06:17:22.855 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 06:17:22.855 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:17:22.855 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:17:22.856 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 06:17:22.856 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:17:22.856 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:17:22.856 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 06:17:22.856 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:17:22.856 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout:
20190402 06:17:22.856 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 06:17:22.856 - INFO - +----- END KW: Utils.Run Command (433)
20190402 06:17:22.856 - INFO - +---- END KW: Utils.Set Env Vars From Openrc (434)
20190402 06:17:22.857 - INFO - +--- END SETUP: Utils.Stx Suite Setup (1548)
------------------------------------------------------------------------------
20190402 06:17:22.857 - INFO - +--- START TEST: Create Flavors for Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:22.857 - INFO - +---- START KW: BuiltIn.Catenate [ ${flavor_property_1} | ${flavor_property_2} ]
20190402 06:17:22.857 - INFO - ${properties} = --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared'
20190402 06:17:22.857 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:17:22.858 - INFO - +---- START KW: OpenStack.Create Flavor [ ${cirros_flavor_ram} | ${cirros_flavor_vcpus} | ${cirros_flavor_disk} | ${cirros_flavor_name} ]
20190402 06:17:22.858 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 06:17:22.858 - INFO - ${openstack_cmd} = openstack flavor create
20190402 06:17:22.858 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:17:22.858 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 06:17:22.859 - INFO - ${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small
20190402 06:17:22.859 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 06:17:22.859 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:22.859 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:22.859 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:22.859 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:22.859 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:22.860 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.
20190402 06:17:23.540 - INFO - Command exited with return code 1.
20190402 06:17:23.540 - INFO - ${stdout} =
20190402 06:17:23.541 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:23.541 - INFO - ${rc} = 1
20190402 06:17:23.541 - INFO - +------ END KW: SSHLibrary.Execute Command (682)
20190402 06:17:23.542 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:23.543 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:23.543 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 06:17:23.544 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:23.545 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:23.545 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:23.545 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:23.546 - INFO - +------- END KW: BuiltIn.Fail (0)
20190402 06:17:23.546 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:23.546 - INFO - +----- END KW: OpenStack.Run OS Command (687)
20190402 06:17:23.546 - INFO - +---- END KW: OpenStack.Create Flavor (689)
------------------------------------------------------------------------------
20190402 06:17:23.546 - INFO - +--- END TEST: Create Flavors for Instances (689)
------------------------------------------------------------------------------
20190402 06:17:23.547 - INFO - +--- START TEST: Create Images for Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:23.547 - INFO - +---- START KW: SSHLibrary.Put File [ %{PYTHONPATH}/${cirros_image} | ${host_image_path}/${cirros_image} ]
20190402 06:17:23.585 - INFO - [chan 2] Opened sftp connection (server version 3)
20190402 06:17:23.593 - INFO - [chan 3] Opened sftp connection (server version 3)
20190402 06:17:23.595 - FAIL - There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.
20190402 06:17:23.595 - DEBUG - Traceback (most recent call last):
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1559, in put_file
    destination, mode, newline, scp)
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1619, in _run_command
    raise RuntimeError(e)
20190402 06:17:23.595 - INFO - +---- END KW: SSHLibrary.Put File (48)
------------------------------------------------------------------------------
20190402 06:17:23.596 - INFO - +--- END TEST: Create Images for Instances (50)
------------------------------------------------------------------------------
20190402 06:17:23.597 - INFO - +--- START TEST: Create Networks for Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:23.598 - INFO - +---- START KW: OpenStack.Create Network [ ${network_name} ]
20190402 06:17:23.599 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack network create ]
20190402 06:17:23.599 - INFO - ${openstack_cmd} = openstack network create
20190402 06:17:23.600 - INFO - +----- END KW: BuiltIn.Set Variable (1)
20190402 06:17:23.600 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${network_name} | ${additional_args} ]
20190402 06:17:23.601 - INFO - ${cmd} = openstack network create network-1
20190402 06:17:23.601 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 06:17:23.601 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:23.602 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:23.603 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:23.603 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:23.603 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:23.604 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network create network-1 '.
20190402 06:17:24.235 - INFO - Command exited with return code 1.
20190402 06:17:24.235 - INFO - ${stdout} =
20190402 06:17:24.236 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:24.236 - INFO - ${rc} = 1
20190402 06:17:24.236 - INFO - +------ END KW: SSHLibrary.Execute Command (633)
20190402 06:17:24.237 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:24.238 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:24.238 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:24.238 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:24.239 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:24.240 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:24.240 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:24.240 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:24.240 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:24.240 - INFO - +----- END KW: OpenStack.Run OS Command (639)
20190402 06:17:24.241 - INFO - +---- END KW: OpenStack.Create Network (642)
------------------------------------------------------------------------------
20190402 06:17:24.241 - INFO - +--- END TEST: Create Networks for Instances (644)
------------------------------------------------------------------------------
20190402 06:17:24.241 - INFO - +--- START TEST: Launch Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:24.242 - INFO - +---- START KW: OpenStack.Create Instance [ ${network_name} | ${cirros_instance_name} | ${cirros_image_name} | ${cirros_flavor_name} ]
20190402 06:17:24.242 - INFO - +----- START KW: OpenStack.Get Net Id [ ${net_name} ]
20190402 06:17:24.242 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 06:17:24.242 - INFO - ${openstack_cmd} = openstack network list
20190402 06:17:24.242 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:24.243 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep "${network_name}" | awk '{print$2}' ]
20190402 06:17:24.243 - INFO - ${cmd} = openstack network list|grep "network-1"|awk '{print$2}'
20190402 06:17:24.243 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:17:24.243 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 06:17:24.243 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:24.243 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:24.244 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 06:17:24.244 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:24.244 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|grep "network-1"|awk '{print$2}''.
20190402 06:17:24.874 - INFO - Command exited with return code 0.
20190402 06:17:24.875 - INFO - ${stdout} =
20190402 06:17:24.875 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:24.875 - INFO - ${rc} = 0
20190402 06:17:24.875 - INFO - +------- END KW: SSHLibrary.Execute Command (631)
20190402 06:17:24.876 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:24.877 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 0}
20190402 06:17:24.877 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:17:24.878 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:24.879 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:17:24.879 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=0 }
20190402 06:17:24.879 - INFO - +------ END KW: OpenStack.Run OS Command (636)
20190402 06:17:24.880 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:24.880 - INFO - ${output} =
20190402 06:17:24.880 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 06:17:24.880 - INFO - +------ START KW: String.Split String [ ${output} | ${EMPTY} ]
20190402 06:17:24.880 - INFO - ${splitted_output} = []
20190402 06:17:24.880 - INFO - +------ END KW: String.Split String (0)
20190402 06:17:24.881 - INFO - +------ START KW: Collections.Get From List [ ${splitted_output} | 0 ]
20190402 06:17:24.881 - FAIL - IndexError: Given index 0 is out of the range 0--1.
20190402 06:17:24.881 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:24.881 - INFO - +------ END KW: Collections.Get From List (0)
20190402 06:17:24.881 - INFO - +----- END KW: OpenStack.Get Net Id (639)
20190402 06:17:24.881 - INFO - +---- END KW: OpenStack.Create Instance (639)
------------------------------------------------------------------------------
20190402 06:17:24.882 - INFO - +--- END TEST: Launch Instances (640)
------------------------------------------------------------------------------
20190402 06:17:24.882 - INFO - +--- START TEST: Suspend Resume Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:24.882 - INFO - +---- START KW: OpenStack.Suspend Instance [ ${cirros_instance_name} ]
20190402 06:17:24.882 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server suspend ${vm_name} | True | 30 sec ]
20190402 06:17:24.883 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:24.883 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:24.883 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:24.883 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:24.883 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server suspend vm-cirros-1'.
20190402 06:17:25.513 - INFO - Command exited with return code 1.
20190402 06:17:25.514 - INFO - ${stdout} =
20190402 06:17:25.514 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:25.514 - INFO - ${rc} = 1
20190402 06:17:25.514 - INFO - +------ END KW: SSHLibrary.Execute Command (631)
20190402 06:17:25.515 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:25.516 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:25.517 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 06:17:25.517 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:25.518 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:25.518 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:25.519 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:25.519 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:25.519 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:25.519 - INFO - +----- END KW: OpenStack.Run OS Command (637)
20190402 06:17:25.519 - INFO - +---- END KW: OpenStack.Suspend Instance (637)
------------------------------------------------------------------------------
20190402 06:17:25.519 - INFO - +--- END TEST: Suspend Resume Instances (637)
------------------------------------------------------------------------------
20190402 06:17:25.520 - INFO - +--- START TEST: Set Error Active Flags Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:25.520 - INFO - +---- START KW: OpenStack.Set Error State Instance [ ${cirros_instance_name} | error ]
20190402 06:17:25.520 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server set --state ${value} ${vm_name} | True | 30 sec ]
20190402 06:17:25.520 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:25.521 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:25.521 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:25.521 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:25.521 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server set --state error vm-cirros-1'.
20190402 06:17:26.232 - INFO - Command exited with return code 1.
20190402 06:17:26.233 - INFO - ${stdout} =
20190402 06:17:26.233 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:26.233 - INFO - ${rc} = 1
20190402 06:17:26.234 - INFO - +------ END KW: SSHLibrary.Execute Command (713)
20190402 06:17:26.234 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:26.236 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:26.236 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:26.236 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:26.237 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:26.238 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:26.238 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:26.238 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:26.238 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:26.238 - INFO - +----- END KW: OpenStack.Run OS Command (718)
20190402 06:17:26.238 - INFO - +---- END KW: OpenStack.Set Error State Instance (718)
------------------------------------------------------------------------------
20190402 06:17:26.238 - INFO - +--- END TEST: Set Error Active Flags Instances (719)
------------------------------------------------------------------------------
20190402 06:17:26.239 - INFO - +--- START TEST: Pause Unpause Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:26.239 - INFO - +---- START KW: OpenStack.Pause Instance [ ${cirros_instance_name} ]
20190402 06:17:26.239 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server pause ${vm_name} | True | 30 sec ]
20190402 06:17:26.240 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:26.240 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:26.240 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:26.240 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:26.240 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server pause vm-cirros-1'.
20190402 06:17:26.970 - INFO - Command exited with return code 1.
20190402 06:17:26.971 - INFO - ${stdout} =
20190402 06:17:26.971 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:26.971 - INFO - ${rc} = 1
20190402 06:17:26.972 - INFO - +------ END KW: SSHLibrary.Execute Command (732)
20190402 06:17:26.972 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:26.974 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:26.974 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:26.974 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:26.976 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:26.976 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:26.976 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:26.976 - INFO - +------- END KW: BuiltIn.Fail (0)
20190402 06:17:26.976 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:26.976 - INFO - +----- END KW: OpenStack.Run OS Command (737)
20190402 06:17:26.976 - INFO - +---- END KW: OpenStack.Pause Instance (737)
------------------------------------------------------------------------------
20190402 06:17:26.977 - INFO - +--- END TEST: Pause Unpause Instances (738)
------------------------------------------------------------------------------
20190402 06:17:26.977 - INFO - +--- START TEST: Stop Start Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:26.977 - INFO - +---- START KW: OpenStack.Stop Instance [ ${cirros_instance_name} ]
20190402 06:17:26.977 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server stop ${vm_name} | True | 30 sec ]
20190402 06:17:26.978 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:26.978 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:26.978 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:26.978 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:26.978 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server stop vm-cirros-1'.
20190402 06:17:27.609 - INFO - Command exited with return code 1.
20190402 06:17:27.610 - INFO - ${stdout} =
20190402 06:17:27.610 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:27.610 - INFO - ${rc} = 1
20190402 06:17:27.610 - INFO - +------ END KW: SSHLibrary.Execute Command (632)
20190402 06:17:27.611 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:27.612 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:27.613 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:27.613 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:27.614 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:27.614 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:27.614 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:27.614 - INFO - +------- END KW: BuiltIn.Fail (0)
20190402 06:17:27.614 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:17:27.614 - INFO - +----- END KW: OpenStack.Run OS Command (637)
20190402 06:17:27.614 - INFO - +---- END KW: OpenStack.Stop Instance (637)
------------------------------------------------------------------------------
20190402 06:17:27.615 - INFO - +--- END TEST: Stop Start Instances (637)
------------------------------------------------------------------------------
20190402 06:17:27.615 - INFO - +--- START TEST: Lock Unlock Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:27.615 - INFO - +---- START KW: OpenStack.Lock Instance [ ${cirros_instance_name} ]
20190402 06:17:27.616 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server lock ${vm_name} | True | 30 sec ]
20190402 06:17:27.616 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:27.616 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:27.616 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:27.616 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:27.616 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server lock vm-cirros-1'.
20190402 06:17:28.247 - INFO - Command exited with return code 1.
20190402 06:17:28.247 - INFO - ${stdout} =
20190402 06:17:28.248 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:28.248 - INFO - ${rc} = 1
20190402 06:17:28.248 - INFO - +------ END KW: SSHLibrary.Execute Command (632)
20190402 06:17:28.249 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:28.250 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:28.250 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 06:17:28.251 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:28.252 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:28.252 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:28.253 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:28.253 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:28.253 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:28.253 - INFO - +----- END KW: OpenStack.Run OS Command (637)
20190402 06:17:28.253 - INFO - +---- END KW: OpenStack.Lock Instance (638)
------------------------------------------------------------------------------
20190402 06:17:28.253 - INFO - +--- END TEST: Lock Unlock Instances (638)
------------------------------------------------------------------------------
20190402 06:17:28.254 - INFO - +--- START TEST: Reboot Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:28.254 - INFO - +---- START KW: OpenStack.Reboot Instance [ ${cirros_instance_name} ]
20190402 06:17:28.254 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server reboot ${vm_name} | True | 30 sec ]
20190402 06:17:28.254 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:28.255 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:28.255 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:28.255 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:28.255 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server reboot vm-cirros-1'.
20190402 06:17:28.888 - INFO - Command exited with return code 1.
20190402 06:17:28.888 - INFO - ${stdout} =
20190402 06:17:28.888 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:28.889 - INFO - ${rc} = 1
20190402 06:17:28.889 - INFO - +------ END KW: SSHLibrary.Execute Command (634)
20190402 06:17:28.889 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:28.891 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:28.891 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:28.891 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:28.892 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:28.894 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:28.894 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:28.894 - INFO - +------- END KW: BuiltIn.Fail (2)
20190402 06:17:28.894 - INFO - +------ END KW: BuiltIn.Run Keyword If (3)
20190402 06:17:28.894 - INFO - +----- END KW: OpenStack.Run OS Command (640)
20190402 06:17:28.894 - INFO - +---- END KW: OpenStack.Reboot Instance (640)
------------------------------------------------------------------------------
20190402 06:17:28.894 - INFO - +--- END TEST: Reboot Instances (641)
------------------------------------------------------------------------------
20190402 06:17:28.894 - INFO - +--- START TEST: Rebuild Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:28.895 - INFO - +---- START KW: OpenStack.Rebuild Instance [ ${cirros_instance_name} ]
20190402 06:17:28.895 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server rebuild ${vm_name} | True | 30 sec ]
20190402 06:17:28.895 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:28.896 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:28.896 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:28.896 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:28.896 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server rebuild vm-cirros-1'.
20190402 06:17:29.476 - INFO - Command exited with return code 1.
20190402 06:17:29.477 - INFO - ${stdout} =
20190402 06:17:29.477 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:29.477 - INFO - ${rc} = 1
20190402 06:17:29.477 - INFO - +------ END KW: SSHLibrary.Execute Command (581)
20190402 06:17:29.478 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:29.479 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:29.479 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 06:17:29.480 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:29.481 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:29.481 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:29.482 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:29.482 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:29.482 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:29.482 - INFO - +----- END KW: OpenStack.Run OS Command (587)
20190402 06:17:29.482 - INFO - +---- END KW: OpenStack.Rebuild Instance (587)
------------------------------------------------------------------------------
20190402 06:17:29.482 - INFO - +--- END TEST: Rebuild Instances (588)
------------------------------------------------------------------------------
20190402 06:17:29.483 - INFO - +--- START TEST: Resize Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:29.483 - INFO - +---- START KW: OpenStack.Create Flavor [ ${cirros_flavor_ram} | ${cirros_flavor_vcpus} | ${cirros_flavor_disk} | ${cirros_flavor_name_2} ]
20190402 06:17:29.483 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 06:17:29.483 - INFO - ${openstack_cmd} = openstack flavor create
20190402 06:17:29.483 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:17:29.484 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 06:17:29.484 - INFO - ${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small
20190402 06:17:29.484 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 06:17:29.484 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:29.484 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:29.485 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:29.485 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:29.485 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:29.485 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small'.
20190402 06:17:30.096 - INFO - Command exited with return code 1.
20190402 06:17:30.097 - INFO - ${stdout} =
20190402 06:17:30.097 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:30.097 - INFO - ${rc} = 1
20190402 06:17:30.098 - INFO - +------ END KW: SSHLibrary.Execute Command (612)
20190402 06:17:30.098 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:30.100 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:30.100 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:30.100 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:30.101 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:30.102 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:30.102 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:30.102 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:30.102 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:30.102 - INFO - +----- END KW: OpenStack.Run OS Command (618)
20190402 06:17:30.102 - INFO - +---- END KW: OpenStack.Create Flavor (619)
------------------------------------------------------------------------------
20190402 06:17:30.102 - INFO - +--- END TEST: Resize Instances (620)
------------------------------------------------------------------------------
20190402 06:17:30.103 - INFO - +--- START TEST: Set Unset Properties Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:30.103 - INFO - +---- START KW: BuiltIn.Catenate [ ${instance_property_1}='true' | ${instance_property_2}='500' | ${instance_property_3}='180' ]
20190402 06:17:30.103 - INFO - ${properties} = --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180'
20190402 06:17:30.103 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:17:30.104 - INFO - +---- START KW: OpenStack.Set Instance Property [ ${cirros_instance_name} | ${properties} ]
20190402 06:17:30.104 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server set ${key} ${vm_name} | True | 30 sec ]
20190402 06:17:30.104 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:30.105 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:30.105 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:30.105 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:30.105 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-cirros-1'.
20190402 06:17:30.700 - INFO - Command exited with return code 1.
20190402 06:17:30.700 - INFO - ${stdout} =
20190402 06:17:30.700 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:30.701 - INFO - ${rc} = 1
20190402 06:17:30.701 - INFO - +------ END KW: SSHLibrary.Execute Command (596)
20190402 06:17:30.701 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:30.703 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:30.703 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:30.703 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:30.704 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:30.705 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:30.705 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:30.705 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:30.705 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:30.705 - INFO - +----- END KW: OpenStack.Run OS Command (601)
20190402 06:17:30.705 - INFO - +---- END KW: OpenStack.Set Instance Property (601)
------------------------------------------------------------------------------
20190402 06:17:30.705 - INFO - +--- END TEST: Set Unset Properties Instances (602)
------------------------------------------------------------------------------
20190402 06:17:30.706 - INFO - +--- START TEST: Evacuate Instances From Hosts [ ]
------------------------------------------------------------------------------
20190402 06:17:30.706 - INFO - +---- START KW: BuiltIn.Run Keyword If [ '${CONFIGURATION_TYPE}' == 'Duplex' | Run Keywords | Evacuate Instances | controller-0 | AND | Evacuate Instances | controller-1 | ELSE IF | '${CONFIGURATION_TYPE}' == 'MN-Local' or '${CONFIGURATION_TYPE}' == 'MN-External' | Run Keywords | Evacuate Instances | compute-0 | AND | Evacuate Instances | compute-1 ]
20190402 06:17:30.706 - INFO - +----- START KW: BuiltIn.Run Keywords [ Evacuate Instances | controller-0 | AND | Evacuate Instances | controller-1 ]
20190402 06:17:30.707 - INFO - +------ START KW: OpenStack.Evacuate Instances [ controller-0 ]
20190402 06:17:30.707 - INFO - +------- START KW: BuiltIn.Set Variable [ openstack compute service set ]
20190402 06:17:30.707 - INFO - ${openstack_cmd} = openstack compute service set
20190402 06:17:30.707 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:30.707 - INFO - +------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --disable | --disable-reason test-evacuate | ${host} | nova-compute ]
20190402 06:17:30.707 - INFO - ${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute
20190402 06:17:30.707 - INFO - +------- END KW: BuiltIn.Catenate (0)
20190402 06:17:30.708 - INFO - +------- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 06:17:30.708 - INFO - +-------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:30.708 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:30.708 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:30.708 - INFO - +-------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:30.708 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute'.
20190402 06:17:31.319 - INFO - Command exited with return code 1.
20190402 06:17:31.319 - INFO - ${stdout} =
20190402 06:17:31.319 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:31.319 - INFO - ${rc} = 1
20190402 06:17:31.320 - INFO - +-------- END KW: SSHLibrary.Execute Command (612)
20190402 06:17:31.320 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:31.321 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:31.322 - INFO - +-------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:17:31.322 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:31.323 - INFO - +--------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:31.324 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:31.324 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:31.324 - INFO - +--------- END KW: BuiltIn.Fail (1)
20190402 06:17:31.324 - INFO - +-------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:31.324 - INFO - +------- END KW: OpenStack.Run OS Command (617)
20190402 06:17:31.325 - INFO - +------ END KW: OpenStack.Evacuate Instances (618)
20190402 06:17:31.325 - INFO - +----- END KW: BuiltIn.Run Keywords (619)
20190402 06:17:31.325 - INFO - +---- END KW: BuiltIn.Run Keyword If (619)
------------------------------------------------------------------------------
20190402 06:17:31.326 - INFO - +--- END TEST: Evacuate Instances From Hosts (621)
------------------------------------------------------------------------------
20190402 06:17:31.328 - INFO - +--- START TEARDOWN: BuiltIn.Run Keywords [ OpenStack.Openstack Cleanup All | Utils.Stx Suite TearDown ]
20190402 06:17:31.329 - INFO - +---- START KW: OpenStack.Openstack Cleanup All [ ]
20190402 06:17:31.330 - INFO - +----- START KW: OpenStack.Delete All Instances [ ]
20190402 06:17:31.330 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack server list ]
20190402 06:17:31.331 - INFO - ${openstack_cmd} = openstack server list
20190402 06:17:31.331 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:31.331 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:17:31.332 - INFO - ${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"
20190402 06:17:31.332 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:17:31.332 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:31.333 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:31.333 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:31.334 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 06:17:31.334 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:31.335 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server list|awk '{print$4}'|grep -v "Name"'.
20190402 06:17:31.922 - INFO - Command exited with return code 1.
20190402 06:17:31.922 - INFO - ${stdout} =
20190402 06:17:31.922 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:31.923 - INFO - ${rc} = 1
20190402 06:17:31.923 - INFO - +------- END KW: SSHLibrary.Execute Command (589)
20190402 06:17:31.923 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:31.926 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:31.926 - INFO - +------- END KW: BuiltIn.Create Dictionary (3)
20190402 06:17:31.926 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:31.927 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:31.928 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:31.928 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:31.928 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:17:31.928 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:31.928 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:31.928 - INFO - +------ END KW: OpenStack.Run OS Command (596)
20190402 06:17:31.928 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:31.928 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:31.929 - INFO - ${response} =
20190402 06:17:31.929 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:17:31.929 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:31.929 - INFO - @{res_in_list} = [ ]
20190402 06:17:31.929 - INFO - +------- END KW: String.Split String (0)
20190402 06:17:31.929 - INFO - @{vm_list} = [ ]
20190402 06:17:31.929 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:17:31.929 - INFO - +------ START KW: ${vm} IN [ @{vm_list} ] [ ]
20190402 06:17:31.929 - INFO - +------ END KW: ${vm} IN [ @{vm_list} ] (0)
20190402 06:17:31.929 - INFO - +----- END KW: OpenStack.Delete All Instances (599)
20190402 06:17:31.930 - INFO - +----- START KW: OpenStack.Delete All Images [ ]
20190402 06:17:31.930 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack image list ]
20190402 06:17:31.930 - INFO - ${openstack_cmd} = openstack image list
20190402 06:17:31.930 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:31.930 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "Cirros" ]
20190402 06:17:31.930 - INFO - ${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"
20190402 06:17:31.930 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:17:31.930 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:31.931 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:31.931 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:31.931 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:31.931 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:31.931 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.
20190402 06:17:32.576 - INFO - Command exited with return code 1.
20190402 06:17:32.576 - INFO - ${stdout} =
20190402 06:17:32.577 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:32.577 - INFO - ${rc} = 1
20190402 06:17:32.577 - INFO - +------- END KW: SSHLibrary.Execute Command (646)
20190402 06:17:32.578 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:32.579 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:32.580 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:32.580 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:32.581 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:32.581 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:32.581 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:32.581 - INFO - +-------- END KW: BuiltIn.Fail (0)
20190402 06:17:32.581 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:17:32.581 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:32.581 - INFO - +------ END KW: OpenStack.Run OS Command (651)
20190402 06:17:32.582 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:32.582 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:32.582 - INFO - ${response} =
20190402 06:17:32.582 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:17:32.582 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:32.582 - INFO - @{res_in_list} = [ ]
20190402 06:17:32.582 - INFO - +------- END KW: String.Split String (0)
20190402 06:17:32.582 - INFO - @{image_list} = [ ]
20190402 06:17:32.583 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:17:32.583 - INFO - +------ START KW: ${image} IN [ @{image_list} ] [ ]
20190402 06:17:32.583 - INFO - +------ END KW: ${image} IN [ @{image_list} ] (0)
20190402 06:17:32.583 - INFO - +----- END KW: OpenStack.Delete All Images (654)
20190402 06:17:32.583 - INFO - +----- START KW: OpenStack.Delete All Flavors [ ]
20190402 06:17:32.583 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack flavor list ]
20190402 06:17:32.583 - INFO - ${openstack_cmd} = openstack flavor list
20190402 06:17:32.583 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:32.583 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "m1" ]
20190402 06:17:32.584 - INFO - ${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"
20190402 06:17:32.584 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:17:32.584 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:32.584 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:32.584 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:32.584 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:32.584 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:32.585 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.
20190402 06:17:33.164 - INFO - Command exited with return code 1.
20190402 06:17:33.165 - INFO - ${stdout} =
20190402 06:17:33.165 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:33.166 - INFO - ${rc} = 1
20190402 06:17:33.166 - INFO - +------- END KW: SSHLibrary.Execute Command (582)
20190402 06:17:33.166 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:33.169 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:33.169 - INFO - +------- END KW: BuiltIn.Create Dictionary (3)
20190402 06:17:33.170 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:33.171 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:33.172 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:33.172 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:33.172 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:17:33.172 - INFO - +------- END KW: BuiltIn.Run Keyword If (3)
20190402 06:17:33.173 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:33.173 - INFO - +------ END KW: OpenStack.Run OS Command (589)
20190402 06:17:33.174 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:33.175 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:33.175 - INFO - ${response} =
20190402 06:17:33.176 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:17:33.176 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:33.177 - INFO - @{res_in_list} = [ ]
20190402 06:17:33.177 - INFO - +------- END KW: String.Split String (1)
20190402 06:17:33.177 - INFO - @{flavor_list} = [ ]
20190402 06:17:33.178 - INFO - +------ END KW: Utils.Convert Response To List (4)
20190402 06:17:33.178 - INFO - +------ START KW: ${flavor} IN [ @{flavor_list} ] [ ]
20190402 06:17:33.178 - INFO - +------ END KW: ${flavor} IN [ @{flavor_list} ] (0)
20190402 06:17:33.179 - INFO - +----- END KW: OpenStack.Delete All Flavors (596)
20190402 06:17:33.179 - INFO - +----- START KW: OpenStack.Delete All Networks [ ]
20190402 06:17:33.180 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 06:17:33.180 - INFO - ${openstack_cmd} = openstack network list
20190402 06:17:33.181 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:33.181 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "private" | grep -v "public" | grep -v "external" | grep -v "internal" ]
20190402 06:17:33.182 - INFO - ${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"
20190402 06:17:33.182 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:17:33.182 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:33.183 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:33.184 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:33.184 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 06:17:33.185 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:33.186 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.
20190402 06:17:33.819 - INFO - Command exited with return code 1.
20190402 06:17:33.820 - INFO - ${stdout} =
20190402 06:17:33.820 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:33.820 - INFO - ${rc} = 1
20190402 06:17:33.821 - INFO - +------- END KW: SSHLibrary.Execute Command (635)
20190402 06:17:33.821 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:33.822 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:33.823 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:33.823 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:33.824 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:33.825 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:33.825 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:33.825 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:17:33.825 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:33.825 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:33.825 - INFO - +------ END KW: OpenStack.Run OS Command (643)
20190402 06:17:33.825 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:33.825 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:33.826 - INFO - ${response} =
20190402 06:17:33.826 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:17:33.826 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:33.826 - INFO - @{res_in_list} = [ ]
20190402 06:17:33.826 - INFO - +------- END KW: String.Split String (0)
20190402 06:17:33.826 - INFO - @{network_list} = [ ]
20190402 06:17:33.826 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:17:33.826 - INFO - +------ START KW: ${network} IN [ @{network_list} ] [ ]
20190402 06:17:33.826 - INFO - +------ END KW: ${network} IN [ @{network_list} ] (0)
20190402 06:17:33.826 - INFO - +----- END KW: OpenStack.Delete All Networks (647)
20190402 06:17:33.827 - INFO - +----- START KW: OpenStack.Delete All KeyPairs [ ]
20190402 06:17:33.827 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack keypair list ]
20190402 06:17:33.827 - INFO - ${openstack_cmd} = openstack keypair list
20190402 06:17:33.827 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:33.827 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "Name" ]
20190402 06:17:33.827 - INFO - ${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"
20190402 06:17:33.827 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:17:33.827 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:33.828 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:33.828 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:33.828 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:33.828 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:33.828 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack keypair list|awk '{print$2}'|grep -v "Name"'.
20190402 06:17:34.508 - INFO - Command exited with return code 1.
20190402 06:17:34.508 - INFO - ${stdout} =
20190402 06:17:34.509 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:34.509 - INFO - ${rc} = 1
20190402 06:17:34.509 - INFO - +------- END KW: SSHLibrary.Execute Command (681)
20190402 06:17:34.510 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:34.512 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:34.512 - INFO - +------- END KW: BuiltIn.Create Dictionary (3)
20190402 06:17:34.512 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:34.513 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:34.514 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:34.514 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:34.514 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:17:34.514 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:34.514 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:34.514 - INFO - +------ END KW: OpenStack.Run OS Command (687)
20190402 06:17:34.514 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:34.514 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:34.515 - INFO - ${response} =
20190402 06:17:34.515 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:17:34.515 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:34.515 - INFO - @{res_in_list} = [ ]
20190402 06:17:34.515 - INFO - +------- END KW: String.Split String (0)
20190402 06:17:34.515 - INFO - @{key_list} = [ ]
20190402 06:17:34.515 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:17:34.515 - INFO - +------ START KW: ${key} IN [ @{key_list} ] [ ]
20190402 06:17:34.515 - INFO - +------ END KW: ${key} IN [ @{key_list} ] (0)
20190402 06:17:34.516 - INFO - +----- END KW: OpenStack.Delete All KeyPairs (688)
20190402 06:17:34.516 - INFO - +----- START KW: OpenStack.Delete All Snapshots [ ]
20190402 06:17:34.516 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume snapshot list ]
20190402 06:17:34.516 - INFO - ${openstack_cmd} = openstack volume snapshot list
20190402 06:17:34.516 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:34.516 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:17:34.516 - INFO - ${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"
20190402 06:17:34.516 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:17:34.516 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:34.517 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:34.517 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:34.517 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:34.517 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:34.517 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.
20190402 06:17:35.097 - INFO - Command exited with return code 1.
20190402 06:17:35.098 - INFO - ${stdout} =
20190402 06:17:35.098 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:35.099 - INFO - ${rc} = 1
20190402 06:17:35.099 - INFO - +------- END KW: SSHLibrary.Execute Command (582)
20190402 06:17:35.099 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:35.101 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:35.101 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:35.102 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:35.102 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:35.103 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:35.103 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:35.103 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:17:35.103 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:17:35.103 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:35.103 - INFO - +------ END KW: OpenStack.Run OS Command (587)
20190402 06:17:35.103 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:35.104 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:35.104 - INFO - ${response} =
20190402 06:17:35.104 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:17:35.104 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:35.104 - INFO - @{res_in_list} = [ ]
20190402 06:17:35.104 - INFO - +------- END KW: String.Split String (0)
20190402 06:17:35.104 - INFO - @{snapshot_list} = [ ]
20190402 06:17:35.104 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:17:35.104 - INFO - +------ START KW: ${snapshot} IN [ @{snapshot_list} ] [ ]
20190402 06:17:35.104 - INFO - +------ END KW: ${snapshot} IN [ @{snapshot_list} ] (0)
20190402 06:17:35.105 - INFO - +----- END KW: OpenStack.Delete All Snapshots (589)
20190402 06:17:35.105 - INFO - +----- START KW: OpenStack.Delete All Volumes [ ]
20190402 06:17:35.105 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume list ]
20190402 06:17:35.105 - INFO - ${openstack_cmd} = openstack volume list
20190402 06:17:35.105 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:35.105 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "ID" ]
20190402 06:17:35.105 - INFO - ${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"
20190402 06:17:35.105 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:17:35.106 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:35.106 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:35.106 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:35.106 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:35.106 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:35.106 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume list|awk '{print$2}'|grep -v "ID"'.
20190402 06:17:35.717 - INFO - Command exited with return code 1.
20190402 06:17:35.718 - INFO - ${stdout} =
20190402 06:17:35.718 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:35.718 - INFO - ${rc} = 1
20190402 06:17:35.718 - INFO - +------- END KW: SSHLibrary.Execute Command (612)
20190402 06:17:35.719 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:35.720 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:35.720 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:17:35.721 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:35.722 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:35.723 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:35.723 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:35.723 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:17:35.723 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:35.723 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:35.723 - INFO - +------ END KW: OpenStack.Run OS Command (618)
20190402 06:17:35.723 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:35.723 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:35.724 - INFO - ${response} =
20190402 06:17:35.724 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:17:35.724 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:35.724 - INFO - @{res_in_list} = [ ]
20190402 06:17:35.724 - INFO - +------- END KW: String.Split String (0)
20190402 06:17:35.724 - INFO - @{volume_list} = [ ]
20190402 06:17:35.724 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:17:35.724 - INFO - +------ START KW: ${volume} IN [ @{volume_list} ] [ ]
20190402 06:17:35.724 - INFO - +------ END KW: ${volume} IN [ @{volume_list} ] (0)
20190402 06:17:35.724 - INFO - +----- END KW: OpenStack.Delete All Volumes (619)
20190402 06:17:35.725 - INFO - +----- START KW: OpenStack.Delete All Stacks [ ]
20190402 06:17:35.725 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack stack list ]
20190402 06:17:35.725 - INFO - ${openstack_cmd} = openstack stack list
20190402 06:17:35.725 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:35.725 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:17:35.725 - INFO - ${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"
20190402 06:17:35.725 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:17:35.725 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:35.726 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:35.726 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:35.726 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:35.726 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:35.726 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack list|awk '{print$4}'|grep -v "Name"'.
20190402 06:17:36.321 - INFO - Command exited with return code 1.
20190402 06:17:36.321 - INFO - ${stdout} =
20190402 06:17:36.321 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:36.322 - INFO - ${rc} = 1
20190402 06:17:36.322 - INFO - +------- END KW: SSHLibrary.Execute Command (596)
20190402 06:17:36.322 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:36.324 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:36.324 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:36.324 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:36.325 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:36.326 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:36.326 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:36.326 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:17:36.326 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:36.326 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:36.326 - INFO - +------ END KW: OpenStack.Run OS Command (601)
20190402 06:17:36.326 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:36.326 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:36.327 - INFO - ${response} =
20190402 06:17:36.327 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:17:36.327 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:36.327 - INFO - @{res_in_list} = [ ]
20190402 06:17:36.327 - INFO - +------- END KW: String.Split String (0)
20190402 06:17:36.327 - INFO - @{stack_list} = [ ]
20190402 06:17:36.327 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:17:36.327 - INFO - +------ START KW: ${stack} IN [ @{stack_list} ] [ ]
20190402 06:17:36.327 - INFO - +------ END KW: ${stack} IN [ @{stack_list} ] (0)
20190402 06:17:36.327 - INFO - +----- END KW: OpenStack.Delete All Stacks (602)
20190402 06:17:36.328 - INFO - +---- END KW: OpenStack.Openstack Cleanup All (4999)
20190402 06:17:36.328 - INFO - +---- START KW: Utils.Stx Suite TearDown [ ]
20190402 06:17:36.328 - INFO - +----- START KW: SSHLibrary.Close All Connections [ ]
20190402 06:17:36.344 - INFO - +----- END KW: SSHLibrary.Close All Connections (16)
20190402 06:17:36.344 - INFO - +---- END KW: Utils.Stx Suite TearDown (16)
20190402 06:17:36.345 - INFO - +--- END TEARDOWN: BuiltIn.Run Keywords (5016)
==============================================================================
20190402 06:17:36.348 - INFO - +-- END SUITE: Sanity-Test.Sanity-OpenStack.01-Instance-From-Image (15154)
==============================================================================
20190402 06:17:36.364 - INFO - +-- START SUITE: Sanity-Test.Sanity-OpenStack.02-Instance-From-Volume [ ]
==============================================================================
20190402 06:17:36.364 - INFO - +--- START SETUP: Utils.Stx Suite Setup [ ]
20190402 06:17:36.364 - INFO - +---- START KW: Utils.Open Master Controller Connection [ ]
20190402 06:17:36.365 - INFO - +----- START KW: Utils.Connect to Controller Node [ ${CONFIG.credentials.STX_DEPLOY_USER_NAME} | ${CONFIG.credentials.STX_DEPLOY_USER_PSWD} | ${CONFIG.general.IP_UNIT_0_ADDRESS} ]
20190402 06:17:36.365 - INFO - +------ START KW: SSHLibrary.Open Connection [ ${ip_address} prompt=${prompt} | timeout=${timeout} ]
20190402 06:17:36.366 - INFO - ${controller_connection} = 1
20190402 06:17:36.366 - INFO - +------ END KW: SSHLibrary.Open Connection (1)
20190402 06:17:36.366 - INFO - +------ START KW: Utils.Flexible_SSH_Login [ ${user} | ${password} ]
20190402 06:17:36.366 - INFO - +------- START KW: BuiltIn.Get Length [ ${password} ]
20190402 06:17:36.366 - INFO - Length is 10
20190402 06:17:36.366 - INFO - ${pwd_length} = 10
20190402 06:17:36.367 - INFO - +------- END KW: BuiltIn.Get Length (1)
20190402 06:17:36.367 - INFO - +------- START KW: BuiltIn.Run Keyword And Return If [ ${pwd_length} > 0 | SSHLibrary.Login | ${user} | ${password} | delay=${delay} ]
20190402 06:17:36.367 - INFO - +-------- START KW: SSHLibrary.Login [ ${user} | ${password} | delay=${delay} ]
20190402 06:17:36.367 - INFO - Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.
20190402 06:17:37.456 - INFO - Read output: Last login: Tue Apr  2 12:06:05 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$
20190402 06:17:37.457 - INFO - +-------- END KW: SSHLibrary.Login (1089)
20190402 06:17:37.457 - INFO - Returning from the enclosing user keyword.
20190402 06:17:37.457 - INFO - +------- END KW: BuiltIn.Run Keyword And Return If (1090)
20190402 06:17:37.458 - INFO - +------ END KW: Utils.Flexible_SSH_Login (1092)
20190402 06:17:37.458 - INFO - ${master_controller_connection} = 1
20190402 06:17:37.459 - INFO - +----- END KW: Utils.Connect to Controller Node (1094)
20190402 06:17:37.459 - INFO - +----- START KW: BuiltIn.Set Suite Variable [ ${master_controller_connection} ]
20190402 06:17:37.460 - INFO - ${master_controller_connection} = 1
20190402 06:17:37.460 - INFO - +----- END KW: BuiltIn.Set Suite Variable (1)
20190402 06:17:37.461 - INFO - +----- START KW: BuiltIn.Log [ ${master_controller_connection} ]
20190402 06:17:37.461 - INFO - 1
20190402 06:17:37.461 - INFO - +----- END KW: BuiltIn.Log (0)
20190402 06:17:37.461 - INFO - +---- END KW: Utils.Open Master Controller Connection (1097)
20190402 06:17:37.462 - INFO - +---- START KW: Utils.Set Env Vars From Openrc [ ]
20190402 06:17:37.462 - INFO - +----- START KW: Utils.Run Command [ source /etc/platform/openrc | True ]
20190402 06:17:37.462 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:17:37.463 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (1)
20190402 06:17:37.463 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:17:37.463 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:17:37.463 - INFO - &{result_dict} = { stdout= }
20190402 06:17:37.463 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 06:17:37.463 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:17:37.464 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 06:17:37.464 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:17:37.464 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:17:37.464 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:17:37.464 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (1)
20190402 06:17:37.464 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 06:17:37.464 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 06:17:37.464 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:17:37.468 - INFO - source /etc/platform/openrc
20190402 06:17:37.468 - INFO - +------ END KW: SSHLibrary.Write (4)
20190402 06:17:37.468 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:17:37.831 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:17:37.831 - INFO - ${output} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:17:37.831 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (363)
20190402 06:17:37.831 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:17:37.832 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:17:37.832 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:17:37.832 - INFO - +------- END KW: String.Get Line (0)
20190402 06:17:37.832 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:17:37.832 - INFO - ${clean_out} =
20190402 06:17:37.832 - INFO - +------- END KW: String.Remove String (0)
20190402 06:17:37.832 - INFO - ${output} =
20190402 06:17:37.832 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 06:17:37.833 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 06:17:37.833 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:17:37.834 - INFO - echo $?
20190402 06:17:37.834 - INFO - +------- END KW: SSHLibrary.Write (1)
20190402 06:17:37.834 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:17:37.835 - INFO - 0
20190402 06:17:37.835 - INFO - ${rc} = 0
20190402 06:17:37.835 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 06:17:37.835 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:17:37.835 - INFO - 0
20190402 06:17:37.835 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 06:17:37.835 - INFO - ${rc} = 0
20190402 06:17:37.835 - INFO - +------ END KW: Utils.Get Return Code (2)
20190402 06:17:37.835 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:17:37.836 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:17:37.836 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:17:37.836 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:17:37.836 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:17:37.836 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 06:17:37.837 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:17:37.837 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout:
20190402 06:17:37.837 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 06:17:37.837 - INFO - +----- END KW: Utils.Run Command (375)
20190402 06:17:37.837 - INFO - +---- END KW: Utils.Set Env Vars From Openrc (375)
20190402 06:17:37.837 - INFO - +--- END SETUP: Utils.Stx Suite Setup (1473)
------------------------------------------------------------------------------
20190402 06:17:37.837 - INFO - +--- START TEST: Create Flavors for Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:37.838 - INFO - +---- START KW: BuiltIn.Catenate [ ${flavor_property_1} | ${flavor_property_2} ]
20190402 06:17:37.838 - INFO - ${properties} = --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared'
20190402 06:17:37.838 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:17:37.838 - INFO - +---- START KW: OpenStack.Create Flavor [ ${cirros_flavor_ram} | ${cirros_flavor_vcpus} | ${cirros_flavor_disk} | ${cirros_flavor_name} ]
20190402 06:17:37.839 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 06:17:37.839 - INFO - ${openstack_cmd} = openstack flavor create
20190402 06:17:37.839 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:17:37.839 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 06:17:37.839 - INFO - ${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small
20190402 06:17:37.839 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 06:17:37.839 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:37.840 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:37.840 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:37.840 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:37.840 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:37.840 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.
20190402 06:17:38.471 - INFO - Command exited with return code 1.
20190402 06:17:38.471 - INFO - ${stdout} =
20190402 06:17:38.471 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:38.471 - INFO - ${rc} = 1
20190402 06:17:38.472 - INFO - +------ END KW: SSHLibrary.Execute Command (632)
20190402 06:17:38.472 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:38.474 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:38.474 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:38.474 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:38.475 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:38.476 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:38.476 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:38.476 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:38.476 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:38.476 - INFO - +----- END KW: OpenStack.Run OS Command (637)
20190402 06:17:38.476 - INFO - +---- END KW: OpenStack.Create Flavor (638)
------------------------------------------------------------------------------
20190402 06:17:38.476 - INFO - +--- END TEST: Create Flavors for Instances (639)
------------------------------------------------------------------------------
20190402 06:17:38.477 - INFO - +--- START TEST: Create Images for Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:38.477 - INFO - +---- START KW: SSHLibrary.Put File [ %{PYTHONPATH}/${cirros_image} | ${host_image_path}/${cirros_image} ]
20190402 06:17:38.484 - INFO - [chan 2] Opened sftp connection (server version 3)
20190402 06:17:38.491 - INFO - [chan 3] Opened sftp connection (server version 3)
20190402 06:17:38.492 - FAIL - There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.
20190402 06:17:38.493 - DEBUG - Traceback (most recent call last):
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1559, in put_file
    destination, mode, newline, scp)
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1619, in _run_command
    raise RuntimeError(e)
20190402 06:17:38.493 - INFO - +---- END KW: SSHLibrary.Put File (16)
------------------------------------------------------------------------------
20190402 06:17:38.493 - INFO - +--- END TEST: Create Images for Instances (17)
------------------------------------------------------------------------------
20190402 06:17:38.493 - INFO - +--- START TEST: Create Networks for Instance [ ]
------------------------------------------------------------------------------
20190402 06:17:38.494 - INFO - +---- START KW: OpenStack.Create Network [ ${network_name} ]
20190402 06:17:38.494 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack network create ]
20190402 06:17:38.495 - INFO - ${openstack_cmd} = openstack network create
20190402 06:17:38.495 - INFO - +----- END KW: BuiltIn.Set Variable (1)
20190402 06:17:38.495 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${network_name} | ${additional_args} ]
20190402 06:17:38.495 - INFO - ${cmd} = openstack network create network-1
20190402 06:17:38.495 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 06:17:38.495 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:38.496 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:38.496 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:38.496 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:38.496 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:38.497 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network create network-1 '.
20190402 06:17:39.127 - INFO - Command exited with return code 1.
20190402 06:17:39.128 - INFO - ${stdout} =
20190402 06:17:39.128 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:39.128 - INFO - ${rc} = 1
20190402 06:17:39.129 - INFO - +------ END KW: SSHLibrary.Execute Command (633)
20190402 06:17:39.129 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:39.131 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:39.131 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:39.131 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:39.132 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:39.133 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:39.133 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:39.134 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:39.134 - INFO - +------ END KW: BuiltIn.Run Keyword If (3)
20190402 06:17:39.134 - INFO - +----- END KW: OpenStack.Run OS Command (639)
20190402 06:17:39.135 - INFO - +---- END KW: OpenStack.Create Network (641)
------------------------------------------------------------------------------
20190402 06:17:39.136 - INFO - +--- END TEST: Create Networks for Instance (642)
------------------------------------------------------------------------------
20190402 06:17:39.137 - INFO - +--- START TEST: Create Volume for Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:39.138 - INFO - +---- START KW: OpenStack.Create Volume [ ${cirros_volume_size} | ${cirros_image_name} | --bootable | ${cirros_volume_name} ]
20190402 06:17:39.139 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack volume create ]
20190402 06:17:39.139 - INFO - ${openstack_cmd} = openstack volume create
20190402 06:17:39.140 - INFO - +----- END KW: BuiltIn.Set Variable (1)
20190402 06:17:39.140 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --size ${size} | --image ${image} | ${bootable} | ${name} ]
20190402 06:17:39.141 - INFO - ${cmd} = openstack volume create --size 20 --image cirros --bootable vol-cirros-1
20190402 06:17:39.141 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 06:17:39.141 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 06:17:39.143 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:39.143 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:39.143 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:39.144 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:39.145 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume create --size 20 --image cirros --bootable vol-cirros-1'.
20190402 06:17:39.726 - INFO - Command exited with return code 1.
20190402 06:17:39.727 - INFO - ${stdout} =
20190402 06:17:39.727 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:39.727 - INFO - ${rc} = 1
20190402 06:17:39.728 - INFO - +------ END KW: SSHLibrary.Execute Command (583)
20190402 06:17:39.728 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:39.729 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:39.730 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:39.730 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:39.731 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:39.732 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:39.732 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:39.732 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:39.732 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:39.733 - INFO - +----- END KW: OpenStack.Run OS Command (592)
20190402 06:17:39.733 - INFO - +---- END KW: OpenStack.Create Volume (596)
------------------------------------------------------------------------------
20190402 06:17:39.734 - INFO - +--- END TEST: Create Volume for Instances (598)
------------------------------------------------------------------------------
20190402 06:17:39.735 - INFO - +--- START TEST: Launch Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:39.736 - INFO - +---- START KW: OpenStack.Create Instance From Volume [ ${network_name} | ${cirros_instance_name} | ${cirros_volume_name} | ${cirros_flavor_name} ]
20190402 06:17:39.737 - INFO - +----- START KW: OpenStack.Get Net Id [ ${net_name} ]
20190402 06:17:39.738 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 06:17:39.738 - INFO - ${openstack_cmd} = openstack network list
20190402 06:17:39.739 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:39.739 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep "${network_name}" | awk '{print$2}' ]
20190402 06:17:39.740 - INFO - ${cmd} = openstack network list|grep "network-1"|awk '{print$2}'
20190402 06:17:39.740 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:17:39.740 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 06:17:39.742 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:39.742 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:39.742 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 06:17:39.743 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:39.744 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|grep "network-1"|awk '{print$2}''.
20190402 06:17:40.326 - INFO - Command exited with return code 0.
20190402 06:17:40.327 - INFO - ${stdout} =
20190402 06:17:40.327 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:40.327 - INFO - ${rc} = 0
20190402 06:17:40.328 - INFO - +------- END KW: SSHLibrary.Execute Command (584)
20190402 06:17:40.328 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:40.330 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 0}
20190402 06:17:40.330 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:40.330 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:40.331 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:17:40.332 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=0 }
20190402 06:17:40.332 - INFO - +------ END KW: OpenStack.Run OS Command (592)
20190402 06:17:40.332 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:40.332 - INFO - ${output} =
20190402 06:17:40.332 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 06:17:40.332 - INFO - +------ START KW: String.Split String [ ${output} | ${EMPTY} ]
20190402 06:17:40.332 - INFO - ${splitted_output} = []
20190402 06:17:40.332 - INFO - +------ END KW: String.Split String (0)
20190402 06:17:40.332 - INFO - +------ START KW: Collections.Get From List [ ${splitted_output} | 0 ]
20190402 06:17:40.333 - FAIL - IndexError: Given index 0 is out of the range 0--1.
20190402 06:17:40.333 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:40.333 - INFO - +------ END KW: Collections.Get From List (1)
20190402 06:17:40.333 - INFO - +----- END KW: OpenStack.Get Net Id (596)
20190402 06:17:40.333 - INFO - +---- END KW: OpenStack.Create Instance From Volume (597)
------------------------------------------------------------------------------
20190402 06:17:40.333 - INFO - +--- END TEST: Launch Instances (599)
------------------------------------------------------------------------------
20190402 06:17:40.334 - INFO - +--- START TEST: Suspend Resume Instance [ ]
------------------------------------------------------------------------------
20190402 06:17:40.334 - INFO - +---- START KW: OpenStack.Suspend Instance [ ${cirros_instance_name} ]
20190402 06:17:40.334 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server suspend ${vm_name} | True | 30 sec ]
20190402 06:17:40.335 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:40.335 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:40.335 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:40.335 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:40.335 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server suspend vm-cirros-1'.
20190402 06:17:40.930 - INFO - Command exited with return code 1.
20190402 06:17:40.930 - INFO - ${stdout} =
20190402 06:17:40.931 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:40.931 - INFO - ${rc} = 1
20190402 06:17:40.931 - INFO - +------ END KW: SSHLibrary.Execute Command (596)
20190402 06:17:40.932 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:40.933 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:40.933 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:40.934 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:40.935 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:40.936 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:40.936 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:40.936 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:40.936 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:40.936 - INFO - +----- END KW: OpenStack.Run OS Command (602)
20190402 06:17:40.937 - INFO - +---- END KW: OpenStack.Suspend Instance (603)
------------------------------------------------------------------------------
20190402 06:17:40.937 - INFO - +--- END TEST: Suspend Resume Instance (604)
------------------------------------------------------------------------------
20190402 06:17:40.937 - INFO - +--- START TEST: Set Error Active Flags Instance [ ]
------------------------------------------------------------------------------
20190402 06:17:40.938 - INFO - +---- START KW: OpenStack.Set Error State Instance [ ${cirros_instance_name} | error ]
20190402 06:17:40.938 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server set --state ${value} ${vm_name} | True | 30 sec ]
20190402 06:17:40.938 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:40.938 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:40.938 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:40.938 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:40.939 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server set --state error vm-cirros-1'.
20190402 06:17:41.533 - INFO - Command exited with return code 1.
20190402 06:17:41.534 - INFO - ${stdout} =
20190402 06:17:41.534 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:41.534 - INFO - ${rc} = 1
20190402 06:17:41.535 - INFO - +------ END KW: SSHLibrary.Execute Command (597)
20190402 06:17:41.535 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:41.537 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:41.537 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:41.537 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:41.538 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:41.539 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:41.539 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:41.539 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:41.539 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:41.539 - INFO - +----- END KW: OpenStack.Run OS Command (601)
20190402 06:17:41.539 - INFO - +---- END KW: OpenStack.Set Error State Instance (601)
------------------------------------------------------------------------------
20190402 06:17:41.539 - INFO - +--- END TEST: Set Error Active Flags Instance (602)
------------------------------------------------------------------------------
20190402 06:17:41.540 - INFO - +--- START TEST: Pause Unpause Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:41.540 - INFO - +---- START KW: OpenStack.Pause Instance [ ${cirros_instance_name} ]
20190402 06:17:41.540 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server pause ${vm_name} | True | 30 sec ]
20190402 06:17:41.541 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:41.541 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:41.541 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:41.541 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:41.541 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server pause vm-cirros-1'.
20190402 06:17:42.136 - INFO - Command exited with return code 1.
20190402 06:17:42.137 - INFO - ${stdout} =
20190402 06:17:42.137 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:42.137 - INFO - ${rc} = 1
20190402 06:17:42.138 - INFO - +------ END KW: SSHLibrary.Execute Command (596)
20190402 06:17:42.138 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:42.139 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:42.140 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:42.140 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:42.141 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:42.142 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:42.142 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:42.142 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:42.142 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:42.142 - INFO - +----- END KW: OpenStack.Run OS Command (602)
20190402 06:17:42.142 - INFO - +---- END KW: OpenStack.Pause Instance (602)
------------------------------------------------------------------------------
20190402 06:17:42.142 - INFO - +--- END TEST: Pause Unpause Instances (602)
------------------------------------------------------------------------------
20190402 06:17:42.143 - INFO - +--- START TEST: Stop Start Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:42.143 - INFO - +---- START KW: OpenStack.Stop Instance [ ${cirros_instance_name} ]
20190402 06:17:42.143 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server stop ${vm_name} | True | 30 sec ]
20190402 06:17:42.144 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:42.144 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:42.144 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:42.144 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:42.144 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server stop vm-cirros-1'.
20190402 06:17:42.739 - INFO - Command exited with return code 1.
20190402 06:17:42.739 - INFO - ${stdout} =
20190402 06:17:42.739 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:42.740 - INFO - ${rc} = 1
20190402 06:17:42.740 - INFO - +------ END KW: SSHLibrary.Execute Command (596)
20190402 06:17:42.740 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:42.742 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:42.742 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:42.742 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:42.743 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:42.744 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:42.744 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:42.744 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:42.744 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:42.744 - INFO - +----- END KW: OpenStack.Run OS Command (601)
20190402 06:17:42.744 - INFO - +---- END KW: OpenStack.Stop Instance (601)
------------------------------------------------------------------------------
20190402 06:17:42.745 - INFO - +--- END TEST: Stop Start Instances (602)
------------------------------------------------------------------------------
20190402 06:17:42.745 - INFO - +--- START TEST: Lock Unlock Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:42.745 - INFO - +---- START KW: OpenStack.Lock Instance [ ${cirros_instance_name} ]
20190402 06:17:42.745 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server lock ${vm_name} | True | 30 sec ]
20190402 06:17:42.746 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:42.746 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:42.746 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:42.746 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:42.746 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server lock vm-cirros-1'.
20190402 06:17:43.391 - INFO - Command exited with return code 1.
20190402 06:17:43.392 - INFO - ${stdout} =
20190402 06:17:43.392 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:43.392 - INFO - ${rc} = 1
20190402 06:17:43.392 - INFO - +------ END KW: SSHLibrary.Execute Command (646)
20190402 06:17:43.393 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:43.394 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:43.395 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:43.395 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:43.396 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:43.397 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:43.397 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:43.397 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:43.397 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:43.397 - INFO - +----- END KW: OpenStack.Run OS Command (652)
20190402 06:17:43.397 - INFO - +---- END KW: OpenStack.Lock Instance (652)
------------------------------------------------------------------------------
20190402 06:17:43.397 - INFO - +--- END TEST: Lock Unlock Instances (652)
------------------------------------------------------------------------------
20190402 06:17:43.398 - INFO - +--- START TEST: Reboot Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:43.398 - INFO - +---- START KW: OpenStack.Reboot Instance [ ${cirros_instance_name} ]
20190402 06:17:43.398 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server reboot ${vm_name} | True | 30 sec ]
20190402 06:17:43.398 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:43.399 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:43.399 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:43.399 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:43.399 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server reboot vm-cirros-1'.
20190402 06:17:44.029 - INFO - Command exited with return code 1.
20190402 06:17:44.030 - INFO - ${stdout} =
20190402 06:17:44.030 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:44.030 - INFO - ${rc} = 1
20190402 06:17:44.030 - INFO - +------ END KW: SSHLibrary.Execute Command (631)
20190402 06:17:44.031 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:44.033 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:44.033 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:44.033 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:44.034 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:44.035 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:44.035 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:44.035 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:44.035 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:44.035 - INFO - +----- END KW: OpenStack.Run OS Command (637)
20190402 06:17:44.035 - INFO - +---- END KW: OpenStack.Reboot Instance (637)
------------------------------------------------------------------------------
20190402 06:17:44.035 - INFO - +--- END TEST: Reboot Instances (638)
------------------------------------------------------------------------------
20190402 06:17:44.036 - INFO - +--- START TEST: Rebuild Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:44.036 - INFO - +---- START KW: OpenStack.Rebuild Instance From Volume [ ${cirros_instance_name} | ${cirros_image_name} ]
20190402 06:17:44.036 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server rebuild --image ${image} ${vm_name} | True | 30 sec ]
20190402 06:17:44.036 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:44.037 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:44.037 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:44.037 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:44.037 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server rebuild --image cirros vm-cirros-1'.
20190402 06:17:44.667 - INFO - Command exited with return code 1.
20190402 06:17:44.668 - INFO - ${stdout} =
20190402 06:17:44.668 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:44.668 - INFO - ${rc} = 1
20190402 06:17:44.668 - INFO - +------ END KW: SSHLibrary.Execute Command (631)
20190402 06:17:44.669 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:44.670 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:44.671 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:44.671 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:44.672 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:44.673 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:44.673 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:44.673 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:44.673 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:44.673 - INFO - +----- END KW: OpenStack.Run OS Command (637)
20190402 06:17:44.673 - INFO - +---- END KW: OpenStack.Rebuild Instance From Volume (637)
------------------------------------------------------------------------------
20190402 06:17:44.673 - INFO - +--- END TEST: Rebuild Instances (638)
------------------------------------------------------------------------------
20190402 06:17:44.674 - INFO - +--- START TEST: Resize Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:44.674 - INFO - +---- START KW: OpenStack.Create Flavor [ ${cirros_flavor_ram} | ${cirros_flavor_vcpus} | ${cirros_flavor_disk} | ${cirros_flavor_name_2} ]
20190402 06:17:44.674 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 06:17:44.675 - INFO - ${openstack_cmd} = openstack flavor create
20190402 06:17:44.675 - INFO - +----- END KW: BuiltIn.Set Variable (1)
20190402 06:17:44.675 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 06:17:44.675 - INFO - ${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small
20190402 06:17:44.675 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 06:17:44.675 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:44.675 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:44.676 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:44.676 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:44.676 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:44.676 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small'.
20190402 06:17:45.256 - INFO - Command exited with return code 1.
20190402 06:17:45.257 - INFO - ${stdout} =
20190402 06:17:45.257 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:45.257 - INFO - ${rc} = 1
20190402 06:17:45.258 - INFO - +------ END KW: SSHLibrary.Execute Command (581)
20190402 06:17:45.258 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:45.260 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:45.260 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:45.260 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:45.261 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:45.262 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:45.262 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:45.262 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:45.262 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:45.262 - INFO - +----- END KW: OpenStack.Run OS Command (587)
20190402 06:17:45.262 - INFO - +---- END KW: OpenStack.Create Flavor (588)
------------------------------------------------------------------------------
20190402 06:17:45.262 - INFO - +--- END TEST: Resize Instances (588)
------------------------------------------------------------------------------
20190402 06:17:45.263 - INFO - +--- START TEST: Set Unset Properties Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:45.263 - INFO - +---- START KW: BuiltIn.Catenate [ ${instance_property_1}='true' | ${instance_property_2}='500' | ${instance_property_3}='180' ]
20190402 06:17:45.263 - INFO - ${properties} = --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180'
20190402 06:17:45.263 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:17:45.264 - INFO - +---- START KW: OpenStack.Set Instance Property [ ${cirros_instance_name} | ${properties} ]
20190402 06:17:45.264 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server set ${key} ${vm_name} | True | 30 sec ]
20190402 06:17:45.264 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:45.264 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:45.264 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:45.264 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:45.265 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-cirros-1'.
20190402 06:17:45.876 - INFO - Command exited with return code 1.
20190402 06:17:45.876 - INFO - ${stdout} =
20190402 06:17:45.876 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:45.877 - INFO - ${rc} = 1
20190402 06:17:45.877 - INFO - +------ END KW: SSHLibrary.Execute Command (613)
20190402 06:17:45.877 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:45.879 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:45.879 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:45.880 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:45.880 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:45.881 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:45.881 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:45.881 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:45.881 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:17:45.881 - INFO - +----- END KW: OpenStack.Run OS Command (617)
20190402 06:17:45.881 - INFO - +---- END KW: OpenStack.Set Instance Property (618)
------------------------------------------------------------------------------
20190402 06:17:45.881 - INFO - +--- END TEST: Set Unset Properties Instances (618)
------------------------------------------------------------------------------
20190402 06:17:45.882 - INFO - +--- START TEST: Evacuate Instances From Hosts [ ]
------------------------------------------------------------------------------
20190402 06:17:45.882 - INFO - +---- START KW: BuiltIn.Run Keyword If [ '${CONFIGURATION_TYPE}' == 'Duplex' | Run Keywords | Evacuate Instances | controller-0 | AND | Evacuate Instances | controller-1 | ELSE IF | '${CONFIGURATION_TYPE}' == 'MN-Local' or '${CONFIGURATION_TYPE}' == 'MN-External' | Run Keywords | Evacuate Instances | compute-0 | AND | Evacuate Instances | compute-1 ]
20190402 06:17:45.882 - INFO - +----- START KW: BuiltIn.Run Keywords [ Evacuate Instances | controller-0 | AND | Evacuate Instances | controller-1 ]
20190402 06:17:45.883 - INFO - +------ START KW: OpenStack.Evacuate Instances [ controller-0 ]
20190402 06:17:45.883 - INFO - +------- START KW: BuiltIn.Set Variable [ openstack compute service set ]
20190402 06:17:45.883 - INFO - ${openstack_cmd} = openstack compute service set
20190402 06:17:45.883 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:45.883 - INFO - +------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --disable | --disable-reason test-evacuate | ${host} | nova-compute ]
20190402 06:17:45.884 - INFO - ${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute
20190402 06:17:45.884 - INFO - +------- END KW: BuiltIn.Catenate (1)
20190402 06:17:45.884 - INFO - +------- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 06:17:45.884 - INFO - +-------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:45.884 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:45.884 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:45.884 - INFO - +-------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:45.885 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute'.
20190402 06:17:46.496 - INFO - Command exited with return code 1.
20190402 06:17:46.496 - INFO - ${stdout} =
20190402 06:17:46.496 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:46.497 - INFO - ${rc} = 1
20190402 06:17:46.497 - INFO - +-------- END KW: SSHLibrary.Execute Command (613)
20190402 06:17:46.497 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:46.499 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:46.499 - INFO - +-------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:46.499 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:46.500 - INFO - +--------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:46.501 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:46.501 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:46.501 - INFO - +--------- END KW: BuiltIn.Fail (1)
20190402 06:17:46.501 - INFO - +-------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:46.501 - INFO - +------- END KW: OpenStack.Run OS Command (617)
20190402 06:17:46.501 - INFO - +------ END KW: OpenStack.Evacuate Instances (618)
20190402 06:17:46.501 - INFO - +----- END KW: BuiltIn.Run Keywords (619)
20190402 06:17:46.501 - INFO - +---- END KW: BuiltIn.Run Keyword If (619)
------------------------------------------------------------------------------
20190402 06:17:46.502 - INFO - +--- END TEST: Evacuate Instances From Hosts (620)
------------------------------------------------------------------------------
20190402 06:17:46.503 - INFO - +--- START TEARDOWN: BuiltIn.Run Keywords [ OpenStack.Openstack Cleanup All | Utils.Stx Suite TearDown ]
20190402 06:17:46.503 - INFO - +---- START KW: OpenStack.Openstack Cleanup All [ ]
20190402 06:17:46.503 - INFO - +----- START KW: OpenStack.Delete All Instances [ ]
20190402 06:17:46.503 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack server list ]
20190402 06:17:46.503 - INFO - ${openstack_cmd} = openstack server list
20190402 06:17:46.503 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:46.503 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:17:46.504 - INFO - ${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"
20190402 06:17:46.504 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:17:46.504 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:46.504 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:46.504 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:46.504 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:46.504 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:46.505 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server list|awk '{print$4}'|grep -v "Name"'.
20190402 06:17:47.116 - INFO - Command exited with return code 1.
20190402 06:17:47.116 - INFO - ${stdout} =
20190402 06:17:47.116 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:47.116 - INFO - ${rc} = 1
20190402 06:17:47.117 - INFO - +------- END KW: SSHLibrary.Execute Command (613)
20190402 06:17:47.117 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:47.118 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:47.119 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:47.119 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:47.120 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:47.120 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:47.121 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:47.121 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:17:47.121 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:47.121 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:47.121 - INFO - +------ END KW: OpenStack.Run OS Command (617)
20190402 06:17:47.121 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:47.121 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:47.122 - INFO - ${response} =
20190402 06:17:47.122 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:17:47.122 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:47.122 - INFO - @{res_in_list} = [ ]
20190402 06:17:47.122 - INFO - +------- END KW: String.Split String (0)
20190402 06:17:47.122 - INFO - @{vm_list} = [ ]
20190402 06:17:47.122 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:17:47.122 - INFO - +------ START KW: ${vm} IN [ @{vm_list} ] [ ]
20190402 06:17:47.122 - INFO - +------ END KW: ${vm} IN [ @{vm_list} ] (0)
20190402 06:17:47.122 - INFO - +----- END KW: OpenStack.Delete All Instances (619)
20190402 06:17:47.122 - INFO - +----- START KW: OpenStack.Delete All Images [ ]
20190402 06:17:47.123 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack image list ]
20190402 06:17:47.123 - INFO - ${openstack_cmd} = openstack image list
20190402 06:17:47.123 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:47.123 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "Cirros" ]
20190402 06:17:47.123 - INFO - ${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"
20190402 06:17:47.123 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:17:47.123 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:47.124 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:47.124 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:47.124 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:47.124 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:47.124 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.
20190402 06:17:47.735 - INFO - Command exited with return code 1.
20190402 06:17:47.736 - INFO - ${stdout} =
20190402 06:17:47.736 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:47.736 - INFO - ${rc} = 1
20190402 06:17:47.736 - INFO - +------- END KW: SSHLibrary.Execute Command (612)
20190402 06:17:47.737 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:47.738 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:47.738 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:17:47.739 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:47.740 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:47.741 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:47.741 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:47.741 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:17:47.741 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:47.742 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:47.742 - INFO - +------ END KW: OpenStack.Run OS Command (619)
20190402 06:17:47.743 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:47.744 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:47.745 - INFO - ${response} =
20190402 06:17:47.745 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:17:47.745 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:47.746 - INFO - @{res_in_list} = [ ]
20190402 06:17:47.746 - INFO - +------- END KW: String.Split String (1)
20190402 06:17:47.747 - INFO - @{image_list} = [ ]
20190402 06:17:47.747 - INFO - +------ END KW: Utils.Convert Response To List (4)
20190402 06:17:47.747 - INFO - +------ START KW: ${image} IN [ @{image_list} ] [ ]
20190402 06:17:47.747 - INFO - +------ END KW: ${image} IN [ @{image_list} ] (0)
20190402 06:17:47.748 - INFO - +----- END KW: OpenStack.Delete All Images (626)
20190402 06:17:47.748 - INFO - +----- START KW: OpenStack.Delete All Flavors [ ]
20190402 06:17:47.749 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack flavor list ]
20190402 06:17:47.749 - INFO - ${openstack_cmd} = openstack flavor list
20190402 06:17:47.750 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:47.750 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "m1" ]
20190402 06:17:47.751 - INFO - ${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"
20190402 06:17:47.751 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:17:47.751 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:47.753 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:47.754 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:47.754 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 06:17:47.754 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:47.756 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.
20190402 06:17:48.387 - INFO - Command exited with return code 1.
20190402 06:17:48.388 - INFO - ${stdout} =
20190402 06:17:48.388 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:48.388 - INFO - ${rc} = 1
20190402 06:17:48.389 - INFO - +------- END KW: SSHLibrary.Execute Command (634)
20190402 06:17:48.389 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:48.390 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:48.391 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:48.391 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:48.392 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:48.393 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:48.393 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:48.393 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:17:48.393 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:48.393 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:48.393 - INFO - +------ END KW: OpenStack.Run OS Command (642)
20190402 06:17:48.393 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:48.393 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:48.394 - INFO - ${response} =
20190402 06:17:48.394 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:17:48.394 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:48.394 - INFO - @{res_in_list} = [ ]
20190402 06:17:48.394 - INFO - +------- END KW: String.Split String (0)
20190402 06:17:48.394 - INFO - @{flavor_list} = [ ]
20190402 06:17:48.394 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:17:48.394 - INFO - +------ START KW: ${flavor} IN [ @{flavor_list} ] [ ]
20190402 06:17:48.394 - INFO - +------ END KW: ${flavor} IN [ @{flavor_list} ] (0)
20190402 06:17:48.394 - INFO - +----- END KW: OpenStack.Delete All Flavors (646)
20190402 06:17:48.395 - INFO - +----- START KW: OpenStack.Delete All Networks [ ]
20190402 06:17:48.395 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 06:17:48.395 - INFO - ${openstack_cmd} = openstack network list
20190402 06:17:48.395 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:48.395 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "private" | grep -v "public" | grep -v "external" | grep -v "internal" ]
20190402 06:17:48.395 - INFO - ${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"
20190402 06:17:48.395 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:17:48.396 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:48.396 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:48.396 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:48.396 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:48.396 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:48.397 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.
20190402 06:17:49.026 - INFO - Command exited with return code 1.
20190402 06:17:49.027 - INFO - ${stdout} =
20190402 06:17:49.027 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:49.027 - INFO - ${rc} = 1
20190402 06:17:49.028 - INFO - +------- END KW: SSHLibrary.Execute Command (631)
20190402 06:17:49.028 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:49.030 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:49.030 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:49.031 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:49.032 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:49.033 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:49.033 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:49.033 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:17:49.033 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:49.034 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:49.035 - INFO - +------ END KW: OpenStack.Run OS Command (639)
20190402 06:17:49.035 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:49.036 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:49.036 - INFO - ${response} =
20190402 06:17:49.036 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:17:49.036 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:49.036 - INFO - @{res_in_list} = [ ]
20190402 06:17:49.036 - INFO - +------- END KW: String.Split String (0)
20190402 06:17:49.036 - INFO - @{network_list} = [ ]
20190402 06:17:49.036 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:17:49.036 - INFO - +------ START KW: ${network} IN [ @{network_list} ] [ ]
20190402 06:17:49.036 - INFO - +------ END KW: ${network} IN [ @{network_list} ] (0)
20190402 06:17:49.037 - INFO - +----- END KW: OpenStack.Delete All Networks (642)
20190402 06:17:49.037 - INFO - +----- START KW: OpenStack.Delete All KeyPairs [ ]
20190402 06:17:49.037 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack keypair list ]
20190402 06:17:49.037 - INFO - ${openstack_cmd} = openstack keypair list
20190402 06:17:49.037 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:49.037 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "Name" ]
20190402 06:17:49.037 - INFO - ${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"
20190402 06:17:49.037 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:17:49.037 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:49.038 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:49.038 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:49.038 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:49.038 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:49.038 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack keypair list|awk '{print$2}'|grep -v "Name"'.
20190402 06:17:49.618 - INFO - Command exited with return code 1.
20190402 06:17:49.619 - INFO - ${stdout} =
20190402 06:17:49.619 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:49.619 - INFO - ${rc} = 1
20190402 06:17:49.619 - INFO - +------- END KW: SSHLibrary.Execute Command (581)
20190402 06:17:49.620 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:49.621 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:49.622 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:49.622 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:49.623 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:49.624 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:49.624 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:49.624 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:17:49.624 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:49.624 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:49.624 - INFO - +------ END KW: OpenStack.Run OS Command (587)
20190402 06:17:49.624 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:49.624 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:49.625 - INFO - ${response} =
20190402 06:17:49.625 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:17:49.625 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:49.625 - INFO - @{res_in_list} = [ ]
20190402 06:17:49.625 - INFO - +------- END KW: String.Split String (0)
20190402 06:17:49.625 - INFO - @{key_list} = [ ]
20190402 06:17:49.625 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:17:49.625 - INFO - +------ START KW: ${key} IN [ @{key_list} ] [ ]
20190402 06:17:49.625 - INFO - +------ END KW: ${key} IN [ @{key_list} ] (0)
20190402 06:17:49.625 - INFO - +----- END KW: OpenStack.Delete All KeyPairs (588)
20190402 06:17:49.626 - INFO - +----- START KW: OpenStack.Delete All Snapshots [ ]
20190402 06:17:49.626 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume snapshot list ]
20190402 06:17:49.626 - INFO - ${openstack_cmd} = openstack volume snapshot list
20190402 06:17:49.626 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:49.626 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:17:49.626 - INFO - ${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"
20190402 06:17:49.626 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:17:49.626 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:49.627 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:49.627 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:49.627 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:49.627 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:49.628 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.
20190402 06:17:50.239 - INFO - Command exited with return code 1.
20190402 06:17:50.240 - INFO - ${stdout} =
20190402 06:17:50.240 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:50.240 - INFO - ${rc} = 1
20190402 06:17:50.240 - INFO - +------- END KW: SSHLibrary.Execute Command (613)
20190402 06:17:50.241 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:50.242 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:50.242 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:17:50.243 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:50.244 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:50.244 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:50.245 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:50.245 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:17:50.245 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:50.245 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:50.245 - INFO - +------ END KW: OpenStack.Run OS Command (619)
20190402 06:17:50.245 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:50.245 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:50.246 - INFO - ${response} =
20190402 06:17:50.246 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:17:50.246 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:50.246 - INFO - @{res_in_list} = [ ]
20190402 06:17:50.246 - INFO - +------- END KW: String.Split String (0)
20190402 06:17:50.246 - INFO - @{snapshot_list} = [ ]
20190402 06:17:50.246 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:17:50.246 - INFO - +------ START KW: ${snapshot} IN [ @{snapshot_list} ] [ ]
20190402 06:17:50.246 - INFO - +------ END KW: ${snapshot} IN [ @{snapshot_list} ] (0)
20190402 06:17:50.246 - INFO - +----- END KW: OpenStack.Delete All Snapshots (620)
20190402 06:17:50.247 - INFO - +----- START KW: OpenStack.Delete All Volumes [ ]
20190402 06:17:50.247 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume list ]
20190402 06:17:50.247 - INFO - ${openstack_cmd} = openstack volume list
20190402 06:17:50.247 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:50.247 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "ID" ]
20190402 06:17:50.247 - INFO - ${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"
20190402 06:17:50.247 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:17:50.247 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:50.248 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:50.248 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:50.248 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:50.248 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:50.248 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume list|awk '{print$2}'|grep -v "ID"'.
20190402 06:17:50.909 - INFO - Command exited with return code 1.
20190402 06:17:50.910 - INFO - ${stdout} =
20190402 06:17:50.910 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:50.910 - INFO - ${rc} = 1
20190402 06:17:50.911 - INFO - +------- END KW: SSHLibrary.Execute Command (662)
20190402 06:17:50.911 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:50.913 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:50.913 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:50.913 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:50.914 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:50.915 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:50.915 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:50.915 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:17:50.915 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:50.915 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:50.915 - INFO - +------ END KW: OpenStack.Run OS Command (668)
20190402 06:17:50.915 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:50.915 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:50.916 - INFO - ${response} =
20190402 06:17:50.916 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:17:50.916 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:50.916 - INFO - @{res_in_list} = [ ]
20190402 06:17:50.916 - INFO - +------- END KW: String.Split String (0)
20190402 06:17:50.916 - INFO - @{volume_list} = [ ]
20190402 06:17:50.916 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:17:50.916 - INFO - +------ START KW: ${volume} IN [ @{volume_list} ] [ ]
20190402 06:17:50.916 - INFO - +------ END KW: ${volume} IN [ @{volume_list} ] (0)
20190402 06:17:50.916 - INFO - +----- END KW: OpenStack.Delete All Volumes (669)
20190402 06:17:50.917 - INFO - +----- START KW: OpenStack.Delete All Stacks [ ]
20190402 06:17:50.917 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack stack list ]
20190402 06:17:50.917 - INFO - ${openstack_cmd} = openstack stack list
20190402 06:17:50.917 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:50.917 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:17:50.917 - INFO - ${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"
20190402 06:17:50.917 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:17:50.917 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:50.918 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:50.918 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:50.918 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:50.918 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:50.918 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack list|awk '{print$4}'|grep -v "Name"'.
20190402 06:17:51.549 - INFO - Command exited with return code 1.
20190402 06:17:51.549 - INFO - ${stdout} =
20190402 06:17:51.549 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:51.550 - INFO - ${rc} = 1
20190402 06:17:51.550 - INFO - +------- END KW: SSHLibrary.Execute Command (632)
20190402 06:17:51.550 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:51.552 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:51.552 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:51.553 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:51.554 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:51.554 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:51.554 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:51.554 - INFO - +-------- END KW: BuiltIn.Fail (0)
20190402 06:17:51.554 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:17:51.554 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:17:51.554 - INFO - +------ END KW: OpenStack.Run OS Command (637)
20190402 06:17:51.554 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:17:51.555 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:51.555 - INFO - ${response} =
20190402 06:17:51.555 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:17:51.555 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:17:51.555 - INFO - @{res_in_list} = [ ]
20190402 06:17:51.555 - INFO - +------- END KW: String.Split String (0)
20190402 06:17:51.555 - INFO - @{stack_list} = [ ]
20190402 06:17:51.555 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:17:51.555 - INFO - +------ START KW: ${stack} IN [ @{stack_list} ] [ ]
20190402 06:17:51.555 - INFO - +------ END KW: ${stack} IN [ @{stack_list} ] (0)
20190402 06:17:51.556 - INFO - +----- END KW: OpenStack.Delete All Stacks (639)
20190402 06:17:51.556 - INFO - +---- END KW: OpenStack.Openstack Cleanup All (5053)
20190402 06:17:51.556 - INFO - +---- START KW: Utils.Stx Suite TearDown [ ]
20190402 06:17:51.556 - INFO - +----- START KW: SSHLibrary.Close All Connections [ ]
20190402 06:17:51.558 - INFO - +----- END KW: SSHLibrary.Close All Connections (2)
20190402 06:17:51.558 - INFO - +---- END KW: Utils.Stx Suite TearDown (2)
20190402 06:17:51.558 - INFO - +--- END TEARDOWN: BuiltIn.Run Keywords (5055)
==============================================================================
20190402 06:17:51.561 - INFO - +-- END SUITE: Sanity-Test.Sanity-OpenStack.02-Instance-From-Volume (15210)
==============================================================================
20190402 06:17:51.573 - INFO - +-- START SUITE: Sanity-Test.Sanity-OpenStack.03-Instance-From-Snapshot [ ]
==============================================================================
20190402 06:17:51.573 - INFO - +--- START SETUP: Utils.Stx Suite Setup [ ]
20190402 06:17:51.574 - INFO - +---- START KW: Utils.Open Master Controller Connection [ ]
20190402 06:17:51.574 - INFO - +----- START KW: Utils.Connect to Controller Node [ ${CONFIG.credentials.STX_DEPLOY_USER_NAME} | ${CONFIG.credentials.STX_DEPLOY_USER_PSWD} | ${CONFIG.general.IP_UNIT_0_ADDRESS} ]
20190402 06:17:51.574 - INFO - +------ START KW: SSHLibrary.Open Connection [ ${ip_address} prompt=${prompt} | timeout=${timeout} ]
20190402 06:17:51.575 - INFO - ${controller_connection} = 1
20190402 06:17:51.575 - INFO - +------ END KW: SSHLibrary.Open Connection (1)
20190402 06:17:51.575 - INFO - +------ START KW: Utils.Flexible_SSH_Login [ ${user} | ${password} ]
20190402 06:17:51.575 - INFO - +------- START KW: BuiltIn.Get Length [ ${password} ]
20190402 06:17:51.575 - INFO - Length is 10
20190402 06:17:51.575 - INFO - ${pwd_length} = 10
20190402 06:17:51.575 - INFO - +------- END KW: BuiltIn.Get Length (0)
20190402 06:17:51.575 - INFO - +------- START KW: BuiltIn.Run Keyword And Return If [ ${pwd_length} > 0 | SSHLibrary.Login | ${user} | ${password} | delay=${delay} ]
20190402 06:17:51.576 - INFO - +-------- START KW: SSHLibrary.Login [ ${user} | ${password} | delay=${delay} ]
20190402 06:17:51.576 - INFO - Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.
20190402 06:17:52.664 - INFO - Read output: Last login: Tue Apr  2 12:06:20 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$
20190402 06:17:52.665 - INFO - +-------- END KW: SSHLibrary.Login (1089)
20190402 06:17:52.665 - INFO - Returning from the enclosing user keyword.
20190402 06:17:52.666 - INFO - +------- END KW: BuiltIn.Run Keyword And Return If (1091)
20190402 06:17:52.666 - INFO - +------ END KW: Utils.Flexible_SSH_Login (1091)
20190402 06:17:52.667 - INFO - ${master_controller_connection} = 1
20190402 06:17:52.667 - INFO - +----- END KW: Utils.Connect to Controller Node (1093)
20190402 06:17:52.668 - INFO - +----- START KW: BuiltIn.Set Suite Variable [ ${master_controller_connection} ]
20190402 06:17:52.668 - INFO - ${master_controller_connection} = 1
20190402 06:17:52.669 - INFO - +----- END KW: BuiltIn.Set Suite Variable (1)
20190402 06:17:52.669 - INFO - +----- START KW: BuiltIn.Log [ ${master_controller_connection} ]
20190402 06:17:52.669 - INFO - 1
20190402 06:17:52.670 - INFO - +----- END KW: BuiltIn.Log (0)
20190402 06:17:52.670 - INFO - +---- END KW: Utils.Open Master Controller Connection (1096)
20190402 06:17:52.670 - INFO - +---- START KW: Utils.Set Env Vars From Openrc [ ]
20190402 06:17:52.670 - INFO - +----- START KW: Utils.Run Command [ source /etc/platform/openrc | True ]
20190402 06:17:52.670 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:17:52.670 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:17:52.671 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:17:52.671 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:17:52.671 - INFO - &{result_dict} = { stdout= }
20190402 06:17:52.671 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 06:17:52.671 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:17:52.671 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:17:52.672 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:17:52.672 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:17:52.672 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:17:52.672 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (1)
20190402 06:17:52.672 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 06:17:52.672 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 06:17:52.672 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:17:52.675 - INFO - source /etc/platform/openrc
20190402 06:17:52.676 - INFO - +------ END KW: SSHLibrary.Write (4)
20190402 06:17:52.676 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:17:53.085 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:17:53.085 - INFO - ${output} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:17:53.086 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (410)
20190402 06:17:53.086 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:17:53.086 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:17:53.086 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:17:53.086 - INFO - +------- END KW: String.Get Line (0)
20190402 06:17:53.086 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:17:53.087 - INFO - ${clean_out} =
20190402 06:17:53.087 - INFO - +------- END KW: String.Remove String (1)
20190402 06:17:53.087 - INFO - ${output} =
20190402 06:17:53.087 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 06:17:53.087 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 06:17:53.087 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:17:53.089 - INFO - echo $?
20190402 06:17:53.089 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 06:17:53.089 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:17:53.089 - INFO - 0
20190402 06:17:53.089 - INFO - ${rc} = 0
20190402 06:17:53.089 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 06:17:53.089 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:17:53.089 - INFO - 0
20190402 06:17:53.090 - INFO - +------- END KW: BuiltIn.Log (1)
20190402 06:17:53.090 - INFO - ${rc} = 0
20190402 06:17:53.090 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 06:17:53.090 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:17:53.090 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:17:53.090 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:17:53.091 - INFO - +------ END KW: BuiltIn.Run Keyword If (0)
20190402 06:17:53.091 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:17:53.091 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 06:17:53.091 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:17:53.091 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout:
20190402 06:17:53.091 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 06:17:53.091 - INFO - +----- END KW: Utils.Run Command (421)
20190402 06:17:53.091 - INFO - +---- END KW: Utils.Set Env Vars From Openrc (421)
20190402 06:17:53.091 - INFO - +--- END SETUP: Utils.Stx Suite Setup (1518)
------------------------------------------------------------------------------
20190402 06:17:53.092 - INFO - +--- START TEST: Create Flavors for Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:53.092 - INFO - +---- START KW: BuiltIn.Catenate [ ${flavor_property_1} | ${flavor_property_2} ]
20190402 06:17:53.092 - INFO - ${properties} = --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared'
20190402 06:17:53.092 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:17:53.092 - INFO - +---- START KW: OpenStack.Create Flavor [ ${cirros_flavor_ram} | ${cirros_flavor_vcpus} | ${cirros_flavor_disk} | ${cirros_flavor_name} ]
20190402 06:17:53.093 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 06:17:53.093 - INFO - ${openstack_cmd} = openstack flavor create
20190402 06:17:53.093 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:17:53.093 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 06:17:53.093 - INFO - ${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small
20190402 06:17:53.094 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 06:17:53.094 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:53.094 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:53.094 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:53.094 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:53.094 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:53.095 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.
20190402 06:17:53.725 - INFO - Command exited with return code 1.
20190402 06:17:53.725 - INFO - ${stdout} =
20190402 06:17:53.726 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:53.726 - INFO - ${rc} = 1
20190402 06:17:53.726 - INFO - +------ END KW: SSHLibrary.Execute Command (632)
20190402 06:17:53.726 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:53.728 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:53.728 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:53.728 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:53.729 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:53.730 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:53.730 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:53.730 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:53.730 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:53.731 - INFO - +----- END KW: OpenStack.Run OS Command (637)
20190402 06:17:53.731 - INFO - +---- END KW: OpenStack.Create Flavor (639)
------------------------------------------------------------------------------
20190402 06:17:53.731 - INFO - +--- END TEST: Create Flavors for Instances (639)
------------------------------------------------------------------------------
20190402 06:17:53.731 - INFO - +--- START TEST: Create Images for Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:53.732 - INFO - +---- START KW: SSHLibrary.Put File [ %{PYTHONPATH}/${cirros_image} | ${host_image_path}/${cirros_image} ]
20190402 06:17:53.742 - INFO - [chan 2] Opened sftp connection (server version 3)
20190402 06:17:53.749 - INFO - [chan 3] Opened sftp connection (server version 3)
20190402 06:17:53.752 - FAIL - There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.
20190402 06:17:53.752 - DEBUG - Traceback (most recent call last):
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1559, in put_file
    destination, mode, newline, scp)
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1619, in _run_command
    raise RuntimeError(e)
20190402 06:17:53.752 - INFO - +---- END KW: SSHLibrary.Put File (20)
------------------------------------------------------------------------------
20190402 06:17:53.752 - INFO - +--- END TEST: Create Images for Instances (21)
------------------------------------------------------------------------------
20190402 06:17:53.753 - INFO - +--- START TEST: Create Networks for Instance [ ]
------------------------------------------------------------------------------
20190402 06:17:53.753 - INFO - +---- START KW: OpenStack.Create Network [ ${network_name} ]
20190402 06:17:53.754 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack network create ]
20190402 06:17:53.754 - INFO - ${openstack_cmd} = openstack network create
20190402 06:17:53.754 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:17:53.754 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${network_name} | ${additional_args} ]
20190402 06:17:53.754 - INFO - ${cmd} = openstack network create network-1
20190402 06:17:53.755 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 06:17:53.755 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:17:53.755 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:53.755 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:53.756 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:53.756 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:53.756 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network create network-1 '.
20190402 06:17:54.386 - INFO - Command exited with return code 1.
20190402 06:17:54.387 - INFO - ${stdout} =
20190402 06:17:54.387 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:54.387 - INFO - ${rc} = 1
20190402 06:17:54.387 - INFO - +------ END KW: SSHLibrary.Execute Command (631)
20190402 06:17:54.388 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:54.389 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:54.389 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 06:17:54.390 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:54.391 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:54.391 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:54.391 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:54.392 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:54.392 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:54.392 - INFO - +----- END KW: OpenStack.Run OS Command (637)
20190402 06:17:54.392 - INFO - +---- END KW: OpenStack.Create Network (639)
------------------------------------------------------------------------------
20190402 06:17:54.392 - INFO - +--- END TEST: Create Networks for Instance (640)
------------------------------------------------------------------------------
20190402 06:17:54.392 - INFO - +--- START TEST: Create Volume for Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:54.393 - INFO - +---- START KW: OpenStack.Create Volume [ ${cirros_volume_size} | ${cirros_image_name} | --bootable | ${cirros_volume_name} ]
20190402 06:17:54.393 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack volume create ]
20190402 06:17:54.393 - INFO - ${openstack_cmd} = openstack volume create
20190402 06:17:54.393 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:17:54.393 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --size ${size} | --image ${image} | ${bootable} | ${name} ]
20190402 06:17:54.394 - INFO - ${cmd} = openstack volume create --size 20 --image cirros --bootable vol-cirros-1
20190402 06:17:54.394 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 06:17:54.394 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 06:17:54.394 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:54.394 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:54.394 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:54.394 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:54.395 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume create --size 20 --image cirros --bootable vol-cirros-1'.
20190402 06:17:54.975 - INFO - Command exited with return code 1.
20190402 06:17:54.975 - INFO - ${stdout} =
20190402 06:17:54.976 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:54.976 - INFO - ${rc} = 1
20190402 06:17:54.976 - INFO - +------ END KW: SSHLibrary.Execute Command (582)
20190402 06:17:54.976 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:54.978 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:54.978 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:54.979 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:54.980 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:54.980 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:54.980 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:54.980 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:54.980 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:17:54.980 - INFO - +----- END KW: OpenStack.Run OS Command (586)
20190402 06:17:54.980 - INFO - +---- END KW: OpenStack.Create Volume (587)
------------------------------------------------------------------------------
20190402 06:17:54.981 - INFO - +--- END TEST: Create Volume for Instances (588)
------------------------------------------------------------------------------
20190402 06:17:54.981 - INFO - +--- START TEST: Create Snapshot for Instance [ ]
------------------------------------------------------------------------------
20190402 06:17:54.981 - INFO - +---- START KW: OpenStack.Create Snapshot [ ${cirros_volume_name} | ${cirros_snapshot_name} ]
20190402 06:17:54.981 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack volume snapshot create --volume ${volume} ${name} | True | 30 sec ]
20190402 06:17:54.982 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:54.982 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:54.982 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:54.982 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:54.983 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume snapshot create --volume vol-cirros-1 snap-cirros-1'.
20190402 06:17:55.627 - INFO - Command exited with return code 1.
20190402 06:17:55.628 - INFO - ${stdout} =
20190402 06:17:55.628 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:55.629 - INFO - ${rc} = 1
20190402 06:17:55.629 - INFO - +------ END KW: SSHLibrary.Execute Command (647)
20190402 06:17:55.629 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:55.631 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:55.631 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:55.631 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:55.632 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:55.633 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:55.633 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:55.633 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:55.633 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:55.633 - INFO - +----- END KW: OpenStack.Run OS Command (652)
20190402 06:17:55.633 - INFO - +---- END KW: OpenStack.Create Snapshot (652)
------------------------------------------------------------------------------
20190402 06:17:55.633 - INFO - +--- END TEST: Create Snapshot for Instance (652)
------------------------------------------------------------------------------
20190402 06:17:55.634 - INFO - +--- START TEST: Launch Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:55.634 - INFO - +---- START KW: OpenStack.Create Instance From Snapshot [ ${network_name} | ${cirros_image_name} | ${cirros_instance_name} | ${cirros_snapshot_name} | ${cirros_snapshot_size} | ${cirros_flavor_name} ]
20190402 06:17:55.635 - INFO - +----- START KW: OpenStack.Get Net Id [ ${net_name} ]
20190402 06:17:55.635 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 06:17:55.635 - INFO - ${openstack_cmd} = openstack network list
20190402 06:17:55.635 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:55.635 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep "${network_name}" | awk '{print$2}' ]
20190402 06:17:55.635 - INFO - ${cmd} = openstack network list|grep "network-1"|awk '{print$2}'
20190402 06:17:55.635 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:17:55.636 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 06:17:55.636 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:55.636 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:55.636 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:17:55.636 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:55.637 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|grep "network-1"|awk '{print$2}''.
20190402 06:17:56.217 - INFO - Command exited with return code 0.
20190402 06:17:56.217 - INFO - ${stdout} =
20190402 06:17:56.217 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:56.218 - INFO - ${rc} = 0
20190402 06:17:56.218 - INFO - +------- END KW: SSHLibrary.Execute Command (582)
20190402 06:17:56.219 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:56.220 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 0}
20190402 06:17:56.220 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:17:56.221 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:56.222 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 06:17:56.222 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=0 }
20190402 06:17:56.222 - INFO - +------ END KW: OpenStack.Run OS Command (586)
20190402 06:17:56.222 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:17:56.222 - INFO - ${output} =
20190402 06:17:56.222 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 06:17:56.222 - INFO - +------ START KW: String.Split String [ ${output} | ${EMPTY} ]
20190402 06:17:56.222 - INFO - ${splitted_output} = []
20190402 06:17:56.223 - INFO - +------ END KW: String.Split String (0)
20190402 06:17:56.223 - INFO - +------ START KW: Collections.Get From List [ ${splitted_output} | 0 ]
20190402 06:17:56.223 - FAIL - IndexError: Given index 0 is out of the range 0--1.
20190402 06:17:56.223 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:56.223 - INFO - +------ END KW: Collections.Get From List (0)
20190402 06:17:56.223 - INFO - +----- END KW: OpenStack.Get Net Id (589)
20190402 06:17:56.223 - INFO - +---- END KW: OpenStack.Create Instance From Snapshot (589)
------------------------------------------------------------------------------
20190402 06:17:56.224 - INFO - +--- END TEST: Launch Instances (589)
------------------------------------------------------------------------------
20190402 06:17:56.224 - INFO - +--- START TEST: Suspend Resume Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:56.224 - INFO - +---- START KW: OpenStack.Suspend Instance [ ${cirros_instance_name} ]
20190402 06:17:56.224 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server suspend ${vm_name} | True | 30 sec ]
20190402 06:17:56.225 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:56.225 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:56.225 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:56.225 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:56.225 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server suspend vm-cirros-1'.
20190402 06:17:56.836 - INFO - Command exited with return code 1.
20190402 06:17:56.837 - INFO - ${stdout} =
20190402 06:17:56.837 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:56.837 - INFO - ${rc} = 1
20190402 06:17:56.837 - INFO - +------ END KW: SSHLibrary.Execute Command (612)
20190402 06:17:56.838 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:56.839 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:56.839 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:56.840 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:56.841 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:56.842 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:56.842 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:56.842 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:56.842 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:56.842 - INFO - +----- END KW: OpenStack.Run OS Command (618)
20190402 06:17:56.842 - INFO - +---- END KW: OpenStack.Suspend Instance (618)
------------------------------------------------------------------------------
20190402 06:17:56.842 - INFO - +--- END TEST: Suspend Resume Instances (618)
------------------------------------------------------------------------------
20190402 06:17:56.843 - INFO - +--- START TEST: Set Error Active Flags Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:56.843 - INFO - +---- START KW: OpenStack.Set Error State Instance [ ${cirros_instance_name} | error ]
20190402 06:17:56.843 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server set --state ${value} ${vm_name} | True | 30 sec ]
20190402 06:17:56.844 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:56.844 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:56.844 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:56.844 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:56.844 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server set --state error vm-cirros-1'.
20190402 06:17:57.439 - INFO - Command exited with return code 1.
20190402 06:17:57.440 - INFO - ${stdout} =
20190402 06:17:57.440 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:57.440 - INFO - ${rc} = 1
20190402 06:17:57.440 - INFO - +------ END KW: SSHLibrary.Execute Command (596)
20190402 06:17:57.441 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:57.442 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:57.443 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:57.443 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:57.444 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:57.445 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:57.445 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:57.445 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:57.445 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:57.445 - INFO - +----- END KW: OpenStack.Run OS Command (602)
20190402 06:17:57.445 - INFO - +---- END KW: OpenStack.Set Error State Instance (602)
------------------------------------------------------------------------------
20190402 06:17:57.445 - INFO - +--- END TEST: Set Error Active Flags Instances (603)
------------------------------------------------------------------------------
20190402 06:17:57.446 - INFO - +--- START TEST: Pause Unpause Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:57.446 - INFO - +---- START KW: OpenStack.Pause Instance [ ${cirros_instance_name} ]
20190402 06:17:57.446 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server pause ${vm_name} | True | 30 sec ]
20190402 06:17:57.447 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:57.447 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:57.447 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:57.447 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:57.447 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server pause vm-cirros-1'.
20190402 06:17:58.092 - INFO - Command exited with return code 1.
20190402 06:17:58.092 - INFO - ${stdout} =
20190402 06:17:58.092 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:58.093 - INFO - ${rc} = 1
20190402 06:17:58.093 - INFO - +------ END KW: SSHLibrary.Execute Command (646)
20190402 06:17:58.093 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:58.095 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:58.095 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:58.096 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:58.097 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:58.098 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:58.098 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:58.098 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:58.098 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:17:58.099 - INFO - +----- END KW: OpenStack.Run OS Command (652)
20190402 06:17:58.099 - INFO - +---- END KW: OpenStack.Pause Instance (653)
------------------------------------------------------------------------------
20190402 06:17:58.100 - INFO - +--- END TEST: Pause Unpause Instances (654)
------------------------------------------------------------------------------
20190402 06:17:58.101 - INFO - +--- START TEST: Stop Start Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:58.102 - INFO - +---- START KW: OpenStack.Stop Instance [ ${cirros_instance_name} ]
20190402 06:17:58.103 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server stop ${vm_name} | True | 30 sec ]
20190402 06:17:58.104 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:58.105 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:58.105 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:58.105 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:58.106 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server stop vm-cirros-1'.
20190402 06:17:58.738 - INFO - Command exited with return code 1.
20190402 06:17:58.738 - INFO - ${stdout} =
20190402 06:17:58.739 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:58.739 - INFO - ${rc} = 1
20190402 06:17:58.739 - INFO - +------ END KW: SSHLibrary.Execute Command (634)
20190402 06:17:58.739 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:58.741 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:58.741 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:58.742 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:58.743 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:58.744 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:58.744 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:58.744 - INFO - +------- END KW: BuiltIn.Fail (2)
20190402 06:17:58.744 - INFO - +------ END KW: BuiltIn.Run Keyword If (3)
20190402 06:17:58.745 - INFO - +----- END KW: OpenStack.Run OS Command (642)
20190402 06:17:58.745 - INFO - +---- END KW: OpenStack.Stop Instance (643)
------------------------------------------------------------------------------
20190402 06:17:58.746 - INFO - +--- END TEST: Stop Start Instances (645)
------------------------------------------------------------------------------
20190402 06:17:58.747 - INFO - +--- START TEST: Lock Unlock Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:58.748 - INFO - +---- START KW: OpenStack.Lock Instance [ ${cirros_instance_name} ]
20190402 06:17:58.749 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server lock ${vm_name} | True | 30 sec ]
20190402 06:17:58.750 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:58.751 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:58.751 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:58.751 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:58.753 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server lock vm-cirros-1'.
20190402 06:17:59.384 - INFO - Command exited with return code 1.
20190402 06:17:59.385 - INFO - ${stdout} =
20190402 06:17:59.385 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:59.385 - INFO - ${rc} = 1
20190402 06:17:59.386 - INFO - +------ END KW: SSHLibrary.Execute Command (634)
20190402 06:17:59.386 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:59.388 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:59.388 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:59.388 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:59.389 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:59.390 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:59.390 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:59.390 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:17:59.391 - INFO - +------ END KW: BuiltIn.Run Keyword If (3)
20190402 06:17:59.391 - INFO - +----- END KW: OpenStack.Run OS Command (642)
20190402 06:17:59.392 - INFO - +---- END KW: OpenStack.Lock Instance (644)
------------------------------------------------------------------------------
20190402 06:17:59.393 - INFO - +--- END TEST: Lock Unlock Instances (645)
------------------------------------------------------------------------------
20190402 06:17:59.394 - INFO - +--- START TEST: Reboot Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:59.395 - INFO - +---- START KW: OpenStack.Reboot Instance [ ${cirros_instance_name} ]
20190402 06:17:59.396 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server reboot ${vm_name} | True | 30 sec ]
20190402 06:17:59.397 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:59.397 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:59.397 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:17:59.398 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:59.399 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server reboot vm-cirros-1'.
20190402 06:17:59.981 - INFO - Command exited with return code 1.
20190402 06:17:59.981 - INFO - ${stdout} =
20190402 06:17:59.981 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:17:59.982 - INFO - ${rc} = 1
20190402 06:17:59.982 - INFO - +------ END KW: SSHLibrary.Execute Command (584)
20190402 06:17:59.982 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:17:59.984 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:17:59.984 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:17:59.984 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:17:59.985 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:17:59.986 - FAIL - Cloud openstack_helm was not found.
20190402 06:17:59.986 - DEBUG - Traceback (most recent call last):
  None
20190402 06:17:59.987 - INFO - +------- END KW: BuiltIn.Fail (2)
20190402 06:17:59.987 - INFO - +------ END KW: BuiltIn.Run Keyword If (3)
20190402 06:17:59.987 - INFO - +----- END KW: OpenStack.Run OS Command (591)
20190402 06:17:59.988 - INFO - +---- END KW: OpenStack.Reboot Instance (593)
------------------------------------------------------------------------------
20190402 06:17:59.989 - INFO - +--- END TEST: Reboot Instances (595)
------------------------------------------------------------------------------
20190402 06:17:59.989 - INFO - +--- START TEST: Rebuild Instances [ ]
------------------------------------------------------------------------------
20190402 06:17:59.990 - INFO - +---- START KW: OpenStack.Rebuild Instance From Volume [ ${cirros_instance_name} | ${cirros_image_name} ]
20190402 06:17:59.991 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server rebuild --image ${image} ${vm_name} | True | 30 sec ]
20190402 06:17:59.992 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:17:59.993 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:17:59.993 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:17:59.994 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:17:59.995 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server rebuild --image cirros vm-cirros-1'.
20190402 06:18:00.590 - INFO - Command exited with return code 1.
20190402 06:18:00.591 - INFO - ${stdout} =
20190402 06:18:00.591 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:00.591 - INFO - ${rc} = 1
20190402 06:18:00.591 - INFO - +------ END KW: SSHLibrary.Execute Command (597)
20190402 06:18:00.592 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:00.594 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:00.594 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:00.594 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:00.595 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:00.596 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:00.596 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:00.596 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:18:00.596 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:00.596 - INFO - +----- END KW: OpenStack.Run OS Command (605)
20190402 06:18:00.596 - INFO - +---- END KW: OpenStack.Rebuild Instance From Volume (606)
------------------------------------------------------------------------------
20190402 06:18:00.597 - INFO - +--- END TEST: Rebuild Instances (607)
------------------------------------------------------------------------------
20190402 06:18:00.597 - INFO - +--- START TEST: Resize Instances [ ]
------------------------------------------------------------------------------
20190402 06:18:00.597 - INFO - +---- START KW: OpenStack.Create Flavor [ ${cirros_flavor_ram} | ${cirros_flavor_vcpus} | ${cirros_flavor_disk} | ${cirros_flavor_name_2} ]
20190402 06:18:00.598 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 06:18:00.598 - INFO - ${openstack_cmd} = openstack flavor create
20190402 06:18:00.598 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:18:00.598 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 06:18:00.598 - INFO - ${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small
20190402 06:18:00.598 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 06:18:00.598 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:00.599 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:00.599 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:00.599 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:00.599 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:00.599 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small'.
20190402 06:18:01.260 - INFO - Command exited with return code 1.
20190402 06:18:01.261 - INFO - ${stdout} =
20190402 06:18:01.261 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:01.261 - INFO - ${rc} = 1
20190402 06:18:01.261 - INFO - +------ END KW: SSHLibrary.Execute Command (662)
20190402 06:18:01.262 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:01.263 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:01.264 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:01.264 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:01.265 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:01.266 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:01.266 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:01.267 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:18:01.267 - INFO - +------ END KW: BuiltIn.Run Keyword If (3)
20190402 06:18:01.267 - INFO - +----- END KW: OpenStack.Run OS Command (669)
20190402 06:18:01.268 - INFO - +---- END KW: OpenStack.Create Flavor (671)
------------------------------------------------------------------------------
20190402 06:18:01.269 - INFO - +--- END TEST: Resize Instances (671)
------------------------------------------------------------------------------
20190402 06:18:01.270 - INFO - +--- START TEST: Set Unset Properties Instances [ ]
------------------------------------------------------------------------------
20190402 06:18:01.271 - INFO - +---- START KW: BuiltIn.Catenate [ ${instance_property_1}='true' | ${instance_property_2}='500' | ${instance_property_3}='180' ]
20190402 06:18:01.272 - INFO - ${properties} = --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180'
20190402 06:18:01.272 - INFO - +---- END KW: BuiltIn.Catenate (2)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:01.273 - INFO - +---- START KW: OpenStack.Set Instance Property [ ${cirros_instance_name} | ${properties} ]
20190402 06:18:01.274 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server set ${key} ${vm_name} | True | 30 sec ]
20190402 06:18:01.275 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:01.276 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:01.276 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:18:01.276 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:01.277 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-cirros-1'.
20190402 06:18:01.859 - INFO - Command exited with return code 1.
20190402 06:18:01.859 - INFO - ${stdout} =
20190402 06:18:01.859 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:01.859 - INFO - ${rc} = 1
20190402 06:18:01.860 - INFO - +------ END KW: SSHLibrary.Execute Command (583)
20190402 06:18:01.860 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:01.861 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:01.862 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:01.862 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:01.863 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:01.864 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:01.864 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:01.864 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:18:01.864 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:01.865 - INFO - +----- END KW: OpenStack.Run OS Command (591)
20190402 06:18:01.865 - INFO - +---- END KW: OpenStack.Set Instance Property (592)
------------------------------------------------------------------------------
20190402 06:18:01.866 - INFO - +--- END TEST: Set Unset Properties Instances (597)
------------------------------------------------------------------------------
20190402 06:18:01.867 - INFO - +--- START TEST: Evacuate Instances From Hosts [ ]
------------------------------------------------------------------------------
20190402 06:18:01.868 - INFO - +---- START KW: BuiltIn.Run Keyword If [ '${CONFIGURATION_TYPE}' == 'Duplex' | Run Keywords | Evacuate Instances | controller-0 | AND | Evacuate Instances | controller-1 | ELSE IF | '${CONFIGURATION_TYPE}' == 'MN-Local' or '${CONFIGURATION_TYPE}' == 'MN-External' | Run Keywords | Evacuate Instances | compute-0 | AND | Evacuate Instances | compute-1 ]
20190402 06:18:01.870 - INFO - +----- START KW: BuiltIn.Run Keywords [ Evacuate Instances | controller-0 | AND | Evacuate Instances | controller-1 ]
20190402 06:18:01.870 - INFO - +------ START KW: OpenStack.Evacuate Instances [ controller-0 ]
20190402 06:18:01.872 - INFO - +------- START KW: BuiltIn.Set Variable [ openstack compute service set ]
20190402 06:18:01.872 - INFO - ${openstack_cmd} = openstack compute service set
20190402 06:18:01.873 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:01.873 - INFO - +------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --disable | --disable-reason test-evacuate | ${host} | nova-compute ]
20190402 06:18:01.874 - INFO - ${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute
20190402 06:18:01.874 - INFO - +------- END KW: BuiltIn.Catenate (1)
20190402 06:18:01.874 - INFO - +------- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 06:18:01.875 - INFO - +-------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:01.876 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:01.876 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 06:18:01.876 - INFO - +-------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:01.877 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute'.
20190402 06:18:02.511 - INFO - Command exited with return code 1.
20190402 06:18:02.511 - INFO - ${stdout} =
20190402 06:18:02.512 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:02.512 - INFO - ${rc} = 1
20190402 06:18:02.512 - INFO - +-------- END KW: SSHLibrary.Execute Command (636)
20190402 06:18:02.513 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:02.514 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:02.515 - INFO - +-------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:02.515 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:02.516 - INFO - +--------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:02.516 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:02.516 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:02.516 - INFO - +--------- END KW: BuiltIn.Fail (0)
20190402 06:18:02.516 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:02.516 - INFO - +------- END KW: OpenStack.Run OS Command (642)
20190402 06:18:02.516 - INFO - +------ END KW: OpenStack.Evacuate Instances (646)
20190402 06:18:02.516 - INFO - +----- END KW: BuiltIn.Run Keywords (646)
20190402 06:18:02.516 - INFO - +---- END KW: BuiltIn.Run Keyword If (648)
------------------------------------------------------------------------------
20190402 06:18:02.517 - INFO - +--- END TEST: Evacuate Instances From Hosts (651)
------------------------------------------------------------------------------
20190402 06:18:02.518 - INFO - +--- START TEARDOWN: BuiltIn.Run Keywords [ OpenStack.Openstack Cleanup All | Utils.Stx Suite TearDown ]
20190402 06:18:02.518 - INFO - +---- START KW: OpenStack.Openstack Cleanup All [ ]
20190402 06:18:02.518 - INFO - +----- START KW: OpenStack.Delete All Instances [ ]
20190402 06:18:02.518 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack server list ]
20190402 06:18:02.518 - INFO - ${openstack_cmd} = openstack server list
20190402 06:18:02.518 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:02.518 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:18:02.519 - INFO - ${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"
20190402 06:18:02.519 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:18:02.519 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:02.519 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:02.519 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:02.519 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:02.519 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:02.520 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server list|awk '{print$4}'|grep -v "Name"'.
20190402 06:18:03.100 - INFO - Command exited with return code 1.
20190402 06:18:03.100 - INFO - ${stdout} =
20190402 06:18:03.100 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:03.100 - INFO - ${rc} = 1
20190402 06:18:03.100 - INFO - +------- END KW: SSHLibrary.Execute Command (581)
20190402 06:18:03.100 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:03.101 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:03.101 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:03.101 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:03.101 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:03.102 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:03.102 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:03.102 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:03.102 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:03.102 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:03.102 - INFO - +------ END KW: OpenStack.Run OS Command (583)
20190402 06:18:03.102 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:03.103 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:03.103 - INFO - ${response} =
20190402 06:18:03.103 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:18:03.103 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:03.103 - INFO - @{res_in_list} = [ ]
20190402 06:18:03.103 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:03.103 - INFO - @{vm_list} = [ ]
20190402 06:18:03.104 - INFO - +------ END KW: Utils.Convert Response To List (2)
20190402 06:18:03.104 - INFO - +------ START KW: ${vm} IN [ @{vm_list} ] [ ]
20190402 06:18:03.104 - INFO - +------ END KW: ${vm} IN [ @{vm_list} ] (0)
20190402 06:18:03.104 - INFO - +----- END KW: OpenStack.Delete All Instances (586)
20190402 06:18:03.104 - INFO - +----- START KW: OpenStack.Delete All Images [ ]
20190402 06:18:03.104 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack image list ]
20190402 06:18:03.105 - INFO - ${openstack_cmd} = openstack image list
20190402 06:18:03.105 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:18:03.105 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "Cirros" ]
20190402 06:18:03.105 - INFO - ${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"
20190402 06:18:03.105 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:03.105 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:03.106 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:03.106 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:03.106 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:03.106 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:03.106 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.
20190402 06:18:03.767 - INFO - Command exited with return code 1.
20190402 06:18:03.768 - INFO - ${stdout} =
20190402 06:18:03.768 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:03.768 - INFO - ${rc} = 1
20190402 06:18:03.768 - INFO - +------- END KW: SSHLibrary.Execute Command (662)
20190402 06:18:03.768 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:03.770 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:03.770 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:03.770 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:03.771 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:03.772 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:03.772 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:03.772 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:03.772 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:03.773 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:03.773 - INFO - +------ END KW: OpenStack.Run OS Command (668)
20190402 06:18:03.773 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:03.773 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:03.773 - INFO - ${response} =
20190402 06:18:03.773 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:18:03.773 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:03.774 - INFO - @{res_in_list} = [ ]
20190402 06:18:03.774 - INFO - +------- END KW: String.Split String (1)
20190402 06:18:03.774 - INFO - @{image_list} = [ ]
20190402 06:18:03.774 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:03.774 - INFO - +------ START KW: ${image} IN [ @{image_list} ] [ ]
20190402 06:18:03.774 - INFO - +------ END KW: ${image} IN [ @{image_list} ] (0)
20190402 06:18:03.774 - INFO - +----- END KW: OpenStack.Delete All Images (670)
20190402 06:18:03.774 - INFO - +----- START KW: OpenStack.Delete All Flavors [ ]
20190402 06:18:03.774 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack flavor list ]
20190402 06:18:03.775 - INFO - ${openstack_cmd} = openstack flavor list
20190402 06:18:03.775 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:18:03.775 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "m1" ]
20190402 06:18:03.775 - INFO - ${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"
20190402 06:18:03.775 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:03.775 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:03.775 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:03.776 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:03.776 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 06:18:03.776 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:03.776 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.
20190402 06:18:04.406 - INFO - Command exited with return code 1.
20190402 06:18:04.406 - INFO - ${stdout} =
20190402 06:18:04.407 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:04.407 - INFO - ${rc} = 1
20190402 06:18:04.407 - INFO - +------- END KW: SSHLibrary.Execute Command (631)
20190402 06:18:04.408 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:04.409 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:04.409 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:04.410 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:04.411 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:04.411 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:04.411 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:04.411 - INFO - +-------- END KW: BuiltIn.Fail (0)
20190402 06:18:04.412 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:04.412 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:04.412 - INFO - +------ END KW: OpenStack.Run OS Command (637)
20190402 06:18:04.412 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:04.412 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:04.412 - INFO - ${response} =
20190402 06:18:04.412 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:18:04.413 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:04.413 - INFO - @{res_in_list} = [ ]
20190402 06:18:04.413 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:04.413 - INFO - @{flavor_list} = [ ]
20190402 06:18:04.413 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:04.413 - INFO - +------ START KW: ${flavor} IN [ @{flavor_list} ] [ ]
20190402 06:18:04.413 - INFO - +------ END KW: ${flavor} IN [ @{flavor_list} ] (0)
20190402 06:18:04.413 - INFO - +----- END KW: OpenStack.Delete All Flavors (639)
20190402 06:18:04.413 - INFO - +----- START KW: OpenStack.Delete All Networks [ ]
20190402 06:18:04.414 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 06:18:04.414 - INFO - ${openstack_cmd} = openstack network list
20190402 06:18:04.414 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:04.414 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "private" | grep -v "public" | grep -v "external" | grep -v "internal" ]
20190402 06:18:04.414 - INFO - ${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"
20190402 06:18:04.414 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:04.414 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:04.415 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:04.415 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:04.415 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:04.415 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:04.415 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.
20190402 06:18:04.995 - INFO - Command exited with return code 1.
20190402 06:18:04.996 - INFO - ${stdout} =
20190402 06:18:04.996 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:04.996 - INFO - ${rc} = 1
20190402 06:18:04.996 - INFO - +------- END KW: SSHLibrary.Execute Command (581)
20190402 06:18:04.997 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:04.999 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:04.999 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:04.999 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:05.000 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:05.001 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:05.001 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:05.001 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:05.001 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:05.001 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:05.001 - INFO - +------ END KW: OpenStack.Run OS Command (587)
20190402 06:18:05.001 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:05.001 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:05.002 - INFO - ${response} =
20190402 06:18:05.002 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:18:05.002 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:05.002 - INFO - @{res_in_list} = [ ]
20190402 06:18:05.002 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:05.002 - INFO - @{network_list} = [ ]
20190402 06:18:05.002 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:05.002 - INFO - +------ START KW: ${network} IN [ @{network_list} ] [ ]
20190402 06:18:05.002 - INFO - +------ END KW: ${network} IN [ @{network_list} ] (0)
20190402 06:18:05.003 - INFO - +----- END KW: OpenStack.Delete All Networks (589)
20190402 06:18:05.003 - INFO - +----- START KW: OpenStack.Delete All KeyPairs [ ]
20190402 06:18:05.003 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack keypair list ]
20190402 06:18:05.003 - INFO - ${openstack_cmd} = openstack keypair list
20190402 06:18:05.003 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:05.003 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "Name" ]
20190402 06:18:05.003 - INFO - ${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"
20190402 06:18:05.003 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:05.003 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:05.004 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:05.004 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:05.004 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:05.004 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:05.004 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack keypair list|awk '{print$2}'|grep -v "Name"'.
20190402 06:18:05.665 - INFO - Command exited with return code 1.
20190402 06:18:05.666 - INFO - ${stdout} =
20190402 06:18:05.666 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:05.666 - INFO - ${rc} = 1
20190402 06:18:05.666 - INFO - +------- END KW: SSHLibrary.Execute Command (662)
20190402 06:18:05.667 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:05.668 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:05.668 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:05.669 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:05.670 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:05.670 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:05.670 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:05.671 - INFO - +-------- END KW: BuiltIn.Fail (0)
20190402 06:18:05.671 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:05.671 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:05.671 - INFO - +------ END KW: OpenStack.Run OS Command (668)
20190402 06:18:05.671 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:05.671 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:05.671 - INFO - ${response} =
20190402 06:18:05.671 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:18:05.672 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:05.672 - INFO - @{res_in_list} = [ ]
20190402 06:18:05.672 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:05.672 - INFO - @{key_list} = [ ]
20190402 06:18:05.672 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:05.672 - INFO - +------ START KW: ${key} IN [ @{key_list} ] [ ]
20190402 06:18:05.672 - INFO - +------ END KW: ${key} IN [ @{key_list} ] (0)
20190402 06:18:05.672 - INFO - +----- END KW: OpenStack.Delete All KeyPairs (669)
20190402 06:18:05.672 - INFO - +----- START KW: OpenStack.Delete All Snapshots [ ]
20190402 06:18:05.672 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume snapshot list ]
20190402 06:18:05.673 - INFO - ${openstack_cmd} = openstack volume snapshot list
20190402 06:18:05.673 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:18:05.673 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:18:05.673 - INFO - ${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"
20190402 06:18:05.673 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:05.673 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:05.673 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:05.674 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:05.674 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 06:18:05.674 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:05.674 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.
20190402 06:18:06.254 - INFO - Command exited with return code 1.
20190402 06:18:06.255 - INFO - ${stdout} =
20190402 06:18:06.255 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:06.255 - INFO - ${rc} = 1
20190402 06:18:06.256 - INFO - +------- END KW: SSHLibrary.Execute Command (582)
20190402 06:18:06.256 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:06.258 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:06.258 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:06.258 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:06.259 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:06.260 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:06.260 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:06.260 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:06.260 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:06.260 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:06.260 - INFO - +------ END KW: OpenStack.Run OS Command (587)
20190402 06:18:06.260 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:06.260 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:06.261 - INFO - ${response} =
20190402 06:18:06.261 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:18:06.261 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:06.261 - INFO - @{res_in_list} = [ ]
20190402 06:18:06.261 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:06.261 - INFO - @{snapshot_list} = [ ]
20190402 06:18:06.261 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:06.261 - INFO - +------ START KW: ${snapshot} IN [ @{snapshot_list} ] [ ]
20190402 06:18:06.261 - INFO - +------ END KW: ${snapshot} IN [ @{snapshot_list} ] (0)
20190402 06:18:06.262 - INFO - +----- END KW: OpenStack.Delete All Snapshots (589)
20190402 06:18:06.262 - INFO - +----- START KW: OpenStack.Delete All Volumes [ ]
20190402 06:18:06.262 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume list ]
20190402 06:18:06.262 - INFO - ${openstack_cmd} = openstack volume list
20190402 06:18:06.262 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:06.262 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "ID" ]
20190402 06:18:06.262 - INFO - ${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"
20190402 06:18:06.262 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:06.262 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:06.263 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:06.263 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:06.263 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:06.263 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:06.263 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume list|awk '{print$2}'|grep -v "ID"'.
20190402 06:18:06.858 - INFO - Command exited with return code 1.
20190402 06:18:06.859 - INFO - ${stdout} =
20190402 06:18:06.859 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:06.859 - INFO - ${rc} = 1
20190402 06:18:06.859 - INFO - +------- END KW: SSHLibrary.Execute Command (596)
20190402 06:18:06.860 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:06.861 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:06.861 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:06.862 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:06.863 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:06.863 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:06.864 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:06.864 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:06.864 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:06.864 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:06.864 - INFO - +------ END KW: OpenStack.Run OS Command (602)
20190402 06:18:06.864 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:06.864 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:06.865 - INFO - ${response} =
20190402 06:18:06.865 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:18:06.865 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:06.865 - INFO - @{res_in_list} = [ ]
20190402 06:18:06.865 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:06.865 - INFO - @{volume_list} = [ ]
20190402 06:18:06.865 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:06.865 - INFO - +------ START KW: ${volume} IN [ @{volume_list} ] [ ]
20190402 06:18:06.865 - INFO - +------ END KW: ${volume} IN [ @{volume_list} ] (0)
20190402 06:18:06.865 - INFO - +----- END KW: OpenStack.Delete All Volumes (603)
20190402 06:18:06.865 - INFO - +----- START KW: OpenStack.Delete All Stacks [ ]
20190402 06:18:06.866 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack stack list ]
20190402 06:18:06.866 - INFO - ${openstack_cmd} = openstack stack list
20190402 06:18:06.866 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:06.866 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:18:06.866 - INFO - ${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"
20190402 06:18:06.866 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:06.866 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:06.867 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:06.867 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:06.867 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:06.867 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:06.867 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack list|awk '{print$4}'|grep -v "Name"'.
20190402 06:18:07.528 - INFO - Command exited with return code 1.
20190402 06:18:07.529 - INFO - ${stdout} =
20190402 06:18:07.529 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:07.529 - INFO - ${rc} = 1
20190402 06:18:07.530 - INFO - +------- END KW: SSHLibrary.Execute Command (662)
20190402 06:18:07.530 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:07.531 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:07.532 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:07.532 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:07.533 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:07.534 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:07.534 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:07.534 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:07.534 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:07.534 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:07.534 - INFO - +------ END KW: OpenStack.Run OS Command (668)
20190402 06:18:07.534 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:07.534 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:07.535 - INFO - ${response} =
20190402 06:18:07.535 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:18:07.535 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:07.535 - INFO - @{res_in_list} = [ ]
20190402 06:18:07.535 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:07.535 - INFO - @{stack_list} = [ ]
20190402 06:18:07.535 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:07.535 - INFO - +------ START KW: ${stack} IN [ @{stack_list} ] [ ]
20190402 06:18:07.535 - INFO - +------ END KW: ${stack} IN [ @{stack_list} ] (0)
20190402 06:18:07.535 - INFO - +----- END KW: OpenStack.Delete All Stacks (670)
20190402 06:18:07.536 - INFO - +---- END KW: OpenStack.Openstack Cleanup All (5017)
20190402 06:18:07.536 - INFO - +---- START KW: Utils.Stx Suite TearDown [ ]
20190402 06:18:07.536 - INFO - +----- START KW: SSHLibrary.Close All Connections [ ]
20190402 06:18:07.568 - INFO - +----- END KW: SSHLibrary.Close All Connections (32)
20190402 06:18:07.568 - INFO - +---- END KW: Utils.Stx Suite TearDown (32)
20190402 06:18:07.569 - INFO - +--- END TEARDOWN: BuiltIn.Run Keywords (5051)
==============================================================================
20190402 06:18:07.574 - INFO - +-- END SUITE: Sanity-Test.Sanity-OpenStack.03-Instance-From-Snapshot (16008)
==============================================================================
20190402 06:18:07.599 - INFO - +-- START SUITE: Sanity-Test.Sanity-OpenStack.04-Instance-From-Heat-Template [ ]
==============================================================================
20190402 06:18:07.600 - INFO - +--- START SETUP: Utils.Stx Suite Setup [ ]
20190402 06:18:07.600 - INFO - +---- START KW: Utils.Open Master Controller Connection [ ]
20190402 06:18:07.600 - INFO - +----- START KW: Utils.Connect to Controller Node [ ${CONFIG.credentials.STX_DEPLOY_USER_NAME} | ${CONFIG.credentials.STX_DEPLOY_USER_PSWD} | ${CONFIG.general.IP_UNIT_0_ADDRESS} ]
20190402 06:18:07.602 - INFO - +------ START KW: SSHLibrary.Open Connection [ ${ip_address} prompt=${prompt} | timeout=${timeout} ]
20190402 06:18:07.603 - INFO - ${controller_connection} = 1
20190402 06:18:07.603 - INFO - +------ END KW: SSHLibrary.Open Connection (1)
20190402 06:18:07.603 - INFO - +------ START KW: Utils.Flexible_SSH_Login [ ${user} | ${password} ]
20190402 06:18:07.603 - INFO - +------- START KW: BuiltIn.Get Length [ ${password} ]
20190402 06:18:07.604 - INFO - Length is 10
20190402 06:18:07.604 - INFO - ${pwd_length} = 10
20190402 06:18:07.604 - INFO - +------- END KW: BuiltIn.Get Length (1)
20190402 06:18:07.604 - INFO - +------- START KW: BuiltIn.Run Keyword And Return If [ ${pwd_length} > 0 | SSHLibrary.Login | ${user} | ${password} | delay=${delay} ]
20190402 06:18:07.605 - INFO - +-------- START KW: SSHLibrary.Login [ ${user} | ${password} | delay=${delay} ]
20190402 06:18:07.605 - INFO - Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.
20190402 06:18:08.694 - INFO - Read output: Last login: Tue Apr  2 12:06:36 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$
20190402 06:18:08.695 - INFO - +-------- END KW: SSHLibrary.Login (1091)
20190402 06:18:08.695 - INFO - Returning from the enclosing user keyword.
20190402 06:18:08.696 - INFO - +------- END KW: BuiltIn.Run Keyword And Return If (1092)
20190402 06:18:08.696 - INFO - +------ END KW: Utils.Flexible_SSH_Login (1093)
20190402 06:18:08.697 - INFO - ${master_controller_connection} = 1
20190402 06:18:08.697 - INFO - +----- END KW: Utils.Connect to Controller Node (1097)
20190402 06:18:08.698 - INFO - +----- START KW: BuiltIn.Set Suite Variable [ ${master_controller_connection} ]
20190402 06:18:08.698 - INFO - ${master_controller_connection} = 1
20190402 06:18:08.699 - INFO - +----- END KW: BuiltIn.Set Suite Variable (1)
20190402 06:18:08.699 - INFO - +----- START KW: BuiltIn.Log [ ${master_controller_connection} ]
20190402 06:18:08.699 - INFO - 1
20190402 06:18:08.700 - INFO - +----- END KW: BuiltIn.Log (1)
20190402 06:18:08.700 - INFO - +---- END KW: Utils.Open Master Controller Connection (1100)
20190402 06:18:08.700 - INFO - +---- START KW: Utils.Set Env Vars From Openrc [ ]
20190402 06:18:08.700 - INFO - +----- START KW: Utils.Run Command [ source /etc/platform/openrc | True ]
20190402 06:18:08.700 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:08.700 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:18:08.701 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:08.701 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:08.701 - INFO - &{result_dict} = { stdout= }
20190402 06:18:08.701 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 06:18:08.701 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:08.701 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:08.702 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:08.702 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:08.702 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:08.702 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (1)
20190402 06:18:08.702 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 06:18:08.702 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 06:18:08.702 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:08.707 - INFO - source /etc/platform/openrc
20190402 06:18:08.707 - INFO - +------ END KW: SSHLibrary.Write (5)
20190402 06:18:08.707 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:09.082 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:09.082 - INFO - ${output} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:09.082 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (375)
20190402 06:18:09.082 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:09.083 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:09.083 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:09.083 - INFO - +------- END KW: String.Get Line (0)
20190402 06:18:09.083 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:09.083 - INFO - ${clean_out} =
20190402 06:18:09.083 - INFO - +------- END KW: String.Remove String (0)
20190402 06:18:09.084 - INFO - ${output} =
20190402 06:18:09.084 - INFO - +------ END KW: Utils.Remove Prompt Line (2)
20190402 06:18:09.084 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 06:18:09.084 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:09.086 - INFO - echo $?
20190402 06:18:09.086 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 06:18:09.086 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:09.086 - INFO - 0
20190402 06:18:09.086 - INFO - ${rc} = 0
20190402 06:18:09.086 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 06:18:09.086 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:09.086 - INFO - 0
20190402 06:18:09.086 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 06:18:09.087 - INFO - ${rc} = 0
20190402 06:18:09.087 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 06:18:09.087 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:09.087 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:18:09.087 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:09.087 - INFO - +------ END KW: BuiltIn.Run Keyword If (0)
20190402 06:18:09.087 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:09.088 - INFO - +------ END KW: Collections.Set To Dictionary (1)
20190402 06:18:09.088 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:09.088 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout:
20190402 06:18:09.088 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 06:18:09.088 - INFO - +----- END KW: Utils.Run Command (388)
20190402 06:18:09.088 - INFO - +---- END KW: Utils.Set Env Vars From Openrc (388)
20190402 06:18:09.088 - INFO - +--- END SETUP: Utils.Stx Suite Setup (1488)
------------------------------------------------------------------------------
20190402 06:18:09.089 - INFO - +--- START TEST: Create Flavors for Instance [ ]
------------------------------------------------------------------------------
20190402 06:18:09.089 - INFO - +---- START KW: OpenStack.Create Flavor [ ${cirros_flavor_ram} | ${cirros_flavor_vcpus} | ${cirros_flavor_disk} | ${cirros_flavor_name} ]
20190402 06:18:09.089 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 06:18:09.090 - INFO - ${openstack_cmd} = openstack flavor create
20190402 06:18:09.090 - INFO - +----- END KW: BuiltIn.Set Variable (1)
20190402 06:18:09.090 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 06:18:09.090 - INFO - ${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small
20190402 06:18:09.090 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 06:18:09.090 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:09.090 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:09.091 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:09.091 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:18:09.091 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:09.091 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.
20190402 06:18:09.671 - INFO - Command exited with return code 1.
20190402 06:18:09.671 - INFO - ${stdout} =
20190402 06:18:09.671 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:09.672 - INFO - ${rc} = 1
20190402 06:18:09.672 - INFO - +------ END KW: SSHLibrary.Execute Command (581)
20190402 06:18:09.672 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:09.674 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:09.674 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:09.675 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:09.676 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:09.676 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:09.676 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:09.676 - INFO - +------- END KW: BuiltIn.Fail (0)
20190402 06:18:09.676 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:09.676 - INFO - +----- END KW: OpenStack.Run OS Command (586)
20190402 06:18:09.676 - INFO - +---- END KW: OpenStack.Create Flavor (587)
------------------------------------------------------------------------------
20190402 06:18:09.676 - INFO - +--- END TEST: Create Flavors for Instance (588)
------------------------------------------------------------------------------
20190402 06:18:09.677 - INFO - +--- START TEST: Create Images for Instances [ ]
------------------------------------------------------------------------------
20190402 06:18:09.677 - INFO - +---- START KW: SSHLibrary.Put File [ %{PYTHONPATH}/${cirros_image} | ${host_image_path}/${cirros_image} ]
20190402 06:18:09.715 - INFO - [chan 2] Opened sftp connection (server version 3)
20190402 06:18:09.723 - INFO - [chan 3] Opened sftp connection (server version 3)
20190402 06:18:09.724 - FAIL - There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.
20190402 06:18:09.724 - DEBUG - Traceback (most recent call last):
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1559, in put_file
    destination, mode, newline, scp)
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1619, in _run_command
    raise RuntimeError(e)
20190402 06:18:09.725 - INFO - +---- END KW: SSHLibrary.Put File (48)
------------------------------------------------------------------------------
20190402 06:18:09.725 - INFO - +--- END TEST: Create Images for Instances (48)
------------------------------------------------------------------------------
20190402 06:18:09.726 - INFO - +--- START TEST: Create Networks for Instance [ ]
------------------------------------------------------------------------------
20190402 06:18:09.727 - INFO - +---- START KW: OpenStack.Create Network [ ${network_name} ]
20190402 06:18:09.728 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack network create ]
20190402 06:18:09.728 - INFO - ${openstack_cmd} = openstack network create
20190402 06:18:09.728 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:18:09.729 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${network_name} | ${additional_args} ]
20190402 06:18:09.729 - INFO - ${cmd} = openstack network create network-1
20190402 06:18:09.730 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 06:18:09.730 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:09.732 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:09.732 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:09.733 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:18:09.733 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:09.734 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network create network-1 '.
20190402 06:18:10.365 - INFO - Command exited with return code 1.
20190402 06:18:10.366 - INFO - ${stdout} =
20190402 06:18:10.366 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:10.366 - INFO - ${rc} = 1
20190402 06:18:10.367 - INFO - +------ END KW: SSHLibrary.Execute Command (633)
20190402 06:18:10.367 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:10.369 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:10.369 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:10.369 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:10.370 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:10.371 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:10.371 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:10.371 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:18:10.371 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:10.371 - INFO - +----- END KW: OpenStack.Run OS Command (641)
20190402 06:18:10.371 - INFO - +---- END KW: OpenStack.Create Network (644)
------------------------------------------------------------------------------
20190402 06:18:10.371 - INFO - +--- END TEST: Create Networks for Instance (645)
------------------------------------------------------------------------------
20190402 06:18:10.372 - INFO - +--- START TEST: Create Instance Trough Stack [ ]
------------------------------------------------------------------------------
20190402 06:18:10.372 - INFO - +---- START KW: SSHLibrary.Put File [ %{PYTHONPATH}/${stack_template} | ${host_image_path}/${stack_template} ]
20190402 06:18:10.378 - INFO - '/home/mgperezi/duplex/stx-test-suite/Utils/stack_template.yml' -> '/home/wrsroot//Utils/stack_template.yml'
20190402 06:18:10.379 - INFO - +---- END KW: SSHLibrary.Put File (7)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:10.379 - INFO - +---- START KW: OpenStack.Get Net Id [ ${network_name} ]
20190402 06:18:10.379 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 06:18:10.379 - INFO - ${openstack_cmd} = openstack network list
20190402 06:18:10.380 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:18:10.380 - INFO - +----- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep "${network_name}" | awk '{print$2}' ]
20190402 06:18:10.380 - INFO - ${cmd} = openstack network list|grep "network-1"|awk '{print$2}'
20190402 06:18:10.380 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 06:18:10.380 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 06:18:10.381 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:10.381 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:10.381 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:18:10.381 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:10.381 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|grep "network-1"|awk '{print$2}''.
20190402 06:18:10.962 - INFO - Command exited with return code 0.
20190402 06:18:10.962 - INFO - ${stdout} =
20190402 06:18:10.962 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:10.963 - INFO - ${rc} = 0
20190402 06:18:10.963 - INFO - +------ END KW: SSHLibrary.Execute Command (582)
20190402 06:18:10.963 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:10.965 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 0}
20190402 06:18:10.965 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:10.965 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:10.966 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:10.967 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=0 }
20190402 06:18:10.967 - INFO - +----- END KW: OpenStack.Run OS Command (587)
20190402 06:18:10.967 - INFO - +----- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:10.967 - INFO - ${output} =
20190402 06:18:10.967 - INFO - +----- END KW: Collections.Get From Dictionary (0)
20190402 06:18:10.967 - INFO - +----- START KW: String.Split String [ ${output} | ${EMPTY} ]
20190402 06:18:10.967 - INFO - ${splitted_output} = []
20190402 06:18:10.967 - INFO - +----- END KW: String.Split String (0)
20190402 06:18:10.967 - INFO - +----- START KW: Collections.Get From List [ ${splitted_output} | 0 ]
20190402 06:18:10.968 - FAIL - IndexError: Given index 0 is out of the range 0--1.
20190402 06:18:10.968 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:10.968 - INFO - +----- END KW: Collections.Get From List (1)
20190402 06:18:10.968 - INFO - +---- END KW: OpenStack.Get Net Id (589)
------------------------------------------------------------------------------
20190402 06:18:10.968 - INFO - +--- END TEST: Create Instance Trough Stack (597)
------------------------------------------------------------------------------
20190402 06:18:10.969 - INFO - +--- START TEARDOWN: BuiltIn.Run Keywords [ OpenStack.Openstack Cleanup All | Utils.Stx Suite TearDown ]
20190402 06:18:10.969 - INFO - +---- START KW: OpenStack.Openstack Cleanup All [ ]
20190402 06:18:10.969 - INFO - +----- START KW: OpenStack.Delete All Instances [ ]
20190402 06:18:10.969 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack server list ]
20190402 06:18:10.969 - INFO - ${openstack_cmd} = openstack server list
20190402 06:18:10.969 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:10.970 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:18:10.970 - INFO - ${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"
20190402 06:18:10.970 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:10.970 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:10.970 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:10.971 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:10.971 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 06:18:10.971 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:10.971 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server list|awk '{print$4}'|grep -v "Name"'.
20190402 06:18:11.582 - INFO - Command exited with return code 1.
20190402 06:18:11.583 - INFO - ${stdout} =
20190402 06:18:11.583 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:11.583 - INFO - ${rc} = 1
20190402 06:18:11.583 - INFO - +------- END KW: SSHLibrary.Execute Command (612)
20190402 06:18:11.584 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:11.585 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:11.586 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:11.586 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:11.587 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:11.588 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:11.588 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:11.588 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:11.588 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:11.588 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:11.588 - INFO - +------ END KW: OpenStack.Run OS Command (618)
20190402 06:18:11.588 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:11.588 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:11.589 - INFO - ${response} =
20190402 06:18:11.589 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:18:11.589 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:11.589 - INFO - @{res_in_list} = [ ]
20190402 06:18:11.589 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:11.589 - INFO - @{vm_list} = [ ]
20190402 06:18:11.589 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:11.589 - INFO - +------ START KW: ${vm} IN [ @{vm_list} ] [ ]
20190402 06:18:11.589 - INFO - +------ END KW: ${vm} IN [ @{vm_list} ] (0)
20190402 06:18:11.590 - INFO - +----- END KW: OpenStack.Delete All Instances (620)
20190402 06:18:11.590 - INFO - +----- START KW: OpenStack.Delete All Images [ ]
20190402 06:18:11.590 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack image list ]
20190402 06:18:11.590 - INFO - ${openstack_cmd} = openstack image list
20190402 06:18:11.590 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:11.590 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "Cirros" ]
20190402 06:18:11.590 - INFO - ${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"
20190402 06:18:11.590 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:11.590 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:11.591 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:11.591 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:11.591 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:11.591 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:11.591 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.
20190402 06:18:12.186 - INFO - Command exited with return code 1.
20190402 06:18:12.187 - INFO - ${stdout} =
20190402 06:18:12.187 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:12.187 - INFO - ${rc} = 1
20190402 06:18:12.188 - INFO - +------- END KW: SSHLibrary.Execute Command (596)
20190402 06:18:12.188 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:12.190 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:12.190 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:12.190 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:12.191 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:12.192 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:12.192 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:12.192 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:12.192 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:12.192 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:12.192 - INFO - +------ END KW: OpenStack.Run OS Command (602)
20190402 06:18:12.192 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:12.193 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:12.193 - INFO - ${response} =
20190402 06:18:12.193 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:18:12.193 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:12.193 - INFO - @{res_in_list} = [ ]
20190402 06:18:12.193 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:12.193 - INFO - @{image_list} = [ ]
20190402 06:18:12.193 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:12.193 - INFO - +------ START KW: ${image} IN [ @{image_list} ] [ ]
20190402 06:18:12.194 - INFO - +------ END KW: ${image} IN [ @{image_list} ] (0)
20190402 06:18:12.194 - INFO - +----- END KW: OpenStack.Delete All Images (604)
20190402 06:18:12.194 - INFO - +----- START KW: OpenStack.Delete All Flavors [ ]
20190402 06:18:12.194 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack flavor list ]
20190402 06:18:12.194 - INFO - ${openstack_cmd} = openstack flavor list
20190402 06:18:12.194 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:12.194 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "m1" ]
20190402 06:18:12.194 - INFO - ${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"
20190402 06:18:12.194 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:12.195 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:12.195 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:12.195 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:12.195 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:12.195 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:12.196 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.
20190402 06:18:12.794 - INFO - Command exited with return code 1.
20190402 06:18:12.794 - INFO - ${stdout} =
20190402 06:18:12.795 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:12.795 - INFO - ${rc} = 1
20190402 06:18:12.795 - INFO - +------- END KW: SSHLibrary.Execute Command (600)
20190402 06:18:12.795 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:12.797 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:12.797 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:12.798 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:12.799 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:12.799 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:12.800 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:12.800 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:12.800 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:12.800 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:12.800 - INFO - +------ END KW: OpenStack.Run OS Command (605)
20190402 06:18:12.800 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:12.800 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:12.800 - INFO - ${response} =
20190402 06:18:12.801 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:18:12.801 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:12.801 - INFO - @{res_in_list} = [ ]
20190402 06:18:12.801 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:12.801 - INFO - @{flavor_list} = [ ]
20190402 06:18:12.801 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:12.801 - INFO - +------ START KW: ${flavor} IN [ @{flavor_list} ] [ ]
20190402 06:18:12.801 - INFO - +------ END KW: ${flavor} IN [ @{flavor_list} ] (0)
20190402 06:18:12.801 - INFO - +----- END KW: OpenStack.Delete All Flavors (607)
20190402 06:18:12.801 - INFO - +----- START KW: OpenStack.Delete All Networks [ ]
20190402 06:18:12.802 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 06:18:12.802 - INFO - ${openstack_cmd} = openstack network list
20190402 06:18:12.802 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:12.802 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "private" | grep -v "public" | grep -v "external" | grep -v "internal" ]
20190402 06:18:12.802 - INFO - ${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"
20190402 06:18:12.802 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:12.802 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:12.802 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:12.803 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:12.803 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 06:18:12.803 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:12.803 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.
20190402 06:18:13.448 - INFO - Command exited with return code 1.
20190402 06:18:13.449 - INFO - ${stdout} =
20190402 06:18:13.449 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:13.449 - INFO - ${rc} = 1
20190402 06:18:13.449 - INFO - +------- END KW: SSHLibrary.Execute Command (646)
20190402 06:18:13.450 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:13.451 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:13.451 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:13.452 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:13.453 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:13.453 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:13.454 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:13.454 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:13.454 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:13.454 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:13.454 - INFO - +------ END KW: OpenStack.Run OS Command (652)
20190402 06:18:13.454 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:13.454 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:13.455 - INFO - ${response} =
20190402 06:18:13.455 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:18:13.455 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:13.455 - INFO - @{res_in_list} = [ ]
20190402 06:18:13.455 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:13.455 - INFO - @{network_list} = [ ]
20190402 06:18:13.455 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:13.455 - INFO - +------ START KW: ${network} IN [ @{network_list} ] [ ]
20190402 06:18:13.455 - INFO - +------ END KW: ${network} IN [ @{network_list} ] (0)
20190402 06:18:13.455 - INFO - +----- END KW: OpenStack.Delete All Networks (654)
20190402 06:18:13.455 - INFO - +----- START KW: OpenStack.Delete All KeyPairs [ ]
20190402 06:18:13.456 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack keypair list ]
20190402 06:18:13.456 - INFO - ${openstack_cmd} = openstack keypair list
20190402 06:18:13.456 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:13.456 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "Name" ]
20190402 06:18:13.456 - INFO - ${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"
20190402 06:18:13.456 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:13.456 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:13.457 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:13.457 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:13.457 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:13.457 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:13.457 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack keypair list|awk '{print$2}'|grep -v "Name"'.
20190402 06:18:14.038 - INFO - Command exited with return code 1.
20190402 06:18:14.038 - INFO - ${stdout} =
20190402 06:18:14.039 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:14.039 - INFO - ${rc} = 1
20190402 06:18:14.039 - INFO - +------- END KW: SSHLibrary.Execute Command (582)
20190402 06:18:14.040 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:14.041 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:14.041 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:14.042 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:14.043 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:14.043 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:14.043 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:14.043 - INFO - +-------- END KW: BuiltIn.Fail (0)
20190402 06:18:14.043 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:14.043 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:14.043 - INFO - +------ END KW: OpenStack.Run OS Command (587)
20190402 06:18:14.043 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:14.044 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:14.044 - INFO - ${response} =
20190402 06:18:14.044 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:18:14.044 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:14.044 - INFO - @{res_in_list} = [ ]
20190402 06:18:14.044 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:14.044 - INFO - @{key_list} = [ ]
20190402 06:18:14.044 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:14.044 - INFO - +------ START KW: ${key} IN [ @{key_list} ] [ ]
20190402 06:18:14.045 - INFO - +------ END KW: ${key} IN [ @{key_list} ] (1)
20190402 06:18:14.045 - INFO - +----- END KW: OpenStack.Delete All KeyPairs (590)
20190402 06:18:14.045 - INFO - +----- START KW: OpenStack.Delete All Snapshots [ ]
20190402 06:18:14.045 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume snapshot list ]
20190402 06:18:14.045 - INFO - ${openstack_cmd} = openstack volume snapshot list
20190402 06:18:14.045 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:14.045 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:18:14.045 - INFO - ${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"
20190402 06:18:14.045 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:14.046 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:14.046 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:14.046 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:14.046 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:14.046 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:14.046 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.
20190402 06:18:14.641 - INFO - Command exited with return code 1.
20190402 06:18:14.641 - INFO - ${stdout} =
20190402 06:18:14.642 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:14.642 - INFO - ${rc} = 1
20190402 06:18:14.642 - INFO - +------- END KW: SSHLibrary.Execute Command (596)
20190402 06:18:14.642 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:14.644 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:14.644 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:14.644 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:14.645 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:14.646 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:14.646 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:14.646 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:14.646 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:14.647 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:14.647 - INFO - +------ END KW: OpenStack.Run OS Command (601)
20190402 06:18:14.647 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:14.647 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:14.647 - INFO - ${response} =
20190402 06:18:14.647 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:18:14.647 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:14.648 - INFO - @{res_in_list} = [ ]
20190402 06:18:14.648 - INFO - +------- END KW: String.Split String (1)
20190402 06:18:14.648 - INFO - @{snapshot_list} = [ ]
20190402 06:18:14.648 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:14.648 - INFO - +------ START KW: ${snapshot} IN [ @{snapshot_list} ] [ ]
20190402 06:18:14.648 - INFO - +------ END KW: ${snapshot} IN [ @{snapshot_list} ] (0)
20190402 06:18:14.648 - INFO - +----- END KW: OpenStack.Delete All Snapshots (603)
20190402 06:18:14.648 - INFO - +----- START KW: OpenStack.Delete All Volumes [ ]
20190402 06:18:14.648 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume list ]
20190402 06:18:14.649 - INFO - ${openstack_cmd} = openstack volume list
20190402 06:18:14.649 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:18:14.649 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "ID" ]
20190402 06:18:14.649 - INFO - ${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"
20190402 06:18:14.649 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:14.649 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:14.649 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:14.650 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:14.650 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 06:18:14.650 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:14.650 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume list|awk '{print$2}'|grep -v "ID"'.
20190402 06:18:15.295 - INFO - Command exited with return code 1.
20190402 06:18:15.296 - INFO - ${stdout} =
20190402 06:18:15.296 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:15.296 - INFO - ${rc} = 1
20190402 06:18:15.296 - INFO - +------- END KW: SSHLibrary.Execute Command (646)
20190402 06:18:15.297 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:15.299 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:15.299 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:15.299 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:15.300 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:15.301 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:15.301 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:15.301 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:15.301 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:15.301 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:15.301 - INFO - +------ END KW: OpenStack.Run OS Command (652)
20190402 06:18:15.301 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:15.301 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:15.302 - INFO - ${response} =
20190402 06:18:15.302 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:18:15.302 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:15.302 - INFO - @{res_in_list} = [ ]
20190402 06:18:15.302 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:15.302 - INFO - @{volume_list} = [ ]
20190402 06:18:15.302 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:15.302 - INFO - +------ START KW: ${volume} IN [ @{volume_list} ] [ ]
20190402 06:18:15.302 - INFO - +------ END KW: ${volume} IN [ @{volume_list} ] (0)
20190402 06:18:15.302 - INFO - +----- END KW: OpenStack.Delete All Volumes (654)
20190402 06:18:15.303 - INFO - +----- START KW: OpenStack.Delete All Stacks [ ]
20190402 06:18:15.303 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack stack list ]
20190402 06:18:15.303 - INFO - ${openstack_cmd} = openstack stack list
20190402 06:18:15.303 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:15.303 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:18:15.303 - INFO - ${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"
20190402 06:18:15.303 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:15.303 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:15.304 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:15.304 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:15.304 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:15.304 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:15.304 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack list|awk '{print$4}'|grep -v "Name"'.
20190402 06:18:15.884 - INFO - Command exited with return code 1.
20190402 06:18:15.885 - INFO - ${stdout} =
20190402 06:18:15.885 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:15.885 - INFO - ${rc} = 1
20190402 06:18:15.885 - INFO - +------- END KW: SSHLibrary.Execute Command (581)
20190402 06:18:15.886 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:15.887 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:15.888 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:15.888 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:15.889 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:15.890 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:15.890 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:15.890 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:15.890 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:15.890 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:15.890 - INFO - +------ END KW: OpenStack.Run OS Command (587)
20190402 06:18:15.890 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:15.890 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:15.891 - INFO - ${response} =
20190402 06:18:15.891 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:18:15.891 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:15.891 - INFO - @{res_in_list} = [ ]
20190402 06:18:15.891 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:15.891 - INFO - @{stack_list} = [ ]
20190402 06:18:15.891 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:15.891 - INFO - +------ START KW: ${stack} IN [ @{stack_list} ] [ ]
20190402 06:18:15.891 - INFO - +------ END KW: ${stack} IN [ @{stack_list} ] (0)
20190402 06:18:15.891 - INFO - +----- END KW: OpenStack.Delete All Stacks (588)
20190402 06:18:15.892 - INFO - +---- END KW: OpenStack.Openstack Cleanup All (4922)
20190402 06:18:15.892 - INFO - +---- START KW: Utils.Stx Suite TearDown [ ]
20190402 06:18:15.892 - INFO - +----- START KW: SSHLibrary.Close All Connections [ ]
20190402 06:18:15.924 - INFO - +----- END KW: SSHLibrary.Close All Connections (32)
20190402 06:18:15.924 - INFO - +---- END KW: Utils.Stx Suite TearDown (32)
20190402 06:18:15.925 - INFO - +--- END TEARDOWN: BuiltIn.Run Keywords (4955)
==============================================================================
20190402 06:18:15.926 - INFO - +-- END SUITE: Sanity-Test.Sanity-OpenStack.04-Instance-From-Heat-Template (8351)
==============================================================================
20190402 06:18:15.952 - INFO - +-- START SUITE: Sanity-Test.Sanity-OpenStack.05-Measurements-For-Metric [ ]
==============================================================================
20190402 06:18:15.952 - INFO - +--- START SETUP: Utils.Stx Suite Setup [ ]
20190402 06:18:15.953 - INFO - +---- START KW: Utils.Open Master Controller Connection [ ]
20190402 06:18:15.953 - INFO - +----- START KW: Utils.Connect to Controller Node [ ${CONFIG.credentials.STX_DEPLOY_USER_NAME} | ${CONFIG.credentials.STX_DEPLOY_USER_PSWD} | ${CONFIG.general.IP_UNIT_0_ADDRESS} ]
20190402 06:18:15.954 - INFO - +------ START KW: SSHLibrary.Open Connection [ ${ip_address} prompt=${prompt} | timeout=${timeout} ]
20190402 06:18:15.955 - INFO - ${controller_connection} = 1
20190402 06:18:15.955 - INFO - +------ END KW: SSHLibrary.Open Connection (1)
20190402 06:18:15.955 - INFO - +------ START KW: Utils.Flexible_SSH_Login [ ${user} | ${password} ]
20190402 06:18:15.956 - INFO - +------- START KW: BuiltIn.Get Length [ ${password} ]
20190402 06:18:15.956 - INFO - Length is 10
20190402 06:18:15.956 - INFO - ${pwd_length} = 10
20190402 06:18:15.956 - INFO - +------- END KW: BuiltIn.Get Length (0)
20190402 06:18:15.956 - INFO - +------- START KW: BuiltIn.Run Keyword And Return If [ ${pwd_length} > 0 | SSHLibrary.Login | ${user} | ${password} | delay=${delay} ]
20190402 06:18:15.957 - INFO - +-------- START KW: SSHLibrary.Login [ ${user} | ${password} | delay=${delay} ]
20190402 06:18:15.957 - INFO - Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.
20190402 06:18:17.046 - INFO - Read output: Last login: Tue Apr  2 12:06:52 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$
20190402 06:18:17.047 - INFO - +-------- END KW: SSHLibrary.Login (1089)
20190402 06:18:17.047 - INFO - Returning from the enclosing user keyword.
20190402 06:18:17.047 - INFO - +------- END KW: BuiltIn.Run Keyword And Return If (1091)
20190402 06:18:17.048 - INFO - +------ END KW: Utils.Flexible_SSH_Login (1093)
20190402 06:18:17.048 - INFO - ${master_controller_connection} = 1
20190402 06:18:17.049 - INFO - +----- END KW: Utils.Connect to Controller Node (1095)
20190402 06:18:17.049 - INFO - +----- START KW: BuiltIn.Set Suite Variable [ ${master_controller_connection} ]
20190402 06:18:17.050 - INFO - ${master_controller_connection} = 1
20190402 06:18:17.050 - INFO - +----- END KW: BuiltIn.Set Suite Variable (1)
20190402 06:18:17.050 - INFO - +----- START KW: BuiltIn.Log [ ${master_controller_connection} ]
20190402 06:18:17.051 - INFO - 1
20190402 06:18:17.051 - INFO - +----- END KW: BuiltIn.Log (1)
20190402 06:18:17.051 - INFO - +---- END KW: Utils.Open Master Controller Connection (1098)
20190402 06:18:17.052 - INFO - +---- START KW: Utils.Set Env Vars From Openrc [ ]
20190402 06:18:17.052 - INFO - +----- START KW: Utils.Run Command [ source /etc/platform/openrc | True ]
20190402 06:18:17.052 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:17.052 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:18:17.052 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:17.053 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:17.053 - INFO - &{result_dict} = { stdout= }
20190402 06:18:17.053 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 06:18:17.053 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:17.053 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:17.053 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:17.054 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 06:18:17.054 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:17.054 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (2)
20190402 06:18:17.054 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 06:18:17.054 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 06:18:17.054 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:17.060 - INFO - source /etc/platform/openrc
20190402 06:18:17.060 - INFO - +------ END KW: SSHLibrary.Write (6)
20190402 06:18:17.060 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:17.436 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:17.436 - INFO - ${output} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:17.436 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (376)
20190402 06:18:17.436 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:17.437 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:17.437 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:17.437 - INFO - +------- END KW: String.Get Line (0)
20190402 06:18:17.437 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:17.438 - INFO - ${clean_out} =
20190402 06:18:17.438 - INFO - +------- END KW: String.Remove String (1)
20190402 06:18:17.438 - INFO - ${output} =
20190402 06:18:17.438 - INFO - +------ END KW: Utils.Remove Prompt Line (2)
20190402 06:18:17.438 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 06:18:17.438 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:17.440 - INFO - echo $?
20190402 06:18:17.440 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 06:18:17.440 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:17.440 - INFO - 0
20190402 06:18:17.440 - INFO - ${rc} = 0
20190402 06:18:17.440 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 06:18:17.440 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:17.440 - INFO - 0
20190402 06:18:17.441 - INFO - +------- END KW: BuiltIn.Log (1)
20190402 06:18:17.441 - INFO - ${rc} = 0
20190402 06:18:17.441 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 06:18:17.441 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:17.441 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:18:17.442 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:17.442 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:17.442 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:17.442 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 06:18:17.442 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:17.442 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout:
20190402 06:18:17.442 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 06:18:17.442 - INFO - +----- END KW: Utils.Run Command (390)
20190402 06:18:17.442 - INFO - +---- END KW: Utils.Set Env Vars From Openrc (390)
20190402 06:18:17.443 - INFO - +--- END SETUP: Utils.Stx Suite Setup (1490)
------------------------------------------------------------------------------
20190402 06:18:17.443 - INFO - +--- START TEST: Create Image For Metrics [ ]
------------------------------------------------------------------------------
20190402 06:18:17.443 - INFO - +---- START KW: SSHLibrary.Put File [ %{PYTHONPATH}/${cirros_image} | ${host_image_path}/${cirros_image} ]
20190402 06:18:17.450 - INFO - [chan 1] Opened sftp connection (server version 3)
20190402 06:18:17.458 - INFO - [chan 2] Opened sftp connection (server version 3)
20190402 06:18:17.459 - FAIL - There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.
20190402 06:18:17.459 - DEBUG - Traceback (most recent call last):
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1559, in put_file
    destination, mode, newline, scp)
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1619, in _run_command
    raise RuntimeError(e)
20190402 06:18:17.459 - INFO - +---- END KW: SSHLibrary.Put File (16)
------------------------------------------------------------------------------
20190402 06:18:17.459 - INFO - +--- END TEST: Create Image For Metrics (16)
------------------------------------------------------------------------------
20190402 06:18:17.459 - INFO - +--- START TEST: Update Image Name [ ]
------------------------------------------------------------------------------
20190402 06:18:17.460 - INFO - +---- START KW: BuiltIn.Catenate [ openstack image show | ${cirros_image_name} ]
20190402 06:18:17.460 - INFO - ${openstack_cmd} = openstack image show cirros
20190402 06:18:17.460 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:17.460 - INFO - +---- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep "created_at" | awk '{print $4}' ]
20190402 06:18:17.460 - INFO - ${cmd} = openstack image show cirros|grep "created_at"|awk '{print $4}'
20190402 06:18:17.460 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:17.460 - INFO - +---- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 06:18:17.461 - INFO - +----- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:17.461 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:17.461 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:18:17.461 - INFO - +----- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:17.461 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image show cirros|grep "created_at"|awk '{print $4}''.
20190402 06:18:18.041 - INFO - Command exited with return code 0.
20190402 06:18:18.042 - INFO - ${stdout} =
20190402 06:18:18.042 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:18.042 - INFO - ${rc} = 0
20190402 06:18:18.042 - INFO - +----- END KW: SSHLibrary.Execute Command (581)
20190402 06:18:18.043 - INFO - +----- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:18.044 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 0}
20190402 06:18:18.045 - INFO - +----- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:18.045 - INFO - +----- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:18.046 - INFO - +----- END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:18.047 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=0 }
20190402 06:18:18.047 - INFO - +---- END KW: OpenStack.Run OS Command (587)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:18.047 - INFO - +---- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:18.047 - INFO - ${created_at} =
20190402 06:18:18.047 - INFO - +---- END KW: Collections.Get From Dictionary (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:18.047 - INFO - +---- START KW: BuiltIn.Set Variable [ openstack image set ]
20190402 06:18:18.047 - INFO - ${openstack_cmd} = openstack image set
20190402 06:18:18.047 - INFO - +---- END KW: BuiltIn.Set Variable (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:18.048 - INFO - +---- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --name ${cirros_image_name_tmp} | ${cirros_image_name} ]
20190402 06:18:18.048 - INFO - ${cmd} = openstack image set --name cirros-tmp cirros
20190402 06:18:18.048 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:18.048 - INFO - +---- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:18.049 - INFO - +----- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:18.049 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:18.049 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:18:18.049 - INFO - +----- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:18.049 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image set --name cirros-tmp cirros'.
20190402 06:18:18.686 - INFO - Command exited with return code 1.
20190402 06:18:18.687 - INFO - ${stdout} =
20190402 06:18:18.687 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:18.687 - INFO - ${rc} = 1
20190402 06:18:18.687 - INFO - +----- END KW: SSHLibrary.Execute Command (638)
20190402 06:18:18.688 - INFO - +----- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:18.689 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:18.689 - INFO - +----- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:18.690 - INFO - +----- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:18.691 - INFO - +------ START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:18.691 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:18.692 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:18.692 - INFO - +------ END KW: BuiltIn.Fail (1)
20190402 06:18:18.692 - INFO - +----- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:18.692 - INFO - +---- END KW: OpenStack.Run OS Command (644)
------------------------------------------------------------------------------
20190402 06:18:18.692 - INFO - +--- END TEST: Update Image Name (1233)
------------------------------------------------------------------------------
20190402 06:18:18.692 - INFO - +--- START TEST: Update Image Disk Ram Size [ ]
------------------------------------------------------------------------------
20190402 06:18:18.693 - INFO - +---- START KW: BuiltIn.Catenate [ openstack image show | ${cirros_image_name} ]
20190402 06:18:18.693 - INFO - ${openstack_cmd} = openstack image show cirros
20190402 06:18:18.693 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:18.693 - INFO - +---- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep "updated_at" | awk '{print $4}' ]
20190402 06:18:18.693 - INFO - ${cmd} = openstack image show cirros|grep "updated_at"|awk '{print $4}'
20190402 06:18:18.693 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:18.694 - INFO - +---- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 06:18:18.694 - INFO - +----- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:18.694 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:18.694 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:18:18.694 - INFO - +----- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:18.695 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image show cirros|grep "updated_at"|awk '{print $4}''.
20190402 06:18:19.324 - INFO - Command exited with return code 0.
20190402 06:18:19.325 - INFO - ${stdout} =
20190402 06:18:19.325 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:19.325 - INFO - ${rc} = 0
20190402 06:18:19.326 - INFO - +----- END KW: SSHLibrary.Execute Command (631)
20190402 06:18:19.326 - INFO - +----- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:19.327 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 0}
20190402 06:18:19.328 - INFO - +----- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:19.328 - INFO - +----- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:19.329 - INFO - +----- END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:19.329 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=0 }
20190402 06:18:19.330 - INFO - +---- END KW: OpenStack.Run OS Command (636)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:19.330 - INFO - +---- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:19.330 - INFO - ${updated_at} =
20190402 06:18:19.330 - INFO - +---- END KW: Collections.Get From Dictionary (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:19.330 - INFO - +---- START KW: BuiltIn.Set Variable [ openstack image set ]
20190402 06:18:19.330 - INFO - ${openstack_cmd} = openstack image set
20190402 06:18:19.330 - INFO - +---- END KW: BuiltIn.Set Variable (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:19.330 - INFO - +---- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --min-disk ${image_disk_size} | ${cirros_image_name} ]
20190402 06:18:19.331 - INFO - ${cmd} = openstack image set --min-disk 10 cirros
20190402 06:18:19.331 - INFO - +---- END KW: BuiltIn.Catenate (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:19.331 - INFO - +---- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:19.331 - INFO - +----- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:19.331 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:19.332 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:18:19.332 - INFO - +----- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:19.332 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image set --min-disk 10 cirros'.
20190402 06:18:19.912 - INFO - Command exited with return code 1.
20190402 06:18:19.912 - INFO - ${stdout} =
20190402 06:18:19.912 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:19.913 - INFO - ${rc} = 1
20190402 06:18:19.913 - INFO - +----- END KW: SSHLibrary.Execute Command (581)
20190402 06:18:19.913 - INFO - +----- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:19.914 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:19.915 - INFO - +----- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:19.915 - INFO - +----- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:19.916 - INFO - +------ START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:19.917 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:19.917 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:19.917 - INFO - +------ END KW: BuiltIn.Fail (1)
20190402 06:18:19.917 - INFO - +----- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:19.917 - INFO - +---- END KW: OpenStack.Run OS Command (586)
------------------------------------------------------------------------------
20190402 06:18:19.918 - INFO - +--- END TEST: Update Image Disk Ram Size (1226)
------------------------------------------------------------------------------
20190402 06:18:19.918 - INFO - +--- START TEARDOWN: BuiltIn.Run Keywords [ OpenStack.Openstack Cleanup All | Utils.Stx Suite TearDown ]
20190402 06:18:19.918 - INFO - +---- START KW: OpenStack.Openstack Cleanup All [ ]
20190402 06:18:19.919 - INFO - +----- START KW: OpenStack.Delete All Instances [ ]
20190402 06:18:19.919 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack server list ]
20190402 06:18:19.919 - INFO - ${openstack_cmd} = openstack server list
20190402 06:18:19.919 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:19.919 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:18:19.919 - INFO - ${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"
20190402 06:18:19.919 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:19.920 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:19.921 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:19.921 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:19.921 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:19.921 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:19.921 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server list|awk '{print$4}'|grep -v "Name"'.
20190402 06:18:20.516 - INFO - Command exited with return code 1.
20190402 06:18:20.516 - INFO - ${stdout} =
20190402 06:18:20.517 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:20.517 - INFO - ${rc} = 1
20190402 06:18:20.517 - INFO - +------- END KW: SSHLibrary.Execute Command (596)
20190402 06:18:20.518 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:20.519 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:20.519 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:20.520 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:20.520 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:20.521 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:20.521 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:20.521 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:20.521 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:20.521 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:20.521 - INFO - +------ END KW: OpenStack.Run OS Command (601)
20190402 06:18:20.521 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:20.522 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:20.522 - INFO - ${response} =
20190402 06:18:20.522 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:18:20.522 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:20.522 - INFO - @{res_in_list} = [ ]
20190402 06:18:20.522 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:20.522 - INFO - @{vm_list} = [ ]
20190402 06:18:20.522 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:20.522 - INFO - +------ START KW: ${vm} IN [ @{vm_list} ] [ ]
20190402 06:18:20.522 - INFO - +------ END KW: ${vm} IN [ @{vm_list} ] (0)
20190402 06:18:20.523 - INFO - +----- END KW: OpenStack.Delete All Instances (604)
20190402 06:18:20.523 - INFO - +----- START KW: OpenStack.Delete All Images [ ]
20190402 06:18:20.523 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack image list ]
20190402 06:18:20.523 - INFO - ${openstack_cmd} = openstack image list
20190402 06:18:20.523 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:20.523 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "Cirros" ]
20190402 06:18:20.523 - INFO - ${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"
20190402 06:18:20.523 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:20.523 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:20.524 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:20.524 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:20.524 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:20.524 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:20.524 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.
20190402 06:18:21.135 - INFO - Command exited with return code 1.
20190402 06:18:21.135 - INFO - ${stdout} =
20190402 06:18:21.136 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:21.136 - INFO - ${rc} = 1
20190402 06:18:21.136 - INFO - +------- END KW: SSHLibrary.Execute Command (612)
20190402 06:18:21.136 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:21.138 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:21.138 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:21.139 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:21.140 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:21.140 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:21.140 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:21.140 - INFO - +-------- END KW: BuiltIn.Fail (0)
20190402 06:18:21.140 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:21.140 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:21.141 - INFO - +------ END KW: OpenStack.Run OS Command (618)
20190402 06:18:21.141 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:21.141 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:21.141 - INFO - ${response} =
20190402 06:18:21.141 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:18:21.141 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:21.142 - INFO - @{res_in_list} = [ ]
20190402 06:18:21.142 - INFO - +------- END KW: String.Split String (1)
20190402 06:18:21.142 - INFO - @{image_list} = [ ]
20190402 06:18:21.142 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:21.142 - INFO - +------ START KW: ${image} IN [ @{image_list} ] [ ]
20190402 06:18:21.142 - INFO - +------ END KW: ${image} IN [ @{image_list} ] (0)
20190402 06:18:21.142 - INFO - +----- END KW: OpenStack.Delete All Images (619)
20190402 06:18:21.142 - INFO - +----- START KW: OpenStack.Delete All Flavors [ ]
20190402 06:18:21.143 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack flavor list ]
20190402 06:18:21.143 - INFO - ${openstack_cmd} = openstack flavor list
20190402 06:18:21.143 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:21.143 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "m1" ]
20190402 06:18:21.143 - INFO - ${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"
20190402 06:18:21.143 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:21.143 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:21.144 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:21.144 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:21.144 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:21.144 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:21.144 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.
20190402 06:18:21.739 - INFO - Command exited with return code 1.
20190402 06:18:21.740 - INFO - ${stdout} =
20190402 06:18:21.740 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:21.740 - INFO - ${rc} = 1
20190402 06:18:21.740 - INFO - +------- END KW: SSHLibrary.Execute Command (596)
20190402 06:18:21.741 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:21.742 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:21.742 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:21.743 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:21.744 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:21.745 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:21.745 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:21.745 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:21.745 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:21.745 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:21.745 - INFO - +------ END KW: OpenStack.Run OS Command (602)
20190402 06:18:21.745 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:21.745 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:21.746 - INFO - ${response} =
20190402 06:18:21.746 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:18:21.746 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:21.746 - INFO - @{res_in_list} = [ ]
20190402 06:18:21.746 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:21.746 - INFO - @{flavor_list} = [ ]
20190402 06:18:21.746 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:21.746 - INFO - +------ START KW: ${flavor} IN [ @{flavor_list} ] [ ]
20190402 06:18:21.746 - INFO - +------ END KW: ${flavor} IN [ @{flavor_list} ] (0)
20190402 06:18:21.746 - INFO - +----- END KW: OpenStack.Delete All Flavors (604)
20190402 06:18:21.746 - INFO - +----- START KW: OpenStack.Delete All Networks [ ]
20190402 06:18:21.747 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 06:18:21.747 - INFO - ${openstack_cmd} = openstack network list
20190402 06:18:21.747 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:21.747 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "private" | grep -v "public" | grep -v "external" | grep -v "internal" ]
20190402 06:18:21.747 - INFO - ${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"
20190402 06:18:21.747 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:21.747 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:21.748 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:21.748 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:21.748 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:21.748 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:21.748 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.
20190402 06:18:22.343 - INFO - Command exited with return code 1.
20190402 06:18:22.343 - INFO - ${stdout} =
20190402 06:18:22.343 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:22.344 - INFO - ${rc} = 1
20190402 06:18:22.344 - INFO - +------- END KW: SSHLibrary.Execute Command (596)
20190402 06:18:22.344 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:22.346 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:22.346 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:22.346 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:22.347 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:22.348 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:22.348 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:22.348 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:22.348 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:22.348 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:22.348 - INFO - +------ END KW: OpenStack.Run OS Command (601)
20190402 06:18:22.348 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:22.348 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:22.349 - INFO - ${response} =
20190402 06:18:22.349 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:18:22.349 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:22.349 - INFO - @{res_in_list} = [ ]
20190402 06:18:22.349 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:22.349 - INFO - @{network_list} = [ ]
20190402 06:18:22.349 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:22.349 - INFO - +------ START KW: ${network} IN [ @{network_list} ] [ ]
20190402 06:18:22.349 - INFO - +------ END KW: ${network} IN [ @{network_list} ] (0)
20190402 06:18:22.350 - INFO - +----- END KW: OpenStack.Delete All Networks (603)
20190402 06:18:22.350 - INFO - +----- START KW: OpenStack.Delete All KeyPairs [ ]
20190402 06:18:22.350 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack keypair list ]
20190402 06:18:22.350 - INFO - ${openstack_cmd} = openstack keypair list
20190402 06:18:22.350 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:22.350 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "Name" ]
20190402 06:18:22.350 - INFO - ${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"
20190402 06:18:22.350 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:22.350 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:22.351 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:22.351 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:22.351 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:22.351 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:22.352 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack keypair list|awk '{print$2}'|grep -v "Name"'.
20190402 06:18:22.962 - INFO - Command exited with return code 1.
20190402 06:18:22.963 - INFO - ${stdout} =
20190402 06:18:22.963 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:22.963 - INFO - ${rc} = 1
20190402 06:18:22.964 - INFO - +------- END KW: SSHLibrary.Execute Command (613)
20190402 06:18:22.964 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:22.966 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:22.966 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:22.966 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:22.967 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:22.968 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:22.968 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:22.968 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:22.968 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:22.968 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:22.968 - INFO - +------ END KW: OpenStack.Run OS Command (618)
20190402 06:18:22.968 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:22.968 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:22.969 - INFO - ${response} =
20190402 06:18:22.969 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:18:22.969 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:22.969 - INFO - @{res_in_list} = [ ]
20190402 06:18:22.969 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:22.969 - INFO - @{key_list} = [ ]
20190402 06:18:22.969 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:22.969 - INFO - +------ START KW: ${key} IN [ @{key_list} ] [ ]
20190402 06:18:22.969 - INFO - +------ END KW: ${key} IN [ @{key_list} ] (0)
20190402 06:18:22.969 - INFO - +----- END KW: OpenStack.Delete All KeyPairs (619)
20190402 06:18:22.969 - INFO - +----- START KW: OpenStack.Delete All Snapshots [ ]
20190402 06:18:22.970 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume snapshot list ]
20190402 06:18:22.970 - INFO - ${openstack_cmd} = openstack volume snapshot list
20190402 06:18:22.970 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:22.970 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:18:22.970 - INFO - ${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"
20190402 06:18:22.970 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:22.970 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:22.971 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:22.971 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:22.971 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:22.971 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:22.971 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.
20190402 06:18:23.632 - INFO - Command exited with return code 1.
20190402 06:18:23.632 - INFO - ${stdout} =
20190402 06:18:23.633 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:23.633 - INFO - ${rc} = 1
20190402 06:18:23.633 - INFO - +------- END KW: SSHLibrary.Execute Command (662)
20190402 06:18:23.634 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:23.635 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:23.636 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:23.636 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:23.637 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:23.638 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:23.638 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:23.638 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:23.638 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:23.638 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:23.638 - INFO - +------ END KW: OpenStack.Run OS Command (668)
20190402 06:18:23.638 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:23.638 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:23.639 - INFO - ${response} =
20190402 06:18:23.639 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:18:23.639 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:23.639 - INFO - @{res_in_list} = [ ]
20190402 06:18:23.639 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:23.639 - INFO - @{snapshot_list} = [ ]
20190402 06:18:23.639 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:23.639 - INFO - +------ START KW: ${snapshot} IN [ @{snapshot_list} ] [ ]
20190402 06:18:23.639 - INFO - +------ END KW: ${snapshot} IN [ @{snapshot_list} ] (0)
20190402 06:18:23.639 - INFO - +----- END KW: OpenStack.Delete All Snapshots (670)
20190402 06:18:23.639 - INFO - +----- START KW: OpenStack.Delete All Volumes [ ]
20190402 06:18:23.640 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume list ]
20190402 06:18:23.640 - INFO - ${openstack_cmd} = openstack volume list
20190402 06:18:23.640 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:23.640 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "ID" ]
20190402 06:18:23.640 - INFO - ${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"
20190402 06:18:23.640 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:23.640 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:23.641 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:23.641 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:23.641 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:23.641 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:23.641 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume list|awk '{print$2}'|grep -v "ID"'.
20190402 06:18:24.271 - INFO - Command exited with return code 1.
20190402 06:18:24.272 - INFO - ${stdout} =
20190402 06:18:24.272 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:24.272 - INFO - ${rc} = 1
20190402 06:18:24.273 - INFO - +------- END KW: SSHLibrary.Execute Command (632)
20190402 06:18:24.273 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:24.275 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:24.275 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:24.276 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:24.276 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:24.277 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:24.277 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:24.277 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:24.277 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:24.277 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:24.277 - INFO - +------ END KW: OpenStack.Run OS Command (637)
20190402 06:18:24.277 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:24.278 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:24.278 - INFO - ${response} =
20190402 06:18:24.278 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 06:18:24.278 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:24.278 - INFO - @{res_in_list} = [ ]
20190402 06:18:24.278 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:24.278 - INFO - @{volume_list} = [ ]
20190402 06:18:24.278 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:24.278 - INFO - +------ START KW: ${volume} IN [ @{volume_list} ] [ ]
20190402 06:18:24.278 - INFO - +------ END KW: ${volume} IN [ @{volume_list} ] (0)
20190402 06:18:24.279 - INFO - +----- END KW: OpenStack.Delete All Volumes (640)
20190402 06:18:24.279 - INFO - +----- START KW: OpenStack.Delete All Stacks [ ]
20190402 06:18:24.279 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack stack list ]
20190402 06:18:24.279 - INFO - ${openstack_cmd} = openstack stack list
20190402 06:18:24.279 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:24.279 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 06:18:24.279 - INFO - ${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"
20190402 06:18:24.279 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:24.280 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 06:18:24.280 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 06:18:24.280 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 06:18:24.280 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 06:18:24.280 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 06:18:24.280 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack list|awk '{print$4}'|grep -v "Name"'.
20190402 06:18:24.911 - INFO - Command exited with return code 1.
20190402 06:18:24.911 - INFO - ${stdout} =
20190402 06:18:24.911 - INFO - ${stderr} = Cloud openstack_helm was not found.
20190402 06:18:24.912 - INFO - ${rc} = 1
20190402 06:18:24.912 - INFO - +------- END KW: SSHLibrary.Execute Command (632)
20190402 06:18:24.912 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 06:18:24.914 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}
20190402 06:18:24.914 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:24.914 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 06:18:24.915 - INFO - +-------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 06:18:24.916 - FAIL - Cloud openstack_helm was not found.
20190402 06:18:24.916 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:24.916 - INFO - +-------- END KW: BuiltIn.Fail (1)
20190402 06:18:24.916 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 06:18:24.916 - INFO - &{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }
20190402 06:18:24.916 - INFO - +------ END KW: OpenStack.Run OS Command (636)
20190402 06:18:24.916 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 06:18:24.916 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:24.917 - INFO - ${response} =
20190402 06:18:24.917 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 06:18:24.917 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 06:18:24.917 - INFO - @{res_in_list} = [ ]
20190402 06:18:24.917 - INFO - +------- END KW: String.Split String (0)
20190402 06:18:24.917 - INFO - @{stack_list} = [ ]
20190402 06:18:24.917 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 06:18:24.917 - INFO - +------ START KW: ${stack} IN [ @{stack_list} ] [ ]
20190402 06:18:24.917 - INFO - +------ END KW: ${stack} IN [ @{stack_list} ] (0)
20190402 06:18:24.917 - INFO - +----- END KW: OpenStack.Delete All Stacks (638)
20190402 06:18:24.918 - INFO - +---- END KW: OpenStack.Openstack Cleanup All (5000)
20190402 06:18:24.918 - INFO - +---- START KW: Utils.Stx Suite TearDown [ ]
20190402 06:18:24.918 - INFO - +----- START KW: SSHLibrary.Close All Connections [ ]
20190402 06:18:24.920 - INFO - +----- END KW: SSHLibrary.Close All Connections (2)
20190402 06:18:24.920 - INFO - +---- END KW: Utils.Stx Suite TearDown (2)
20190402 06:18:24.920 - INFO - +--- END TEARDOWN: BuiltIn.Run Keywords (5002)
==============================================================================
20190402 06:18:24.921 - INFO - +-- END SUITE: Sanity-Test.Sanity-OpenStack.05-Measurements-For-Metric (8993)
==============================================================================
20190402 06:18:24.929 - INFO - +- END SUITE: Sanity-Test.Sanity-OpenStack (63733)
==============================================================================
20190402 06:18:24.930 - INFO - +- START SUITE: Sanity-Test.Sanity-Platform [ ]
==============================================================================
20190402 06:18:24.941 - INFO - +-- START SUITE: Sanity-Test.Sanity-Platform.02-OpenStack-Pod-Healthy [ ]
==============================================================================
20190402 06:18:24.941 - INFO - +--- START SETUP: Utils.Stx Suite Setup [ ]
20190402 06:18:24.941 - INFO - +---- START KW: Utils.Open Master Controller Connection [ ]
20190402 06:18:24.941 - INFO - +----- START KW: Utils.Connect to Controller Node [ ${CONFIG.credentials.STX_DEPLOY_USER_NAME} | ${CONFIG.credentials.STX_DEPLOY_USER_PSWD} | ${CONFIG.general.IP_UNIT_0_ADDRESS} ]
20190402 06:18:24.942 - INFO - +------ START KW: SSHLibrary.Open Connection [ ${ip_address} prompt=${prompt} | timeout=${timeout} ]
20190402 06:18:24.942 - INFO - ${controller_connection} = 1
20190402 06:18:24.942 - INFO - +------ END KW: SSHLibrary.Open Connection (0)
20190402 06:18:24.942 - INFO - +------ START KW: Utils.Flexible_SSH_Login [ ${user} | ${password} ]
20190402 06:18:24.943 - INFO - +------- START KW: BuiltIn.Get Length [ ${password} ]
20190402 06:18:24.943 - INFO - Length is 10
20190402 06:18:24.943 - INFO - ${pwd_length} = 10
20190402 06:18:24.943 - INFO - +------- END KW: BuiltIn.Get Length (0)
20190402 06:18:24.943 - INFO - +------- START KW: BuiltIn.Run Keyword And Return If [ ${pwd_length} > 0 | SSHLibrary.Login | ${user} | ${password} | delay=${delay} ]
20190402 06:18:24.943 - INFO - +-------- START KW: SSHLibrary.Login [ ${user} | ${password} | delay=${delay} ]
20190402 06:18:24.944 - INFO - Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.
20190402 06:18:26.031 - INFO - Read output: Last login: Tue Apr  2 12:07:00 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$
20190402 06:18:26.032 - INFO - +-------- END KW: SSHLibrary.Login (1088)
20190402 06:18:26.032 - INFO - Returning from the enclosing user keyword.
20190402 06:18:26.032 - INFO - +------- END KW: BuiltIn.Run Keyword And Return If (1089)
20190402 06:18:26.033 - INFO - +------ END KW: Utils.Flexible_SSH_Login (1090)
20190402 06:18:26.033 - INFO - ${master_controller_connection} = 1
20190402 06:18:26.033 - INFO - +----- END KW: Utils.Connect to Controller Node (1092)
20190402 06:18:26.034 - INFO - +----- START KW: BuiltIn.Set Suite Variable [ ${master_controller_connection} ]
20190402 06:18:26.034 - INFO - ${master_controller_connection} = 1
20190402 06:18:26.035 - INFO - +----- END KW: BuiltIn.Set Suite Variable (1)
20190402 06:18:26.035 - INFO - +----- START KW: BuiltIn.Log [ ${master_controller_connection} ]
20190402 06:18:26.036 - INFO - 1
20190402 06:18:26.036 - INFO - +----- END KW: BuiltIn.Log (1)
20190402 06:18:26.036 - INFO - +---- END KW: Utils.Open Master Controller Connection (1095)
20190402 06:18:26.036 - INFO - +---- START KW: Utils.Set Env Vars From Openrc [ ]
20190402 06:18:26.037 - INFO - +----- START KW: Utils.Run Command [ source /etc/platform/openrc | True ]
20190402 06:18:26.037 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:26.037 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:18:26.038 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:26.038 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:26.038 - INFO - &{result_dict} = { stdout= }
20190402 06:18:26.038 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 06:18:26.038 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:26.038 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:26.039 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:26.039 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:26.039 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:26.039 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (2)
20190402 06:18:26.039 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 06:18:26.039 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 06:18:26.039 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:26.043 - INFO - source /etc/platform/openrc
20190402 06:18:26.043 - INFO - +------ END KW: SSHLibrary.Write (4)
20190402 06:18:26.043 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:26.455 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:26.455 - INFO - ${output} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:26.455 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (412)
20190402 06:18:26.456 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:26.456 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:26.456 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:26.456 - INFO - +------- END KW: String.Get Line (0)
20190402 06:18:26.456 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:26.456 - INFO - ${clean_out} =
20190402 06:18:26.456 - INFO - +------- END KW: String.Remove String (0)
20190402 06:18:26.457 - INFO - ${output} =
20190402 06:18:26.457 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 06:18:26.457 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 06:18:26.457 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:26.458 - INFO - echo $?
20190402 06:18:26.458 - INFO - +------- END KW: SSHLibrary.Write (1)
20190402 06:18:26.458 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:26.459 - INFO - 0
20190402 06:18:26.459 - INFO - ${rc} = 0
20190402 06:18:26.459 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 06:18:26.459 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:26.459 - INFO - 0
20190402 06:18:26.459 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 06:18:26.459 - INFO - ${rc} = 0
20190402 06:18:26.459 - INFO - +------ END KW: Utils.Get Return Code (2)
20190402 06:18:26.459 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:26.460 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:18:26.460 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:26.460 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:26.460 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:26.460 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 06:18:26.460 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:26.461 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout:
20190402 06:18:26.461 - INFO - +------ END KW: Collections.Log Dictionary (1)
20190402 06:18:26.461 - INFO - +----- END KW: Utils.Run Command (424)
20190402 06:18:26.461 - INFO - +---- END KW: Utils.Set Env Vars From Openrc (425)
20190402 06:18:26.461 - INFO - +--- END SETUP: Utils.Stx Suite Setup (1520)
------------------------------------------------------------------------------
20190402 06:18:26.461 - INFO - +--- START TEST: OpenStack PODs Healthy [ ]
------------------------------------------------------------------------------
20190402 06:18:26.461 - INFO - +---- START KW: Utils.Check System Application Status [ stx-openstack | applied ]
20190402 06:18:26.462 - INFO - +----- START KW: BuiltIn.Catenate [ SEPARATOR=| | system application-list | grep ${application} | awk '{print $8}' ]
20190402 06:18:26.462 - INFO - ${cmd} = system application-list|grep stx-openstack|awk '{print $8}'
20190402 06:18:26.462 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 06:18:26.462 - INFO - +----- START KW: Utils.Run Command [ ${cmd} ]
20190402 06:18:26.462 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:26.463 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (1)
20190402 06:18:26.463 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:26.463 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:26.463 - INFO - &{result_dict} = { stdout= }
20190402 06:18:26.463 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 06:18:26.463 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:26.464 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 06:18:26.464 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:26.464 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:26.464 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:26.464 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (1)
20190402 06:18:26.464 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 06:18:26.465 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:26.465 - INFO - +------ END KW: SSHLibrary.Read (1)
20190402 06:18:26.465 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:26.473 - INFO - system application-list|grep stx-opens tack|awk '{print $8}'
20190402 06:18:26.473 - INFO - +------ END KW: SSHLibrary.Write (8)
20190402 06:18:26.473 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:27.453 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:27.453 - INFO - ${output} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:27.453 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (980)
20190402 06:18:27.453 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:27.453 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:27.454 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:27.454 - INFO - +------- END KW: String.Get Line (1)
20190402 06:18:27.454 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:27.454 - INFO - ${clean_out} =
20190402 06:18:27.454 - INFO - +------- END KW: String.Remove String (0)
20190402 06:18:27.454 - INFO - ${output} =
20190402 06:18:27.454 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 06:18:27.454 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 06:18:27.455 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:27.457 - INFO - echo $?
20190402 06:18:27.457 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 06:18:27.457 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:27.457 - INFO - 0
20190402 06:18:27.457 - INFO - ${rc} = 0
20190402 06:18:27.457 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 06:18:27.457 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:27.457 - INFO - 0
20190402 06:18:27.457 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 06:18:27.457 - INFO - ${rc} = 0
20190402 06:18:27.458 - INFO - +------ END KW: Utils.Get Return Code (4)
20190402 06:18:27.458 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:27.458 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:18:27.458 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:27.458 - INFO - +------ END KW: BuiltIn.Run Keyword If (0)
20190402 06:18:27.458 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:27.459 - INFO - +------ END KW: Collections.Set To Dictionary (1)
20190402 06:18:27.459 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:27.459 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout:
20190402 06:18:27.459 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 06:18:27.459 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 06:18:27.459 - INFO - +----- END KW: Utils.Run Command (997)
20190402 06:18:27.459 - INFO - +----- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:27.460 - INFO - ${value} =
20190402 06:18:27.460 - INFO - +----- END KW: Collections.Get From Dictionary (1)
20190402 06:18:27.460 - INFO - +----- START KW: BuiltIn.Run Keyword If [ '${value}' == 'apply-failed' | System Application Apply | ${application} | ELSE | Should Be Equal As Strings | ${value} | ${status} ]
20190402 06:18:27.460 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${value} | ${status} ]
20190402 06:18:27.460 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:18:27.460 - FAIL -  != applied
20190402 06:18:27.460 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:27.460 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 06:18:27.460 - INFO - +----- END KW: BuiltIn.Run Keyword If (0)
20190402 06:18:27.461 - INFO - +---- END KW: Utils.Check System Application Status (999)
------------------------------------------------------------------------------
20190402 06:18:27.461 - INFO - +--- END TEST: OpenStack PODs Healthy (1000)
------------------------------------------------------------------------------
20190402 06:18:27.461 - INFO - +--- START TEST: Reapply STX OpenStack [ ]
------------------------------------------------------------------------------
20190402 06:18:27.461 - INFO - +---- START KW: Utils.System Application Apply [ stx-openstack ]
20190402 06:18:27.462 - INFO - +----- START KW: Utils.Run Command [ system application-apply ${application} | True ]
20190402 06:18:27.462 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:27.462 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:18:27.462 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:27.463 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:27.463 - INFO - &{result_dict} = { stdout= }
20190402 06:18:27.463 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 06:18:27.463 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:27.463 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:27.463 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:27.464 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 06:18:27.464 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:27.464 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (2)
20190402 06:18:27.464 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 06:18:27.464 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:27.464 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 06:18:27.464 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:27.467 - INFO - system application-apply stx-openstack [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kk
20190402 06:18:27.467 - INFO - +------ END KW: SSHLibrary.Write (3)
20190402 06:18:27.467 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:28.458 - INFO - Application-apply rejected: application not found.
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:28.459 - INFO - ${output} = Application-apply rejected: application not found.
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:28.459 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (992)
20190402 06:18:28.459 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:28.459 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:28.460 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:28.460 - INFO - +------- END KW: String.Get Line (1)
20190402 06:18:28.460 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:28.460 - INFO - ${clean_out} = Application-apply rejected: application not found.
20190402 06:18:28.460 - INFO - +------- END KW: String.Remove String (0)
20190402 06:18:28.460 - INFO - ${output} = Application-apply rejected: application not found.
20190402 06:18:28.460 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 06:18:28.460 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 06:18:28.461 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:28.461 - INFO - echo $?
20190402 06:18:28.461 - INFO - +------- END KW: SSHLibrary.Write (0)
20190402 06:18:28.462 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:28.462 - INFO - 1
20190402 06:18:28.462 - INFO - ${rc} = 1
20190402 06:18:28.462 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 06:18:28.462 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:28.463 - INFO - 1
20190402 06:18:28.463 - INFO - +------- END KW: BuiltIn.Log (1)
20190402 06:18:28.463 - INFO - ${rc} = 1
20190402 06:18:28.463 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 06:18:28.463 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:28.463 - INFO - +------- START KW: BuiltIn.Fail [ ${output} ]
20190402 06:18:28.464 - FAIL - Application-apply rejected: application not found.
20190402 06:18:28.464 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:28.464 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 06:18:28.464 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:28.464 - INFO - +----- END KW: Utils.Run Command (1002)
20190402 06:18:28.464 - INFO - +---- END KW: Utils.System Application Apply (1003)
------------------------------------------------------------------------------
20190402 06:18:28.464 - INFO - +--- END TEST: Reapply STX OpenStack (1003)
------------------------------------------------------------------------------
20190402 06:18:28.465 - INFO - +--- START TEST: STX OpenStack Override Update Reset [ ]
------------------------------------------------------------------------------
20190402 06:18:28.465 - INFO - +---- START KW: Utils.Helm Override OpenStack [ nova | openstack ]
20190402 06:18:28.465 - INFO - +----- START KW: BuiltIn.Set Variable [ system helm-override-update ]
20190402 06:18:28.465 - INFO - ${kubectl_cmd} = system helm-override-update
20190402 06:18:28.465 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:18:28.465 - INFO - +----- START KW: BuiltIn.Catenate [ ${kubectl_cmd} | --set conf.nova.DEFAULT.foo=bar | ${char_name} | ${namespace} ]
20190402 06:18:28.466 - INFO - ${cmd} = system helm-override-update --set conf.nova.DEFAULT.foo=bar nova openstack
20190402 06:18:28.466 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 06:18:28.466 - INFO - +----- START KW: Utils.Run Command [ ${cmd} | True ]
20190402 06:18:28.466 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:28.466 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:18:28.466 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:28.467 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:28.467 - INFO - &{result_dict} = { stdout= }
20190402 06:18:28.467 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 06:18:28.467 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:28.467 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:28.468 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:28.468 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:28.468 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:28.468 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (2)
20190402 06:18:28.468 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 06:18:28.468 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:28.468 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 06:18:28.468 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:28.470 - INFO - system helm-override-update --set conf .nova.DEFAULT.foo=bar nova openstack
20190402 06:18:28.470 - INFO - +------ END KW: SSHLibrary.Write (2)
20190402 06:18:28.471 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:29.830 - INFO - +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_overrides | conf:          |
|                |   nova:        |
|                |     DEFAULT:   |
|                |       foo: bar |
|                |                |
+----------------+----------------+
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:29.831 - INFO - ${output} = +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_override...
20190402 06:18:29.831 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (1361)
20190402 06:18:29.831 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:29.831 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:29.831 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:29.831 - INFO - +------- END KW: String.Get Line (0)
20190402 06:18:29.831 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:29.832 - INFO - ${clean_out} = +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_override...
20190402 06:18:29.832 - INFO - +------- END KW: String.Remove String (1)
20190402 06:18:29.832 - INFO - ${output} = +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_override...
20190402 06:18:29.832 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 06:18:29.832 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 06:18:29.832 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:29.834 - INFO - echo $?
20190402 06:18:29.834 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 06:18:29.834 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:29.834 - INFO - 0
20190402 06:18:29.834 - INFO - ${rc} = 0
20190402 06:18:29.834 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 06:18:29.834 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:29.835 - INFO - 0
20190402 06:18:29.835 - INFO - +------- END KW: BuiltIn.Log (1)
20190402 06:18:29.835 - INFO - ${rc} = 0
20190402 06:18:29.835 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 06:18:29.835 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:29.835 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:18:29.836 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 06:18:29.836 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:29.836 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:29.836 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 06:18:29.836 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:29.836 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_overrides | conf:          |
|                |   nova:        |
|                |     DEFAULT:   |
|                |       foo: bar |
|                |                |
+----------------+----------------+
20190402 06:18:29.836 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 06:18:29.837 - INFO - +----- END KW: Utils.Run Command (1371)
20190402 06:18:29.837 - INFO - +---- END KW: Utils.Helm Override OpenStack (1372)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:29.837 - INFO - +---- START KW: Utils.System Application Apply [ stx-openstack ]
20190402 06:18:29.837 - INFO - +----- START KW: Utils.Run Command [ system application-apply ${application} | True ]
20190402 06:18:29.837 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:29.838 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (1)
20190402 06:18:29.838 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:29.838 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:29.838 - INFO - &{result_dict} = { stdout= }
20190402 06:18:29.838 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 06:18:29.838 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:29.839 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 06:18:29.839 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:29.839 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:29.839 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:29.839 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (1)
20190402 06:18:29.839 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 06:18:29.839 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:29.840 - INFO - +------ END KW: SSHLibrary.Read (1)
20190402 06:18:29.840 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:29.843 - INFO - system application-apply stx-openstack [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kk
20190402 06:18:29.843 - INFO - +------ END KW: SSHLibrary.Write (3)
20190402 06:18:29.843 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:30.852 - INFO - Application-apply rejected: application not found.
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:30.853 - INFO - ${output} = Application-apply rejected: application not found.
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:30.853 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (1010)
20190402 06:18:30.853 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:30.853 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:30.853 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:30.853 - INFO - +------- END KW: String.Get Line (0)
20190402 06:18:30.853 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:30.854 - INFO - ${clean_out} = Application-apply rejected: application not found.
20190402 06:18:30.854 - INFO - +------- END KW: String.Remove String (1)
20190402 06:18:30.854 - INFO - ${output} = Application-apply rejected: application not found.
20190402 06:18:30.854 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 06:18:30.854 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 06:18:30.854 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:30.856 - INFO - echo $?
20190402 06:18:30.856 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 06:18:30.856 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:30.856 - INFO - 1
20190402 06:18:30.857 - INFO - ${rc} = 1
20190402 06:18:30.857 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 06:18:30.857 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:30.857 - INFO - 1
20190402 06:18:30.857 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 06:18:30.857 - INFO - ${rc} = 1
20190402 06:18:30.857 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 06:18:30.857 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:30.858 - INFO - +------- START KW: BuiltIn.Fail [ ${output} ]
20190402 06:18:30.858 - FAIL - Application-apply rejected: application not found.
20190402 06:18:30.858 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:30.858 - INFO - +------- END KW: BuiltIn.Fail (0)
20190402 06:18:30.858 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:30.858 - INFO - +----- END KW: Utils.Run Command (1021)
20190402 06:18:30.858 - INFO - +---- END KW: Utils.System Application Apply (1021)
------------------------------------------------------------------------------
20190402 06:18:30.858 - INFO - +--- END TEST: STX OpenStack Override Update Reset (2394)
------------------------------------------------------------------------------
20190402 06:18:30.859 - INFO - +--- START TEST: Kube System Services [ ]
------------------------------------------------------------------------------
20190402 06:18:30.859 - INFO - +---- START KW: Utils.Check PODs Health [ ]
20190402 06:18:30.859 - INFO - +----- START KW: BuiltIn.Set Variable [ kubectl get pods --all-namespaces -o wide ]
20190402 06:18:30.859 - INFO - ${kubectl_cmd} = kubectl get pods --all-namespaces -o wide
20190402 06:18:30.859 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:18:30.859 - INFO - +----- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep -v NAMESPACE | grep -v Running | grep -v Completed ]
20190402 06:18:30.860 - INFO - ${cmd} = kubectl get pods --all-namespaces -o wide|grep -v NAMESPACE|grep -v Running|grep -v Completed
20190402 06:18:30.860 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 06:18:30.860 - INFO - +----- START KW: Utils.Run Command [ ${cmd} ]
20190402 06:18:30.860 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:30.860 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:18:30.861 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:30.861 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:30.861 - INFO - &{result_dict} = { stdout= }
20190402 06:18:30.861 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 06:18:30.861 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:30.862 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 06:18:30.862 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:30.862 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:30.862 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:30.862 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (1)
20190402 06:18:30.862 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 06:18:30.862 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:30.862 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 06:18:30.863 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:30.864 - INFO - kubectl get pods --all-namespaces -o w ide|grep -v NAMESPACE|grep -v Running|grep -v Completed
20190402 06:18:30.865 - INFO - +------ END KW: SSHLibrary.Write (2)
20190402 06:18:30.865 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:31.007 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.007 - INFO - ${output} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.007 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (142)
20190402 06:18:31.007 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:31.007 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:31.008 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.008 - INFO - +------- END KW: String.Get Line (1)
20190402 06:18:31.008 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:31.008 - INFO - ${clean_out} =
20190402 06:18:31.008 - INFO - +------- END KW: String.Remove String (0)
20190402 06:18:31.008 - INFO - ${output} =
20190402 06:18:31.008 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 06:18:31.008 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 06:18:31.009 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:31.010 - INFO - echo $?
20190402 06:18:31.010 - INFO - +------- END KW: SSHLibrary.Write (1)
20190402 06:18:31.010 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:31.010 - INFO - 1
20190402 06:18:31.010 - INFO - ${rc} = 1
20190402 06:18:31.011 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 06:18:31.011 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:31.011 - INFO - 1
20190402 06:18:31.011 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 06:18:31.011 - INFO - ${rc} = 1
20190402 06:18:31.011 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 06:18:31.011 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:31.012 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stderr=${output} ]
20190402 06:18:31.012 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:31.012 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:31.012 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:31.012 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 06:18:31.012 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:31.012 - INFO - Dictionary size is 3 and it contains following items:
rc: 1
stderr: 
stdout:
20190402 06:18:31.012 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 06:18:31.013 - INFO - &{result} = { stdout= | stderr= | rc=1 }
20190402 06:18:31.013 - INFO - +----- END KW: Utils.Run Command (153)
20190402 06:18:31.013 - INFO - +----- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:31.013 - INFO - ${value} =
20190402 06:18:31.013 - INFO - +----- END KW: Collections.Get From Dictionary (0)
20190402 06:18:31.013 - INFO - +----- START KW: BuiltIn.Should Be Empty [ ${value} ]
20190402 06:18:31.013 - INFO - Length is 0
20190402 06:18:31.013 - INFO - +----- END KW: BuiltIn.Should Be Empty (0)
20190402 06:18:31.014 - INFO - +---- END KW: Utils.Check PODs Health (154)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:31.014 - INFO - +---- START KW: Utils.Check Kube System Services [ ]
20190402 06:18:31.014 - INFO - +----- START KW: BuiltIn.Set Variable [ kubectl get services -n kube-system ]
20190402 06:18:31.014 - INFO - ${kubectl_cmd} = kubectl get services -n kube-system
20190402 06:18:31.014 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 06:18:31.014 - INFO - +----- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep -v NAME | awk '{print $1}' ]
20190402 06:18:31.014 - INFO - ${cmd} = kubectl get services -n kube-system|grep -v NAME|awk '{print $1}'
20190402 06:18:31.014 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 06:18:31.015 - INFO - +----- START KW: Utils.Run Command [ ${cmd} ]
20190402 06:18:31.015 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:31.015 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:18:31.015 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:31.015 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:31.016 - INFO - &{result_dict} = { stdout= }
20190402 06:18:31.016 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:31.016 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:31.017 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 06:18:31.017 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:31.017 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:31.017 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:31.018 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (3)
20190402 06:18:31.018 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 06:18:31.018 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.018 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 06:18:31.018 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:31.028 - INFO - kubectl get services -n kube-system|gr ep -v NAME|awk '{print $1}'
20190402 06:18:31.028 - INFO - +------ END KW: SSHLibrary.Write (10)
20190402 06:18:31.028 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:31.154 - INFO - calico-typha
kube-dns
tiller-deploy
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.155 - INFO - ${output} = calico-typha
kube-dns
tiller-deploy
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.155 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (127)
20190402 06:18:31.155 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:31.155 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:31.156 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.156 - INFO - +------- END KW: String.Get Line (1)
20190402 06:18:31.156 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:31.156 - INFO - ${clean_out} = calico-typha
kube-dns
tiller-deploy
20190402 06:18:31.156 - INFO - +------- END KW: String.Remove String (0)
20190402 06:18:31.156 - INFO - ${output} = calico-typha
kube-dns
tiller-deploy
20190402 06:18:31.156 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 06:18:31.156 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 06:18:31.157 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:31.158 - INFO - echo $?
20190402 06:18:31.158 - INFO - +------- END KW: SSHLibrary.Write (1)
20190402 06:18:31.159 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:31.159 - INFO - 0
20190402 06:18:31.159 - INFO - ${rc} = 0
20190402 06:18:31.159 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 06:18:31.159 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:31.159 - INFO - 0
20190402 06:18:31.159 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 06:18:31.160 - INFO - ${rc} = 0
20190402 06:18:31.160 - INFO - +------ END KW: Utils.Get Return Code (4)
20190402 06:18:31.160 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:31.160 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:18:31.161 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 06:18:31.161 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:31.161 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:31.161 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 06:18:31.161 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:31.162 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: calico-typha
kube-dns
tiller-deploy
20190402 06:18:31.162 - INFO - +------ END KW: Collections.Log Dictionary (1)
20190402 06:18:31.162 - INFO - &{result} = { stdout=calico-typha
kube-dns
tiller-deploy | stderr= | rc=0 }
20190402 06:18:31.162 - INFO - +----- END KW: Utils.Run Command (147)
20190402 06:18:31.162 - INFO - +----- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:31.162 - INFO - ${kubeb_systems} = calico-typha
kube-dns
tiller-deploy
20190402 06:18:31.162 - INFO - +----- END KW: Collections.Get From Dictionary (0)
20190402 06:18:31.162 - INFO - +----- START KW: BuiltIn.Should Contain [ ${kubeb_systems} | calico-typha ]
20190402 06:18:31.163 - INFO - +----- END KW: BuiltIn.Should Contain (1)
20190402 06:18:31.163 - INFO - +----- START KW: BuiltIn.Should Contain [ ${kubeb_systems} | kube-dns ]
20190402 06:18:31.163 - INFO - +----- END KW: BuiltIn.Should Contain (0)
20190402 06:18:31.163 - INFO - +----- START KW: BuiltIn.Should Contain [ ${kubeb_systems} | tiller-deploy ]
20190402 06:18:31.163 - INFO - +----- END KW: BuiltIn.Should Contain (0)
20190402 06:18:31.163 - INFO - +----- START KW: Utils.Run Command [ kubectl get deployments.apps -n kube-system ]
20190402 06:18:31.164 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:31.164 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:18:31.164 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:31.164 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:31.165 - INFO - &{result_dict} = { stdout= }
20190402 06:18:31.165 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:31.165 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:31.165 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:31.165 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:31.165 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:31.166 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:31.166 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (2)
20190402 06:18:31.166 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 06:18:31.166 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.166 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 06:18:31.166 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:31.173 - INFO - kubectl get deployments.apps -n kube-s ystem
20190402 06:18:31.173 - INFO - +------ END KW: SSHLibrary.Write (7)
20190402 06:18:31.173 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:31.296 - INFO - NAME            DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
calico-typha    0         0         0            0           116m
coredns         2         2         2            2           116m
tiller-deploy   1         1         1            1           116m
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.296 - INFO - ${output} = NAME            DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
calico-typha    0         0         0            0           116m
coredns         2         2         2            2           116m
...
20190402 06:18:31.296 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (123)
20190402 06:18:31.296 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:31.297 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:31.297 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.297 - INFO - +------- END KW: String.Get Line (0)
20190402 06:18:31.297 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:31.297 - INFO - ${clean_out} = NAME            DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
calico-typha    0         0         0            0           116m
coredns         2         2         2            2           116m
...
20190402 06:18:31.297 - INFO - +------- END KW: String.Remove String (0)
20190402 06:18:31.297 - INFO - ${output} = NAME            DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
calico-typha    0         0         0            0           116m
coredns         2         2         2            2           116m
...
20190402 06:18:31.297 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 06:18:31.297 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 06:18:31.298 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:31.299 - INFO - echo $?
20190402 06:18:31.299 - INFO - +------- END KW: SSHLibrary.Write (1)
20190402 06:18:31.299 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:31.300 - INFO - 0
20190402 06:18:31.300 - INFO - ${rc} = 0
20190402 06:18:31.300 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 06:18:31.300 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:31.300 - INFO - 0
20190402 06:18:31.300 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 06:18:31.300 - INFO - ${rc} = 0
20190402 06:18:31.300 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 06:18:31.300 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:31.301 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:18:31.301 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:31.301 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:31.301 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:31.301 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 06:18:31.301 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:31.302 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: NAME            DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
calico-typha    0         0         0            0           116m
coredns         2         2         2            2           116m
tiller-deploy   1         1         1            1           116m
20190402 06:18:31.302 - INFO - +------ END KW: Collections.Log Dictionary (1)
20190402 06:18:31.302 - INFO - &{result} = { stdout=NAME            DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
calico-typha    0         0         0            0           116m
coredns         2         2         2            2        ...
20190402 06:18:31.302 - INFO - +----- END KW: Utils.Run Command (139)
20190402 06:18:31.302 - INFO - +----- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:31.302 - INFO - ${kubeb_systems} = NAME            DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
calico-typha    0         0         0            0           116m
coredns         2         2         2            2           116m
...
20190402 06:18:31.302 - INFO - +----- END KW: Collections.Get From Dictionary (0)
20190402 06:18:31.302 - INFO - +----- START KW: BuiltIn.Should Contain [ ${kubeb_systems} | calico-typha ]
20190402 06:18:31.303 - INFO - +----- END KW: BuiltIn.Should Contain (1)
20190402 06:18:31.303 - INFO - +----- START KW: BuiltIn.Should Contain [ ${kubeb_systems} | coredns ]
20190402 06:18:31.303 - INFO - +----- END KW: BuiltIn.Should Contain (0)
20190402 06:18:31.303 - INFO - +----- START KW: BuiltIn.Should Contain [ ${kubeb_systems} | tiller-deploy ]
20190402 06:18:31.303 - INFO - +----- END KW: BuiltIn.Should Contain (0)
20190402 06:18:31.303 - INFO - +---- END KW: Utils.Check Kube System Services (289)
------------------------------------------------------------------------------
20190402 06:18:31.304 - INFO - +--- END TEST: Kube System Services (444)
------------------------------------------------------------------------------
20190402 06:18:31.304 - INFO - +--- START TEST: Create Check Delete POD [ ]
------------------------------------------------------------------------------
20190402 06:18:31.304 - INFO - +---- START KW: SSHLibrary.Put File [ %{PYTHONPATH}/Utils/${pod_yml} | ${host_image_path}/${pod_yml} ]
20190402 06:18:31.311 - INFO - [chan 1] Opened sftp connection (server version 3)
20190402 06:18:31.318 - INFO - [chan 2] Opened sftp connection (server version 3)
20190402 06:18:31.322 - INFO - '/home/mgperezi/duplex/stx-test-suite/Utils/testpod.yaml' -> '/home/wrsroot//testpod.yaml'
20190402 06:18:31.323 - INFO - +---- END KW: SSHLibrary.Put File (19)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:31.323 - INFO - +---- START KW: Utils.Create POD [ ${pod_yml} | ${pod_name} ]
20190402 06:18:31.323 - INFO - +----- START KW: Utils.Run Command [ kubectl create -f ${pod_yml} ]
20190402 06:18:31.324 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:31.324 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:18:31.324 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:31.324 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:31.325 - INFO - &{result_dict} = { stdout= }
20190402 06:18:31.325 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:31.325 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:31.325 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:31.325 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:31.325 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:31.325 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:31.326 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (1)
20190402 06:18:31.326 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 06:18:31.326 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.326 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 06:18:31.326 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:31.331 - INFO - kubectl create -f testpod.yaml
20190402 06:18:31.331 - INFO - +------ END KW: SSHLibrary.Write (5)
20190402 06:18:31.331 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:31.541 - INFO - pod/testpod created
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.541 - INFO - ${output} = pod/testpod created
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.541 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (210)
20190402 06:18:31.541 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:31.542 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:31.542 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.542 - INFO - +------- END KW: String.Get Line (0)
20190402 06:18:31.542 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:31.542 - INFO - ${clean_out} = pod/testpod created
20190402 06:18:31.542 - INFO - +------- END KW: String.Remove String (0)
20190402 06:18:31.542 - INFO - ${output} = pod/testpod created
20190402 06:18:31.542 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 06:18:31.542 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 06:18:31.543 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:31.544 - INFO - echo $?
20190402 06:18:31.544 - INFO - +------- END KW: SSHLibrary.Write (1)
20190402 06:18:31.544 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:31.545 - INFO - 0
20190402 06:18:31.545 - INFO - ${rc} = 0
20190402 06:18:31.545 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 06:18:31.545 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:31.545 - INFO - 0
20190402 06:18:31.545 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 06:18:31.545 - INFO - ${rc} = 0
20190402 06:18:31.545 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 06:18:31.545 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:31.546 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:18:31.546 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:31.546 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:31.546 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:31.546 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 06:18:31.546 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:31.547 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: pod/testpod created
20190402 06:18:31.547 - INFO - +------ END KW: Collections.Log Dictionary (1)
20190402 06:18:31.547 - INFO - &{result} = { stdout=pod/testpod created | stderr= | rc=0 }
20190402 06:18:31.547 - INFO - +----- END KW: Utils.Run Command (224)
20190402 06:18:31.547 - INFO - +----- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:31.547 - INFO - ${value} = pod/testpod created
20190402 06:18:31.547 - INFO - +----- END KW: Collections.Get From Dictionary (0)
20190402 06:18:31.547 - INFO - +----- START KW: BuiltIn.Should Be Equal As Strings [ ${value} | pod/${pod_name} created ]
20190402 06:18:31.548 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:18:31.548 - INFO - +----- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 06:18:31.548 - INFO - +---- END KW: Utils.Create POD (225)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 06:18:31.548 - INFO - +---- START KW: BuiltIn.Wait Until Keyword Succeeds [ 1 min | 5 sec | Check POD | ${pod_name} ]
20190402 06:18:31.548 - INFO - +----- START KW: Utils.Check POD [ ${pod_name} ]
20190402 06:18:31.548 - INFO - +------ START KW: BuiltIn.Set Variable [ kubectl get pods -n default ]
20190402 06:18:31.549 - INFO - ${kubectl_cmd} = kubectl get pods -n default
20190402 06:18:31.549 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:18:31.549 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep ${pod_name} | awk '{print $3}' ]
20190402 06:18:31.549 - INFO - ${cmd} = kubectl get pods -n default|grep testpod|awk '{print $3}'
20190402 06:18:31.549 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 06:18:31.549 - INFO - +------ START KW: Utils.Run Command [ ${cmd} ]
20190402 06:18:31.549 - INFO - +------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:31.550 - INFO - +------- END KW: SSHLibrary.Set Client Configuration (1)
20190402 06:18:31.550 - INFO - +------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:31.550 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:31.550 - INFO - &{result_dict} = { stdout= }
20190402 06:18:31.550 - INFO - +-------- END KW: BuiltIn.Create Dictionary (0)
20190402 06:18:31.550 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:31.551 - INFO - +-------- END KW: Collections.Set To Dictionary (1)
20190402 06:18:31.551 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:31.551 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:31.551 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:31.551 - INFO - +------- END KW: Utils.Create Empy Result Dictionary (1)
20190402 06:18:31.551 - INFO - +------- START KW: SSHLibrary.Read [ ]
20190402 06:18:31.551 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.551 - INFO - +------- END KW: SSHLibrary.Read (0)
20190402 06:18:31.552 - INFO - +------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:31.560 - INFO - kubectl get pods -n default|grep testp od|awk '{print $3}'
20190402 06:18:31.560 - INFO - +------- END KW: SSHLibrary.Write (9)
20190402 06:18:31.561 - INFO - +------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:31.688 - INFO - ContainerCreating
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.688 - INFO - ${output} = ContainerCreating
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.688 - INFO - +------- END KW: SSHLibrary.Read Until Prompt (127)
20190402 06:18:31.688 - INFO - +------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:31.688 - INFO - +-------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:31.688 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:31.689 - INFO - +-------- END KW: String.Get Line (0)
20190402 06:18:31.689 - INFO - +-------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:31.689 - INFO - ${clean_out} = ContainerCreating
20190402 06:18:31.689 - INFO - +-------- END KW: String.Remove String (0)
20190402 06:18:31.689 - INFO - ${output} = ContainerCreating
20190402 06:18:31.689 - INFO - +------- END KW: Utils.Remove Prompt Line (1)
20190402 06:18:31.689 - INFO - +------- START KW: Utils.Get Return Code [ ]
20190402 06:18:31.689 - INFO - +-------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:31.691 - INFO - echo $?
20190402 06:18:31.691 - INFO - +-------- END KW: SSHLibrary.Write (2)
20190402 06:18:31.691 - INFO - +-------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:31.691 - INFO - 0
20190402 06:18:31.691 - INFO - ${rc} = 0
20190402 06:18:31.691 - INFO - +-------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 06:18:31.691 - INFO - +-------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:31.691 - INFO - 0
20190402 06:18:31.691 - INFO - +-------- END KW: BuiltIn.Log (0)
20190402 06:18:31.692 - INFO - ${rc} = 0
20190402 06:18:31.692 - INFO - +------- END KW: Utils.Get Return Code (3)
20190402 06:18:31.692 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:31.692 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:18:31.692 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:31.692 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 06:18:31.692 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:31.693 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 06:18:31.693 - INFO - +------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:31.693 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: ContainerCreating
20190402 06:18:31.693 - INFO - +------- END KW: Collections.Log Dictionary (0)
20190402 06:18:31.693 - INFO - &{result} = { stdout=ContainerCreating | stderr= | rc=0 }
20190402 06:18:31.693 - INFO - +------ END KW: Utils.Run Command (144)
20190402 06:18:31.693 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:31.694 - INFO - ${status} = ContainerCreating
20190402 06:18:31.694 - INFO - +------ END KW: Collections.Get From Dictionary (1)
20190402 06:18:31.694 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${status} | Running ]
20190402 06:18:31.694 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:18:31.694 - FAIL - ContainerCreating != Running
20190402 06:18:31.694 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:31.694 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 06:18:31.694 - INFO - +----- END KW: Utils.Check POD (146)
20190402 06:18:36.695 - INFO - +----- START KW: Utils.Check POD [ ${pod_name} ]
20190402 06:18:36.696 - INFO - +------ START KW: BuiltIn.Set Variable [ kubectl get pods -n default ]
20190402 06:18:36.697 - INFO - ${kubectl_cmd} = kubectl get pods -n default
20190402 06:18:36.697 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:18:36.697 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep ${pod_name} | awk '{print $3}' ]
20190402 06:18:36.698 - INFO - ${cmd} = kubectl get pods -n default|grep testpod|awk '{print $3}'
20190402 06:18:36.699 - INFO - +------ END KW: BuiltIn.Catenate (2)
20190402 06:18:36.699 - INFO - +------ START KW: Utils.Run Command [ ${cmd} ]
20190402 06:18:36.700 - INFO - +------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:36.700 - INFO - +------- END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:18:36.700 - INFO - +------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:36.700 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:36.701 - INFO - &{result_dict} = { stdout= }
20190402 06:18:36.701 - INFO - +-------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:36.701 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:36.701 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:36.701 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:36.701 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:36.701 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:36.702 - INFO - +------- END KW: Utils.Create Empy Result Dictionary (2)
20190402 06:18:36.702 - INFO - +------- START KW: SSHLibrary.Read [ ]
20190402 06:18:36.702 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:36.702 - INFO - +------- END KW: SSHLibrary.Read (0)
20190402 06:18:36.702 - INFO - +------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:36.711 - INFO - kubectl get pods -n default|grep testp od|awk '{print $3}'
20190402 06:18:36.711 - INFO - +------- END KW: SSHLibrary.Write (9)
20190402 06:18:36.711 - INFO - +------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:36.833 - INFO - ImagePullBackOff
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:36.833 - INFO - ${output} = ImagePullBackOff
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:36.833 - INFO - +------- END KW: SSHLibrary.Read Until Prompt (122)
20190402 06:18:36.833 - INFO - +------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:36.834 - INFO - +-------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:36.834 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:36.834 - INFO - +-------- END KW: String.Get Line (0)
20190402 06:18:36.834 - INFO - +-------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:36.834 - INFO - ${clean_out} = ImagePullBackOff
20190402 06:18:36.834 - INFO - +-------- END KW: String.Remove String (0)
20190402 06:18:36.835 - INFO - ${output} = ImagePullBackOff
20190402 06:18:36.835 - INFO - +------- END KW: Utils.Remove Prompt Line (2)
20190402 06:18:36.835 - INFO - +------- START KW: Utils.Get Return Code [ ]
20190402 06:18:36.835 - INFO - +-------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:36.837 - INFO - echo $?
20190402 06:18:36.837 - INFO - +-------- END KW: SSHLibrary.Write (2)
20190402 06:18:36.837 - INFO - +-------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:36.837 - INFO - 0
20190402 06:18:36.837 - INFO - ${rc} = 0
20190402 06:18:36.837 - INFO - +-------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 06:18:36.837 - INFO - +-------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:36.837 - INFO - 0
20190402 06:18:36.837 - INFO - +-------- END KW: BuiltIn.Log (0)
20190402 06:18:36.837 - INFO - ${rc} = 0
20190402 06:18:36.838 - INFO - +------- END KW: Utils.Get Return Code (3)
20190402 06:18:36.838 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:36.838 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:18:36.838 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:36.838 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 06:18:36.838 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:36.839 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 06:18:36.839 - INFO - +------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:36.839 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: ImagePullBackOff
20190402 06:18:36.839 - INFO - +------- END KW: Collections.Log Dictionary (0)
20190402 06:18:36.839 - INFO - &{result} = { stdout=ImagePullBackOff | stderr= | rc=0 }
20190402 06:18:36.839 - INFO - +------ END KW: Utils.Run Command (140)
20190402 06:18:36.839 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:36.839 - INFO - ${status} = ImagePullBackOff
20190402 06:18:36.840 - INFO - +------ END KW: Collections.Get From Dictionary (1)
20190402 06:18:36.840 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${status} | Running ]
20190402 06:18:36.840 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:18:36.840 - FAIL - ImagePullBackOff != Running
20190402 06:18:36.840 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:36.840 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 06:18:36.840 - INFO - +----- END KW: Utils.Check POD (145)
20190402 06:18:41.841 - INFO - +----- START KW: Utils.Check POD [ ${pod_name} ]
20190402 06:18:41.842 - INFO - +------ START KW: BuiltIn.Set Variable [ kubectl get pods -n default ]
20190402 06:18:41.843 - INFO - ${kubectl_cmd} = kubectl get pods -n default
20190402 06:18:41.843 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:18:41.843 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep ${pod_name} | awk '{print $3}' ]
20190402 06:18:41.844 - INFO - ${cmd} = kubectl get pods -n default|grep testpod|awk '{print $3}'
20190402 06:18:41.844 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:18:41.845 - INFO - +------ START KW: Utils.Run Command [ ${cmd} ]
20190402 06:18:41.846 - INFO - +------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:41.846 - INFO - +------- END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:18:41.846 - INFO - +------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:41.846 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:41.846 - INFO - &{result_dict} = { stdout= }
20190402 06:18:41.847 - INFO - +-------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:41.847 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:41.847 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:41.847 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:41.847 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:41.847 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:41.847 - INFO - +------- END KW: Utils.Create Empy Result Dictionary (1)
20190402 06:18:41.848 - INFO - +------- START KW: SSHLibrary.Read [ ]
20190402 06:18:41.848 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:41.848 - INFO - +------- END KW: SSHLibrary.Read (0)
20190402 06:18:41.848 - INFO - +------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:41.857 - INFO - kubectl get pods -n default|grep testp od|awk '{print $3}'
20190402 06:18:41.857 - INFO - +------- END KW: SSHLibrary.Write (9)
20190402 06:18:41.857 - INFO - +------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:41.977 - INFO - ImagePullBackOff
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:41.978 - INFO - ${output} = ImagePullBackOff
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:41.978 - INFO - +------- END KW: SSHLibrary.Read Until Prompt (121)
20190402 06:18:41.978 - INFO - +------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:41.978 - INFO - +-------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:41.978 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:41.978 - INFO - +-------- END KW: String.Get Line (0)
20190402 06:18:41.979 - INFO - +-------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:41.979 - INFO - ${clean_out} = ImagePullBackOff
20190402 06:18:41.979 - INFO - +-------- END KW: String.Remove String (1)
20190402 06:18:41.979 - INFO - ${output} = ImagePullBackOff
20190402 06:18:41.979 - INFO - +------- END KW: Utils.Remove Prompt Line (1)
20190402 06:18:41.979 - INFO - +------- START KW: Utils.Get Return Code [ ]
20190402 06:18:41.979 - INFO - +-------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:41.981 - INFO - echo $?
20190402 06:18:41.981 - INFO - +-------- END KW: SSHLibrary.Write (2)
20190402 06:18:41.981 - INFO - +-------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:41.981 - INFO - 0
20190402 06:18:41.981 - INFO - ${rc} = 0
20190402 06:18:41.981 - INFO - +-------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 06:18:41.981 - INFO - +-------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:41.982 - INFO - 0
20190402 06:18:41.982 - INFO - +-------- END KW: BuiltIn.Log (1)
20190402 06:18:41.982 - INFO - ${rc} = 0
20190402 06:18:41.982 - INFO - +------- END KW: Utils.Get Return Code (3)
20190402 06:18:41.982 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:41.982 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:18:41.983 - INFO - +-------- END KW: Collections.Set To Dictionary (1)
20190402 06:18:41.983 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:41.983 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:41.983 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:41.983 - INFO - +------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:41.983 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: ImagePullBackOff
20190402 06:18:41.983 - INFO - +------- END KW: Collections.Log Dictionary (0)
20190402 06:18:41.983 - INFO - &{result} = { stdout=ImagePullBackOff | stderr= | rc=0 }
20190402 06:18:41.984 - INFO - +------ END KW: Utils.Run Command (139)
20190402 06:18:41.984 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:41.984 - INFO - ${status} = ImagePullBackOff
20190402 06:18:41.984 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 06:18:41.984 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${status} | Running ]
20190402 06:18:41.984 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:18:41.984 - FAIL - ImagePullBackOff != Running
20190402 06:18:41.984 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:41.984 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 06:18:41.984 - INFO - +----- END KW: Utils.Check POD (143)
20190402 06:18:46.985 - INFO - +----- START KW: Utils.Check POD [ ${pod_name} ]
20190402 06:18:46.987 - INFO - +------ START KW: BuiltIn.Set Variable [ kubectl get pods -n default ]
20190402 06:18:46.987 - INFO - ${kubectl_cmd} = kubectl get pods -n default
20190402 06:18:46.988 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:18:46.988 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep ${pod_name} | awk '{print $3}' ]
20190402 06:18:46.989 - INFO - ${cmd} = kubectl get pods -n default|grep testpod|awk '{print $3}'
20190402 06:18:46.989 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:18:46.990 - INFO - +------ START KW: Utils.Run Command [ ${cmd} ]
20190402 06:18:46.991 - INFO - +------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:46.992 - INFO - +------- END KW: SSHLibrary.Set Client Configuration (1)
20190402 06:18:46.992 - INFO - +------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:46.993 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:46.995 - INFO - &{result_dict} = { stdout= }
20190402 06:18:46.995 - INFO - +-------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:18:46.995 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:46.996 - INFO - +-------- END KW: Collections.Set To Dictionary (1)
20190402 06:18:46.997 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:46.998 - INFO - +-------- END KW: Collections.Set To Dictionary (1)
20190402 06:18:46.998 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:46.999 - INFO - +------- END KW: Utils.Create Empy Result Dictionary (7)
20190402 06:18:46.999 - INFO - +------- START KW: SSHLibrary.Read [ ]
20190402 06:18:46.999 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:47.000 - INFO - +------- END KW: SSHLibrary.Read (1)
20190402 06:18:47.000 - INFO - +------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:47.027 - INFO - kubectl get pods -n default|grep testp od|awk '{print $3}'
20190402 06:18:47.028 - INFO - +------- END KW: SSHLibrary.Write (28)
20190402 06:18:47.028 - INFO - +------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:47.140 - INFO - ImagePullBackOff
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:47.140 - INFO - ${output} = ImagePullBackOff
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:47.140 - INFO - +------- END KW: SSHLibrary.Read Until Prompt (112)
20190402 06:18:47.140 - INFO - +------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:47.141 - INFO - +-------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:47.141 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:47.141 - INFO - +-------- END KW: String.Get Line (0)
20190402 06:18:47.141 - INFO - +-------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:47.141 - INFO - ${clean_out} = ImagePullBackOff
20190402 06:18:47.141 - INFO - +-------- END KW: String.Remove String (0)
20190402 06:18:47.141 - INFO - ${output} = ImagePullBackOff
20190402 06:18:47.141 - INFO - +------- END KW: Utils.Remove Prompt Line (1)
20190402 06:18:47.142 - INFO - +------- START KW: Utils.Get Return Code [ ]
20190402 06:18:47.142 - INFO - +-------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:47.143 - INFO - echo $?
20190402 06:18:47.143 - INFO - +-------- END KW: SSHLibrary.Write (1)
20190402 06:18:47.143 - INFO - +-------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:47.144 - INFO - 0
20190402 06:18:47.144 - INFO - ${rc} = 0
20190402 06:18:47.144 - INFO - +-------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 06:18:47.144 - INFO - +-------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:47.144 - INFO - 0
20190402 06:18:47.144 - INFO - +-------- END KW: BuiltIn.Log (0)
20190402 06:18:47.144 - INFO - ${rc} = 0
20190402 06:18:47.144 - INFO - +------- END KW: Utils.Get Return Code (2)
20190402 06:18:47.144 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:47.145 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:18:47.145 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:47.145 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:47.145 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:47.145 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:47.146 - INFO - +------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:47.146 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: ImagePullBackOff
20190402 06:18:47.146 - INFO - +------- END KW: Collections.Log Dictionary (0)
20190402 06:18:47.146 - INFO - &{result} = { stdout=ImagePullBackOff | stderr= | rc=0 }
20190402 06:18:47.146 - INFO - +------ END KW: Utils.Run Command (157)
20190402 06:18:47.146 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:47.146 - INFO - ${status} = ImagePullBackOff
20190402 06:18:47.146 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 06:18:47.146 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${status} | Running ]
20190402 06:18:47.147 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:18:47.147 - FAIL - ImagePullBackOff != Running
20190402 06:18:47.147 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:47.147 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 06:18:47.147 - INFO - +----- END KW: Utils.Check POD (162)
20190402 06:18:52.148 - INFO - +----- START KW: Utils.Check POD [ ${pod_name} ]
20190402 06:18:52.149 - INFO - +------ START KW: BuiltIn.Set Variable [ kubectl get pods -n default ]
20190402 06:18:52.150 - INFO - ${kubectl_cmd} = kubectl get pods -n default
20190402 06:18:52.150 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:18:52.151 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep ${pod_name} | awk '{print $3}' ]
20190402 06:18:52.152 - INFO - ${cmd} = kubectl get pods -n default|grep testpod|awk '{print $3}'
20190402 06:18:52.152 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:18:52.152 - INFO - +------ START KW: Utils.Run Command [ ${cmd} ]
20190402 06:18:52.153 - INFO - +------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:52.153 - INFO - +------- END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:18:52.153 - INFO - +------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:52.153 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:52.154 - INFO - &{result_dict} = { stdout= }
20190402 06:18:52.154 - INFO - +-------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:52.154 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:52.154 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:52.154 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:52.154 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:52.155 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:52.155 - INFO - +------- END KW: Utils.Create Empy Result Dictionary (2)
20190402 06:18:52.155 - INFO - +------- START KW: SSHLibrary.Read [ ]
20190402 06:18:52.155 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:52.155 - INFO - +------- END KW: SSHLibrary.Read (0)
20190402 06:18:52.155 - INFO - +------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:52.165 - INFO - kubectl get pods -n default|grep testp od|awk '{print $3}'
20190402 06:18:52.165 - INFO - +------- END KW: SSHLibrary.Write (10)
20190402 06:18:52.165 - INFO - +------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:52.283 - INFO - ImagePullBackOff
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:52.283 - INFO - ${output} = ImagePullBackOff
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:52.283 - INFO - +------- END KW: SSHLibrary.Read Until Prompt (118)
20190402 06:18:52.283 - INFO - +------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:52.284 - INFO - +-------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:52.284 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:52.284 - INFO - +-------- END KW: String.Get Line (0)
20190402 06:18:52.284 - INFO - +-------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:52.284 - INFO - ${clean_out} = ImagePullBackOff
20190402 06:18:52.284 - INFO - +-------- END KW: String.Remove String (0)
20190402 06:18:52.284 - INFO - ${output} = ImagePullBackOff
20190402 06:18:52.285 - INFO - +------- END KW: Utils.Remove Prompt Line (2)
20190402 06:18:52.285 - INFO - +------- START KW: Utils.Get Return Code [ ]
20190402 06:18:52.285 - INFO - +-------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:52.286 - INFO - echo $?
20190402 06:18:52.286 - INFO - +-------- END KW: SSHLibrary.Write (1)
20190402 06:18:52.286 - INFO - +-------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:52.287 - INFO - 0
20190402 06:18:52.287 - INFO - ${rc} = 0
20190402 06:18:52.287 - INFO - +-------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 06:18:52.287 - INFO - +-------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:52.287 - INFO - 0
20190402 06:18:52.287 - INFO - +-------- END KW: BuiltIn.Log (0)
20190402 06:18:52.287 - INFO - ${rc} = 0
20190402 06:18:52.287 - INFO - +------- END KW: Utils.Get Return Code (2)
20190402 06:18:52.287 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:52.288 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:18:52.288 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:52.288 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:52.288 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:52.288 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:52.288 - INFO - +------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:52.289 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: ImagePullBackOff
20190402 06:18:52.289 - INFO - +------- END KW: Collections.Log Dictionary (1)
20190402 06:18:52.289 - INFO - &{result} = { stdout=ImagePullBackOff | stderr= | rc=0 }
20190402 06:18:52.289 - INFO - +------ END KW: Utils.Run Command (137)
20190402 06:18:52.289 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:52.289 - INFO - ${status} = ImagePullBackOff
20190402 06:18:52.289 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 06:18:52.290 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${status} | Running ]
20190402 06:18:52.290 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:18:52.290 - FAIL - ImagePullBackOff != Running
20190402 06:18:52.290 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:52.290 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 06:18:52.290 - INFO - +----- END KW: Utils.Check POD (142)
20190402 06:18:57.291 - INFO - +----- START KW: Utils.Check POD [ ${pod_name} ]
20190402 06:18:57.292 - INFO - +------ START KW: BuiltIn.Set Variable [ kubectl get pods -n default ]
20190402 06:18:57.292 - INFO - ${kubectl_cmd} = kubectl get pods -n default
20190402 06:18:57.293 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:18:57.293 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep ${pod_name} | awk '{print $3}' ]
20190402 06:18:57.294 - INFO - ${cmd} = kubectl get pods -n default|grep testpod|awk '{print $3}'
20190402 06:18:57.294 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:18:57.295 - INFO - +------ START KW: Utils.Run Command [ ${cmd} ]
20190402 06:18:57.296 - INFO - +------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:18:57.296 - INFO - +------- END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:18:57.296 - INFO - +------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:18:57.296 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:18:57.296 - INFO - &{result_dict} = { stdout= }
20190402 06:18:57.297 - INFO - +-------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:18:57.297 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:18:57.297 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:57.297 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:18:57.297 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:57.297 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:18:57.297 - INFO - +------- END KW: Utils.Create Empy Result Dictionary (1)
20190402 06:18:57.298 - INFO - +------- START KW: SSHLibrary.Read [ ]
20190402 06:18:57.298 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:57.298 - INFO - +------- END KW: SSHLibrary.Read (0)
20190402 06:18:57.298 - INFO - +------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:18:57.306 - INFO - kubectl get pods -n default|grep testp od|awk '{print $3}'
20190402 06:18:57.306 - INFO - +------- END KW: SSHLibrary.Write (8)
20190402 06:18:57.306 - INFO - +------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:18:57.442 - INFO - ErrImagePull
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:57.442 - INFO - ${output} = ErrImagePull
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:57.442 - INFO - +------- END KW: SSHLibrary.Read Until Prompt (136)
20190402 06:18:57.442 - INFO - +------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:18:57.443 - INFO - +-------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:18:57.443 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:18:57.443 - INFO - +-------- END KW: String.Get Line (0)
20190402 06:18:57.443 - INFO - +-------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:18:57.443 - INFO - ${clean_out} = ErrImagePull
20190402 06:18:57.443 - INFO - +-------- END KW: String.Remove String (0)
20190402 06:18:57.443 - INFO - ${output} = ErrImagePull
20190402 06:18:57.443 - INFO - +------- END KW: Utils.Remove Prompt Line (1)
20190402 06:18:57.444 - INFO - +------- START KW: Utils.Get Return Code [ ]
20190402 06:18:57.444 - INFO - +-------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:18:57.445 - INFO - echo $?
20190402 06:18:57.445 - INFO - +-------- END KW: SSHLibrary.Write (1)
20190402 06:18:57.445 - INFO - +-------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:18:57.446 - INFO - 0
20190402 06:18:57.446 - INFO - ${rc} = 0
20190402 06:18:57.446 - INFO - +-------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 06:18:57.446 - INFO - +-------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:18:57.446 - INFO - 0
20190402 06:18:57.446 - INFO - +-------- END KW: BuiltIn.Log (0)
20190402 06:18:57.446 - INFO - ${rc} = 0
20190402 06:18:57.446 - INFO - +------- END KW: Utils.Get Return Code (2)
20190402 06:18:57.446 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:18:57.447 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:18:57.447 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:57.447 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:18:57.447 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:18:57.447 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:18:57.447 - INFO - +------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:18:57.448 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: ErrImagePull
20190402 06:18:57.448 - INFO - +------- END KW: Collections.Log Dictionary (1)
20190402 06:18:57.448 - INFO - &{result} = { stdout=ErrImagePull | stderr= | rc=0 }
20190402 06:18:57.448 - INFO - +------ END KW: Utils.Run Command (153)
20190402 06:18:57.448 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:18:57.448 - INFO - ${status} = ErrImagePull
20190402 06:18:57.448 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 06:18:57.448 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${status} | Running ]
20190402 06:18:57.448 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:18:57.449 - FAIL - ErrImagePull != Running
20190402 06:18:57.449 - DEBUG - Traceback (most recent call last):
  None
20190402 06:18:57.449 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 06:18:57.449 - INFO - +----- END KW: Utils.Check POD (158)
20190402 06:19:02.450 - INFO - +----- START KW: Utils.Check POD [ ${pod_name} ]
20190402 06:19:02.451 - INFO - +------ START KW: BuiltIn.Set Variable [ kubectl get pods -n default ]
20190402 06:19:02.452 - INFO - ${kubectl_cmd} = kubectl get pods -n default
20190402 06:19:02.452 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:19:02.453 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep ${pod_name} | awk '{print $3}' ]
20190402 06:19:02.454 - INFO - ${cmd} = kubectl get pods -n default|grep testpod|awk '{print $3}'
20190402 06:19:02.454 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:19:02.454 - INFO - +------ START KW: Utils.Run Command [ ${cmd} ]
20190402 06:19:02.455 - INFO - +------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:19:02.455 - INFO - +------- END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:19:02.455 - INFO - +------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:19:02.455 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:19:02.456 - INFO - &{result_dict} = { stdout= }
20190402 06:19:02.456 - INFO - +-------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:19:02.456 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:19:02.456 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:02.456 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:19:02.456 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:02.457 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:19:02.457 - INFO - +------- END KW: Utils.Create Empy Result Dictionary (2)
20190402 06:19:02.457 - INFO - +------- START KW: SSHLibrary.Read [ ]
20190402 06:19:02.457 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:02.457 - INFO - +------- END KW: SSHLibrary.Read (0)
20190402 06:19:02.457 - INFO - +------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:19:02.466 - INFO - kubectl get pods -n default|grep testp od|awk '{print $3}'
20190402 06:19:02.466 - INFO - +------- END KW: SSHLibrary.Write (9)
20190402 06:19:02.466 - INFO - +------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:19:02.589 - INFO - ErrImagePull
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:02.589 - INFO - ${output} = ErrImagePull
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:02.589 - INFO - +------- END KW: SSHLibrary.Read Until Prompt (123)
20190402 06:19:02.589 - INFO - +------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:19:02.589 - INFO - +-------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:19:02.589 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:02.590 - INFO - +-------- END KW: String.Get Line (0)
20190402 06:19:02.590 - INFO - +-------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:19:02.590 - INFO - ${clean_out} = ErrImagePull
20190402 06:19:02.590 - INFO - +-------- END KW: String.Remove String (0)
20190402 06:19:02.590 - INFO - ${output} = ErrImagePull
20190402 06:19:02.590 - INFO - +------- END KW: Utils.Remove Prompt Line (1)
20190402 06:19:02.590 - INFO - +------- START KW: Utils.Get Return Code [ ]
20190402 06:19:02.590 - INFO - +-------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:19:02.592 - INFO - echo $?
20190402 06:19:02.592 - INFO - +-------- END KW: SSHLibrary.Write (2)
20190402 06:19:02.592 - INFO - +-------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:19:02.592 - INFO - 0
20190402 06:19:02.592 - INFO - ${rc} = 0
20190402 06:19:02.593 - INFO - +-------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 06:19:02.593 - INFO - +-------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:19:02.593 - INFO - 0
20190402 06:19:02.593 - INFO - +-------- END KW: BuiltIn.Log (0)
20190402 06:19:02.593 - INFO - ${rc} = 0
20190402 06:19:02.593 - INFO - +------- END KW: Utils.Get Return Code (3)
20190402 06:19:02.593 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:19:02.593 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:19:02.594 - INFO - +-------- END KW: Collections.Set To Dictionary (1)
20190402 06:19:02.594 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:19:02.594 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:19:02.594 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:02.594 - INFO - +------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:19:02.594 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: ErrImagePull
20190402 06:19:02.594 - INFO - +------- END KW: Collections.Log Dictionary (0)
20190402 06:19:02.595 - INFO - &{result} = { stdout=ErrImagePull | stderr= | rc=0 }
20190402 06:19:02.595 - INFO - +------ END KW: Utils.Run Command (141)
20190402 06:19:02.595 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:19:02.595 - INFO - ${status} = ErrImagePull
20190402 06:19:02.595 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 06:19:02.595 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${status} | Running ]
20190402 06:19:02.595 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:19:02.595 - FAIL - ErrImagePull != Running
20190402 06:19:02.595 - DEBUG - Traceback (most recent call last):
  None
20190402 06:19:02.595 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 06:19:02.596 - INFO - +----- END KW: Utils.Check POD (147)
20190402 06:19:07.596 - INFO - +----- START KW: Utils.Check POD [ ${pod_name} ]
20190402 06:19:07.598 - INFO - +------ START KW: BuiltIn.Set Variable [ kubectl get pods -n default ]
20190402 06:19:07.598 - INFO - ${kubectl_cmd} = kubectl get pods -n default
20190402 06:19:07.598 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:19:07.599 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep ${pod_name} | awk '{print $3}' ]
20190402 06:19:07.600 - INFO - ${cmd} = kubectl get pods -n default|grep testpod|awk '{print $3}'
20190402 06:19:07.600 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:19:07.600 - INFO - +------ START KW: Utils.Run Command [ ${cmd} ]
20190402 06:19:07.602 - INFO - +------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:19:07.602 - INFO - +------- END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:19:07.602 - INFO - +------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:19:07.602 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:19:07.603 - INFO - &{result_dict} = { stdout= }
20190402 06:19:07.603 - INFO - +-------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:19:07.603 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:19:07.603 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:07.603 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:19:07.603 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:07.604 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:19:07.604 - INFO - +------- END KW: Utils.Create Empy Result Dictionary (2)
20190402 06:19:07.604 - INFO - +------- START KW: SSHLibrary.Read [ ]
20190402 06:19:07.604 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:07.604 - INFO - +------- END KW: SSHLibrary.Read (0)
20190402 06:19:07.604 - INFO - +------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:19:07.612 - INFO - kubectl get pods -n default|grep testp od|awk '{print $3}'
20190402 06:19:07.613 - INFO - +------- END KW: SSHLibrary.Write (9)
20190402 06:19:07.613 - INFO - +------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:19:07.736 - INFO - ErrImagePull
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:07.736 - INFO - ${output} = ErrImagePull
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:07.736 - INFO - +------- END KW: SSHLibrary.Read Until Prompt (123)
20190402 06:19:07.737 - INFO - +------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:19:07.737 - INFO - +-------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:19:07.737 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:07.737 - INFO - +-------- END KW: String.Get Line (0)
20190402 06:19:07.737 - INFO - +-------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:19:07.737 - INFO - ${clean_out} = ErrImagePull
20190402 06:19:07.737 - INFO - +-------- END KW: String.Remove String (0)
20190402 06:19:07.738 - INFO - ${output} = ErrImagePull
20190402 06:19:07.738 - INFO - +------- END KW: Utils.Remove Prompt Line (1)
20190402 06:19:07.738 - INFO - +------- START KW: Utils.Get Return Code [ ]
20190402 06:19:07.738 - INFO - +-------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:19:07.739 - INFO - echo $?
20190402 06:19:07.739 - INFO - +-------- END KW: SSHLibrary.Write (1)
20190402 06:19:07.740 - INFO - +-------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:19:07.740 - INFO - 0
20190402 06:19:07.740 - INFO - ${rc} = 0
20190402 06:19:07.740 - INFO - +-------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 06:19:07.740 - INFO - +-------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:19:07.740 - INFO - 0
20190402 06:19:07.740 - INFO - +-------- END KW: BuiltIn.Log (0)
20190402 06:19:07.740 - INFO - ${rc} = 0
20190402 06:19:07.740 - INFO - +------- END KW: Utils.Get Return Code (2)
20190402 06:19:07.741 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:19:07.741 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:19:07.741 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:07.741 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 06:19:07.741 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:19:07.742 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 06:19:07.742 - INFO - +------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:19:07.742 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: ErrImagePull
20190402 06:19:07.742 - INFO - +------- END KW: Collections.Log Dictionary (0)
20190402 06:19:07.742 - INFO - &{result} = { stdout=ErrImagePull | stderr= | rc=0 }
20190402 06:19:07.742 - INFO - +------ END KW: Utils.Run Command (142)
20190402 06:19:07.742 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:19:07.742 - INFO - ${status} = ErrImagePull
20190402 06:19:07.742 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 06:19:07.743 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${status} | Running ]
20190402 06:19:07.743 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:19:07.743 - FAIL - ErrImagePull != Running
20190402 06:19:07.743 - DEBUG - Traceback (most recent call last):
  None
20190402 06:19:07.743 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 06:19:07.743 - INFO - +----- END KW: Utils.Check POD (147)
20190402 06:19:12.744 - INFO - +----- START KW: Utils.Check POD [ ${pod_name} ]
20190402 06:19:12.745 - INFO - +------ START KW: BuiltIn.Set Variable [ kubectl get pods -n default ]
20190402 06:19:12.746 - INFO - ${kubectl_cmd} = kubectl get pods -n default
20190402 06:19:12.746 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:19:12.746 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep ${pod_name} | awk '{print $3}' ]
20190402 06:19:12.747 - INFO - ${cmd} = kubectl get pods -n default|grep testpod|awk '{print $3}'
20190402 06:19:12.748 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:19:12.748 - INFO - +------ START KW: Utils.Run Command [ ${cmd} ]
20190402 06:19:12.749 - INFO - +------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:19:12.749 - INFO - +------- END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:19:12.749 - INFO - +------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:19:12.749 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:19:12.750 - INFO - &{result_dict} = { stdout= }
20190402 06:19:12.750 - INFO - +-------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:19:12.750 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:19:12.750 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:12.750 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:19:12.750 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:12.751 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:19:12.751 - INFO - +------- END KW: Utils.Create Empy Result Dictionary (2)
20190402 06:19:12.751 - INFO - +------- START KW: SSHLibrary.Read [ ]
20190402 06:19:12.751 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:12.751 - INFO - +------- END KW: SSHLibrary.Read (0)
20190402 06:19:12.751 - INFO - +------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:19:12.755 - INFO - kubectl get pods -n default|grep testp od|awk '{print $3}'
20190402 06:19:12.755 - INFO - +------- END KW: SSHLibrary.Write (4)
20190402 06:19:12.756 - INFO - +------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:19:12.883 - INFO - ImagePullBackOff
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:12.883 - INFO - ${output} = ImagePullBackOff
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:12.883 - INFO - +------- END KW: SSHLibrary.Read Until Prompt (127)
20190402 06:19:12.883 - INFO - +------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:19:12.884 - INFO - +-------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:19:12.884 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:12.884 - INFO - +-------- END KW: String.Get Line (0)
20190402 06:19:12.884 - INFO - +-------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:19:12.884 - INFO - ${clean_out} = ImagePullBackOff
20190402 06:19:12.884 - INFO - +-------- END KW: String.Remove String (0)
20190402 06:19:12.884 - INFO - ${output} = ImagePullBackOff
20190402 06:19:12.884 - INFO - +------- END KW: Utils.Remove Prompt Line (1)
20190402 06:19:12.884 - INFO - +------- START KW: Utils.Get Return Code [ ]
20190402 06:19:12.885 - INFO - +-------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:19:12.886 - INFO - echo $?
20190402 06:19:12.886 - INFO - +-------- END KW: SSHLibrary.Write (1)
20190402 06:19:12.886 - INFO - +-------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:19:12.886 - INFO - 0
20190402 06:19:12.887 - INFO - ${rc} = 0
20190402 06:19:12.887 - INFO - +-------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 06:19:12.887 - INFO - +-------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:19:12.887 - INFO - 0
20190402 06:19:12.887 - INFO - +-------- END KW: BuiltIn.Log (0)
20190402 06:19:12.887 - INFO - ${rc} = 0
20190402 06:19:12.887 - INFO - +------- END KW: Utils.Get Return Code (3)
20190402 06:19:12.887 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:19:12.888 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:19:12.888 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:12.888 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:19:12.888 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:19:12.888 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:12.888 - INFO - +------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:19:12.888 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: ImagePullBackOff
20190402 06:19:12.888 - INFO - +------- END KW: Collections.Log Dictionary (0)
20190402 06:19:12.889 - INFO - &{result} = { stdout=ImagePullBackOff | stderr= | rc=0 }
20190402 06:19:12.889 - INFO - +------ END KW: Utils.Run Command (141)
20190402 06:19:12.889 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:19:12.889 - INFO - ${status} = ImagePullBackOff
20190402 06:19:12.889 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 06:19:12.889 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${status} | Running ]
20190402 06:19:12.889 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:19:12.889 - FAIL - ImagePullBackOff != Running
20190402 06:19:12.890 - DEBUG - Traceback (most recent call last):
  None
20190402 06:19:12.890 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 06:19:12.890 - INFO - +----- END KW: Utils.Check POD (146)
20190402 06:19:17.890 - INFO - +----- START KW: Utils.Check POD [ ${pod_name} ]
20190402 06:19:17.892 - INFO - +------ START KW: BuiltIn.Set Variable [ kubectl get pods -n default ]
20190402 06:19:17.893 - INFO - ${kubectl_cmd} = kubectl get pods -n default
20190402 06:19:17.893 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:19:17.893 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep ${pod_name} | awk '{print $3}' ]
20190402 06:19:17.894 - INFO - ${cmd} = kubectl get pods -n default|grep testpod|awk '{print $3}'
20190402 06:19:17.894 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:19:17.895 - INFO - +------ START KW: Utils.Run Command [ ${cmd} ]
20190402 06:19:17.896 - INFO - +------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:19:17.897 - INFO - +------- END KW: SSHLibrary.Set Client Configuration (1)
20190402 06:19:17.897 - INFO - +------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:19:17.898 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:19:17.900 - INFO - &{result_dict} = { stdout= }
20190402 06:19:17.900 - INFO - +-------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:19:17.901 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:19:17.902 - INFO - +-------- END KW: Collections.Set To Dictionary (1)
20190402 06:19:17.903 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:19:17.904 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:17.904 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:19:17.905 - INFO - +------- END KW: Utils.Create Empy Result Dictionary (7)
20190402 06:19:17.905 - INFO - +------- START KW: SSHLibrary.Read [ ]
20190402 06:19:17.905 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:17.906 - INFO - +------- END KW: SSHLibrary.Read (0)
20190402 06:19:17.906 - INFO - +------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:19:17.931 - INFO - kubectl get pods -n default|grep testp od|awk '{print $3}'
20190402 06:19:17.931 - INFO - +------- END KW: SSHLibrary.Write (25)
20190402 06:19:17.931 - INFO - +------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:19:18.042 - INFO - ImagePullBackOff
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:18.042 - INFO - ${output} = ImagePullBackOff
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:18.042 - INFO - +------- END KW: SSHLibrary.Read Until Prompt (111)
20190402 06:19:18.042 - INFO - +------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:19:18.042 - INFO - +-------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:19:18.043 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:18.043 - INFO - +-------- END KW: String.Get Line (1)
20190402 06:19:18.043 - INFO - +-------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:19:18.043 - INFO - ${clean_out} = ImagePullBackOff
20190402 06:19:18.043 - INFO - +-------- END KW: String.Remove String (0)
20190402 06:19:18.043 - INFO - ${output} = ImagePullBackOff
20190402 06:19:18.043 - INFO - +------- END KW: Utils.Remove Prompt Line (1)
20190402 06:19:18.043 - INFO - +------- START KW: Utils.Get Return Code [ ]
20190402 06:19:18.043 - INFO - +-------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:19:18.045 - INFO - echo $?
20190402 06:19:18.045 - INFO - +-------- END KW: SSHLibrary.Write (2)
20190402 06:19:18.045 - INFO - +-------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:19:18.045 - INFO - 0
20190402 06:19:18.045 - INFO - ${rc} = 0
20190402 06:19:18.045 - INFO - +-------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 06:19:18.045 - INFO - +-------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:19:18.046 - INFO - 0
20190402 06:19:18.046 - INFO - +-------- END KW: BuiltIn.Log (1)
20190402 06:19:18.046 - INFO - ${rc} = 0
20190402 06:19:18.046 - INFO - +------- END KW: Utils.Get Return Code (3)
20190402 06:19:18.046 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:19:18.046 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:19:18.047 - INFO - +-------- END KW: Collections.Set To Dictionary (1)
20190402 06:19:18.047 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:19:18.047 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:19:18.047 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:18.047 - INFO - +------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:19:18.047 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: ImagePullBackOff
20190402 06:19:18.047 - INFO - +------- END KW: Collections.Log Dictionary (0)
20190402 06:19:18.048 - INFO - &{result} = { stdout=ImagePullBackOff | stderr= | rc=0 }
20190402 06:19:18.048 - INFO - +------ END KW: Utils.Run Command (153)
20190402 06:19:18.048 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:19:18.048 - INFO - ${status} = ImagePullBackOff
20190402 06:19:18.048 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 06:19:18.048 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${status} | Running ]
20190402 06:19:18.048 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:19:18.048 - FAIL - ImagePullBackOff != Running
20190402 06:19:18.048 - DEBUG - Traceback (most recent call last):
  None
20190402 06:19:18.048 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 06:19:18.049 - INFO - +----- END KW: Utils.Check POD (158)
20190402 06:19:23.049 - INFO - +----- START KW: Utils.Check POD [ ${pod_name} ]
20190402 06:19:23.051 - INFO - +------ START KW: BuiltIn.Set Variable [ kubectl get pods -n default ]
20190402 06:19:23.051 - INFO - ${kubectl_cmd} = kubectl get pods -n default
20190402 06:19:23.052 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:19:23.052 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep ${pod_name} | awk '{print $3}' ]
20190402 06:19:23.053 - INFO - ${cmd} = kubectl get pods -n default|grep testpod|awk '{print $3}'
20190402 06:19:23.053 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:19:23.053 - INFO - +------ START KW: Utils.Run Command [ ${cmd} ]
20190402 06:19:23.055 - INFO - +------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:19:23.056 - INFO - +------- END KW: SSHLibrary.Set Client Configuration (1)
20190402 06:19:23.056 - INFO - +------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:19:23.057 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:19:23.059 - INFO - &{result_dict} = { stdout= }
20190402 06:19:23.059 - INFO - +-------- END KW: BuiltIn.Create Dictionary (2)
20190402 06:19:23.059 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:19:23.060 - INFO - +-------- END KW: Collections.Set To Dictionary (1)
20190402 06:19:23.061 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:19:23.061 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:23.062 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:19:23.062 - INFO - +------- END KW: Utils.Create Empy Result Dictionary (6)
20190402 06:19:23.063 - INFO - +------- START KW: SSHLibrary.Read [ ]
20190402 06:19:23.063 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:23.064 - INFO - +------- END KW: SSHLibrary.Read (1)
20190402 06:19:23.064 - INFO - +------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:19:23.079 - INFO - kubectl get pods -n default|grep testp od|awk '{print $3}'
20190402 06:19:23.079 - INFO - +------- END KW: SSHLibrary.Write (15)
20190402 06:19:23.079 - INFO - +------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:19:23.199 - INFO - ImagePullBackOff
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:23.199 - INFO - ${output} = ImagePullBackOff
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:23.199 - INFO - +------- END KW: SSHLibrary.Read Until Prompt (120)
20190402 06:19:23.199 - INFO - +------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:19:23.199 - INFO - +-------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:19:23.200 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:23.200 - INFO - +-------- END KW: String.Get Line (1)
20190402 06:19:23.200 - INFO - +-------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:19:23.200 - INFO - ${clean_out} = ImagePullBackOff
20190402 06:19:23.200 - INFO - +-------- END KW: String.Remove String (0)
20190402 06:19:23.200 - INFO - ${output} = ImagePullBackOff
20190402 06:19:23.200 - INFO - +------- END KW: Utils.Remove Prompt Line (1)
20190402 06:19:23.200 - INFO - +------- START KW: Utils.Get Return Code [ ]
20190402 06:19:23.200 - INFO - +-------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:19:23.202 - INFO - echo $?
20190402 06:19:23.202 - INFO - +-------- END KW: SSHLibrary.Write (2)
20190402 06:19:23.202 - INFO - +-------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:19:23.202 - INFO - 0
20190402 06:19:23.202 - INFO - ${rc} = 0
20190402 06:19:23.203 - INFO - +-------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 06:19:23.203 - INFO - +-------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:19:23.203 - INFO - 0
20190402 06:19:23.203 - INFO - +-------- END KW: BuiltIn.Log (0)
20190402 06:19:23.203 - INFO - ${rc} = 0
20190402 06:19:23.203 - INFO - +------- END KW: Utils.Get Return Code (3)
20190402 06:19:23.203 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:19:23.203 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:19:23.204 - INFO - +-------- END KW: Collections.Set To Dictionary (1)
20190402 06:19:23.204 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:19:23.204 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:19:23.204 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:23.204 - INFO - +------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:19:23.204 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: ImagePullBackOff
20190402 06:19:23.204 - INFO - +------- END KW: Collections.Log Dictionary (0)
20190402 06:19:23.205 - INFO - &{result} = { stdout=ImagePullBackOff | stderr= | rc=0 }
20190402 06:19:23.205 - INFO - +------ END KW: Utils.Run Command (152)
20190402 06:19:23.205 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:19:23.205 - INFO - ${status} = ImagePullBackOff
20190402 06:19:23.205 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 06:19:23.205 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${status} | Running ]
20190402 06:19:23.205 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:19:23.205 - FAIL - ImagePullBackOff != Running
20190402 06:19:23.205 - DEBUG - Traceback (most recent call last):
  None
20190402 06:19:23.205 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 06:19:23.205 - INFO - +----- END KW: Utils.Check POD (156)
20190402 06:19:28.206 - INFO - +----- START KW: Utils.Check POD [ ${pod_name} ]
20190402 06:19:28.208 - INFO - +------ START KW: BuiltIn.Set Variable [ kubectl get pods -n default ]
20190402 06:19:28.208 - INFO - ${kubectl_cmd} = kubectl get pods -n default
20190402 06:19:28.209 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 06:19:28.209 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep ${pod_name} | awk '{print $3}' ]
20190402 06:19:28.210 - INFO - ${cmd} = kubectl get pods -n default|grep testpod|awk '{print $3}'
20190402 06:19:28.210 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:19:28.211 - INFO - +------ START KW: Utils.Run Command [ ${cmd} ]
20190402 06:19:28.212 - INFO - +------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:19:28.212 - INFO - +------- END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:19:28.212 - INFO - +------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:19:28.212 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:19:28.212 - INFO - &{result_dict} = { stdout= }
20190402 06:19:28.213 - INFO - +-------- END KW: BuiltIn.Create Dictionary (1)
20190402 06:19:28.213 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:19:28.213 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:28.213 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:19:28.213 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:28.213 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:19:28.213 - INFO - +------- END KW: Utils.Create Empy Result Dictionary (1)
20190402 06:19:28.214 - INFO - +------- START KW: SSHLibrary.Read [ ]
20190402 06:19:28.214 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:28.214 - INFO - +------- END KW: SSHLibrary.Read (1)
20190402 06:19:28.214 - INFO - +------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:19:28.222 - INFO - kubectl get pods -n default|grep testp od|awk '{print $3}'
20190402 06:19:28.222 - INFO - +------- END KW: SSHLibrary.Write (8)
20190402 06:19:28.222 - INFO - +------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:19:28.351 - INFO - ErrImagePull
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:28.352 - INFO - ${output} = ErrImagePull
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:28.352 - INFO - +------- END KW: SSHLibrary.Read Until Prompt (130)
20190402 06:19:28.352 - INFO - +------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:19:28.352 - INFO - +-------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:19:28.352 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:28.352 - INFO - +-------- END KW: String.Get Line (0)
20190402 06:19:28.353 - INFO - +-------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:19:28.353 - INFO - ${clean_out} = ErrImagePull
20190402 06:19:28.353 - INFO - +-------- END KW: String.Remove String (0)
20190402 06:19:28.353 - INFO - ${output} = ErrImagePull
20190402 06:19:28.353 - INFO - +------- END KW: Utils.Remove Prompt Line (1)
20190402 06:19:28.353 - INFO - +------- START KW: Utils.Get Return Code [ ]
20190402 06:19:28.353 - INFO - +-------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:19:28.355 - INFO - echo $?
20190402 06:19:28.355 - INFO - +-------- END KW: SSHLibrary.Write (2)
20190402 06:19:28.355 - INFO - +-------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:19:28.355 - INFO - 0
20190402 06:19:28.355 - INFO - ${rc} = 0
20190402 06:19:28.355 - INFO - +-------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 06:19:28.355 - INFO - +-------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:19:28.355 - INFO - 0
20190402 06:19:28.356 - INFO - +-------- END KW: BuiltIn.Log (0)
20190402 06:19:28.356 - INFO - ${rc} = 0
20190402 06:19:28.356 - INFO - +------- END KW: Utils.Get Return Code (3)
20190402 06:19:28.356 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:19:28.356 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:19:28.356 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:28.356 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 06:19:28.357 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:19:28.357 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:28.357 - INFO - +------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:19:28.357 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: ErrImagePull
20190402 06:19:28.357 - INFO - +------- END KW: Collections.Log Dictionary (0)
20190402 06:19:28.357 - INFO - &{result} = { stdout=ErrImagePull | stderr= | rc=0 }
20190402 06:19:28.357 - INFO - +------ END KW: Utils.Run Command (146)
20190402 06:19:28.357 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:19:28.358 - INFO - ${status} = ErrImagePull
20190402 06:19:28.358 - INFO - +------ END KW: Collections.Get From Dictionary (1)
20190402 06:19:28.358 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${status} | Running ]
20190402 06:19:28.358 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:19:28.358 - FAIL - ErrImagePull != Running
20190402 06:19:28.358 - DEBUG - Traceback (most recent call last):
  None
20190402 06:19:28.358 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 06:19:28.358 - INFO - +----- END KW: Utils.Check POD (152)
20190402 06:19:33.359 - INFO - +----- START KW: Utils.Check POD [ ${pod_name} ]
20190402 06:19:33.359 - INFO - +------ START KW: BuiltIn.Set Variable [ kubectl get pods -n default ]
20190402 06:19:33.359 - INFO - ${kubectl_cmd} = kubectl get pods -n default
20190402 06:19:33.359 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 06:19:33.359 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep ${pod_name} | awk '{print $3}' ]
20190402 06:19:33.360 - INFO - ${cmd} = kubectl get pods -n default|grep testpod|awk '{print $3}'
20190402 06:19:33.360 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 06:19:33.360 - INFO - +------ START KW: Utils.Run Command [ ${cmd} ]
20190402 06:19:33.360 - INFO - +------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 06:19:33.360 - INFO - +------- END KW: SSHLibrary.Set Client Configuration (0)
20190402 06:19:33.360 - INFO - +------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 06:19:33.361 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 06:19:33.361 - INFO - &{result_dict} = { stdout= }
20190402 06:19:33.361 - INFO - +-------- END KW: BuiltIn.Create Dictionary (0)
20190402 06:19:33.361 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 06:19:33.362 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:33.362 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 06:19:33.362 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:33.362 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 06:19:33.362 - INFO - +------- END KW: Utils.Create Empy Result Dictionary (2)
20190402 06:19:33.362 - INFO - +------- START KW: SSHLibrary.Read [ ]
20190402 06:19:33.362 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:33.362 - INFO - +------- END KW: SSHLibrary.Read (0)
20190402 06:19:33.363 - INFO - +------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 06:19:33.374 - INFO - kubectl get pods -n default|grep testp od|awk '{print $3}'
20190402 06:19:33.375 - INFO - +------- END KW: SSHLibrary.Write (12)
20190402 06:19:33.375 - INFO - +------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 06:19:33.501 - INFO - ErrImagePull
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:33.501 - INFO - ${output} = ErrImagePull
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:33.501 - INFO - +------- END KW: SSHLibrary.Read Until Prompt (126)
20190402 06:19:33.502 - INFO - +------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 06:19:33.502 - INFO - +-------- START KW: String.Get Line [ ${output} | -1 ]
20190402 06:19:33.502 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 06:19:33.502 - INFO - +-------- END KW: String.Get Line (0)
20190402 06:19:33.502 - INFO - +-------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 06:19:33.502 - INFO - ${clean_out} = ErrImagePull
20190402 06:19:33.502 - INFO - +-------- END KW: String.Remove String (0)
20190402 06:19:33.503 - INFO - ${output} = ErrImagePull
20190402 06:19:33.503 - INFO - +------- END KW: Utils.Remove Prompt Line (1)
20190402 06:19:33.503 - INFO - +------- START KW: Utils.Get Return Code [ ]
20190402 06:19:33.503 - INFO - +-------- START KW: SSHLibrary.Write [ echo $? ]
20190402 06:19:33.505 - INFO - echo $?
20190402 06:19:33.505 - INFO - +-------- END KW: SSHLibrary.Write (2)
20190402 06:19:33.505 - INFO - +-------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 06:19:33.506 - INFO - 0
20190402 06:19:33.506 - INFO - ${rc} = 0
20190402 06:19:33.506 - INFO - +-------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 06:19:33.506 - INFO - +-------- START KW: BuiltIn.Log [ ${rc} ]
20190402 06:19:33.506 - INFO - 0
20190402 06:19:33.506 - INFO - +-------- END KW: BuiltIn.Log (0)
20190402 06:19:33.506 - INFO - ${rc} = 0
20190402 06:19:33.506 - INFO - +------- END KW: Utils.Get Return Code (3)
20190402 06:19:33.506 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 06:19:33.507 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 06:19:33.507 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:33.507 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 06:19:33.507 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 06:19:33.507 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 06:19:33.507 - INFO - +------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 06:19:33.508 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: ErrImagePull
20190402 06:19:33.508 - INFO - +------- END KW: Collections.Log Dictionary (1)
20190402 06:19:33.508 - INFO - &{result} = { stdout=ErrImagePull | stderr= | rc=0 }
20190402 06:19:33.508 - INFO - +------ END KW: Utils.Run Command (148)
20190402 06:19:33.508 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 06:19:33.508 - INFO - ${status} = ErrImagePull
20190402 06:19:33.508 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 06:19:33.508 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${status} | Running ]
20190402 06:19:33.508 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 06:19:33.509 - FAIL - ErrImagePull != Running
20190402 06:19:33.509 - DEBUG - Traceback (most recent call last):
  None
20190402 06:19:33.509 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 06:19:33.509 - INFO - +----- END KW: Utils.Check POD (151)
20190402 06:19:33.509 - FAIL - Keyword 'Check POD' failed after retrying for 1 minute. The last error was: ErrImagePull != Running
20190402 06:19:33.509 - DEBUG - Traceback (most recent call last):
  None
20190402 06:19:33.509 - INFO - +---- END KW: BuiltIn.Wait Until Keyword Succeeds (61961)
------------------------------------------------------------------------------
20190402 06:19:33.509 - INFO - +--- END TEST: Create Check Delete POD (62205)
------------------------------------------------------------------------------
20190402 06:19:33.510 - INFO - +--- START TEARDOWN: BuiltIn.Run Keywords [ Utils.Stx Suite TearDown ]
20190402 06:19:33.510 - INFO - +---- START KW: Utils.Stx Suite TearDown [ ]
20190402 06:19:33.510 - INFO - +----- START KW: SSHLibrary.Close All Connections [ ]
20190402 06:19:33.512 - INFO - +----- END KW: SSHLibrary.Close All Connections (2)
20190402 06:19:33.512 - INFO - +---- END KW: Utils.Stx Suite TearDown (2)
20190402 06:19:33.512 - INFO - +--- END TEARDOWN: BuiltIn.Run Keywords (2)
==============================================================================
20190402 06:19:33.513 - INFO - +-- END SUITE: Sanity-Test.Sanity-Platform.02-OpenStack-Pod-Healthy (68582)
==============================================================================
20190402 06:19:33.515 - INFO - +- END SUITE: Sanity-Test.Sanity-Platform (68585)
==============================================================================
20190402 06:19:33.524 - INFO - + END SUITE: Sanity-Test (132340)
==============================================================================
