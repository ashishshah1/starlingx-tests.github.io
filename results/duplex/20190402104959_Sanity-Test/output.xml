<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20190402 10:49:59.777" generator="Robot 3.1.1 (Python 2.7.15 on linux2)">
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test" id="s1" name="Sanity-Test">
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-OpenStack" id="s1-s1" name="Sanity-OpenStack">
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-OpenStack/01-Instance-From-Image.robot" id="s1-s1-s1" name="01-Instance-From-Image">
<kw type="setup" name="Stx Suite Setup" library="Utils">
<doc>Wrapper to setup the environment needed for exercise
StarlingX features</doc>
<kw name="Open Master Controller Connection" library="Utils">
<doc>Establish a SSH connection with the master controller
to start executing the the suite.</doc>
<kw name="Connect to Controller Node" library="Utils">
<doc>Stablish a SSH connection to the controller and return
the connection id</doc>
<arguments>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_NAME}</arg>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_PSWD}</arg>
<arg>${CONFIG.general.IP_UNIT_0_ADDRESS}</arg>
</arguments>
<assign>
<var>${master_controller_connection}</var>
</assign>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${ip_address} prompt=${prompt}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${controller_connection}</var>
</assign>
<msg timestamp="20190402 10:49:59.924" level="INFO">${controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 10:49:59.924" starttime="20190402 10:49:59.924"></status>
</kw>
<kw name="Flexible_SSH_Login" library="Utils">
<doc>On active SSH session: if given non-empty password,
do Login, else do Login With Public Key.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${password}</arg>
</arguments>
<assign>
<var>${pwd_length}</var>
</assign>
<msg timestamp="20190402 10:49:59.925" level="INFO">Length is 10</msg>
<msg timestamp="20190402 10:49:59.925" level="INFO">${pwd_length} = 10</msg>
<status status="PASS" endtime="20190402 10:49:59.925" starttime="20190402 10:49:59.925"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${pwd_length} &gt; 0</arg>
<arg>SSHLibrary.Login</arg>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<msg timestamp="20190402 10:49:59.926" level="INFO">Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.</msg>
<msg timestamp="20190402 10:50:01.091" level="INFO">Read output: Last login: Tue Apr  2 16:30:00 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$</msg>
<msg timestamp="20190402 10:50:01.092" level="INFO">/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/paramiko/kex_ecdh_nist.py:39: CryptographyDeprecationWarning: encode_point has been deprecated on EllipticCurvePublicNumbers and will be removed in a future version. Please use EllipticCurvePublicKey.public_bytes to obtain both compressed and uncompressed point encoding.
  m.add_string(self.Q_C.public_numbers().encode_point())
/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/paramiko/kex_ecdh_nist.py:96: CryptographyDeprecationWarning: Support for unsafe construction of public numbers from encoded data will be removed in a future version. Please use EllipticCurvePublicKey.from_encoded_point
  self.curve, Q_S_bytes
/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/paramiko/kex_ecdh_nist.py:111: CryptographyDeprecationWarning: encode_point has been deprecated on EllipticCurvePublicNumbers and will be removed in a future version. Please use EllipticCurvePublicKey.public_bytes to obtain both compressed and uncompressed point encoding.
  hm.add_string(self.Q_C.public_numbers().encode_point())</msg>
<status status="PASS" endtime="20190402 10:50:01.092" starttime="20190402 10:49:59.925"></status>
</kw>
<msg timestamp="20190402 10:50:01.092" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190402 10:50:01.092" starttime="20190402 10:49:59.925"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:01.092" starttime="20190402 10:49:59.925"></status>
</kw>
<msg timestamp="20190402 10:50:01.092" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 10:50:01.092" starttime="20190402 10:49:59.924"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190402 10:50:01.093" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 10:50:01.093" starttime="20190402 10:50:01.092"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190402 10:50:01.093" level="INFO">1</msg>
<status status="PASS" endtime="20190402 10:50:01.093" starttime="20190402 10:50:01.093"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:01.093" starttime="20190402 10:49:59.923"></status>
</kw>
<kw name="Set Env Vars From Openrc" library="Utils">
<doc>Sources the openrc form /etc/nova/ to have the admin
variables exported on the controller.</doc>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>source /etc/platform/openrc</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 10:50:01.094" starttime="20190402 10:50:01.094"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 10:50:01.095" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 10:50:01.095" starttime="20190402 10:50:01.094"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:50:01.095" starttime="20190402 10:50:01.095"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:50:01.096" starttime="20190402 10:50:01.095"></status>
</kw>
<msg timestamp="20190402 10:50:01.096" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 10:50:01.096" starttime="20190402 10:50:01.094"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20190402 10:50:01.096" starttime="20190402 10:50:01.096"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 10:50:01.101" level="INFO">source /etc/platform/openrc</msg>
<status status="PASS" endtime="20190402 10:50:01.101" starttime="20190402 10:50:01.096"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 10:50:01.584" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 10:50:01.584" level="INFO">${output} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 10:50:01.584" starttime="20190402 10:50:01.102"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 10:50:01.585" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 10:50:01.585" starttime="20190402 10:50:01.585"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 10:50:01.586" level="INFO">${clean_out} = </msg>
<status status="PASS" endtime="20190402 10:50:01.586" starttime="20190402 10:50:01.585"></status>
</kw>
<msg timestamp="20190402 10:50:01.586" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190402 10:50:01.586" starttime="20190402 10:50:01.584"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 10:50:01.588" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 10:50:01.588" starttime="20190402 10:50:01.586"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:50:01.588" level="INFO">0</msg>
<msg timestamp="20190402 10:50:01.589" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:50:01.589" starttime="20190402 10:50:01.588"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 10:50:01.589" level="INFO">0</msg>
<status status="PASS" endtime="20190402 10:50:01.589" starttime="20190402 10:50:01.589"></status>
</kw>
<msg timestamp="20190402 10:50:01.589" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:50:01.589" starttime="20190402 10:50:01.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:50:01.591" starttime="20190402 10:50:01.590"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:01.591" starttime="20190402 10:50:01.590"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:50:01.591" starttime="20190402 10:50:01.591"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 10:50:01.591" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: </msg>
<status status="PASS" endtime="20190402 10:50:01.592" starttime="20190402 10:50:01.591"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:01.592" starttime="20190402 10:50:01.094"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:01.592" starttime="20190402 10:50:01.093"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:01.592" starttime="20190402 10:49:59.923"></status>
</kw>
<test id="s1-s1-s1-t1" name="Create Flavors for Instances">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${flavor_property_1}</arg>
<arg>${flavor_property_2}</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190402 10:50:01.593" level="INFO">${properties} = --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared'</msg>
<status status="PASS" endtime="20190402 10:50:01.593" starttime="20190402 10:50:01.593"></status>
</kw>
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${cirros_flavor_ram}</arg>
<arg>${cirros_flavor_vcpus}</arg>
<arg>${cirros_flavor_disk}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:50:01.595" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190402 10:50:01.595" starttime="20190402 10:50:01.594"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:50:01.595" level="INFO">${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small</msg>
<status status="PASS" endtime="20190402 10:50:01.595" starttime="20190402 10:50:01.595"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:50:01.596" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:50:01.597" starttime="20190402 10:50:01.596"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:50:01.597" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.</msg>
<msg timestamp="20190402 10:50:03.391" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:50:03.391" level="INFO">${stdout} = +----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+------------------------------...</msg>
<msg timestamp="20190402 10:50:03.392" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:50:03.392" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:50:03.392" starttime="20190402 10:50:01.597"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:50:03.393" level="INFO">${res} = {u'stdout': u'+----------------------------+--------------------------------------+\n| Field                      | Value                                |\n+----------------------------+--------------...</msg>
<status status="PASS" endtime="20190402 10:50:03.394" starttime="20190402 10:50:03.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:50:03.395" starttime="20190402 10:50:03.394"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:03.395" starttime="20190402 10:50:01.596"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:03.395" starttime="20190402 10:50:01.594"></status>
</kw>
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${centos_flavor_ram}</arg>
<arg>${centos_flavor_vcpus}</arg>
<arg>${centos_flavor_disk}</arg>
<arg>${properties}</arg>
<arg>${centos_flavor_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:50:03.397" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190402 10:50:03.397" starttime="20190402 10:50:03.397"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:50:03.398" level="INFO">${cmd} = openstack flavor create --ram 4096 --disk 40 --vcpus 2 --public --id auto f1.medium --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared'</msg>
<status status="PASS" endtime="20190402 10:50:03.399" starttime="20190402 10:50:03.398"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:50:03.401" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:50:03.401" starttime="20190402 10:50:03.400"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:50:03.402" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 4096 --disk 40 --vcpus 2 --public --id auto f1.medium --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared''.</msg>
<msg timestamp="20190402 10:50:04.834" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:50:04.834" level="INFO">${stdout} = +----------------------------+--------------------------------------------------------+
| Field                      | Value                                                  |
+-----------------------...</msg>
<msg timestamp="20190402 10:50:04.834" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:50:04.834" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:50:04.835" starttime="20190402 10:50:03.401"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:50:04.836" level="INFO">${res} = {u'stdout': u"+----------------------------+--------------------------------------------------------+\n| Field                      | Value                                                  |\n+-------...</msg>
<status status="PASS" endtime="20190402 10:50:04.837" starttime="20190402 10:50:04.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:50:04.838" starttime="20190402 10:50:04.837"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:04.838" starttime="20190402 10:50:03.399"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:04.838" starttime="20190402 10:50:03.396"></status>
</kw>
<doc>Create flavors with or without properties to be used
to launch Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 10:50:04.839" critical="yes" starttime="20190402 10:50:01.592"></status>
</test>
<test id="s1-s1-s1-t2" name="Create Images for Instances">
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/${cirros_image}</arg>
<arg>${host_image_path}/${cirros_image}</arg>
</arguments>
<msg timestamp="20190402 10:50:04.848" level="INFO">[chan 3] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190402 10:50:04.856" level="INFO">[chan 4] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190402 10:50:05.318" level="INFO">'/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2' -&gt; '/home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2'</msg>
<status status="PASS" endtime="20190402 10:50:05.318" starttime="20190402 10:50:04.840"></status>
</kw>
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/${centos_image}</arg>
<arg>${host_image_path}/${centos_image}</arg>
</arguments>
<msg timestamp="20190402 10:50:38.307" level="INFO">'/home/mgperezi/duplex/stx-test-suite/CentOS-7-x86_64-GenericCloud.qcow2' -&gt; '/home/wrsroot//CentOS-7-x86_64-GenericCloud.qcow2'</msg>
<status status="PASS" endtime="20190402 10:50:38.307" starttime="20190402 10:50:05.318"></status>
</kw>
<kw name="Create Image" library="OpenStack">
<doc>Create image from a given .img file.</doc>
<arguments>
<arg>${host_image_path}/${cirros_image}</arg>
<arg>${disk_format}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<kw name="File Should Exist" library="SSHLibrary">
<doc>Fails if the given ``path`` does NOT point to an existing file.</doc>
<arguments>
<arg>${file_path}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:50:38.308" starttime="20190402 10:50:38.307"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:50:38.308" level="INFO">${openstack_cmd} = openstack image create</msg>
<status status="PASS" endtime="20190402 10:50:38.308" starttime="20190402 10:50:38.308"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--file ${file_path}</arg>
<arg>--disk-format ${disk_format}</arg>
<arg>--public</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:50:38.309" level="INFO">${cmd} = openstack image create --file /home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2 --disk-format qcow2 --public cirros</msg>
<status status="PASS" endtime="20190402 10:50:38.309" starttime="20190402 10:50:38.308"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>3 min</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:50:38.309" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:50:38.309" starttime="20190402 10:50:38.309"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:50:38.310" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image create --file /home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2 --disk-format qcow2 --public cirros'.</msg>
<msg timestamp="20190402 10:50:43.451" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:50:43.452" level="INFO">${stdout} = +------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<msg timestamp="20190402 10:50:43.452" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:50:43.452" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:50:43.452" starttime="20190402 10:50:38.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:50:43.454" level="INFO">${res} = {u'stdout': u"+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20190402 10:50:43.454" starttime="20190402 10:50:43.453"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:50:43.455" starttime="20190402 10:50:43.454"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:43.455" starttime="20190402 10:50:38.309"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>image</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>active</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>image</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>active</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:50:43.456" level="INFO">${openstack_cmd} = openstack image show cirros</msg>
<status status="PASS" endtime="20190402 10:50:43.456" starttime="20190402 10:50:43.456"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:50:43.457" level="INFO">${cmd} = openstack image show cirros|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:50:43.457" starttime="20190402 10:50:43.456"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:50:43.457" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:50:43.457" starttime="20190402 10:50:43.457"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:50:43.458" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image show cirros|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:50:44.790" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:50:44.790" level="INFO">${stdout} = active</msg>
<msg timestamp="20190402 10:50:44.791" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:50:44.791" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:50:44.791" starttime="20190402 10:50:43.457"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:50:44.791" level="INFO">${res} = {u'stdout': u'active', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:50:44.791" starttime="20190402 10:50:44.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:50:44.792" starttime="20190402 10:50:44.792"></status>
</kw>
<msg timestamp="20190402 10:50:44.792" level="INFO">${result} = {u'stdout': u'active', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:50:44.792" starttime="20190402 10:50:43.457"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:50:44.792" level="INFO">${value} = active</msg>
<status status="PASS" endtime="20190402 10:50:44.792" starttime="20190402 10:50:44.792"></status>
</kw>
<msg timestamp="20190402 10:50:44.793" level="INFO">${current_value} = active</msg>
<status status="PASS" endtime="20190402 10:50:44.793" starttime="20190402 10:50:43.456"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:50:44.793" starttime="20190402 10:50:44.793"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:44.793" starttime="20190402 10:50:43.455"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:44.793" starttime="20190402 10:50:43.455"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:44.793" starttime="20190402 10:50:38.307"></status>
</kw>
<kw name="Create Image" library="OpenStack">
<doc>Create image from a given .img file.</doc>
<arguments>
<arg>${host_image_path}/${centos_image}</arg>
<arg>${disk_format}</arg>
<arg>${centos_image_name}</arg>
</arguments>
<kw name="File Should Exist" library="SSHLibrary">
<doc>Fails if the given ``path`` does NOT point to an existing file.</doc>
<arguments>
<arg>${file_path}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:50:44.801" starttime="20190402 10:50:44.794"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:50:44.801" level="INFO">${openstack_cmd} = openstack image create</msg>
<status status="PASS" endtime="20190402 10:50:44.801" starttime="20190402 10:50:44.801"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--file ${file_path}</arg>
<arg>--disk-format ${disk_format}</arg>
<arg>--public</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:50:44.802" level="INFO">${cmd} = openstack image create --file /home/wrsroot//CentOS-7-x86_64-GenericCloud.qcow2 --disk-format qcow2 --public centos</msg>
<status status="PASS" endtime="20190402 10:50:44.802" starttime="20190402 10:50:44.802"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>3 min</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:50:44.803" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:50:44.803" starttime="20190402 10:50:44.802"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:50:44.803" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image create --file /home/wrsroot//CentOS-7-x86_64-GenericCloud.qcow2 --disk-format qcow2 --public centos'.</msg>
<msg timestamp="20190402 10:50:58.518" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:50:58.518" level="INFO">${stdout} = +------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<msg timestamp="20190402 10:50:58.518" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:50:58.518" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:50:58.518" starttime="20190402 10:50:44.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:50:58.519" level="INFO">${res} = {u'stdout': u"+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20190402 10:50:58.519" starttime="20190402 10:50:58.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:50:58.519" starttime="20190402 10:50:58.519"></status>
</kw>
<status status="PASS" endtime="20190402 10:50:58.519" starttime="20190402 10:50:44.802"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>image</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>active</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>image</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>active</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:50:58.521" level="INFO">${openstack_cmd} = openstack image show centos</msg>
<status status="PASS" endtime="20190402 10:50:58.521" starttime="20190402 10:50:58.520"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:50:58.521" level="INFO">${cmd} = openstack image show centos|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:50:58.521" starttime="20190402 10:50:58.521"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:50:58.522" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:50:58.522" starttime="20190402 10:50:58.522"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:50:58.522" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image show centos|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:51:00.412" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:51:00.412" level="INFO">${stdout} = active</msg>
<msg timestamp="20190402 10:51:00.412" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:51:00.413" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:51:00.413" starttime="20190402 10:50:58.522"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:51:00.414" level="INFO">${res} = {u'stdout': u'active', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:00.415" starttime="20190402 10:51:00.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:00.416" starttime="20190402 10:51:00.415"></status>
</kw>
<msg timestamp="20190402 10:51:00.416" level="INFO">${result} = {u'stdout': u'active', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:00.416" starttime="20190402 10:50:58.521"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:51:00.417" level="INFO">${value} = active</msg>
<status status="PASS" endtime="20190402 10:51:00.417" starttime="20190402 10:51:00.417"></status>
</kw>
<msg timestamp="20190402 10:51:00.418" level="INFO">${current_value} = active</msg>
<status status="PASS" endtime="20190402 10:51:00.418" starttime="20190402 10:50:58.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:00.421" starttime="20190402 10:51:00.419"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:00.421" starttime="20190402 10:50:58.520"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:00.421" starttime="20190402 10:50:58.519"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:00.422" starttime="20190402 10:50:44.793"></status>
</kw>
<doc>Create images with or without properties to be used
to launch Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 10:51:00.422" critical="yes" starttime="20190402 10:50:04.839"></status>
</test>
<test id="s1-s1-s1-t3" name="Create Networks for Instances">
<kw name="Create Network" library="OpenStack">
<doc>Create Network with openstack request.</doc>
<arguments>
<arg>${network_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:51:00.425" level="INFO">${openstack_cmd} = openstack network create</msg>
<status status="PASS" endtime="20190402 10:51:00.425" starttime="20190402 10:51:00.425"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${network_name}</arg>
<arg>${additional_args}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:51:00.426" level="INFO">${cmd} = openstack network create network-1 </msg>
<status status="PASS" endtime="20190402 10:51:00.426" starttime="20190402 10:51:00.426"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:51:00.428" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:51:00.428" starttime="20190402 10:51:00.428"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:51:00.429" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network create network-1 '.</msg>
<msg timestamp="20190402 10:51:01.965" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:51:01.966" level="INFO">${stdout} = +---------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<msg timestamp="20190402 10:51:01.966" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:51:01.966" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:51:01.966" starttime="20190402 10:51:00.429"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:51:01.969" level="INFO">${res} = {u'stdout': u"+---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20190402 10:51:01.969" starttime="20190402 10:51:01.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:01.971" starttime="20190402 10:51:01.970"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:01.972" starttime="20190402 10:51:00.427"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:01.973" starttime="20190402 10:51:00.424"></status>
</kw>
<kw name="Create Subnet" library="OpenStack">
<doc>Create SubNet for the Network with neutron request.</doc>
<arguments>
<arg>${network_name}</arg>
<arg>${subnet_range}</arg>
<arg>${subnet_extras}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack subnet create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:51:01.975" level="INFO">${openstack_cmd} = openstack subnet create</msg>
<status status="PASS" endtime="20190402 10:51:01.975" starttime="20190402 10:51:01.974"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--network ${network_name}</arg>
<arg>--subnet-range ${range_ip} ${additional_args}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:51:01.976" level="INFO">${cmd} = openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1</msg>
<status status="PASS" endtime="20190402 10:51:01.976" starttime="20190402 10:51:01.975"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:51:01.978" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:51:01.978" starttime="20190402 10:51:01.977"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:51:01.979" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1'.</msg>
<msg timestamp="20190402 10:51:03.819" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:51:03.819" level="INFO">${stdout} = +-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<msg timestamp="20190402 10:51:03.819" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:51:03.819" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:51:03.820" starttime="20190402 10:51:01.978"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:51:03.821" level="INFO">${res} = {u'stdout': u"+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20190402 10:51:03.821" starttime="20190402 10:51:03.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:03.822" starttime="20190402 10:51:03.822"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:03.823" starttime="20190402 10:51:01.976"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:03.823" starttime="20190402 10:51:01.973"></status>
</kw>
<doc>Create networks to be used to launch Cirros and Centos
instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 10:51:03.823" critical="yes" starttime="20190402 10:51:00.423"></status>
</test>
<test id="s1-s1-s1-t4" name="Launch Instances">
<kw name="Create Instance" library="OpenStack">
<doc>Create a VM Instances with the net id of the Netowrk
flavor and image</doc>
<arguments>
<arg>${network_name}</arg>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_image_name}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Get Net Id" library="OpenStack">
<doc>Retrieve the net id for the given network name</doc>
<arguments>
<arg>${net_name}</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:51:03.829" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190402 10:51:03.829" starttime="20190402 10:51:03.828"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "${network_name}"</arg>
<arg>awk '{print$2}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:51:03.830" level="INFO">${cmd} = openstack network list|grep "network-1"|awk '{print$2}'</msg>
<status status="PASS" endtime="20190402 10:51:03.830" starttime="20190402 10:51:03.829"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:51:03.831" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:51:03.832" starttime="20190402 10:51:03.831"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:51:03.833" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|grep "network-1"|awk '{print$2}''.</msg>
<msg timestamp="20190402 10:51:05.264" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:51:05.264" level="INFO">${stdout} = e7dd2b18-db4f-4912-881c-3cf27dfbe7f2</msg>
<msg timestamp="20190402 10:51:05.264" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:51:05.264" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:51:05.264" starttime="20190402 10:51:03.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:51:05.265" level="INFO">${res} = {u'stdout': u'e7dd2b18-db4f-4912-881c-3cf27dfbe7f2', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:05.265" starttime="20190402 10:51:05.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:05.265" starttime="20190402 10:51:05.265"></status>
</kw>
<msg timestamp="20190402 10:51:05.266" level="INFO">&amp;{result} = { stdout=e7dd2b18-db4f-4912-881c-3cf27dfbe7f2 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 10:51:05.266" starttime="20190402 10:51:03.830"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 10:51:05.266" level="INFO">${output} = e7dd2b18-db4f-4912-881c-3cf27dfbe7f2</msg>
<status status="PASS" endtime="20190402 10:51:05.266" starttime="20190402 10:51:05.266"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${splitted_output}</var>
</assign>
<msg timestamp="20190402 10:51:05.267" level="INFO">${splitted_output} = [u'e7dd2b18-db4f-4912-881c-3cf27dfbe7f2']</msg>
<status status="PASS" endtime="20190402 10:51:05.267" starttime="20190402 10:51:05.266"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${splitted_output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<msg timestamp="20190402 10:51:05.267" level="INFO">${net_id} = e7dd2b18-db4f-4912-881c-3cf27dfbe7f2</msg>
<status status="PASS" endtime="20190402 10:51:05.267" starttime="20190402 10:51:05.267"></status>
</kw>
<msg timestamp="20190402 10:51:05.267" level="INFO">${net_id} = e7dd2b18-db4f-4912-881c-3cf27dfbe7f2</msg>
<status status="PASS" endtime="20190402 10:51:05.267" starttime="20190402 10:51:03.826"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:51:05.267" level="INFO">${openstack_cmd} = openstack server create</msg>
<status status="PASS" endtime="20190402 10:51:05.267" starttime="20190402 10:51:05.267"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--image ${image}</arg>
<arg>--flavor ${flavor}</arg>
<arg>--nic net-id=${net_id}</arg>
<arg>${vm_name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:51:05.268" level="INFO">${cmd} = openstack server create --image cirros --flavor f1.small --nic net-id=e7dd2b18-db4f-4912-881c-3cf27dfbe7f2 vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:51:05.268" starttime="20190402 10:51:05.268"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:51:05.268" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:51:05.268" starttime="20190402 10:51:05.268"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:51:05.269" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server create --image cirros --flavor f1.small --nic net-id=e7dd2b18-db4f-4912-881c-3cf27dfbe7f2 vm-cirros-1'.</msg>
<msg timestamp="20190402 10:51:07.882" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:51:07.883" level="INFO">${stdout} = +-------------------------------------+-------------------------------------------------+
| Field                               | Value                                           |
+-------------------...</msg>
<msg timestamp="20190402 10:51:07.883" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:51:07.883" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:51:07.883" starttime="20190402 10:51:05.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:51:07.885" level="INFO">${res} = {u'stdout': u"+-------------------------------------+-------------------------------------------------+\n| Field                               | Value                                           |\n+---...</msg>
<status status="PASS" endtime="20190402 10:51:07.885" starttime="20190402 10:51:07.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:07.886" starttime="20190402 10:51:07.885"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:07.886" starttime="20190402 10:51:05.268"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:51:07.889" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:51:07.889" starttime="20190402 10:51:07.889"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:51:07.890" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:51:07.890" starttime="20190402 10:51:07.890"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:51:07.892" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:51:07.893" starttime="20190402 10:51:07.892"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:51:07.894" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:51:25.721" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:51:25.721" level="INFO">${stdout} = BUILD</msg>
<msg timestamp="20190402 10:51:25.721" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:51:25.721" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:51:25.722" starttime="20190402 10:51:07.893"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:51:25.723" level="INFO">${res} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:25.723" starttime="20190402 10:51:25.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:25.724" starttime="20190402 10:51:25.724"></status>
</kw>
<msg timestamp="20190402 10:51:25.725" level="INFO">${result} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:25.725" starttime="20190402 10:51:07.891"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:51:25.726" level="INFO">${value} = BUILD</msg>
<status status="PASS" endtime="20190402 10:51:25.726" starttime="20190402 10:51:25.725"></status>
</kw>
<msg timestamp="20190402 10:51:25.726" level="INFO">${current_value} = BUILD</msg>
<status status="PASS" endtime="20190402 10:51:25.726" starttime="20190402 10:51:07.888"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:51:25.728" level="FAIL">BUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:51:25.728" starttime="20190402 10:51:25.727"></status>
</kw>
<status status="FAIL" endtime="20190402 10:51:25.728" starttime="20190402 10:51:07.887"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:51:35.731" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:51:35.731" starttime="20190402 10:51:35.730"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:51:35.731" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:51:35.731" starttime="20190402 10:51:35.731"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:51:35.733" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:51:35.733" starttime="20190402 10:51:35.732"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:51:35.733" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:51:37.525" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:51:37.525" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:51:37.526" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:51:37.526" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:51:37.526" starttime="20190402 10:51:35.733"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:51:37.526" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:37.526" starttime="20190402 10:51:37.526"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:37.527" starttime="20190402 10:51:37.526"></status>
</kw>
<msg timestamp="20190402 10:51:37.527" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:37.527" starttime="20190402 10:51:35.732"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:51:37.527" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:51:37.527" starttime="20190402 10:51:37.527"></status>
</kw>
<msg timestamp="20190402 10:51:37.527" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:51:37.527" starttime="20190402 10:51:35.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:37.528" starttime="20190402 10:51:37.528"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:37.528" starttime="20190402 10:51:35.729"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:37.528" starttime="20190402 10:51:07.886"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:51:37.529" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:51:37.529" starttime="20190402 10:51:37.529"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:51:37.530" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w power_state|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:51:37.530" starttime="20190402 10:51:37.529"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:51:37.531" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:51:37.531" starttime="20190402 10:51:37.530"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:51:37.531" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w power_state|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:51:39.162" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:51:39.162" level="INFO">${stdout} = Running</msg>
<msg timestamp="20190402 10:51:39.163" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:51:39.163" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:51:39.163" starttime="20190402 10:51:37.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:51:39.165" level="INFO">${res} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:39.165" starttime="20190402 10:51:39.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:39.166" starttime="20190402 10:51:39.165"></status>
</kw>
<msg timestamp="20190402 10:51:39.167" level="INFO">${result} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:39.167" starttime="20190402 10:51:37.530"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:51:39.169" level="INFO">${value} = Running</msg>
<status status="PASS" endtime="20190402 10:51:39.169" starttime="20190402 10:51:39.168"></status>
</kw>
<msg timestamp="20190402 10:51:39.170" level="INFO">${current_value} = Running</msg>
<status status="PASS" endtime="20190402 10:51:39.170" starttime="20190402 10:51:37.529"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:39.171" starttime="20190402 10:51:39.170"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:39.171" starttime="20190402 10:51:37.528"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:39.171" starttime="20190402 10:51:37.528"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:39.172" starttime="20190402 10:51:03.825"></status>
</kw>
<kw name="Create Instance" library="OpenStack">
<doc>Create a VM Instances with the net id of the Netowrk
flavor and image</doc>
<arguments>
<arg>${network_name}</arg>
<arg>${centos_instance_name}</arg>
<arg>${centos_image_name}</arg>
<arg>${centos_flavor_name}</arg>
</arguments>
<kw name="Get Net Id" library="OpenStack">
<doc>Retrieve the net id for the given network name</doc>
<arguments>
<arg>${net_name}</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:51:39.174" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190402 10:51:39.174" starttime="20190402 10:51:39.174"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "${network_name}"</arg>
<arg>awk '{print$2}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:51:39.175" level="INFO">${cmd} = openstack network list|grep "network-1"|awk '{print$2}'</msg>
<status status="PASS" endtime="20190402 10:51:39.175" starttime="20190402 10:51:39.175"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:51:39.177" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:51:39.177" starttime="20190402 10:51:39.177"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:51:39.178" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|grep "network-1"|awk '{print$2}''.</msg>
<msg timestamp="20190402 10:51:40.610" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:51:40.610" level="INFO">${stdout} = e7dd2b18-db4f-4912-881c-3cf27dfbe7f2</msg>
<msg timestamp="20190402 10:51:40.610" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:51:40.610" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:51:40.610" starttime="20190402 10:51:39.177"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:51:40.611" level="INFO">${res} = {u'stdout': u'e7dd2b18-db4f-4912-881c-3cf27dfbe7f2', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:40.611" starttime="20190402 10:51:40.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:40.612" starttime="20190402 10:51:40.611"></status>
</kw>
<msg timestamp="20190402 10:51:40.612" level="INFO">&amp;{result} = { stdout=e7dd2b18-db4f-4912-881c-3cf27dfbe7f2 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 10:51:40.612" starttime="20190402 10:51:39.176"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 10:51:40.613" level="INFO">${output} = e7dd2b18-db4f-4912-881c-3cf27dfbe7f2</msg>
<status status="PASS" endtime="20190402 10:51:40.613" starttime="20190402 10:51:40.612"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${splitted_output}</var>
</assign>
<msg timestamp="20190402 10:51:40.613" level="INFO">${splitted_output} = [u'e7dd2b18-db4f-4912-881c-3cf27dfbe7f2']</msg>
<status status="PASS" endtime="20190402 10:51:40.613" starttime="20190402 10:51:40.613"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${splitted_output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<msg timestamp="20190402 10:51:40.614" level="INFO">${net_id} = e7dd2b18-db4f-4912-881c-3cf27dfbe7f2</msg>
<status status="PASS" endtime="20190402 10:51:40.614" starttime="20190402 10:51:40.613"></status>
</kw>
<msg timestamp="20190402 10:51:40.614" level="INFO">${net_id} = e7dd2b18-db4f-4912-881c-3cf27dfbe7f2</msg>
<status status="PASS" endtime="20190402 10:51:40.614" starttime="20190402 10:51:39.173"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:51:40.615" level="INFO">${openstack_cmd} = openstack server create</msg>
<status status="PASS" endtime="20190402 10:51:40.615" starttime="20190402 10:51:40.614"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--image ${image}</arg>
<arg>--flavor ${flavor}</arg>
<arg>--nic net-id=${net_id}</arg>
<arg>${vm_name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:51:40.615" level="INFO">${cmd} = openstack server create --image centos --flavor f1.medium --nic net-id=e7dd2b18-db4f-4912-881c-3cf27dfbe7f2 vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:51:40.615" starttime="20190402 10:51:40.615"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:51:40.617" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:51:40.617" starttime="20190402 10:51:40.616"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:51:40.617" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server create --image centos --flavor f1.medium --nic net-id=e7dd2b18-db4f-4912-881c-3cf27dfbe7f2 vm-centos-1'.</msg>
<msg timestamp="20190402 10:51:42.851" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:51:42.852" level="INFO">${stdout} = +-------------------------------------+--------------------------------------------------+
| Field                               | Value                                            |
+-----------------...</msg>
<msg timestamp="20190402 10:51:42.852" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:51:42.852" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:51:42.852" starttime="20190402 10:51:40.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:51:42.854" level="INFO">${res} = {u'stdout': u"+-------------------------------------+--------------------------------------------------+\n| Field                               | Value                                            |\n+-...</msg>
<status status="PASS" endtime="20190402 10:51:42.854" starttime="20190402 10:51:42.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:42.855" starttime="20190402 10:51:42.855"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:42.856" starttime="20190402 10:51:40.616"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:51:42.860" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:51:42.860" starttime="20190402 10:51:42.859"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:51:42.861" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:51:42.861" starttime="20190402 10:51:42.860"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:51:42.863" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:51:42.863" starttime="20190402 10:51:42.862"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:51:42.864" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:51:44.613" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:51:44.613" level="INFO">${stdout} = BUILD</msg>
<msg timestamp="20190402 10:51:44.614" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:51:44.614" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:51:44.614" starttime="20190402 10:51:42.863"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:51:44.616" level="INFO">${res} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:44.616" starttime="20190402 10:51:44.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:44.618" starttime="20190402 10:51:44.617"></status>
</kw>
<msg timestamp="20190402 10:51:44.618" level="INFO">${result} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:44.618" starttime="20190402 10:51:42.861"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:51:44.618" level="INFO">${value} = BUILD</msg>
<status status="PASS" endtime="20190402 10:51:44.618" starttime="20190402 10:51:44.618"></status>
</kw>
<msg timestamp="20190402 10:51:44.619" level="INFO">${current_value} = BUILD</msg>
<status status="PASS" endtime="20190402 10:51:44.619" starttime="20190402 10:51:42.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:51:44.619" level="FAIL">BUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:51:44.619" starttime="20190402 10:51:44.619"></status>
</kw>
<status status="FAIL" endtime="20190402 10:51:44.619" starttime="20190402 10:51:42.857"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:51:54.621" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:51:54.621" starttime="20190402 10:51:54.621"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:51:54.621" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:51:54.621" starttime="20190402 10:51:54.621"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:51:54.622" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:51:54.622" starttime="20190402 10:51:54.622"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:51:54.622" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:51:56.305" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:51:56.306" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:51:56.306" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:51:56.306" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:51:56.306" starttime="20190402 10:51:54.622"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:51:56.308" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:56.308" starttime="20190402 10:51:56.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:56.309" starttime="20190402 10:51:56.309"></status>
</kw>
<msg timestamp="20190402 10:51:56.310" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:56.310" starttime="20190402 10:51:54.621"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:51:56.311" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:51:56.311" starttime="20190402 10:51:56.310"></status>
</kw>
<msg timestamp="20190402 10:51:56.311" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:51:56.312" starttime="20190402 10:51:54.620"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:56.313" starttime="20190402 10:51:56.312"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:56.313" starttime="20190402 10:51:54.620"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:56.313" starttime="20190402 10:51:42.856"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:51:56.317" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:51:56.317" starttime="20190402 10:51:56.316"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:51:56.318" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w power_state|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:51:56.318" starttime="20190402 10:51:56.317"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:51:56.320" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:51:56.320" starttime="20190402 10:51:56.320"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:51:56.321" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w power_state|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:51:57.969" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:51:57.970" level="INFO">${stdout} = Running</msg>
<msg timestamp="20190402 10:51:57.970" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:51:57.970" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:51:57.970" starttime="20190402 10:51:56.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:51:57.972" level="INFO">${res} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:57.972" starttime="20190402 10:51:57.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:57.973" starttime="20190402 10:51:57.972"></status>
</kw>
<msg timestamp="20190402 10:51:57.973" level="INFO">${result} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:57.973" starttime="20190402 10:51:56.319"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:51:57.974" level="INFO">${value} = Running</msg>
<status status="PASS" endtime="20190402 10:51:57.974" starttime="20190402 10:51:57.974"></status>
</kw>
<msg timestamp="20190402 10:51:57.975" level="INFO">${current_value} = Running</msg>
<status status="PASS" endtime="20190402 10:51:57.975" starttime="20190402 10:51:56.315"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:57.976" starttime="20190402 10:51:57.975"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:57.976" starttime="20190402 10:51:56.314"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:57.976" starttime="20190402 10:51:56.313"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:57.977" starttime="20190402 10:51:39.172"></status>
</kw>
<doc>Launch Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 10:51:57.977" critical="yes" starttime="20190402 10:51:03.824"></status>
</test>
<test id="s1-s1-s1-t5" name="Suspend Resume Instances">
<kw name="Suspend Instance" library="OpenStack">
<doc>Suspend the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server suspend ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:51:57.980" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:51:57.981" starttime="20190402 10:51:57.980"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:51:57.982" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server suspend vm-cirros-1'.</msg>
<msg timestamp="20190402 10:51:59.715" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:51:59.715" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:51:59.715" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:51:59.715" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:51:59.716" starttime="20190402 10:51:57.981"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:51:59.717" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:51:59.717" starttime="20190402 10:51:59.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:51:59.718" starttime="20190402 10:51:59.718"></status>
</kw>
<status status="PASS" endtime="20190402 10:51:59.719" starttime="20190402 10:51:57.979"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SUSPENDED</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SUSPENDED</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:51:59.722" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:51:59.722" starttime="20190402 10:51:59.722"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:51:59.723" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:51:59.724" starttime="20190402 10:51:59.723"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:51:59.725" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:51:59.725" starttime="20190402 10:51:59.725"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:51:59.726" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:52:01.358" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:01.358" level="INFO">${stdout} = SUSPENDED</msg>
<msg timestamp="20190402 10:52:01.359" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:01.359" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:01.359" starttime="20190402 10:51:59.726"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:01.360" level="INFO">${res} = {u'stdout': u'SUSPENDED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:01.360" starttime="20190402 10:52:01.359"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:01.360" starttime="20190402 10:52:01.360"></status>
</kw>
<msg timestamp="20190402 10:52:01.360" level="INFO">${result} = {u'stdout': u'SUSPENDED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:01.360" starttime="20190402 10:51:59.724"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:52:01.361" level="INFO">${value} = SUSPENDED</msg>
<status status="PASS" endtime="20190402 10:52:01.361" starttime="20190402 10:52:01.361"></status>
</kw>
<msg timestamp="20190402 10:52:01.361" level="INFO">${current_value} = SUSPENDED</msg>
<status status="PASS" endtime="20190402 10:52:01.361" starttime="20190402 10:51:59.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:01.362" starttime="20190402 10:52:01.361"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:01.362" starttime="20190402 10:51:59.720"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:01.362" starttime="20190402 10:51:59.719"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:01.362" starttime="20190402 10:51:57.978"></status>
</kw>
<kw name="Resume Instance" library="OpenStack">
<doc>Resume the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resume ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:01.364" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:01.364" starttime="20190402 10:52:01.364"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:01.364" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resume vm-cirros-1'.</msg>
<msg timestamp="20190402 10:52:03.361" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:03.362" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:52:03.362" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:03.362" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:03.362" starttime="20190402 10:52:01.364"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:03.364" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:03.364" starttime="20190402 10:52:03.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:03.365" starttime="20190402 10:52:03.364"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:03.366" starttime="20190402 10:52:01.363"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:52:03.370" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:52:03.370" starttime="20190402 10:52:03.369"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:52:03.371" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:52:03.371" starttime="20190402 10:52:03.370"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:03.373" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:03.373" starttime="20190402 10:52:03.372"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:03.374" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:52:05.123" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:05.123" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:52:05.123" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:05.123" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:05.123" starttime="20190402 10:52:03.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:05.125" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:05.125" starttime="20190402 10:52:05.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:05.126" starttime="20190402 10:52:05.125"></status>
</kw>
<msg timestamp="20190402 10:52:05.126" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:05.127" starttime="20190402 10:52:03.371"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:52:05.127" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:52:05.127" starttime="20190402 10:52:05.127"></status>
</kw>
<msg timestamp="20190402 10:52:05.128" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:52:05.128" starttime="20190402 10:52:03.368"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:05.129" starttime="20190402 10:52:05.128"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:05.129" starttime="20190402 10:52:03.367"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:05.129" starttime="20190402 10:52:03.366"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:05.130" starttime="20190402 10:52:01.362"></status>
</kw>
<kw name="Suspend Instance" library="OpenStack">
<doc>Suspend the corresponding VM</doc>
<arguments>
<arg>${centos_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server suspend ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:05.132" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:05.132" starttime="20190402 10:52:05.132"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:05.133" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server suspend vm-centos-1'.</msg>
<msg timestamp="20190402 10:52:06.817" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:06.817" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:52:06.817" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:06.817" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:06.817" starttime="20190402 10:52:05.132"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:06.818" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:06.818" starttime="20190402 10:52:06.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:06.818" starttime="20190402 10:52:06.818"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:06.818" starttime="20190402 10:52:05.131"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SUSPENDED</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SUSPENDED</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:52:06.820" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:52:06.820" starttime="20190402 10:52:06.819"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:52:06.820" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:52:06.820" starttime="20190402 10:52:06.820"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:06.821" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:06.821" starttime="20190402 10:52:06.820"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:06.821" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:52:08.483" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:08.483" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:52:08.483" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:08.484" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:08.484" starttime="20190402 10:52:06.821"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:08.484" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:08.484" starttime="20190402 10:52:08.484"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:08.485" starttime="20190402 10:52:08.484"></status>
</kw>
<msg timestamp="20190402 10:52:08.485" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:08.485" starttime="20190402 10:52:06.820"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:52:08.485" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:52:08.485" starttime="20190402 10:52:08.485"></status>
</kw>
<msg timestamp="20190402 10:52:08.486" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:52:08.486" starttime="20190402 10:52:06.819"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:52:08.486" level="FAIL">ACTIVE != SUSPENDED</msg>
<status status="FAIL" endtime="20190402 10:52:08.486" starttime="20190402 10:52:08.486"></status>
</kw>
<status status="FAIL" endtime="20190402 10:52:08.486" starttime="20190402 10:52:06.818"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SUSPENDED</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:52:18.490" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:52:18.490" starttime="20190402 10:52:18.489"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:52:18.491" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:52:18.491" starttime="20190402 10:52:18.490"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:18.493" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:18.493" starttime="20190402 10:52:18.492"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:18.494" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:52:20.127" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:20.127" level="INFO">${stdout} = SUSPENDED</msg>
<msg timestamp="20190402 10:52:20.127" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:20.128" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:20.128" starttime="20190402 10:52:18.493"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:20.129" level="INFO">${res} = {u'stdout': u'SUSPENDED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:20.129" starttime="20190402 10:52:20.128"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:20.130" starttime="20190402 10:52:20.130"></status>
</kw>
<msg timestamp="20190402 10:52:20.131" level="INFO">${result} = {u'stdout': u'SUSPENDED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:20.131" starttime="20190402 10:52:18.491"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:52:20.132" level="INFO">${value} = SUSPENDED</msg>
<status status="PASS" endtime="20190402 10:52:20.133" starttime="20190402 10:52:20.132"></status>
</kw>
<msg timestamp="20190402 10:52:20.133" level="INFO">${current_value} = SUSPENDED</msg>
<status status="PASS" endtime="20190402 10:52:20.133" starttime="20190402 10:52:18.488"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:20.134" starttime="20190402 10:52:20.133"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:20.134" starttime="20190402 10:52:18.487"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:20.134" starttime="20190402 10:52:06.818"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:20.134" starttime="20190402 10:52:05.130"></status>
</kw>
<kw name="Resume Instance" library="OpenStack">
<doc>Resume the corresponding VM</doc>
<arguments>
<arg>${centos_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resume ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:20.135" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:20.135" starttime="20190402 10:52:20.135"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:20.135" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resume vm-centos-1'.</msg>
<msg timestamp="20190402 10:52:21.868" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:21.869" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:52:21.869" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:21.869" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:21.869" starttime="20190402 10:52:20.135"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:21.871" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:21.871" starttime="20190402 10:52:21.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:21.872" starttime="20190402 10:52:21.871"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:21.872" starttime="20190402 10:52:20.134"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:52:21.876" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:52:21.876" starttime="20190402 10:52:21.875"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:52:21.877" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:52:21.877" starttime="20190402 10:52:21.876"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:21.878" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:21.878" starttime="20190402 10:52:21.878"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:21.879" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:52:23.614" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:23.615" level="INFO">${stdout} = SUSPENDED</msg>
<msg timestamp="20190402 10:52:23.615" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:23.615" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:23.615" starttime="20190402 10:52:21.879"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:23.615" level="INFO">${res} = {u'stdout': u'SUSPENDED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:23.616" starttime="20190402 10:52:23.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:23.616" starttime="20190402 10:52:23.616"></status>
</kw>
<msg timestamp="20190402 10:52:23.616" level="INFO">${result} = {u'stdout': u'SUSPENDED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:23.616" starttime="20190402 10:52:21.877"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:52:23.616" level="INFO">${value} = SUSPENDED</msg>
<status status="PASS" endtime="20190402 10:52:23.616" starttime="20190402 10:52:23.616"></status>
</kw>
<msg timestamp="20190402 10:52:23.617" level="INFO">${current_value} = SUSPENDED</msg>
<status status="PASS" endtime="20190402 10:52:23.617" starttime="20190402 10:52:21.874"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:52:23.617" level="FAIL">SUSPENDED != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:52:23.617" starttime="20190402 10:52:23.617"></status>
</kw>
<status status="FAIL" endtime="20190402 10:52:23.617" starttime="20190402 10:52:21.873"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:52:33.619" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:52:33.619" starttime="20190402 10:52:33.619"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:52:33.619" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:52:33.619" starttime="20190402 10:52:33.619"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:33.620" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:33.620" starttime="20190402 10:52:33.620"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:33.620" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:52:35.353" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:35.353" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:52:35.353" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:35.353" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:35.354" starttime="20190402 10:52:33.620"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:35.354" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:35.354" starttime="20190402 10:52:35.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:35.355" starttime="20190402 10:52:35.354"></status>
</kw>
<msg timestamp="20190402 10:52:35.355" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:35.355" starttime="20190402 10:52:33.619"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:52:35.355" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:52:35.355" starttime="20190402 10:52:35.355"></status>
</kw>
<msg timestamp="20190402 10:52:35.356" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:52:35.356" starttime="20190402 10:52:33.618"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:35.356" starttime="20190402 10:52:35.356"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:35.356" starttime="20190402 10:52:33.618"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:35.356" starttime="20190402 10:52:21.873"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:35.356" starttime="20190402 10:52:20.134"></status>
</kw>
<doc>Suspend and Resume Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 10:52:35.356" critical="yes" starttime="20190402 10:51:57.977"></status>
</test>
<test id="s1-s1-s1-t6" name="Set Error Active Flags Instances">
<kw name="Set Error State Instance" library="OpenStack">
<doc>Set 'Error' value to the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>error</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:35.358" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:35.358" starttime="20190402 10:52:35.358"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:35.358" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state error vm-cirros-1'.</msg>
<msg timestamp="20190402 10:52:37.105" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:37.105" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:52:37.105" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:37.105" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:37.105" starttime="20190402 10:52:35.358"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:37.106" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:37.106" starttime="20190402 10:52:37.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:37.106" starttime="20190402 10:52:37.106"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:37.106" starttime="20190402 10:52:35.357"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ERROR</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ERROR</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:52:37.108" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:52:37.108" starttime="20190402 10:52:37.107"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:52:37.108" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:52:37.108" starttime="20190402 10:52:37.108"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:37.109" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:37.109" starttime="20190402 10:52:37.109"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:37.109" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:52:38.843" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:38.843" level="INFO">${stdout} = ERROR</msg>
<msg timestamp="20190402 10:52:38.843" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:38.844" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:38.844" starttime="20190402 10:52:37.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:38.846" level="INFO">${res} = {u'stdout': u'ERROR', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:38.846" starttime="20190402 10:52:38.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:38.848" starttime="20190402 10:52:38.846"></status>
</kw>
<msg timestamp="20190402 10:52:38.848" level="INFO">${result} = {u'stdout': u'ERROR', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:38.848" starttime="20190402 10:52:37.108"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:52:38.850" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20190402 10:52:38.850" starttime="20190402 10:52:38.849"></status>
</kw>
<msg timestamp="20190402 10:52:38.851" level="INFO">${current_value} = ERROR</msg>
<status status="PASS" endtime="20190402 10:52:38.851" starttime="20190402 10:52:37.107"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:38.852" starttime="20190402 10:52:38.851"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:38.852" starttime="20190402 10:52:37.107"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:38.853" starttime="20190402 10:52:37.107"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:38.853" starttime="20190402 10:52:35.357"></status>
</kw>
<kw name="Set Active State Instance" library="OpenStack">
<doc>Set 'Active' value to the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>active</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:38.856" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:38.856" starttime="20190402 10:52:38.855"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:38.857" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state active vm-cirros-1'.</msg>
<msg timestamp="20190402 10:52:40.589" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:40.589" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:52:40.589" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:40.589" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:40.589" starttime="20190402 10:52:38.856"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:40.591" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:40.591" starttime="20190402 10:52:40.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:40.591" starttime="20190402 10:52:40.591"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:40.591" starttime="20190402 10:52:38.854"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:52:40.593" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:52:40.593" starttime="20190402 10:52:40.593"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:52:40.594" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:52:40.594" starttime="20190402 10:52:40.593"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:40.594" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:40.595" starttime="20190402 10:52:40.594"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:40.595" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:52:42.434" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:42.434" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:52:42.434" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:42.434" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:42.434" starttime="20190402 10:52:40.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:42.435" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:42.435" starttime="20190402 10:52:42.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:42.436" starttime="20190402 10:52:42.435"></status>
</kw>
<msg timestamp="20190402 10:52:42.436" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:42.436" starttime="20190402 10:52:40.594"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:52:42.436" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:52:42.436" starttime="20190402 10:52:42.436"></status>
</kw>
<msg timestamp="20190402 10:52:42.437" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:52:42.437" starttime="20190402 10:52:40.592"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:42.437" starttime="20190402 10:52:42.437"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:42.437" starttime="20190402 10:52:40.592"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:42.437" starttime="20190402 10:52:40.592"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:42.437" starttime="20190402 10:52:38.853"></status>
</kw>
<kw name="Set Error State Instance" library="OpenStack">
<doc>Set 'Error' value to the corresponding VM</doc>
<arguments>
<arg>${centos_instance_name}</arg>
<arg>error</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:42.439" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:42.439" starttime="20190402 10:52:42.438"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:42.439" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state error vm-centos-1'.</msg>
<msg timestamp="20190402 10:52:44.372" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:44.373" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:52:44.373" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:44.373" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:44.373" starttime="20190402 10:52:42.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:44.374" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:44.374" starttime="20190402 10:52:44.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:44.374" starttime="20190402 10:52:44.374"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:44.374" starttime="20190402 10:52:42.438"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ERROR</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ERROR</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:52:44.376" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:52:44.376" starttime="20190402 10:52:44.375"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:52:44.376" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:52:44.376" starttime="20190402 10:52:44.376"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:44.377" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:44.377" starttime="20190402 10:52:44.377"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:44.377" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:52:46.458" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:46.458" level="INFO">${stdout} = ERROR</msg>
<msg timestamp="20190402 10:52:46.458" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:46.458" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:46.458" starttime="20190402 10:52:44.377"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:46.459" level="INFO">${res} = {u'stdout': u'ERROR', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:46.459" starttime="20190402 10:52:46.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:46.459" starttime="20190402 10:52:46.459"></status>
</kw>
<msg timestamp="20190402 10:52:46.460" level="INFO">${result} = {u'stdout': u'ERROR', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:46.460" starttime="20190402 10:52:44.376"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:52:46.460" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20190402 10:52:46.460" starttime="20190402 10:52:46.460"></status>
</kw>
<msg timestamp="20190402 10:52:46.460" level="INFO">${current_value} = ERROR</msg>
<status status="PASS" endtime="20190402 10:52:46.460" starttime="20190402 10:52:44.375"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:46.461" starttime="20190402 10:52:46.460"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:46.461" starttime="20190402 10:52:44.375"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:46.461" starttime="20190402 10:52:44.374"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:46.461" starttime="20190402 10:52:42.438"></status>
</kw>
<kw name="Set Active State Instance" library="OpenStack">
<doc>Set 'Active' value to the corresponding VM</doc>
<arguments>
<arg>${centos_instance_name}</arg>
<arg>active</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:46.463" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:46.463" starttime="20190402 10:52:46.462"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:46.463" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state active vm-centos-1'.</msg>
<msg timestamp="20190402 10:52:48.143" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:48.143" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:52:48.143" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:48.143" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:48.143" starttime="20190402 10:52:46.463"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:48.144" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:48.144" starttime="20190402 10:52:48.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:48.144" starttime="20190402 10:52:48.144"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:48.145" starttime="20190402 10:52:46.462"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:52:48.146" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:52:48.146" starttime="20190402 10:52:48.146"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:52:48.147" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:52:48.147" starttime="20190402 10:52:48.146"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:48.147" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:48.147" starttime="20190402 10:52:48.147"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:48.148" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:52:49.778" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:49.778" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:52:49.779" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:49.779" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:49.779" starttime="20190402 10:52:48.147"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:49.779" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:49.779" starttime="20190402 10:52:49.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:49.780" starttime="20190402 10:52:49.780"></status>
</kw>
<msg timestamp="20190402 10:52:49.780" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:49.780" starttime="20190402 10:52:48.147"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:52:49.780" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:52:49.780" starttime="20190402 10:52:49.780"></status>
</kw>
<msg timestamp="20190402 10:52:49.781" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:52:49.781" starttime="20190402 10:52:48.145"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:49.781" starttime="20190402 10:52:49.781"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:49.781" starttime="20190402 10:52:48.145"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:49.781" starttime="20190402 10:52:48.145"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:49.781" starttime="20190402 10:52:46.461"></status>
</kw>
<doc>Set 'Error' and 'Active' flags to Cirros and Centos
instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 10:52:49.781" critical="yes" starttime="20190402 10:52:35.357"></status>
</test>
<test id="s1-s1-s1-t7" name="Pause Unpause Instances">
<kw name="Pause Instance" library="OpenStack">
<doc>Pause an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server pause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:49.783" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:49.783" starttime="20190402 10:52:49.783"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:49.783" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server pause vm-cirros-1'.</msg>
<msg timestamp="20190402 10:52:51.513" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:51.514" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:52:51.514" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:51.514" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:51.514" starttime="20190402 10:52:49.783"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:51.514" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:51.514" starttime="20190402 10:52:51.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:51.515" starttime="20190402 10:52:51.515"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:51.515" starttime="20190402 10:52:49.782"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>PAUSED</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>PAUSED</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:52:51.516" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:52:51.516" starttime="20190402 10:52:51.516"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:52:51.517" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:52:51.517" starttime="20190402 10:52:51.516"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:51.517" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:51.517" starttime="20190402 10:52:51.517"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:51.518" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:52:53.179" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:53.179" level="INFO">${stdout} = PAUSED</msg>
<msg timestamp="20190402 10:52:53.179" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:53.179" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:53.179" starttime="20190402 10:52:51.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:53.180" level="INFO">${res} = {u'stdout': u'PAUSED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:53.180" starttime="20190402 10:52:53.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:53.180" starttime="20190402 10:52:53.180"></status>
</kw>
<msg timestamp="20190402 10:52:53.180" level="INFO">${result} = {u'stdout': u'PAUSED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:53.180" starttime="20190402 10:52:51.517"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:52:53.180" level="INFO">${value} = PAUSED</msg>
<status status="PASS" endtime="20190402 10:52:53.180" starttime="20190402 10:52:53.180"></status>
</kw>
<msg timestamp="20190402 10:52:53.181" level="INFO">${current_value} = PAUSED</msg>
<status status="PASS" endtime="20190402 10:52:53.181" starttime="20190402 10:52:51.516"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:53.181" starttime="20190402 10:52:53.181"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:53.181" starttime="20190402 10:52:51.515"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:53.181" starttime="20190402 10:52:51.515"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:53.181" starttime="20190402 10:52:49.782"></status>
</kw>
<kw name="Pause Instance" library="OpenStack">
<doc>Pause an instance.</doc>
<arguments>
<arg>${centos_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server pause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:53.182" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:53.182" starttime="20190402 10:52:53.182"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:53.183" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server pause vm-centos-1'.</msg>
<msg timestamp="20190402 10:52:55.063" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:55.063" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:52:55.063" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:55.064" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:55.064" starttime="20190402 10:52:53.182"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:55.065" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:55.065" starttime="20190402 10:52:55.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:55.065" starttime="20190402 10:52:55.065"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:55.065" starttime="20190402 10:52:53.182"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>PAUSED</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>PAUSED</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:52:55.068" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:52:55.068" starttime="20190402 10:52:55.068"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:52:55.069" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:52:55.069" starttime="20190402 10:52:55.069"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:55.070" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:55.070" starttime="20190402 10:52:55.070"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:55.071" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:52:56.707" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:56.707" level="INFO">${stdout} = PAUSED</msg>
<msg timestamp="20190402 10:52:56.707" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:56.707" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:56.707" starttime="20190402 10:52:55.070"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:56.708" level="INFO">${res} = {u'stdout': u'PAUSED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:56.708" starttime="20190402 10:52:56.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:56.709" starttime="20190402 10:52:56.709"></status>
</kw>
<msg timestamp="20190402 10:52:56.709" level="INFO">${result} = {u'stdout': u'PAUSED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:56.709" starttime="20190402 10:52:55.069"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:52:56.710" level="INFO">${value} = PAUSED</msg>
<status status="PASS" endtime="20190402 10:52:56.710" starttime="20190402 10:52:56.709"></status>
</kw>
<msg timestamp="20190402 10:52:56.710" level="INFO">${current_value} = PAUSED</msg>
<status status="PASS" endtime="20190402 10:52:56.710" starttime="20190402 10:52:55.067"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:56.711" starttime="20190402 10:52:56.710"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:56.711" starttime="20190402 10:52:55.066"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:56.711" starttime="20190402 10:52:55.066"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:56.712" starttime="20190402 10:52:53.182"></status>
</kw>
<kw name="Unpause Instance" library="OpenStack">
<doc>Unpause an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unpause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:56.713" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:56.713" starttime="20190402 10:52:56.713"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:56.714" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unpause vm-cirros-1'.</msg>
<msg timestamp="20190402 10:52:58.458" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:52:58.458" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:52:58.458" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:52:58.459" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:52:58.459" starttime="20190402 10:52:56.713"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:52:58.460" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:52:58.460" starttime="20190402 10:52:58.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:52:58.460" starttime="20190402 10:52:58.460"></status>
</kw>
<status status="PASS" endtime="20190402 10:52:58.460" starttime="20190402 10:52:56.712"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:52:58.462" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:52:58.463" starttime="20190402 10:52:58.462"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:52:58.463" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:52:58.463" starttime="20190402 10:52:58.463"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:52:58.464" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:52:58.464" starttime="20190402 10:52:58.464"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:52:58.465" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:53:00.100" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:53:00.100" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:53:00.100" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:53:00.100" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:53:00.100" starttime="20190402 10:52:58.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:53:00.102" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:00.102" starttime="20190402 10:53:00.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:53:00.102" starttime="20190402 10:53:00.102"></status>
</kw>
<msg timestamp="20190402 10:53:00.103" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:00.103" starttime="20190402 10:52:58.463"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:53:00.103" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:53:00.103" starttime="20190402 10:53:00.103"></status>
</kw>
<msg timestamp="20190402 10:53:00.104" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:53:00.104" starttime="20190402 10:52:58.462"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:53:00.104" starttime="20190402 10:53:00.104"></status>
</kw>
<status status="PASS" endtime="20190402 10:53:00.104" starttime="20190402 10:52:58.461"></status>
</kw>
<status status="PASS" endtime="20190402 10:53:00.105" starttime="20190402 10:52:58.461"></status>
</kw>
<status status="PASS" endtime="20190402 10:53:00.105" starttime="20190402 10:52:56.712"></status>
</kw>
<kw name="Unpause Instance" library="OpenStack">
<doc>Unpause an instance.</doc>
<arguments>
<arg>${centos_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unpause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:53:00.106" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:53:00.106" starttime="20190402 10:53:00.106"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:53:00.107" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unpause vm-centos-1'.</msg>
<msg timestamp="20190402 10:53:01.837" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:53:01.838" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:53:01.838" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:53:01.838" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:53:01.838" starttime="20190402 10:53:00.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:53:01.838" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:01.838" starttime="20190402 10:53:01.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:53:01.839" starttime="20190402 10:53:01.839"></status>
</kw>
<status status="PASS" endtime="20190402 10:53:01.839" starttime="20190402 10:53:00.106"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:53:01.840" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:53:01.841" starttime="20190402 10:53:01.840"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:53:01.841" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:53:01.841" starttime="20190402 10:53:01.841"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:53:01.842" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:53:01.842" starttime="20190402 10:53:01.842"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:53:01.842" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:53:03.423" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:53:03.423" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:53:03.423" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:53:03.423" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:53:03.423" starttime="20190402 10:53:01.842"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:53:03.424" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:03.424" starttime="20190402 10:53:03.423"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:53:03.424" starttime="20190402 10:53:03.424"></status>
</kw>
<msg timestamp="20190402 10:53:03.424" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:03.424" starttime="20190402 10:53:01.841"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:53:03.425" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:53:03.425" starttime="20190402 10:53:03.424"></status>
</kw>
<msg timestamp="20190402 10:53:03.425" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:53:03.425" starttime="20190402 10:53:01.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:53:03.425" starttime="20190402 10:53:03.425"></status>
</kw>
<status status="PASS" endtime="20190402 10:53:03.425" starttime="20190402 10:53:01.840"></status>
</kw>
<status status="PASS" endtime="20190402 10:53:03.426" starttime="20190402 10:53:01.839"></status>
</kw>
<status status="PASS" endtime="20190402 10:53:03.426" starttime="20190402 10:53:00.105"></status>
</kw>
<doc>Pause and Unpause Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 10:53:03.426" critical="yes" starttime="20190402 10:52:49.782"></status>
</test>
<test id="s1-s1-s1-t8" name="Stop Start Instances">
<kw name="Stop Instance" library="OpenStack">
<doc>Stop an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server stop ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:53:03.427" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:53:03.428" starttime="20190402 10:53:03.427"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:53:03.428" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server stop vm-cirros-1'.</msg>
<msg timestamp="20190402 10:53:05.166" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:53:05.166" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:53:05.166" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:53:05.166" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:53:05.166" starttime="20190402 10:53:03.428"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:53:05.167" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:05.167" starttime="20190402 10:53:05.166"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:53:05.167" starttime="20190402 10:53:05.167"></status>
</kw>
<status status="PASS" endtime="20190402 10:53:05.168" starttime="20190402 10:53:03.427"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:53:05.169" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:53:05.169" starttime="20190402 10:53:05.169"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:53:05.169" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:53:05.169" starttime="20190402 10:53:05.169"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:53:05.170" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:53:05.170" starttime="20190402 10:53:05.170"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:53:05.170" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:53:06.801" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:53:06.801" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:53:06.801" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:53:06.801" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:53:06.801" starttime="20190402 10:53:05.170"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:53:06.802" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:06.802" starttime="20190402 10:53:06.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:53:06.803" starttime="20190402 10:53:06.802"></status>
</kw>
<msg timestamp="20190402 10:53:06.803" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:06.803" starttime="20190402 10:53:05.169"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:53:06.803" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:53:06.804" starttime="20190402 10:53:06.803"></status>
</kw>
<msg timestamp="20190402 10:53:06.804" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:53:06.804" starttime="20190402 10:53:05.168"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:53:06.805" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 10:53:06.805" starttime="20190402 10:53:06.804"></status>
</kw>
<status status="FAIL" endtime="20190402 10:53:06.805" starttime="20190402 10:53:05.168"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:53:16.806" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:53:16.806" starttime="20190402 10:53:16.806"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:53:16.807" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:53:16.807" starttime="20190402 10:53:16.806"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:53:16.808" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:53:16.808" starttime="20190402 10:53:16.807"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:53:16.808" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:53:18.439" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:53:18.439" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:53:18.439" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:53:18.439" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:53:18.439" starttime="20190402 10:53:16.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:53:18.440" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:18.440" starttime="20190402 10:53:18.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:53:18.440" starttime="20190402 10:53:18.440"></status>
</kw>
<msg timestamp="20190402 10:53:18.441" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:18.441" starttime="20190402 10:53:16.807"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:53:18.441" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:53:18.441" starttime="20190402 10:53:18.441"></status>
</kw>
<msg timestamp="20190402 10:53:18.441" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:53:18.441" starttime="20190402 10:53:16.806"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:53:18.442" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 10:53:18.442" starttime="20190402 10:53:18.441"></status>
</kw>
<status status="FAIL" endtime="20190402 10:53:18.442" starttime="20190402 10:53:16.805"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:53:28.444" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:53:28.444" starttime="20190402 10:53:28.444"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:53:28.445" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:53:28.445" starttime="20190402 10:53:28.444"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:53:28.446" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:53:28.446" starttime="20190402 10:53:28.445"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:53:28.447" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:53:30.078" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:53:30.078" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:53:30.078" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:53:30.078" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:53:30.079" starttime="20190402 10:53:28.446"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:53:30.079" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:30.079" starttime="20190402 10:53:30.079"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:53:30.080" starttime="20190402 10:53:30.079"></status>
</kw>
<msg timestamp="20190402 10:53:30.080" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:30.080" starttime="20190402 10:53:28.445"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:53:30.080" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:53:30.080" starttime="20190402 10:53:30.080"></status>
</kw>
<msg timestamp="20190402 10:53:30.080" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:53:30.080" starttime="20190402 10:53:28.443"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:53:30.081" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 10:53:30.081" starttime="20190402 10:53:30.080"></status>
</kw>
<status status="FAIL" endtime="20190402 10:53:30.081" starttime="20190402 10:53:28.442"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:53:40.082" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:53:40.082" starttime="20190402 10:53:40.082"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:53:40.083" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:53:40.083" starttime="20190402 10:53:40.083"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:53:40.083" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:53:40.084" starttime="20190402 10:53:40.083"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:53:40.084" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:53:41.664" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:53:41.665" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:53:41.665" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:53:41.665" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:53:41.665" starttime="20190402 10:53:40.084"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:53:41.665" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:41.665" starttime="20190402 10:53:41.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:53:41.666" starttime="20190402 10:53:41.666"></status>
</kw>
<msg timestamp="20190402 10:53:41.666" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:41.666" starttime="20190402 10:53:40.083"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:53:41.666" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:53:41.666" starttime="20190402 10:53:41.666"></status>
</kw>
<msg timestamp="20190402 10:53:41.667" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:53:41.667" starttime="20190402 10:53:40.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:53:41.667" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 10:53:41.667" starttime="20190402 10:53:41.667"></status>
</kw>
<status status="FAIL" endtime="20190402 10:53:41.667" starttime="20190402 10:53:40.081"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:53:51.671" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:53:51.671" starttime="20190402 10:53:51.670"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:53:51.672" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:53:51.672" starttime="20190402 10:53:51.671"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:53:51.674" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:53:51.674" starttime="20190402 10:53:51.673"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:53:51.675" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:53:53.308" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:53:53.308" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:53:53.308" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:53:53.308" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:53:53.309" starttime="20190402 10:53:51.674"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:53:53.310" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:53.310" starttime="20190402 10:53:53.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:53:53.311" starttime="20190402 10:53:53.310"></status>
</kw>
<msg timestamp="20190402 10:53:53.311" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:53:53.311" starttime="20190402 10:53:51.672"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:53:53.311" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:53:53.312" starttime="20190402 10:53:53.311"></status>
</kw>
<msg timestamp="20190402 10:53:53.312" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:53:53.312" starttime="20190402 10:53:51.669"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:53:53.313" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 10:53:53.313" starttime="20190402 10:53:53.312"></status>
</kw>
<status status="FAIL" endtime="20190402 10:53:53.313" starttime="20190402 10:53:51.668"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:54:03.315" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:54:03.315" starttime="20190402 10:54:03.314"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:54:03.315" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:54:03.315" starttime="20190402 10:54:03.315"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:03.316" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:03.316" starttime="20190402 10:54:03.316"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:03.316" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:54:04.948" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:04.948" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:54:04.948" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:04.949" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:04.949" starttime="20190402 10:54:03.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:04.949" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:04.949" starttime="20190402 10:54:04.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:04.950" starttime="20190402 10:54:04.950"></status>
</kw>
<msg timestamp="20190402 10:54:04.950" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:04.950" starttime="20190402 10:54:03.315"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:54:04.951" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:54:04.951" starttime="20190402 10:54:04.950"></status>
</kw>
<msg timestamp="20190402 10:54:04.951" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:54:04.951" starttime="20190402 10:54:03.314"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:54:04.952" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 10:54:04.952" starttime="20190402 10:54:04.951"></status>
</kw>
<status status="FAIL" endtime="20190402 10:54:04.952" starttime="20190402 10:54:03.314"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:54:14.954" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:54:14.954" starttime="20190402 10:54:14.953"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:54:14.955" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:54:14.955" starttime="20190402 10:54:14.954"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:14.956" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:14.956" starttime="20190402 10:54:14.956"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:14.957" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:54:16.589" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:16.590" level="INFO">${stdout} = SHUTOFF</msg>
<msg timestamp="20190402 10:54:16.590" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:16.590" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:16.590" starttime="20190402 10:54:14.956"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:16.590" level="INFO">${res} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:16.591" starttime="20190402 10:54:16.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:16.591" starttime="20190402 10:54:16.591"></status>
</kw>
<msg timestamp="20190402 10:54:16.591" level="INFO">${result} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:16.591" starttime="20190402 10:54:14.955"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:54:16.592" level="INFO">${value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 10:54:16.592" starttime="20190402 10:54:16.591"></status>
</kw>
<msg timestamp="20190402 10:54:16.592" level="INFO">${current_value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 10:54:16.592" starttime="20190402 10:54:14.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:16.593" starttime="20190402 10:54:16.592"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:16.593" starttime="20190402 10:54:14.952"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:16.593" starttime="20190402 10:53:05.168"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:16.593" starttime="20190402 10:53:03.427"></status>
</kw>
<kw name="Stop Instance" library="OpenStack">
<doc>Stop an instance.</doc>
<arguments>
<arg>${centos_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server stop ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:16.594" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:16.594" starttime="20190402 10:54:16.594"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:16.594" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server stop vm-centos-1'.</msg>
<msg timestamp="20190402 10:54:18.477" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:18.478" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:54:18.478" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:18.478" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:18.478" starttime="20190402 10:54:16.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:18.480" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:18.480" starttime="20190402 10:54:18.479"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:18.481" starttime="20190402 10:54:18.480"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:18.481" starttime="20190402 10:54:16.593"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:54:18.484" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:54:18.484" starttime="20190402 10:54:18.484"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:54:18.485" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:54:18.485" starttime="20190402 10:54:18.484"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:18.487" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:18.487" starttime="20190402 10:54:18.486"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:18.488" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:54:20.123" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:20.124" level="INFO">${stdout} = SHUTOFF</msg>
<msg timestamp="20190402 10:54:20.124" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:20.124" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:20.124" starttime="20190402 10:54:18.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:20.125" level="INFO">${res} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:20.126" starttime="20190402 10:54:20.124"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:20.127" starttime="20190402 10:54:20.126"></status>
</kw>
<msg timestamp="20190402 10:54:20.127" level="INFO">${result} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:20.127" starttime="20190402 10:54:18.485"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:54:20.128" level="INFO">${value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 10:54:20.128" starttime="20190402 10:54:20.127"></status>
</kw>
<msg timestamp="20190402 10:54:20.129" level="INFO">${current_value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 10:54:20.129" starttime="20190402 10:54:18.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:20.130" starttime="20190402 10:54:20.129"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:20.130" starttime="20190402 10:54:18.482"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:20.130" starttime="20190402 10:54:18.481"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:20.130" starttime="20190402 10:54:16.593"></status>
</kw>
<kw name="Start Instance" library="OpenStack">
<doc>Start an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server start ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:20.133" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:20.133" starttime="20190402 10:54:20.132"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:20.134" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server start vm-cirros-1'.</msg>
<msg timestamp="20190402 10:54:21.917" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:21.917" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:54:21.917" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:21.917" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:21.917" starttime="20190402 10:54:20.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:21.918" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:21.918" starttime="20190402 10:54:21.917"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:21.919" starttime="20190402 10:54:21.918"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:21.919" starttime="20190402 10:54:20.131"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:54:21.921" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:54:21.921" starttime="20190402 10:54:21.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:54:21.921" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:54:21.922" starttime="20190402 10:54:21.921"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:21.923" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:21.923" starttime="20190402 10:54:21.922"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:21.923" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:54:23.554" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:23.555" level="INFO">${stdout} = SHUTOFF</msg>
<msg timestamp="20190402 10:54:23.555" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:23.555" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:23.555" starttime="20190402 10:54:21.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:23.557" level="INFO">${res} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:23.557" starttime="20190402 10:54:23.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:23.558" starttime="20190402 10:54:23.557"></status>
</kw>
<msg timestamp="20190402 10:54:23.559" level="INFO">${result} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:23.559" starttime="20190402 10:54:21.922"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:54:23.560" level="INFO">${value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 10:54:23.560" starttime="20190402 10:54:23.559"></status>
</kw>
<msg timestamp="20190402 10:54:23.560" level="INFO">${current_value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 10:54:23.560" starttime="20190402 10:54:21.920"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:54:23.562" level="FAIL">SHUTOFF != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:54:23.562" starttime="20190402 10:54:23.561"></status>
</kw>
<status status="FAIL" endtime="20190402 10:54:23.562" starttime="20190402 10:54:21.919"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:54:33.564" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:54:33.564" starttime="20190402 10:54:33.563"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:54:33.564" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:54:33.564" starttime="20190402 10:54:33.564"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:33.565" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:33.565" starttime="20190402 10:54:33.565"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:33.565" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:54:35.300" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:35.300" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:54:35.300" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:35.300" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:35.300" starttime="20190402 10:54:33.565"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:35.301" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:35.302" starttime="20190402 10:54:35.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:35.302" starttime="20190402 10:54:35.302"></status>
</kw>
<msg timestamp="20190402 10:54:35.302" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:35.302" starttime="20190402 10:54:33.564"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:54:35.303" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:54:35.303" starttime="20190402 10:54:35.303"></status>
</kw>
<msg timestamp="20190402 10:54:35.303" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:54:35.303" starttime="20190402 10:54:33.563"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:35.304" starttime="20190402 10:54:35.303"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:35.304" starttime="20190402 10:54:33.563"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:35.304" starttime="20190402 10:54:21.919"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:35.304" starttime="20190402 10:54:20.131"></status>
</kw>
<kw name="Start Instance" library="OpenStack">
<doc>Start an instance.</doc>
<arguments>
<arg>${centos_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server start ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:35.305" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:35.305" starttime="20190402 10:54:35.305"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:35.306" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server start vm-centos-1'.</msg>
<msg timestamp="20190402 10:54:37.101" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:37.102" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:54:37.102" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:37.102" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:37.102" starttime="20190402 10:54:35.306"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:37.103" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:37.103" starttime="20190402 10:54:37.102"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:37.103" starttime="20190402 10:54:37.103"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:37.103" starttime="20190402 10:54:35.305"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:54:37.105" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:54:37.105" starttime="20190402 10:54:37.104"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:54:37.105" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:54:37.105" starttime="20190402 10:54:37.105"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:37.106" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:37.106" starttime="20190402 10:54:37.106"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:37.107" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:54:38.838" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:38.838" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:54:38.838" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:38.838" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:38.838" starttime="20190402 10:54:37.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:38.839" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:38.839" starttime="20190402 10:54:38.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:38.839" starttime="20190402 10:54:38.839"></status>
</kw>
<msg timestamp="20190402 10:54:38.840" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:38.840" starttime="20190402 10:54:37.105"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:54:38.840" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:54:38.840" starttime="20190402 10:54:38.840"></status>
</kw>
<msg timestamp="20190402 10:54:38.840" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:54:38.840" starttime="20190402 10:54:37.104"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:38.841" starttime="20190402 10:54:38.841"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:38.841" starttime="20190402 10:54:37.104"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:38.841" starttime="20190402 10:54:37.103"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:38.841" starttime="20190402 10:54:35.304"></status>
</kw>
<doc>Stop and Start Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 10:54:38.841" critical="yes" starttime="20190402 10:53:03.426"></status>
</test>
<test id="s1-s1-s1-t9" name="Lock Unlock Instances">
<kw name="Lock Instance" library="OpenStack">
<doc>Lock an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server lock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:38.843" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:38.843" starttime="20190402 10:54:38.843"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:38.843" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server lock vm-cirros-1'.</msg>
<msg timestamp="20190402 10:54:41.010" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:41.010" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:54:41.010" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:41.010" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:41.010" starttime="20190402 10:54:38.843"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:41.011" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:41.011" starttime="20190402 10:54:41.011"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:41.012" starttime="20190402 10:54:41.012"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:41.012" starttime="20190402 10:54:38.842"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:41.012" starttime="20190402 10:54:38.842"></status>
</kw>
<kw name="Lock Instance" library="OpenStack">
<doc>Lock an instance.</doc>
<arguments>
<arg>${centos_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server lock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:41.013" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:41.013" starttime="20190402 10:54:41.013"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:41.013" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server lock vm-centos-1'.</msg>
<msg timestamp="20190402 10:54:42.896" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:42.896" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:54:42.896" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:42.896" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:42.896" starttime="20190402 10:54:41.013"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:42.897" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:42.897" starttime="20190402 10:54:42.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:42.897" starttime="20190402 10:54:42.897"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:42.898" starttime="20190402 10:54:41.012"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:42.898" starttime="20190402 10:54:41.012"></status>
</kw>
<kw name="Unlock Instance" library="OpenStack">
<doc>Unlock an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unlock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:42.899" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:42.899" starttime="20190402 10:54:42.898"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:42.899" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unlock vm-cirros-1'.</msg>
<msg timestamp="20190402 10:54:44.782" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:44.782" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:54:44.782" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:44.782" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:44.782" starttime="20190402 10:54:42.899"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:44.783" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:44.783" starttime="20190402 10:54:44.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:44.784" starttime="20190402 10:54:44.783"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:44.784" starttime="20190402 10:54:42.898"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:44.784" starttime="20190402 10:54:42.898"></status>
</kw>
<kw name="Unlock Instance" library="OpenStack">
<doc>Unlock an instance.</doc>
<arguments>
<arg>${centos_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unlock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:44.785" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:44.785" starttime="20190402 10:54:44.785"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:44.785" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unlock vm-centos-1'.</msg>
<msg timestamp="20190402 10:54:46.467" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:46.467" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:54:46.467" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:46.468" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:46.468" starttime="20190402 10:54:44.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:46.469" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:46.469" starttime="20190402 10:54:46.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:46.470" starttime="20190402 10:54:46.470"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:46.471" starttime="20190402 10:54:44.784"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:46.471" starttime="20190402 10:54:44.784"></status>
</kw>
<doc>Lock and Unlock Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 10:54:46.471" critical="yes" starttime="20190402 10:54:38.842"></status>
</test>
<test id="s1-s1-s1-t10" name="Reboot Instances">
<kw name="Reboot Instance" library="OpenStack">
<doc>Reboot an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server reboot ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:46.476" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:46.476" starttime="20190402 10:54:46.475"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:46.477" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server reboot vm-cirros-1'.</msg>
<msg timestamp="20190402 10:54:48.193" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:48.194" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:54:48.194" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:48.194" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:48.194" starttime="20190402 10:54:46.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:48.195" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:48.195" starttime="20190402 10:54:48.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:48.195" starttime="20190402 10:54:48.195"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:48.196" starttime="20190402 10:54:46.474"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBOOT</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBOOT</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:54:48.197" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:54:48.198" starttime="20190402 10:54:48.197"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:54:48.198" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:54:48.198" starttime="20190402 10:54:48.198"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:48.199" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:48.199" starttime="20190402 10:54:48.199"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:48.199" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:54:50.083" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:50.083" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 10:54:50.083" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:50.083" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:50.083" starttime="20190402 10:54:48.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:50.084" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:50.084" starttime="20190402 10:54:50.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:50.084" starttime="20190402 10:54:50.084"></status>
</kw>
<msg timestamp="20190402 10:54:50.084" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:50.084" starttime="20190402 10:54:48.198"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:54:50.085" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:54:50.085" starttime="20190402 10:54:50.084"></status>
</kw>
<msg timestamp="20190402 10:54:50.085" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:54:50.085" starttime="20190402 10:54:48.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:50.085" starttime="20190402 10:54:50.085"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:50.085" starttime="20190402 10:54:48.196"></status>
</kw>
<status status="PASS" endtime="20190402 10:54:50.085" starttime="20190402 10:54:48.196"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:54:50.087" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:54:50.087" starttime="20190402 10:54:50.086"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:54:50.087" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:54:50.087" starttime="20190402 10:54:50.087"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:54:50.088" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:54:50.088" starttime="20190402 10:54:50.087"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:54:50.088" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:54:51.718" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:54:51.719" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 10:54:51.719" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:54:51.719" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:54:51.719" starttime="20190402 10:54:50.088"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:54:51.720" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:51.720" starttime="20190402 10:54:51.719"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:54:51.721" starttime="20190402 10:54:51.720"></status>
</kw>
<msg timestamp="20190402 10:54:51.721" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:54:51.721" starttime="20190402 10:54:50.087"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:54:51.721" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:54:51.722" starttime="20190402 10:54:51.721"></status>
</kw>
<msg timestamp="20190402 10:54:51.722" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:54:51.722" starttime="20190402 10:54:50.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:54:51.723" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:54:51.723" starttime="20190402 10:54:51.722"></status>
</kw>
<status status="FAIL" endtime="20190402 10:54:51.723" starttime="20190402 10:54:50.086"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:55:01.726" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:55:01.726" starttime="20190402 10:55:01.726"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:55:01.727" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:55:01.727" starttime="20190402 10:55:01.727"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:55:01.729" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:55:01.729" starttime="20190402 10:55:01.728"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:55:01.729" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:55:03.320" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:55:03.320" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 10:55:03.320" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:55:03.320" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:55:03.320" starttime="20190402 10:55:01.729"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:55:03.321" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:55:03.321" starttime="20190402 10:55:03.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:55:03.322" starttime="20190402 10:55:03.322"></status>
</kw>
<msg timestamp="20190402 10:55:03.322" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:55:03.322" starttime="20190402 10:55:01.727"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:55:03.323" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:55:03.323" starttime="20190402 10:55:03.323"></status>
</kw>
<msg timestamp="20190402 10:55:03.323" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:55:03.323" starttime="20190402 10:55:01.725"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:55:03.324" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:55:03.324" starttime="20190402 10:55:03.324"></status>
</kw>
<status status="FAIL" endtime="20190402 10:55:03.324" starttime="20190402 10:55:01.723"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:55:13.326" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:55:13.326" starttime="20190402 10:55:13.326"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:55:13.326" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:55:13.326" starttime="20190402 10:55:13.326"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:55:13.327" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:55:13.327" starttime="20190402 10:55:13.327"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:55:13.328" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:55:15.010" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:55:15.010" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 10:55:15.010" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:55:15.010" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:55:15.010" starttime="20190402 10:55:13.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:55:15.011" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:55:15.011" starttime="20190402 10:55:15.011"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:55:15.011" starttime="20190402 10:55:15.011"></status>
</kw>
<msg timestamp="20190402 10:55:15.012" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:55:15.012" starttime="20190402 10:55:13.327"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:55:15.012" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:55:15.012" starttime="20190402 10:55:15.012"></status>
</kw>
<msg timestamp="20190402 10:55:15.012" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:55:15.012" starttime="20190402 10:55:13.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:55:15.013" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:55:15.013" starttime="20190402 10:55:15.012"></status>
</kw>
<status status="FAIL" endtime="20190402 10:55:15.013" starttime="20190402 10:55:13.325"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:55:25.016" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:55:25.016" starttime="20190402 10:55:25.015"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:55:25.017" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:55:25.017" starttime="20190402 10:55:25.016"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:55:25.019" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:55:25.019" starttime="20190402 10:55:25.018"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:55:25.020" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:55:26.602" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:55:26.602" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 10:55:26.603" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:55:26.603" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:55:26.603" starttime="20190402 10:55:25.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:55:26.604" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:55:26.605" starttime="20190402 10:55:26.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:55:26.606" starttime="20190402 10:55:26.605"></status>
</kw>
<msg timestamp="20190402 10:55:26.606" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:55:26.606" starttime="20190402 10:55:25.017"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:55:26.607" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:55:26.607" starttime="20190402 10:55:26.607"></status>
</kw>
<msg timestamp="20190402 10:55:26.608" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:55:26.608" starttime="20190402 10:55:25.015"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:55:26.609" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:55:26.609" starttime="20190402 10:55:26.608"></status>
</kw>
<status status="FAIL" endtime="20190402 10:55:26.609" starttime="20190402 10:55:25.014"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:55:36.612" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:55:36.613" starttime="20190402 10:55:36.612"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:55:36.614" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:55:36.614" starttime="20190402 10:55:36.613"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:55:36.615" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:55:36.615" starttime="20190402 10:55:36.615"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:55:36.616" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:55:38.248" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:55:38.249" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 10:55:38.249" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:55:38.249" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:55:38.249" starttime="20190402 10:55:36.616"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:55:38.251" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:55:38.251" starttime="20190402 10:55:38.250"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:55:38.252" starttime="20190402 10:55:38.251"></status>
</kw>
<msg timestamp="20190402 10:55:38.252" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:55:38.252" starttime="20190402 10:55:36.614"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:55:38.253" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:55:38.253" starttime="20190402 10:55:38.253"></status>
</kw>
<msg timestamp="20190402 10:55:38.254" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:55:38.254" starttime="20190402 10:55:36.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:55:38.255" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:55:38.256" starttime="20190402 10:55:38.254"></status>
</kw>
<status status="FAIL" endtime="20190402 10:55:38.256" starttime="20190402 10:55:36.610"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:55:48.258" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:55:48.258" starttime="20190402 10:55:48.258"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:55:48.259" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:55:48.259" starttime="20190402 10:55:48.258"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:55:48.259" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:55:48.259" starttime="20190402 10:55:48.259"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:55:48.260" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:55:49.891" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:55:49.891" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 10:55:49.891" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:55:49.891" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:55:49.891" starttime="20190402 10:55:48.259"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:55:49.892" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:55:49.892" starttime="20190402 10:55:49.891"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:55:49.892" starttime="20190402 10:55:49.892"></status>
</kw>
<msg timestamp="20190402 10:55:49.892" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:55:49.892" starttime="20190402 10:55:48.259"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:55:49.893" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:55:49.893" starttime="20190402 10:55:49.892"></status>
</kw>
<msg timestamp="20190402 10:55:49.893" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:55:49.893" starttime="20190402 10:55:48.257"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:55:49.893" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:55:49.893" starttime="20190402 10:55:49.893"></status>
</kw>
<status status="FAIL" endtime="20190402 10:55:49.894" starttime="20190402 10:55:48.256"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:55:59.895" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:55:59.895" starttime="20190402 10:55:59.895"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:55:59.895" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:55:59.895" starttime="20190402 10:55:59.895"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:55:59.896" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:55:59.896" starttime="20190402 10:55:59.896"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:55:59.897" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:56:01.628" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:56:01.628" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 10:56:01.628" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:56:01.628" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:56:01.628" starttime="20190402 10:55:59.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:56:01.629" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:56:01.629" starttime="20190402 10:56:01.628"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:56:01.629" starttime="20190402 10:56:01.629"></status>
</kw>
<msg timestamp="20190402 10:56:01.629" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:56:01.629" starttime="20190402 10:55:59.896"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:56:01.630" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:56:01.630" starttime="20190402 10:56:01.629"></status>
</kw>
<msg timestamp="20190402 10:56:01.630" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:56:01.630" starttime="20190402 10:55:59.894"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:56:01.630" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:56:01.630" starttime="20190402 10:56:01.630"></status>
</kw>
<status status="FAIL" endtime="20190402 10:56:01.631" starttime="20190402 10:55:59.894"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:56:11.633" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:56:11.633" starttime="20190402 10:56:11.633"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:56:11.635" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:56:11.635" starttime="20190402 10:56:11.634"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:56:11.637" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:56:11.637" starttime="20190402 10:56:11.636"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:56:11.638" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:56:13.271" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:56:13.271" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 10:56:13.272" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:56:13.272" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:56:13.272" starttime="20190402 10:56:11.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:56:13.274" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:56:13.274" starttime="20190402 10:56:13.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:56:13.274" starttime="20190402 10:56:13.274"></status>
</kw>
<msg timestamp="20190402 10:56:13.274" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:56:13.274" starttime="20190402 10:56:11.635"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:56:13.275" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:56:13.275" starttime="20190402 10:56:13.275"></status>
</kw>
<msg timestamp="20190402 10:56:13.275" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:56:13.275" starttime="20190402 10:56:11.632"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:56:13.275" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:56:13.276" starttime="20190402 10:56:13.275"></status>
</kw>
<status status="FAIL" endtime="20190402 10:56:13.276" starttime="20190402 10:56:11.631"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:56:23.277" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:56:23.277" starttime="20190402 10:56:23.277"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:56:23.278" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:56:23.278" starttime="20190402 10:56:23.277"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:56:23.278" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:56:23.278" starttime="20190402 10:56:23.278"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:56:23.279" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:56:24.961" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:56:24.962" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 10:56:24.962" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:56:24.962" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:56:24.962" starttime="20190402 10:56:23.279"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:56:24.962" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:56:24.962" starttime="20190402 10:56:24.962"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:56:24.963" starttime="20190402 10:56:24.963"></status>
</kw>
<msg timestamp="20190402 10:56:24.963" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:56:24.963" starttime="20190402 10:56:23.278"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:56:24.963" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:56:24.963" starttime="20190402 10:56:24.963"></status>
</kw>
<msg timestamp="20190402 10:56:24.964" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:56:24.964" starttime="20190402 10:56:23.277"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:56:24.964" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:56:24.964" starttime="20190402 10:56:24.964"></status>
</kw>
<status status="FAIL" endtime="20190402 10:56:24.964" starttime="20190402 10:56:23.276"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:56:34.966" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:56:34.966" starttime="20190402 10:56:34.965"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:56:34.966" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:56:34.966" starttime="20190402 10:56:34.966"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:56:34.968" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:56:34.968" starttime="20190402 10:56:34.967"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:56:34.968" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:56:36.649" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:56:36.649" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 10:56:36.649" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:56:36.649" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:56:36.650" starttime="20190402 10:56:34.968"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:56:36.650" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:56:36.650" starttime="20190402 10:56:36.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:56:36.651" starttime="20190402 10:56:36.650"></status>
</kw>
<msg timestamp="20190402 10:56:36.651" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:56:36.651" starttime="20190402 10:56:34.966"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:56:36.651" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:56:36.651" starttime="20190402 10:56:36.651"></status>
</kw>
<msg timestamp="20190402 10:56:36.651" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:56:36.651" starttime="20190402 10:56:34.965"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:56:36.652" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:56:36.652" starttime="20190402 10:56:36.652"></status>
</kw>
<status status="FAIL" endtime="20190402 10:56:36.652" starttime="20190402 10:56:34.964"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:56:46.654" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:56:46.654" starttime="20190402 10:56:46.654"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:56:46.655" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:56:46.655" starttime="20190402 10:56:46.654"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:56:46.655" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:56:46.655" starttime="20190402 10:56:46.655"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:56:46.656" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:56:48.287" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:56:48.288" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 10:56:48.288" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:56:48.288" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:56:48.288" starttime="20190402 10:56:46.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:56:48.289" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:56:48.289" starttime="20190402 10:56:48.288"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:56:48.289" starttime="20190402 10:56:48.289"></status>
</kw>
<msg timestamp="20190402 10:56:48.289" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:56:48.289" starttime="20190402 10:56:46.655"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:56:48.290" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:56:48.290" starttime="20190402 10:56:48.289"></status>
</kw>
<msg timestamp="20190402 10:56:48.290" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:56:48.290" starttime="20190402 10:56:46.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:56:48.291" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:56:48.291" starttime="20190402 10:56:48.290"></status>
</kw>
<status status="FAIL" endtime="20190402 10:56:48.291" starttime="20190402 10:56:46.653"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:56:58.294" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:56:58.294" starttime="20190402 10:56:58.293"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:56:58.295" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:56:58.295" starttime="20190402 10:56:58.294"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:56:58.297" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:56:58.297" starttime="20190402 10:56:58.297"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:56:58.298" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:57:00.080" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:57:00.080" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:57:00.080" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:57:00.080" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:57:00.080" starttime="20190402 10:56:58.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:57:00.081" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:00.081" starttime="20190402 10:57:00.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:00.082" starttime="20190402 10:57:00.081"></status>
</kw>
<msg timestamp="20190402 10:57:00.082" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:00.082" starttime="20190402 10:56:58.296"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:57:00.083" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:57:00.083" starttime="20190402 10:57:00.082"></status>
</kw>
<msg timestamp="20190402 10:57:00.083" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:57:00.083" starttime="20190402 10:56:58.292"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:00.084" starttime="20190402 10:57:00.083"></status>
</kw>
<status status="PASS" endtime="20190402 10:57:00.084" starttime="20190402 10:56:58.291"></status>
</kw>
<status status="PASS" endtime="20190402 10:57:00.084" starttime="20190402 10:54:50.085"></status>
</kw>
<status status="PASS" endtime="20190402 10:57:00.084" starttime="20190402 10:54:46.473"></status>
</kw>
<kw name="Reboot Instance" library="OpenStack">
<doc>Reboot an instance.</doc>
<arguments>
<arg>${centos_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server reboot ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:57:00.086" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:57:00.086" starttime="20190402 10:57:00.085"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:57:00.087" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server reboot vm-centos-1'.</msg>
<msg timestamp="20190402 10:57:01.768" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:57:01.768" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:57:01.768" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:57:01.768" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:57:01.768" starttime="20190402 10:57:00.086"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:57:01.769" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:01.769" starttime="20190402 10:57:01.768"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:01.769" starttime="20190402 10:57:01.769"></status>
</kw>
<status status="PASS" endtime="20190402 10:57:01.769" starttime="20190402 10:57:00.085"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBOOT</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBOOT</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:57:01.771" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:57:01.771" starttime="20190402 10:57:01.771"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:57:01.771" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:57:01.771" starttime="20190402 10:57:01.771"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:57:01.772" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:57:01.772" starttime="20190402 10:57:01.772"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:57:01.773" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:57:03.435" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:57:03.436" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 10:57:03.436" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:57:03.436" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:57:03.436" starttime="20190402 10:57:01.772"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:57:03.437" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:03.437" starttime="20190402 10:57:03.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:03.437" starttime="20190402 10:57:03.437"></status>
</kw>
<msg timestamp="20190402 10:57:03.437" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:03.437" starttime="20190402 10:57:01.772"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:57:03.437" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:57:03.438" starttime="20190402 10:57:03.437"></status>
</kw>
<msg timestamp="20190402 10:57:03.438" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 10:57:03.438" starttime="20190402 10:57:01.770"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:03.438" starttime="20190402 10:57:03.438"></status>
</kw>
<status status="PASS" endtime="20190402 10:57:03.438" starttime="20190402 10:57:01.770"></status>
</kw>
<status status="PASS" endtime="20190402 10:57:03.438" starttime="20190402 10:57:01.770"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:57:03.440" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:57:03.440" starttime="20190402 10:57:03.439"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:57:03.440" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:57:03.440" starttime="20190402 10:57:03.440"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:57:03.441" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:57:03.441" starttime="20190402 10:57:03.441"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:57:03.441" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:57:05.105" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:57:05.105" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:57:05.105" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:57:05.105" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:57:05.105" starttime="20190402 10:57:03.441"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:57:05.106" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:05.106" starttime="20190402 10:57:05.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:05.106" starttime="20190402 10:57:05.106"></status>
</kw>
<msg timestamp="20190402 10:57:05.106" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:05.106" starttime="20190402 10:57:03.440"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:57:05.107" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:57:05.107" starttime="20190402 10:57:05.107"></status>
</kw>
<msg timestamp="20190402 10:57:05.107" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:57:05.107" starttime="20190402 10:57:03.439"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:05.107" starttime="20190402 10:57:05.107"></status>
</kw>
<status status="PASS" endtime="20190402 10:57:05.108" starttime="20190402 10:57:03.439"></status>
</kw>
<status status="PASS" endtime="20190402 10:57:05.108" starttime="20190402 10:57:03.438"></status>
</kw>
<status status="PASS" endtime="20190402 10:57:05.108" starttime="20190402 10:57:00.084"></status>
</kw>
<doc>Reboot Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 10:57:05.108" critical="yes" starttime="20190402 10:54:46.472"></status>
</test>
<test id="s1-s1-s1-t11" name="Rebuild Instances">
<kw name="Rebuild Instance" library="OpenStack">
<doc>Rebuild an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server rebuild ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:57:05.109" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:57:05.109" starttime="20190402 10:57:05.109"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:57:05.110" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server rebuild vm-cirros-1'.</msg>
<msg timestamp="20190402 10:57:07.056" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:57:07.056" level="INFO">${stdout} = +-------------------+----------------------------------------------------------+
| Field             | Value                                                    |
+-------------------+-----------------...</msg>
<msg timestamp="20190402 10:57:07.057" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:57:07.057" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:57:07.057" starttime="20190402 10:57:05.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:57:07.057" level="INFO">${res} = {u'stdout': u'+-------------------+----------------------------------------------------------+\n| Field             | Value                                                    |\n+-------------------+-...</msg>
<status status="PASS" endtime="20190402 10:57:07.057" starttime="20190402 10:57:07.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:07.058" starttime="20190402 10:57:07.057"></status>
</kw>
<status status="PASS" endtime="20190402 10:57:07.058" starttime="20190402 10:57:05.109"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBUILD</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBUILD</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:57:07.059" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:57:07.059" starttime="20190402 10:57:07.059"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:57:07.059" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:57:07.060" starttime="20190402 10:57:07.059"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:57:07.060" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:57:07.060" starttime="20190402 10:57:07.060"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:57:07.061" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:57:08.893" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:57:08.893" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 10:57:08.893" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:57:08.894" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:57:08.894" starttime="20190402 10:57:07.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:57:08.895" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:08.895" starttime="20190402 10:57:08.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:08.896" starttime="20190402 10:57:08.896"></status>
</kw>
<msg timestamp="20190402 10:57:08.897" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:08.897" starttime="20190402 10:57:07.060"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:57:08.898" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:57:08.898" starttime="20190402 10:57:08.897"></status>
</kw>
<msg timestamp="20190402 10:57:08.898" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:57:08.898" starttime="20190402 10:57:07.059"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:08.899" starttime="20190402 10:57:08.899"></status>
</kw>
<status status="PASS" endtime="20190402 10:57:08.899" starttime="20190402 10:57:07.058"></status>
</kw>
<status status="PASS" endtime="20190402 10:57:08.900" starttime="20190402 10:57:07.058"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:57:08.905" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:57:08.905" starttime="20190402 10:57:08.904"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:57:08.906" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:57:08.906" starttime="20190402 10:57:08.905"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:57:08.908" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:57:08.908" starttime="20190402 10:57:08.907"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:57:08.909" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:57:10.541" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:57:10.542" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 10:57:10.542" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:57:10.542" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:57:10.542" starttime="20190402 10:57:08.908"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:57:10.544" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:10.544" starttime="20190402 10:57:10.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:10.545" starttime="20190402 10:57:10.544"></status>
</kw>
<msg timestamp="20190402 10:57:10.545" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:10.545" starttime="20190402 10:57:08.906"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:57:10.546" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:57:10.546" starttime="20190402 10:57:10.546"></status>
</kw>
<msg timestamp="20190402 10:57:10.547" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:57:10.547" starttime="20190402 10:57:08.902"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:57:10.548" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:57:10.548" starttime="20190402 10:57:10.547"></status>
</kw>
<status status="FAIL" endtime="20190402 10:57:10.548" starttime="20190402 10:57:08.901"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:57:20.551" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:57:20.551" starttime="20190402 10:57:20.550"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:57:20.551" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:57:20.552" starttime="20190402 10:57:20.551"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:57:20.553" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:57:20.553" starttime="20190402 10:57:20.552"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:57:20.553" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:57:22.185" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:57:22.185" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 10:57:22.185" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:57:22.185" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:57:22.185" starttime="20190402 10:57:20.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:57:22.186" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:22.187" starttime="20190402 10:57:22.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:22.187" starttime="20190402 10:57:22.187"></status>
</kw>
<msg timestamp="20190402 10:57:22.187" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:22.187" starttime="20190402 10:57:20.552"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:57:22.188" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:57:22.188" starttime="20190402 10:57:22.188"></status>
</kw>
<msg timestamp="20190402 10:57:22.188" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:57:22.188" starttime="20190402 10:57:20.550"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:57:22.189" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:57:22.189" starttime="20190402 10:57:22.189"></status>
</kw>
<status status="FAIL" endtime="20190402 10:57:22.189" starttime="20190402 10:57:20.549"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:57:32.191" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:57:32.191" starttime="20190402 10:57:32.191"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:57:32.192" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:57:32.192" starttime="20190402 10:57:32.191"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:57:32.192" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:57:32.192" starttime="20190402 10:57:32.192"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:57:32.193" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:57:33.824" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:57:33.825" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 10:57:33.825" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:57:33.825" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:57:33.825" starttime="20190402 10:57:32.192"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:57:33.826" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:33.826" starttime="20190402 10:57:33.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:33.826" starttime="20190402 10:57:33.826"></status>
</kw>
<msg timestamp="20190402 10:57:33.826" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:33.826" starttime="20190402 10:57:32.192"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:57:33.827" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:57:33.827" starttime="20190402 10:57:33.826"></status>
</kw>
<msg timestamp="20190402 10:57:33.827" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:57:33.827" starttime="20190402 10:57:32.190"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:57:33.827" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:57:33.827" starttime="20190402 10:57:33.827"></status>
</kw>
<status status="FAIL" endtime="20190402 10:57:33.827" starttime="20190402 10:57:32.190"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:57:43.831" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:57:43.831" starttime="20190402 10:57:43.830"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:57:43.832" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:57:43.832" starttime="20190402 10:57:43.831"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:57:43.835" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:57:43.835" starttime="20190402 10:57:43.834"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:57:43.836" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:57:45.418" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:57:45.419" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 10:57:45.419" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:57:45.419" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:57:45.419" starttime="20190402 10:57:43.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:57:45.420" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:45.420" starttime="20190402 10:57:45.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:45.421" starttime="20190402 10:57:45.420"></status>
</kw>
<msg timestamp="20190402 10:57:45.421" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:45.421" starttime="20190402 10:57:43.833"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:57:45.422" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:57:45.422" starttime="20190402 10:57:45.421"></status>
</kw>
<msg timestamp="20190402 10:57:45.422" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:57:45.422" starttime="20190402 10:57:43.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:57:45.423" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:57:45.423" starttime="20190402 10:57:45.422"></status>
</kw>
<status status="FAIL" endtime="20190402 10:57:45.423" starttime="20190402 10:57:43.828"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:57:55.426" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:57:55.426" starttime="20190402 10:57:55.426"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:57:55.427" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:57:55.427" starttime="20190402 10:57:55.426"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:57:55.429" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:57:55.429" starttime="20190402 10:57:55.428"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:57:55.430" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:57:57.112" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:57:57.112" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 10:57:57.112" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:57:57.112" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:57:57.112" starttime="20190402 10:57:55.429"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:57:57.114" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:57.114" starttime="20190402 10:57:57.113"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:57:57.115" starttime="20190402 10:57:57.115"></status>
</kw>
<msg timestamp="20190402 10:57:57.116" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:57:57.116" starttime="20190402 10:57:55.427"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:57:57.117" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:57:57.118" starttime="20190402 10:57:57.117"></status>
</kw>
<msg timestamp="20190402 10:57:57.118" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:57:57.118" starttime="20190402 10:57:55.425"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:57:57.120" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:57:57.120" starttime="20190402 10:57:57.119"></status>
</kw>
<status status="FAIL" endtime="20190402 10:57:57.120" starttime="20190402 10:57:55.424"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:58:07.122" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:58:07.122" starttime="20190402 10:58:07.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:58:07.122" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:58:07.122" starttime="20190402 10:58:07.122"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:58:07.123" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:58:07.123" starttime="20190402 10:58:07.123"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:58:07.123" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:58:08.962" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:58:08.963" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 10:58:08.963" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:58:08.963" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:58:08.963" starttime="20190402 10:58:07.123"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:58:08.963" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:08.963" starttime="20190402 10:58:08.963"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:08.964" starttime="20190402 10:58:08.964"></status>
</kw>
<msg timestamp="20190402 10:58:08.964" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:08.964" starttime="20190402 10:58:07.122"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:58:08.964" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:58:08.964" starttime="20190402 10:58:08.964"></status>
</kw>
<msg timestamp="20190402 10:58:08.965" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:58:08.965" starttime="20190402 10:58:07.121"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:58:08.965" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 10:58:08.965" starttime="20190402 10:58:08.965"></status>
</kw>
<status status="FAIL" endtime="20190402 10:58:08.966" starttime="20190402 10:58:07.121"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:58:18.968" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:58:18.968" starttime="20190402 10:58:18.968"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:58:18.969" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:58:18.969" starttime="20190402 10:58:18.968"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:58:18.970" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:58:18.970" starttime="20190402 10:58:18.970"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:58:18.971" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:58:20.604" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:58:20.604" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:58:20.604" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:58:20.604" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:58:20.604" starttime="20190402 10:58:18.970"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:58:20.605" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:20.605" starttime="20190402 10:58:20.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:20.605" starttime="20190402 10:58:20.605"></status>
</kw>
<msg timestamp="20190402 10:58:20.605" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:20.606" starttime="20190402 10:58:18.969"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:58:20.606" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:58:20.606" starttime="20190402 10:58:20.606"></status>
</kw>
<msg timestamp="20190402 10:58:20.606" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:58:20.606" starttime="20190402 10:58:18.967"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:20.607" starttime="20190402 10:58:20.606"></status>
</kw>
<status status="PASS" endtime="20190402 10:58:20.607" starttime="20190402 10:58:18.966"></status>
</kw>
<status status="PASS" endtime="20190402 10:58:20.607" starttime="20190402 10:57:08.900"></status>
</kw>
<status status="PASS" endtime="20190402 10:58:20.607" starttime="20190402 10:57:05.108"></status>
</kw>
<kw name="Rebuild Instance" library="OpenStack">
<doc>Rebuild an instance.</doc>
<arguments>
<arg>${centos_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server rebuild ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:58:20.608" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:58:20.608" starttime="20190402 10:58:20.608"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:58:20.608" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server rebuild vm-centos-1'.</msg>
<msg timestamp="20190402 10:58:22.792" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:58:22.792" level="INFO">${stdout} = +-------------------+----------------------------------------------------------+
| Field             | Value                                                    |
+-------------------+-----------------...</msg>
<msg timestamp="20190402 10:58:22.792" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:58:22.792" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:58:22.792" starttime="20190402 10:58:20.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:58:22.793" level="INFO">${res} = {u'stdout': u'+-------------------+----------------------------------------------------------+\n| Field             | Value                                                    |\n+-------------------+-...</msg>
<status status="PASS" endtime="20190402 10:58:22.793" starttime="20190402 10:58:22.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:22.793" starttime="20190402 10:58:22.793"></status>
</kw>
<status status="PASS" endtime="20190402 10:58:22.793" starttime="20190402 10:58:20.607"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBUILD</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBUILD</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:58:22.795" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:58:22.795" starttime="20190402 10:58:22.795"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:58:22.795" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:58:22.795" starttime="20190402 10:58:22.795"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:58:22.796" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:58:22.796" starttime="20190402 10:58:22.796"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:58:22.797" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:58:24.395" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:58:24.395" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 10:58:24.395" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:58:24.395" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:58:24.395" starttime="20190402 10:58:22.796"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:58:24.396" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:24.396" starttime="20190402 10:58:24.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:24.396" starttime="20190402 10:58:24.396"></status>
</kw>
<msg timestamp="20190402 10:58:24.396" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:24.396" starttime="20190402 10:58:22.795"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:58:24.397" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:58:24.397" starttime="20190402 10:58:24.397"></status>
</kw>
<msg timestamp="20190402 10:58:24.397" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 10:58:24.397" starttime="20190402 10:58:22.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:24.398" starttime="20190402 10:58:24.397"></status>
</kw>
<status status="PASS" endtime="20190402 10:58:24.398" starttime="20190402 10:58:22.794"></status>
</kw>
<status status="PASS" endtime="20190402 10:58:24.398" starttime="20190402 10:58:22.794"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:58:24.399" level="INFO">${openstack_cmd} = openstack server show vm-centos-1</msg>
<status status="PASS" endtime="20190402 10:58:24.399" starttime="20190402 10:58:24.399"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:58:24.400" level="INFO">${cmd} = openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:58:24.400" starttime="20190402 10:58:24.399"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:58:24.401" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:58:24.401" starttime="20190402 10:58:24.400"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:58:24.401" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-centos-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:58:26.313" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:58:26.313" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:58:26.314" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:58:26.314" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:58:26.314" starttime="20190402 10:58:24.401"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:58:26.316" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:26.316" starttime="20190402 10:58:26.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:26.317" starttime="20190402 10:58:26.316"></status>
</kw>
<msg timestamp="20190402 10:58:26.317" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:26.318" starttime="20190402 10:58:24.400"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:58:26.319" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:58:26.319" starttime="20190402 10:58:26.318"></status>
</kw>
<msg timestamp="20190402 10:58:26.319" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:58:26.319" starttime="20190402 10:58:24.399"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:26.320" starttime="20190402 10:58:26.320"></status>
</kw>
<status status="PASS" endtime="20190402 10:58:26.321" starttime="20190402 10:58:24.398"></status>
</kw>
<status status="PASS" endtime="20190402 10:58:26.321" starttime="20190402 10:58:24.398"></status>
</kw>
<status status="PASS" endtime="20190402 10:58:26.321" starttime="20190402 10:58:20.607"></status>
</kw>
<doc>Rebuild Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 10:58:26.321" critical="yes" starttime="20190402 10:57:05.108"></status>
</test>
<test id="s1-s1-s1-t12" name="Resize Instances">
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${cirros_flavor_ram}</arg>
<arg>${cirros_flavor_vcpus}</arg>
<arg>${cirros_flavor_disk}</arg>
<arg>${cirros_flavor_name_2}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:58:26.325" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190402 10:58:26.325" starttime="20190402 10:58:26.324"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:58:26.326" level="INFO">${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small</msg>
<status status="PASS" endtime="20190402 10:58:26.326" starttime="20190402 10:58:26.325"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:58:26.328" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:58:26.328" starttime="20190402 10:58:26.327"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:58:26.329" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small'.</msg>
<msg timestamp="20190402 10:58:27.711" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:58:27.711" level="INFO">${stdout} = +----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+------------------------------...</msg>
<msg timestamp="20190402 10:58:27.711" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:58:27.711" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:58:27.711" starttime="20190402 10:58:26.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:58:27.712" level="INFO">${res} = {u'stdout': u'+----------------------------+--------------------------------------+\n| Field                      | Value                                |\n+----------------------------+--------------...</msg>
<status status="PASS" endtime="20190402 10:58:27.712" starttime="20190402 10:58:27.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:27.712" starttime="20190402 10:58:27.712"></status>
</kw>
<status status="PASS" endtime="20190402 10:58:27.712" starttime="20190402 10:58:26.326"></status>
</kw>
<status status="PASS" endtime="20190402 10:58:27.712" starttime="20190402 10:58:26.323"></status>
</kw>
<kw name="Resize Instance" library="OpenStack">
<doc>Resize an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_flavor_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resize --flavor ${flavor} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:58:27.714" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:58:27.714" starttime="20190402 10:58:27.713"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:58:27.714" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resize --flavor f2.small vm-cirros-1'.</msg>
<msg timestamp="20190402 10:58:30.899" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:58:30.900" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:58:30.900" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:58:30.900" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:58:30.900" starttime="20190402 10:58:27.714"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:58:30.902" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:30.902" starttime="20190402 10:58:30.901"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:30.902" starttime="20190402 10:58:30.902"></status>
</kw>
<status status="PASS" endtime="20190402 10:58:30.903" starttime="20190402 10:58:27.713"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>RESIZE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:58:30.904" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:58:30.904" starttime="20190402 10:58:30.904"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:58:30.905" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:58:30.905" starttime="20190402 10:58:30.904"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:58:30.905" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:58:30.905" starttime="20190402 10:58:30.905"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:58:30.906" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:58:32.653" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:58:32.654" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 10:58:32.654" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:58:32.654" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:58:32.654" starttime="20190402 10:58:30.905"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:58:32.656" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:32.656" starttime="20190402 10:58:32.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:32.657" starttime="20190402 10:58:32.656"></status>
</kw>
<msg timestamp="20190402 10:58:32.657" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:32.658" starttime="20190402 10:58:30.905"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:58:32.658" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:58:32.658" starttime="20190402 10:58:32.658"></status>
</kw>
<msg timestamp="20190402 10:58:32.659" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:58:32.659" starttime="20190402 10:58:30.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:32.660" starttime="20190402 10:58:32.659"></status>
</kw>
<status status="PASS" endtime="20190402 10:58:32.660" starttime="20190402 10:58:30.903"></status>
</kw>
<status status="PASS" endtime="20190402 10:58:32.661" starttime="20190402 10:58:30.903"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:58:32.664" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:58:32.664" starttime="20190402 10:58:32.663"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:58:32.665" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:58:32.665" starttime="20190402 10:58:32.664"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:58:32.667" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:58:32.668" starttime="20190402 10:58:32.667"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:58:32.669" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:58:34.351" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:58:34.352" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 10:58:34.352" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:58:34.352" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:58:34.352" starttime="20190402 10:58:32.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:58:34.354" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:34.354" starttime="20190402 10:58:34.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:34.355" starttime="20190402 10:58:34.354"></status>
</kw>
<msg timestamp="20190402 10:58:34.355" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:34.355" starttime="20190402 10:58:32.665"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:58:34.356" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:58:34.356" starttime="20190402 10:58:34.356"></status>
</kw>
<msg timestamp="20190402 10:58:34.357" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:58:34.357" starttime="20190402 10:58:32.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:58:34.358" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 10:58:34.358" starttime="20190402 10:58:34.357"></status>
</kw>
<status status="FAIL" endtime="20190402 10:58:34.358" starttime="20190402 10:58:32.662"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:58:44.362" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:58:44.362" starttime="20190402 10:58:44.361"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:58:44.363" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:58:44.363" starttime="20190402 10:58:44.362"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:58:44.365" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:58:44.365" starttime="20190402 10:58:44.365"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:58:44.367" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:58:46.000" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:58:46.000" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 10:58:46.000" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:58:46.000" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:58:46.000" starttime="20190402 10:58:44.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:58:46.002" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:46.002" starttime="20190402 10:58:46.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:46.003" starttime="20190402 10:58:46.003"></status>
</kw>
<msg timestamp="20190402 10:58:46.004" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:46.004" starttime="20190402 10:58:44.364"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:58:46.005" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:58:46.005" starttime="20190402 10:58:46.004"></status>
</kw>
<msg timestamp="20190402 10:58:46.005" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:58:46.005" starttime="20190402 10:58:44.360"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:58:46.007" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 10:58:46.007" starttime="20190402 10:58:46.006"></status>
</kw>
<status status="FAIL" endtime="20190402 10:58:46.007" starttime="20190402 10:58:44.359"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:58:56.009" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:58:56.009" starttime="20190402 10:58:56.008"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:58:56.009" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:58:56.009" starttime="20190402 10:58:56.009"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:58:56.010" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:58:56.010" starttime="20190402 10:58:56.009"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:58:56.010" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:58:57.641" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:58:57.641" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 10:58:57.641" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:58:57.642" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:58:57.642" starttime="20190402 10:58:56.010"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:58:57.643" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:57.643" starttime="20190402 10:58:57.642"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:58:57.644" starttime="20190402 10:58:57.644"></status>
</kw>
<msg timestamp="20190402 10:58:57.644" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:58:57.645" starttime="20190402 10:58:56.009"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:58:57.645" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:58:57.645" starttime="20190402 10:58:57.645"></status>
</kw>
<msg timestamp="20190402 10:58:57.646" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:58:57.646" starttime="20190402 10:58:56.008"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:58:57.647" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 10:58:57.647" starttime="20190402 10:58:57.646"></status>
</kw>
<status status="FAIL" endtime="20190402 10:58:57.648" starttime="20190402 10:58:56.007"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:59:07.651" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:59:07.651" starttime="20190402 10:59:07.650"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:59:07.652" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:59:07.652" starttime="20190402 10:59:07.651"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:59:07.654" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:59:07.654" starttime="20190402 10:59:07.653"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:59:07.655" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:59:09.238" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:59:09.239" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 10:59:09.239" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:59:09.239" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:59:09.239" starttime="20190402 10:59:07.655"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:59:09.241" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:09.241" starttime="20190402 10:59:09.240"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:59:09.242" starttime="20190402 10:59:09.241"></status>
</kw>
<msg timestamp="20190402 10:59:09.242" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:09.242" starttime="20190402 10:59:07.652"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:59:09.243" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:59:09.243" starttime="20190402 10:59:09.242"></status>
</kw>
<msg timestamp="20190402 10:59:09.243" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:59:09.243" starttime="20190402 10:59:07.650"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:59:09.245" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 10:59:09.245" starttime="20190402 10:59:09.244"></status>
</kw>
<status status="FAIL" endtime="20190402 10:59:09.245" starttime="20190402 10:59:07.649"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:59:19.250" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:59:19.250" starttime="20190402 10:59:19.249"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:59:19.250" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:59:19.250" starttime="20190402 10:59:19.250"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:59:19.251" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:59:19.251" starttime="20190402 10:59:19.251"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:59:19.252" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:59:20.834" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:59:20.834" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 10:59:20.834" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:59:20.834" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:59:20.835" starttime="20190402 10:59:19.251"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:59:20.836" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:20.836" starttime="20190402 10:59:20.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:59:20.837" starttime="20190402 10:59:20.837"></status>
</kw>
<msg timestamp="20190402 10:59:20.838" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:20.838" starttime="20190402 10:59:19.251"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:59:20.839" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:59:20.839" starttime="20190402 10:59:20.838"></status>
</kw>
<msg timestamp="20190402 10:59:20.839" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:59:20.840" starttime="20190402 10:59:19.247"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:59:20.841" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 10:59:20.841" starttime="20190402 10:59:20.840"></status>
</kw>
<status status="FAIL" endtime="20190402 10:59:20.841" starttime="20190402 10:59:19.246"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:59:30.844" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:59:30.845" starttime="20190402 10:59:30.844"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:59:30.846" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:59:30.846" starttime="20190402 10:59:30.845"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:59:30.849" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:59:30.849" starttime="20190402 10:59:30.848"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:59:30.850" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:59:32.583" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:59:32.583" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 10:59:32.583" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:59:32.584" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:59:32.584" starttime="20190402 10:59:30.849"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:59:32.585" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:32.585" starttime="20190402 10:59:32.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:59:32.586" starttime="20190402 10:59:32.585"></status>
</kw>
<msg timestamp="20190402 10:59:32.586" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:32.586" starttime="20190402 10:59:30.846"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:59:32.587" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:59:32.587" starttime="20190402 10:59:32.587"></status>
</kw>
<msg timestamp="20190402 10:59:32.587" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:59:32.588" starttime="20190402 10:59:30.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:59:32.588" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 10:59:32.589" starttime="20190402 10:59:32.588"></status>
</kw>
<status status="FAIL" endtime="20190402 10:59:32.589" starttime="20190402 10:59:30.842"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:59:42.591" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:59:42.591" starttime="20190402 10:59:42.590"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:59:42.591" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:59:42.591" starttime="20190402 10:59:42.591"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:59:42.592" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:59:42.592" starttime="20190402 10:59:42.591"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:59:42.592" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:59:44.323" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:59:44.323" level="INFO">${stdout} = VERIFY_RESIZE</msg>
<msg timestamp="20190402 10:59:44.323" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:59:44.323" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:59:44.323" starttime="20190402 10:59:42.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:59:44.324" level="INFO">${res} = {u'stdout': u'VERIFY_RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:44.324" starttime="20190402 10:59:44.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:59:44.325" starttime="20190402 10:59:44.324"></status>
</kw>
<msg timestamp="20190402 10:59:44.325" level="INFO">${result} = {u'stdout': u'VERIFY_RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:44.325" starttime="20190402 10:59:42.591"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:59:44.325" level="INFO">${value} = VERIFY_RESIZE</msg>
<status status="PASS" endtime="20190402 10:59:44.325" starttime="20190402 10:59:44.325"></status>
</kw>
<msg timestamp="20190402 10:59:44.325" level="INFO">${current_value} = VERIFY_RESIZE</msg>
<status status="PASS" endtime="20190402 10:59:44.325" starttime="20190402 10:59:42.590"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:59:44.326" starttime="20190402 10:59:44.326"></status>
</kw>
<status status="PASS" endtime="20190402 10:59:44.326" starttime="20190402 10:59:42.589"></status>
</kw>
<status status="PASS" endtime="20190402 10:59:44.326" starttime="20190402 10:58:32.661"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resize --confirm ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:59:44.327" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:59:44.327" starttime="20190402 10:59:44.326"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:59:44.327" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resize --confirm vm-cirros-1'.</msg>
<msg timestamp="20190402 10:59:46.158" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:59:46.159" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:59:46.159" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:59:46.159" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:59:46.159" starttime="20190402 10:59:44.327"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:59:46.159" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:46.159" starttime="20190402 10:59:46.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:59:46.160" starttime="20190402 10:59:46.160"></status>
</kw>
<status status="PASS" endtime="20190402 10:59:46.160" starttime="20190402 10:59:44.326"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:59:46.162" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:59:46.162" starttime="20190402 10:59:46.162"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:59:46.163" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:59:46.163" starttime="20190402 10:59:46.162"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:59:46.164" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:59:46.164" starttime="20190402 10:59:46.163"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:59:46.164" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:59:47.849" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:59:47.849" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 10:59:47.850" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:59:47.850" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:59:47.850" starttime="20190402 10:59:46.164"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:59:47.852" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:47.852" starttime="20190402 10:59:47.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:59:47.853" starttime="20190402 10:59:47.852"></status>
</kw>
<msg timestamp="20190402 10:59:47.853" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:47.853" starttime="20190402 10:59:46.163"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:59:47.854" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:59:47.854" starttime="20190402 10:59:47.854"></status>
</kw>
<msg timestamp="20190402 10:59:47.855" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 10:59:47.855" starttime="20190402 10:59:46.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:59:47.856" starttime="20190402 10:59:47.855"></status>
</kw>
<status status="PASS" endtime="20190402 10:59:47.856" starttime="20190402 10:59:46.161"></status>
</kw>
<status status="PASS" endtime="20190402 10:59:47.857" starttime="20190402 10:59:46.160"></status>
</kw>
<status status="PASS" endtime="20190402 10:59:47.857" starttime="20190402 10:58:27.713"></status>
</kw>
<kw name="Resize Instance" library="OpenStack">
<doc>Resize an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resize --flavor ${flavor} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:59:47.860" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:59:47.860" starttime="20190402 10:59:47.859"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:59:47.861" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resize --flavor f1.small vm-cirros-1'.</msg>
<msg timestamp="20190402 10:59:50.946" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:59:50.947" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 10:59:50.947" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:59:50.947" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:59:50.947" starttime="20190402 10:59:47.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:59:50.947" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:50.948" starttime="20190402 10:59:50.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:59:50.948" starttime="20190402 10:59:50.948"></status>
</kw>
<status status="PASS" endtime="20190402 10:59:50.948" starttime="20190402 10:59:47.858"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>RESIZE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:59:50.950" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:59:50.950" starttime="20190402 10:59:50.949"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:59:50.950" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:59:50.950" starttime="20190402 10:59:50.950"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:59:50.951" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:59:50.951" starttime="20190402 10:59:50.951"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:59:50.951" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:59:52.765" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:59:52.765" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 10:59:52.766" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:59:52.766" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:59:52.766" starttime="20190402 10:59:50.951"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:59:52.766" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:52.766" starttime="20190402 10:59:52.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:59:52.767" starttime="20190402 10:59:52.766"></status>
</kw>
<msg timestamp="20190402 10:59:52.767" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:52.767" starttime="20190402 10:59:50.950"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:59:52.767" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:59:52.767" starttime="20190402 10:59:52.767"></status>
</kw>
<msg timestamp="20190402 10:59:52.767" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:59:52.767" starttime="20190402 10:59:50.949"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:59:52.768" starttime="20190402 10:59:52.768"></status>
</kw>
<status status="PASS" endtime="20190402 10:59:52.768" starttime="20190402 10:59:50.949"></status>
</kw>
<status status="PASS" endtime="20190402 10:59:52.768" starttime="20190402 10:59:50.948"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 10:59:52.769" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 10:59:52.769" starttime="20190402 10:59:52.769"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 10:59:52.770" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 10:59:52.770" starttime="20190402 10:59:52.769"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 10:59:52.771" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 10:59:52.771" starttime="20190402 10:59:52.770"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 10:59:52.771" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 10:59:54.434" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 10:59:54.434" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 10:59:54.434" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 10:59:54.434" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 10:59:54.434" starttime="20190402 10:59:52.771"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 10:59:54.435" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:54.435" starttime="20190402 10:59:54.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 10:59:54.436" starttime="20190402 10:59:54.435"></status>
</kw>
<msg timestamp="20190402 10:59:54.436" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 10:59:54.436" starttime="20190402 10:59:52.770"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 10:59:54.436" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:59:54.436" starttime="20190402 10:59:54.436"></status>
</kw>
<msg timestamp="20190402 10:59:54.437" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 10:59:54.437" starttime="20190402 10:59:52.769"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 10:59:54.437" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 10:59:54.437" starttime="20190402 10:59:54.437"></status>
</kw>
<status status="FAIL" endtime="20190402 10:59:54.437" starttime="20190402 10:59:52.768"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:00:04.441" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:00:04.441" starttime="20190402 11:00:04.440"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:00:04.442" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:00:04.442" starttime="20190402 11:00:04.441"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:00:04.443" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:00:04.443" starttime="20190402 11:00:04.443"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:00:04.444" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:00:06.076" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:00:06.077" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:00:06.077" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:00:06.077" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:00:06.077" starttime="20190402 11:00:04.444"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:00:06.079" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:00:06.080" starttime="20190402 11:00:06.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:00:06.081" starttime="20190402 11:00:06.080"></status>
</kw>
<msg timestamp="20190402 11:00:06.081" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:00:06.081" starttime="20190402 11:00:04.442"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:00:06.082" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:00:06.082" starttime="20190402 11:00:06.081"></status>
</kw>
<msg timestamp="20190402 11:00:06.083" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:00:06.083" starttime="20190402 11:00:04.439"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:00:06.084" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:00:06.084" starttime="20190402 11:00:06.083"></status>
</kw>
<status status="FAIL" endtime="20190402 11:00:06.084" starttime="20190402 11:00:04.438"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:00:16.092" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:00:16.092" starttime="20190402 11:00:16.091"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:00:16.092" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:00:16.092" starttime="20190402 11:00:16.092"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:00:16.094" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:00:16.094" starttime="20190402 11:00:16.094"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:00:16.095" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:00:17.728" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:00:17.728" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:00:17.728" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:00:17.728" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:00:17.728" starttime="20190402 11:00:16.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:00:17.730" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:00:17.730" starttime="20190402 11:00:17.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:00:17.730" starttime="20190402 11:00:17.730"></status>
</kw>
<msg timestamp="20190402 11:00:17.730" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:00:17.730" starttime="20190402 11:00:16.093"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:00:17.730" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:00:17.731" starttime="20190402 11:00:17.730"></status>
</kw>
<msg timestamp="20190402 11:00:17.731" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:00:17.731" starttime="20190402 11:00:16.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:00:17.731" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:00:17.731" starttime="20190402 11:00:17.731"></status>
</kw>
<status status="FAIL" endtime="20190402 11:00:17.731" starttime="20190402 11:00:16.087"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:00:27.733" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:00:27.733" starttime="20190402 11:00:27.733"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:00:27.734" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:00:27.734" starttime="20190402 11:00:27.733"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:00:27.734" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:00:27.734" starttime="20190402 11:00:27.734"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:00:27.735" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:00:29.318" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:00:29.318" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:00:29.318" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:00:29.318" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:00:29.318" starttime="20190402 11:00:27.734"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:00:29.320" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:00:29.320" starttime="20190402 11:00:29.319"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:00:29.321" starttime="20190402 11:00:29.320"></status>
</kw>
<msg timestamp="20190402 11:00:29.321" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:00:29.321" starttime="20190402 11:00:27.734"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:00:29.322" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:00:29.322" starttime="20190402 11:00:29.322"></status>
</kw>
<msg timestamp="20190402 11:00:29.323" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:00:29.323" starttime="20190402 11:00:27.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:00:29.324" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:00:29.324" starttime="20190402 11:00:29.323"></status>
</kw>
<status status="FAIL" endtime="20190402 11:00:29.324" starttime="20190402 11:00:27.732"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:00:39.326" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:00:39.326" starttime="20190402 11:00:39.326"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:00:39.327" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:00:39.327" starttime="20190402 11:00:39.327"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:00:39.328" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:00:39.328" starttime="20190402 11:00:39.327"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:00:39.328" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:00:40.910" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:00:40.910" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:00:40.910" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:00:40.910" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:00:40.910" starttime="20190402 11:00:39.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:00:40.912" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:00:40.912" starttime="20190402 11:00:40.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:00:40.913" starttime="20190402 11:00:40.913"></status>
</kw>
<msg timestamp="20190402 11:00:40.914" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:00:40.914" starttime="20190402 11:00:39.327"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:00:40.915" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:00:40.915" starttime="20190402 11:00:40.914"></status>
</kw>
<msg timestamp="20190402 11:00:40.915" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:00:40.915" starttime="20190402 11:00:39.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:00:40.917" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:00:40.917" starttime="20190402 11:00:40.916"></status>
</kw>
<status status="FAIL" endtime="20190402 11:00:40.917" starttime="20190402 11:00:39.325"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:00:50.920" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:00:50.920" starttime="20190402 11:00:50.920"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:00:50.921" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:00:50.921" starttime="20190402 11:00:50.921"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:00:50.923" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:00:50.923" starttime="20190402 11:00:50.923"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:00:50.924" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:00:52.556" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:00:52.556" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:00:52.557" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:00:52.557" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:00:52.557" starttime="20190402 11:00:50.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:00:52.558" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:00:52.558" starttime="20190402 11:00:52.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:00:52.560" starttime="20190402 11:00:52.559"></status>
</kw>
<msg timestamp="20190402 11:00:52.560" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:00:52.560" starttime="20190402 11:00:50.922"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:00:52.561" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:00:52.561" starttime="20190402 11:00:52.561"></status>
</kw>
<msg timestamp="20190402 11:00:52.562" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:00:52.562" starttime="20190402 11:00:50.919"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:00:52.563" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:00:52.563" starttime="20190402 11:00:52.562"></status>
</kw>
<status status="FAIL" endtime="20190402 11:00:52.564" starttime="20190402 11:00:50.918"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:01:02.566" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:01:02.566" starttime="20190402 11:01:02.565"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:01:02.566" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:01:02.566" starttime="20190402 11:01:02.566"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:01:02.567" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:01:02.567" starttime="20190402 11:01:02.567"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:01:02.568" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:01:04.150" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:01:04.151" level="INFO">${stdout} = VERIFY_RESIZE</msg>
<msg timestamp="20190402 11:01:04.151" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:01:04.151" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:01:04.151" starttime="20190402 11:01:02.567"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:01:04.152" level="INFO">${res} = {u'stdout': u'VERIFY_RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:04.153" starttime="20190402 11:01:04.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:04.153" starttime="20190402 11:01:04.153"></status>
</kw>
<msg timestamp="20190402 11:01:04.154" level="INFO">${result} = {u'stdout': u'VERIFY_RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:04.154" starttime="20190402 11:01:02.566"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:01:04.155" level="INFO">${value} = VERIFY_RESIZE</msg>
<status status="PASS" endtime="20190402 11:01:04.155" starttime="20190402 11:01:04.154"></status>
</kw>
<msg timestamp="20190402 11:01:04.156" level="INFO">${current_value} = VERIFY_RESIZE</msg>
<status status="PASS" endtime="20190402 11:01:04.156" starttime="20190402 11:01:02.565"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:04.157" starttime="20190402 11:01:04.156"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:04.157" starttime="20190402 11:01:02.564"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:04.157" starttime="20190402 10:59:52.768"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resize --confirm ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:01:04.159" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:01:04.159" starttime="20190402 11:01:04.159"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:01:04.160" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resize --confirm vm-cirros-1'.</msg>
<msg timestamp="20190402 11:01:05.849" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:01:05.849" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:01:05.849" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:01:05.849" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:01:05.849" starttime="20190402 11:01:04.160"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:01:05.850" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:05.850" starttime="20190402 11:01:05.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:05.851" starttime="20190402 11:01:05.851"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:05.851" starttime="20190402 11:01:04.158"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:01:05.853" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:01:05.853" starttime="20190402 11:01:05.853"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:01:05.854" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:01:05.854" starttime="20190402 11:01:05.854"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:01:05.855" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:01:05.855" starttime="20190402 11:01:05.855"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:01:05.856" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:01:07.586" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:01:07.586" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:01:07.586" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:01:07.586" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:01:07.586" starttime="20190402 11:01:05.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:01:07.587" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:07.587" starttime="20190402 11:01:07.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:07.587" starttime="20190402 11:01:07.587"></status>
</kw>
<msg timestamp="20190402 11:01:07.588" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:07.588" starttime="20190402 11:01:05.854"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:01:07.588" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:01:07.588" starttime="20190402 11:01:07.588"></status>
</kw>
<msg timestamp="20190402 11:01:07.588" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:01:07.588" starttime="20190402 11:01:05.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:07.589" starttime="20190402 11:01:07.588"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:07.589" starttime="20190402 11:01:05.852"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:07.589" starttime="20190402 11:01:05.851"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:07.589" starttime="20190402 10:59:47.857"></status>
</kw>
<doc>Resize Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:01:07.589" critical="yes" starttime="20190402 10:58:26.322"></status>
</test>
<test id="s1-s1-s1-t13" name="Set Unset Properties Instances">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${instance_property_1}='true'</arg>
<arg>${instance_property_2}='500'</arg>
<arg>${instance_property_3}='180'</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190402 11:01:07.590" level="INFO">${properties} = --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180'</msg>
<status status="PASS" endtime="20190402 11:01:07.590" starttime="20190402 11:01:07.590"></status>
</kw>
<kw name="Set Instance Property" library="OpenStack">
<doc>Set properties of an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:01:07.591" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:01:07.592" starttime="20190402 11:01:07.591"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:01:07.592" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-cirros-1'.</msg>
<msg timestamp="20190402 11:01:09.322" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:01:09.323" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:01:09.323" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:01:09.323" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:01:09.323" starttime="20190402 11:01:07.592"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:01:09.325" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:09.325" starttime="20190402 11:01:09.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:09.326" starttime="20190402 11:01:09.325"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:09.326" starttime="20190402 11:01:07.591"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:09.326" starttime="20190402 11:01:07.590"></status>
</kw>
<kw name="Set Instance Property" library="OpenStack">
<doc>Set properties of an instance.</doc>
<arguments>
<arg>${centos_instance_name}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:01:09.328" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:01:09.328" starttime="20190402 11:01:09.328"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:01:09.329" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-centos-1'.</msg>
<msg timestamp="20190402 11:01:11.011" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:01:11.011" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:01:11.012" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:01:11.012" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:01:11.012" starttime="20190402 11:01:09.328"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:01:11.013" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:11.013" starttime="20190402 11:01:11.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:11.014" starttime="20190402 11:01:11.014"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:11.015" starttime="20190402 11:01:09.327"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:11.015" starttime="20190402 11:01:09.327"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${instance_property_1}</arg>
<arg>${instance_property_2}</arg>
<arg>${instance_property_3}</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190402 11:01:11.017" level="INFO">${properties} = --property sw:wrs:auto_recovery --property hw:wrs:live_migration_max_downtime --property hw:wrs:live_migration_timeout</msg>
<status status="PASS" endtime="20190402 11:01:11.017" starttime="20190402 11:01:11.016"></status>
</kw>
<kw name="Unset Instance Property" library="OpenStack">
<doc>Unset properties of an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unset ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:01:11.021" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:01:11.021" starttime="20190402 11:01:11.020"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:01:11.022" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unset --property sw:wrs:auto_recovery --property hw:wrs:live_migration_max_downtime --property hw:wrs:live_migration_timeout vm-cirros-1'.</msg>
<msg timestamp="20190402 11:01:12.968" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:01:12.968" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:01:12.969" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:01:12.969" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:01:12.969" starttime="20190402 11:01:11.021"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:01:12.970" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:12.970" starttime="20190402 11:01:12.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:12.970" starttime="20190402 11:01:12.970"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:12.971" starttime="20190402 11:01:11.019"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:12.971" starttime="20190402 11:01:11.017"></status>
</kw>
<kw name="Unset Instance Property" library="OpenStack">
<doc>Unset properties of an instance.</doc>
<arguments>
<arg>${centos_instance_name}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unset ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:01:12.972" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:01:12.972" starttime="20190402 11:01:12.972"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:01:12.973" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unset --property sw:wrs:auto_recovery --property hw:wrs:live_migration_max_downtime --property hw:wrs:live_migration_timeout vm-centos-1'.</msg>
<msg timestamp="20190402 11:01:15.054" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:01:15.054" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:01:15.055" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:01:15.055" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:01:15.055" starttime="20190402 11:01:12.972"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:01:15.055" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:15.055" starttime="20190402 11:01:15.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:15.056" starttime="20190402 11:01:15.055"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:15.056" starttime="20190402 11:01:12.971"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:15.056" starttime="20190402 11:01:12.971"></status>
</kw>
<doc>Set Unset properties of Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:01:15.056" critical="yes" starttime="20190402 11:01:07.589"></status>
</test>
<test id="s1-s1-s1-t14" name="Evacuate Instances From Hosts">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CONFIGURATION_TYPE}' == 'Duplex'</arg>
<arg>Run Keywords</arg>
<arg>Evacuate Instances</arg>
<arg>controller-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>controller-1</arg>
<arg>ELSE IF</arg>
<arg>'${CONFIGURATION_TYPE}' == 'MN-Local' or '${CONFIGURATION_TYPE}' == 'MN-External'</arg>
<arg>Run Keywords</arg>
<arg>Evacuate Instances</arg>
<arg>compute-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>compute-1</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Evacuate Instances</arg>
<arg>controller-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>controller-1</arg>
</arguments>
<kw name="Evacuate Instances" library="OpenStack">
<doc>Evacuate all VMs from computes or from controllers.</doc>
<arguments>
<arg>controller-0</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:01:15.059" level="INFO">${openstack_cmd} = openstack compute service set</msg>
<status status="PASS" endtime="20190402 11:01:15.059" starttime="20190402 11:01:15.058"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--disable</arg>
<arg>--disable-reason test-evacuate</arg>
<arg>${host}</arg>
<arg>nova-compute</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:01:15.059" level="INFO">${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute</msg>
<status status="PASS" endtime="20190402 11:01:15.059" starttime="20190402 11:01:15.059"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:01:15.060" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:01:15.060" starttime="20190402 11:01:15.060"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:01:15.060" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute'.</msg>
<msg timestamp="20190402 11:01:16.390" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:01:16.391" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:01:16.391" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:01:16.391" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:01:16.391" starttime="20190402 11:01:15.060"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:01:16.392" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:16.392" starttime="20190402 11:01:16.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:16.393" starttime="20190402 11:01:16.392"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:16.393" starttime="20190402 11:01:15.059"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Compute Service Property</arg>
<arg>${host}</arg>
<arg>disabled</arg>
</arguments>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>disabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:01:16.395" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:01:16.396" starttime="20190402 11:01:16.395"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:01:16.396" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:01:16.396" starttime="20190402 11:01:16.396"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:01:16.398" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:01:16.398" starttime="20190402 11:01:16.397"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:01:16.398" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:01:17.810" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:01:17.810" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:01:17.810" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:01:17.810" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:01:17.810" starttime="20190402 11:01:16.398"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:01:17.811" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:17.811" starttime="20190402 11:01:17.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:17.812" starttime="20190402 11:01:17.811"></status>
</kw>
<msg timestamp="20190402 11:01:17.812" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:17.812" starttime="20190402 11:01:16.397"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:01:17.812" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:01:17.812" starttime="20190402 11:01:17.812"></status>
</kw>
<msg timestamp="20190402 11:01:17.813" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:01:17.813" starttime="20190402 11:01:16.395"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:17.813" starttime="20190402 11:01:17.813"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:17.813" starttime="20190402 11:01:16.394"></status>
</kw>
<status status="PASS" endtime="20190402 11:01:17.813" starttime="20190402 11:01:16.394"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Compute Service Property</arg>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:01:17.815" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:01:17.815" starttime="20190402 11:01:17.815"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:01:17.815" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:01:17.815" starttime="20190402 11:01:17.815"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:01:17.816" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:01:17.816" starttime="20190402 11:01:17.816"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:01:17.817" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:01:19.148" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:01:19.148" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:01:19.148" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:01:19.148" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:01:19.148" starttime="20190402 11:01:17.816"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:01:19.149" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:19.149" starttime="20190402 11:01:19.148"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:19.149" starttime="20190402 11:01:19.149"></status>
</kw>
<msg timestamp="20190402 11:01:19.149" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:19.149" starttime="20190402 11:01:17.815"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:01:19.150" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:01:19.150" starttime="20190402 11:01:19.150"></status>
</kw>
<msg timestamp="20190402 11:01:19.150" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:01:19.150" starttime="20190402 11:01:17.814"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:01:19.150" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:01:19.150" starttime="20190402 11:01:19.150"></status>
</kw>
<status status="FAIL" endtime="20190402 11:01:19.151" starttime="20190402 11:01:17.814"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:01:29.152" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:01:29.152" starttime="20190402 11:01:29.152"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:01:29.153" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:01:29.153" starttime="20190402 11:01:29.153"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:01:29.154" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:01:29.154" starttime="20190402 11:01:29.154"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:01:29.155" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:01:30.537" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:01:30.538" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:01:30.538" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:01:30.538" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:01:30.538" starttime="20190402 11:01:29.154"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:01:30.539" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:30.539" starttime="20190402 11:01:30.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:30.539" starttime="20190402 11:01:30.539"></status>
</kw>
<msg timestamp="20190402 11:01:30.539" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:30.539" starttime="20190402 11:01:29.153"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:01:30.540" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:01:30.540" starttime="20190402 11:01:30.539"></status>
</kw>
<msg timestamp="20190402 11:01:30.540" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:01:30.540" starttime="20190402 11:01:29.152"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:01:30.541" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:01:30.541" starttime="20190402 11:01:30.540"></status>
</kw>
<status status="FAIL" endtime="20190402 11:01:30.541" starttime="20190402 11:01:29.151"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:01:40.544" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:01:40.544" starttime="20190402 11:01:40.543"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:01:40.545" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:01:40.545" starttime="20190402 11:01:40.544"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:01:40.546" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:01:40.547" starttime="20190402 11:01:40.546"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:01:40.547" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:01:41.929" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:01:41.929" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:01:41.929" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:01:41.929" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:01:41.929" starttime="20190402 11:01:40.547"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:01:41.931" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:41.931" starttime="20190402 11:01:41.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:41.932" starttime="20190402 11:01:41.931"></status>
</kw>
<msg timestamp="20190402 11:01:41.932" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:41.933" starttime="20190402 11:01:40.546"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:01:41.933" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:01:41.933" starttime="20190402 11:01:41.933"></status>
</kw>
<msg timestamp="20190402 11:01:41.934" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:01:41.934" starttime="20190402 11:01:40.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:01:41.935" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:01:41.935" starttime="20190402 11:01:41.934"></status>
</kw>
<status status="FAIL" endtime="20190402 11:01:41.936" starttime="20190402 11:01:40.541"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:01:51.938" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:01:51.939" starttime="20190402 11:01:51.938"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:01:51.940" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:01:51.940" starttime="20190402 11:01:51.939"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:01:51.942" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:01:51.942" starttime="20190402 11:01:51.941"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:01:51.943" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:01:53.275" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:01:53.275" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:01:53.275" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:01:53.275" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:01:53.275" starttime="20190402 11:01:51.942"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:01:53.276" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:53.276" starttime="20190402 11:01:53.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:01:53.276" starttime="20190402 11:01:53.276"></status>
</kw>
<msg timestamp="20190402 11:01:53.276" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:01:53.276" starttime="20190402 11:01:51.940"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:01:53.277" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:01:53.277" starttime="20190402 11:01:53.276"></status>
</kw>
<msg timestamp="20190402 11:01:53.277" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:01:53.277" starttime="20190402 11:01:51.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:01:53.277" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:01:53.277" starttime="20190402 11:01:53.277"></status>
</kw>
<status status="FAIL" endtime="20190402 11:01:53.277" starttime="20190402 11:01:51.936"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:02:03.280" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:02:03.280" starttime="20190402 11:02:03.279"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:02:03.281" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:02:03.281" starttime="20190402 11:02:03.280"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:02:03.283" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:02:03.283" starttime="20190402 11:02:03.282"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:02:03.284" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:02:04.616" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:02:04.616" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:02:04.616" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:02:04.616" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:02:04.617" starttime="20190402 11:02:03.283"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:02:04.618" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:02:04.618" starttime="20190402 11:02:04.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:02:04.619" starttime="20190402 11:02:04.619"></status>
</kw>
<msg timestamp="20190402 11:02:04.620" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:02:04.620" starttime="20190402 11:02:03.281"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:02:04.621" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:02:04.621" starttime="20190402 11:02:04.620"></status>
</kw>
<msg timestamp="20190402 11:02:04.621" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:02:04.622" starttime="20190402 11:02:03.279"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:02:04.623" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:02:04.623" starttime="20190402 11:02:04.622"></status>
</kw>
<status status="FAIL" endtime="20190402 11:02:04.623" starttime="20190402 11:02:03.278"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:02:14.627" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:02:14.627" starttime="20190402 11:02:14.627"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:02:14.628" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:02:14.628" starttime="20190402 11:02:14.627"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:02:14.628" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:02:14.628" starttime="20190402 11:02:14.628"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:02:14.629" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:02:16.010" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:02:16.010" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:02:16.010" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:02:16.010" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:02:16.010" starttime="20190402 11:02:14.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:02:16.011" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:02:16.011" starttime="20190402 11:02:16.011"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:02:16.012" starttime="20190402 11:02:16.012"></status>
</kw>
<msg timestamp="20190402 11:02:16.012" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:02:16.012" starttime="20190402 11:02:14.628"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:02:16.013" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:02:16.013" starttime="20190402 11:02:16.013"></status>
</kw>
<msg timestamp="20190402 11:02:16.013" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:02:16.013" starttime="20190402 11:02:14.626"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:02:16.014" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:02:16.014" starttime="20190402 11:02:16.014"></status>
</kw>
<status status="FAIL" endtime="20190402 11:02:16.014" starttime="20190402 11:02:14.624"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:02:26.017" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:02:26.017" starttime="20190402 11:02:26.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:02:26.018" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:02:26.018" starttime="20190402 11:02:26.017"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:02:26.020" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:02:26.020" starttime="20190402 11:02:26.019"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:02:26.021" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:02:27.402" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:02:27.402" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:02:27.402" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:02:27.402" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:02:27.402" starttime="20190402 11:02:26.020"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:02:27.403" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:02:27.403" starttime="20190402 11:02:27.403"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:02:27.404" starttime="20190402 11:02:27.403"></status>
</kw>
<msg timestamp="20190402 11:02:27.404" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:02:27.404" starttime="20190402 11:02:26.018"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:02:27.404" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:02:27.404" starttime="20190402 11:02:27.404"></status>
</kw>
<msg timestamp="20190402 11:02:27.405" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:02:27.405" starttime="20190402 11:02:26.016"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:02:27.405" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:02:27.405" starttime="20190402 11:02:27.405"></status>
</kw>
<status status="FAIL" endtime="20190402 11:02:27.406" starttime="20190402 11:02:26.015"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:02:37.408" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:02:37.408" starttime="20190402 11:02:37.408"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:02:37.409" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:02:37.409" starttime="20190402 11:02:37.408"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:02:37.410" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:02:37.410" starttime="20190402 11:02:37.410"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:02:37.411" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:02:38.942" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:02:38.943" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:02:38.943" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:02:38.943" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:02:38.943" starttime="20190402 11:02:37.410"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:02:38.945" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:02:38.945" starttime="20190402 11:02:38.944"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:02:38.946" starttime="20190402 11:02:38.945"></status>
</kw>
<msg timestamp="20190402 11:02:38.946" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:02:38.946" starttime="20190402 11:02:37.409"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:02:38.947" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:02:38.947" starttime="20190402 11:02:38.946"></status>
</kw>
<msg timestamp="20190402 11:02:38.948" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:02:38.948" starttime="20190402 11:02:37.407"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:02:38.949" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:02:38.949" starttime="20190402 11:02:38.948"></status>
</kw>
<status status="FAIL" endtime="20190402 11:02:38.949" starttime="20190402 11:02:37.406"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:02:48.952" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:02:48.952" starttime="20190402 11:02:48.952"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:02:48.954" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:02:48.954" starttime="20190402 11:02:48.953"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:02:48.956" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:02:48.956" starttime="20190402 11:02:48.955"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:02:48.957" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:02:50.289" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:02:50.289" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:02:50.289" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:02:50.289" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:02:50.290" starttime="20190402 11:02:48.956"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:02:50.291" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:02:50.291" starttime="20190402 11:02:50.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:02:50.292" starttime="20190402 11:02:50.291"></status>
</kw>
<msg timestamp="20190402 11:02:50.293" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:02:50.293" starttime="20190402 11:02:48.954"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:02:50.294" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:02:50.294" starttime="20190402 11:02:50.293"></status>
</kw>
<msg timestamp="20190402 11:02:50.294" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:02:50.294" starttime="20190402 11:02:48.951"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:02:50.295" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:02:50.295" starttime="20190402 11:02:50.295"></status>
</kw>
<status status="FAIL" endtime="20190402 11:02:50.296" starttime="20190402 11:02:48.950"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:03:00.297" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:03:00.297" starttime="20190402 11:03:00.297"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:03:00.298" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:03:00.298" starttime="20190402 11:03:00.298"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:03:00.299" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:03:00.299" starttime="20190402 11:03:00.298"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:03:00.299" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:03:01.630" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:03:01.630" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:03:01.630" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:03:01.631" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:03:01.631" starttime="20190402 11:03:00.299"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:03:01.631" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:01.631" starttime="20190402 11:03:01.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:03:01.632" starttime="20190402 11:03:01.631"></status>
</kw>
<msg timestamp="20190402 11:03:01.632" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:01.632" starttime="20190402 11:03:00.298"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:03:01.632" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:03:01.632" starttime="20190402 11:03:01.632"></status>
</kw>
<msg timestamp="20190402 11:03:01.633" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:03:01.633" starttime="20190402 11:03:00.297"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:03:01.633" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:03:01.633" starttime="20190402 11:03:01.633"></status>
</kw>
<status status="FAIL" endtime="20190402 11:03:01.633" starttime="20190402 11:03:00.296"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:03:11.635" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:03:11.635" starttime="20190402 11:03:11.634"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:03:11.635" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:03:11.635" starttime="20190402 11:03:11.635"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:03:11.636" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:03:11.636" starttime="20190402 11:03:11.636"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:03:11.636" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:03:12.966" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:03:12.967" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:03:12.967" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:03:12.967" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:03:12.967" starttime="20190402 11:03:11.636"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:03:12.967" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:12.968" starttime="20190402 11:03:12.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:03:12.968" starttime="20190402 11:03:12.968"></status>
</kw>
<msg timestamp="20190402 11:03:12.968" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:12.968" starttime="20190402 11:03:11.635"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:03:12.968" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:03:12.968" starttime="20190402 11:03:12.968"></status>
</kw>
<msg timestamp="20190402 11:03:12.969" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:03:12.969" starttime="20190402 11:03:11.634"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:03:12.969" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:03:12.969" starttime="20190402 11:03:12.969"></status>
</kw>
<status status="FAIL" endtime="20190402 11:03:12.969" starttime="20190402 11:03:11.634"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:03:22.973" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:03:22.974" starttime="20190402 11:03:22.973"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:03:22.975" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:03:22.976" starttime="20190402 11:03:22.974"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:03:22.977" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:03:22.978" starttime="20190402 11:03:22.977"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:03:22.979" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:03:24.311" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:03:24.312" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:03:24.312" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:03:24.312" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:03:24.312" starttime="20190402 11:03:22.978"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:03:24.313" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:24.313" starttime="20190402 11:03:24.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:03:24.313" starttime="20190402 11:03:24.313"></status>
</kw>
<msg timestamp="20190402 11:03:24.313" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:24.313" starttime="20190402 11:03:22.976"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:03:24.314" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:03:24.314" starttime="20190402 11:03:24.314"></status>
</kw>
<msg timestamp="20190402 11:03:24.314" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:03:24.314" starttime="20190402 11:03:22.971"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:03:24.315" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:03:24.315" starttime="20190402 11:03:24.314"></status>
</kw>
<status status="FAIL" endtime="20190402 11:03:24.315" starttime="20190402 11:03:22.970"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:03:34.316" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:03:34.316" starttime="20190402 11:03:34.316"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:03:34.317" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:03:34.317" starttime="20190402 11:03:34.317"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:03:34.318" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:03:34.318" starttime="20190402 11:03:34.317"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:03:34.318" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:03:35.699" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:03:35.699" level="INFO">${stdout} = enabled</msg>
<msg timestamp="20190402 11:03:35.700" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:03:35.700" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:03:35.700" starttime="20190402 11:03:34.318"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:03:35.701" level="INFO">${res} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:35.701" starttime="20190402 11:03:35.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:03:35.702" starttime="20190402 11:03:35.702"></status>
</kw>
<msg timestamp="20190402 11:03:35.703" level="INFO">${result} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:35.703" starttime="20190402 11:03:34.317"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:03:35.704" level="INFO">${value} = enabled</msg>
<status status="PASS" endtime="20190402 11:03:35.704" starttime="20190402 11:03:35.703"></status>
</kw>
<msg timestamp="20190402 11:03:35.704" level="INFO">${current_value} = enabled</msg>
<status status="PASS" endtime="20190402 11:03:35.704" starttime="20190402 11:03:34.316"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:03:35.706" starttime="20190402 11:03:35.705"></status>
</kw>
<status status="PASS" endtime="20190402 11:03:35.706" starttime="20190402 11:03:34.315"></status>
</kw>
<status status="PASS" endtime="20190402 11:03:35.706" starttime="20190402 11:01:17.813"></status>
</kw>
<status status="PASS" endtime="20190402 11:03:35.707" starttime="20190402 11:01:15.058"></status>
</kw>
<kw name="Evacuate Instances" library="OpenStack">
<doc>Evacuate all VMs from computes or from controllers.</doc>
<arguments>
<arg>controller-1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:03:35.708" level="INFO">${openstack_cmd} = openstack compute service set</msg>
<status status="PASS" endtime="20190402 11:03:35.708" starttime="20190402 11:03:35.708"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--disable</arg>
<arg>--disable-reason test-evacuate</arg>
<arg>${host}</arg>
<arg>nova-compute</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:03:35.709" level="INFO">${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-1 nova-compute</msg>
<status status="PASS" endtime="20190402 11:03:35.709" starttime="20190402 11:03:35.708"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:03:35.710" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:03:35.711" starttime="20190402 11:03:35.710"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:03:35.712" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service set --disable --disable-reason test-evacuate controller-1 nova-compute'.</msg>
<msg timestamp="20190402 11:03:37.108" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:03:37.108" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:03:37.108" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:03:37.108" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:03:37.108" starttime="20190402 11:03:35.711"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:03:37.109" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:37.109" starttime="20190402 11:03:37.108"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:03:37.109" starttime="20190402 11:03:37.109"></status>
</kw>
<status status="PASS" endtime="20190402 11:03:37.109" starttime="20190402 11:03:35.709"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Compute Service Property</arg>
<arg>${host}</arg>
<arg>disabled</arg>
</arguments>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>disabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:03:37.110" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:03:37.110" starttime="20190402 11:03:37.110"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:03:37.111" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:03:37.111" starttime="20190402 11:03:37.111"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:03:37.112" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:03:37.112" starttime="20190402 11:03:37.111"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:03:37.112" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:03:38.443" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:03:38.444" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:03:38.444" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:03:38.444" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:03:38.444" starttime="20190402 11:03:37.112"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:03:38.446" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:38.446" starttime="20190402 11:03:38.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:03:38.447" starttime="20190402 11:03:38.446"></status>
</kw>
<msg timestamp="20190402 11:03:38.447" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:38.448" starttime="20190402 11:03:37.111"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:03:38.448" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:03:38.448" starttime="20190402 11:03:38.448"></status>
</kw>
<msg timestamp="20190402 11:03:38.449" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:03:38.449" starttime="20190402 11:03:37.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:03:38.450" starttime="20190402 11:03:38.449"></status>
</kw>
<status status="PASS" endtime="20190402 11:03:38.450" starttime="20190402 11:03:37.110"></status>
</kw>
<status status="PASS" endtime="20190402 11:03:38.450" starttime="20190402 11:03:37.109"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Compute Service Property</arg>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:03:38.453" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:03:38.453" starttime="20190402 11:03:38.453"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:03:38.454" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:03:38.454" starttime="20190402 11:03:38.453"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:03:38.455" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:03:38.455" starttime="20190402 11:03:38.455"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:03:38.456" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:03:39.794" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:03:39.795" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:03:39.795" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:03:39.795" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:03:39.795" starttime="20190402 11:03:38.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:03:39.797" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:39.797" starttime="20190402 11:03:39.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:03:39.798" starttime="20190402 11:03:39.797"></status>
</kw>
<msg timestamp="20190402 11:03:39.798" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:39.798" starttime="20190402 11:03:38.454"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:03:39.799" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:03:39.799" starttime="20190402 11:03:39.798"></status>
</kw>
<msg timestamp="20190402 11:03:39.800" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:03:39.800" starttime="20190402 11:03:38.452"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:03:39.801" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:03:39.801" starttime="20190402 11:03:39.800"></status>
</kw>
<status status="FAIL" endtime="20190402 11:03:39.801" starttime="20190402 11:03:38.451"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:03:49.804" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:03:49.805" starttime="20190402 11:03:49.804"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:03:49.806" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:03:49.806" starttime="20190402 11:03:49.805"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:03:49.808" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:03:49.808" starttime="20190402 11:03:49.807"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:03:49.809" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:03:51.140" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:03:51.141" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:03:51.141" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:03:51.141" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:03:51.141" starttime="20190402 11:03:49.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:03:51.142" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:51.143" starttime="20190402 11:03:51.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:03:51.144" starttime="20190402 11:03:51.143"></status>
</kw>
<msg timestamp="20190402 11:03:51.144" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:03:51.144" starttime="20190402 11:03:49.806"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:03:51.145" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:03:51.145" starttime="20190402 11:03:51.144"></status>
</kw>
<msg timestamp="20190402 11:03:51.146" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:03:51.146" starttime="20190402 11:03:49.803"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:03:51.147" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:03:51.148" starttime="20190402 11:03:51.146"></status>
</kw>
<status status="FAIL" endtime="20190402 11:03:51.148" starttime="20190402 11:03:49.802"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:04:01.150" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:04:01.150" starttime="20190402 11:04:01.149"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:04:01.150" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:04:01.150" starttime="20190402 11:04:01.150"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:04:01.151" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:04:01.151" starttime="20190402 11:04:01.151"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:04:01.152" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:04:02.632" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:04:02.633" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:04:02.633" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:04:02.633" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:04:02.633" starttime="20190402 11:04:01.151"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:04:02.634" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:04:02.634" starttime="20190402 11:04:02.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:04:02.634" starttime="20190402 11:04:02.634"></status>
</kw>
<msg timestamp="20190402 11:04:02.635" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:04:02.635" starttime="20190402 11:04:01.150"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:04:02.635" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:04:02.635" starttime="20190402 11:04:02.635"></status>
</kw>
<msg timestamp="20190402 11:04:02.636" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:04:02.636" starttime="20190402 11:04:01.149"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:04:02.636" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:04:02.636" starttime="20190402 11:04:02.636"></status>
</kw>
<status status="FAIL" endtime="20190402 11:04:02.637" starttime="20190402 11:04:01.148"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:04:12.638" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:04:12.638" starttime="20190402 11:04:12.638"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:04:12.638" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:04:12.638" starttime="20190402 11:04:12.638"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:04:12.639" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:04:12.639" starttime="20190402 11:04:12.639"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:04:12.639" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:04:13.971" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:04:13.971" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:04:13.971" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:04:13.971" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:04:13.971" starttime="20190402 11:04:12.639"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:04:13.973" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:04:13.973" starttime="20190402 11:04:13.972"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:04:13.974" starttime="20190402 11:04:13.974"></status>
</kw>
<msg timestamp="20190402 11:04:13.975" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:04:13.975" starttime="20190402 11:04:12.638"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:04:13.976" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:04:13.976" starttime="20190402 11:04:13.975"></status>
</kw>
<msg timestamp="20190402 11:04:13.976" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:04:13.976" starttime="20190402 11:04:12.637"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:04:13.977" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:04:13.977" starttime="20190402 11:04:13.977"></status>
</kw>
<status status="FAIL" endtime="20190402 11:04:13.978" starttime="20190402 11:04:12.637"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:04:23.981" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:04:23.981" starttime="20190402 11:04:23.980"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:04:23.982" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:04:23.982" starttime="20190402 11:04:23.981"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:04:23.984" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:04:23.984" starttime="20190402 11:04:23.983"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:04:23.985" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:04:25.316" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:04:25.317" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:04:25.317" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:04:25.317" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:04:25.317" starttime="20190402 11:04:23.984"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:04:25.318" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:04:25.318" starttime="20190402 11:04:25.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:04:25.319" starttime="20190402 11:04:25.319"></status>
</kw>
<msg timestamp="20190402 11:04:25.319" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:04:25.319" starttime="20190402 11:04:23.982"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:04:25.320" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:04:25.320" starttime="20190402 11:04:25.319"></status>
</kw>
<msg timestamp="20190402 11:04:25.320" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:04:25.320" starttime="20190402 11:04:23.979"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:04:25.320" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:04:25.320" starttime="20190402 11:04:25.320"></status>
</kw>
<status status="FAIL" endtime="20190402 11:04:25.321" starttime="20190402 11:04:23.978"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:04:35.322" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:04:35.322" starttime="20190402 11:04:35.322"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:04:35.323" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:04:35.323" starttime="20190402 11:04:35.323"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:04:35.324" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:04:35.324" starttime="20190402 11:04:35.324"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:04:35.325" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:04:36.705" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:04:36.706" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:04:36.706" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:04:36.706" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:04:36.706" starttime="20190402 11:04:35.324"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:04:36.706" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:04:36.707" starttime="20190402 11:04:36.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:04:36.707" starttime="20190402 11:04:36.707"></status>
</kw>
<msg timestamp="20190402 11:04:36.707" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:04:36.707" starttime="20190402 11:04:35.323"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:04:36.707" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:04:36.707" starttime="20190402 11:04:36.707"></status>
</kw>
<msg timestamp="20190402 11:04:36.708" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:04:36.708" starttime="20190402 11:04:35.322"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:04:36.708" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:04:36.708" starttime="20190402 11:04:36.708"></status>
</kw>
<status status="FAIL" endtime="20190402 11:04:36.708" starttime="20190402 11:04:35.321"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:04:46.711" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:04:46.711" starttime="20190402 11:04:46.711"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:04:46.712" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:04:46.713" starttime="20190402 11:04:46.712"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:04:46.714" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:04:46.714" starttime="20190402 11:04:46.714"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:04:46.716" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:04:51.158" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:04:51.159" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:04:51.159" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:04:51.159" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:04:51.159" starttime="20190402 11:04:46.715"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:04:51.159" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:04:51.159" starttime="20190402 11:04:51.159"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:04:51.160" starttime="20190402 11:04:51.159"></status>
</kw>
<msg timestamp="20190402 11:04:51.160" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:04:51.160" starttime="20190402 11:04:46.713"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:04:51.160" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:04:51.160" starttime="20190402 11:04:51.160"></status>
</kw>
<msg timestamp="20190402 11:04:51.160" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:04:51.160" starttime="20190402 11:04:46.710"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:04:51.161" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:04:51.161" starttime="20190402 11:04:51.161"></status>
</kw>
<status status="FAIL" endtime="20190402 11:04:51.161" starttime="20190402 11:04:46.709"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:01.163" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:05:01.163" starttime="20190402 11:05:01.162"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:01.163" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:05:01.163" starttime="20190402 11:05:01.163"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:01.164" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:01.164" starttime="20190402 11:05:01.164"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:01.164" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:05:03.297" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:03.298" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:05:03.298" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:03.298" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:03.298" starttime="20190402 11:05:01.164"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:03.300" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:03.300" starttime="20190402 11:05:03.299"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:03.302" starttime="20190402 11:05:03.301"></status>
</kw>
<msg timestamp="20190402 11:05:03.302" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:03.302" starttime="20190402 11:05:01.163"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:05:03.303" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:05:03.303" starttime="20190402 11:05:03.302"></status>
</kw>
<msg timestamp="20190402 11:05:03.303" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:05:03.303" starttime="20190402 11:05:01.162"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:05:03.303" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:05:03.303" starttime="20190402 11:05:03.303"></status>
</kw>
<status status="FAIL" endtime="20190402 11:05:03.304" starttime="20190402 11:05:01.161"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:13.305" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:05:13.305" starttime="20190402 11:05:13.305"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:13.305" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:05:13.305" starttime="20190402 11:05:13.305"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:13.306" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:13.306" starttime="20190402 11:05:13.306"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:13.306" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:05:15.139" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:15.139" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:05:15.140" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:15.140" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:15.140" starttime="20190402 11:05:13.306"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:15.140" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:15.141" starttime="20190402 11:05:15.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:15.141" starttime="20190402 11:05:15.141"></status>
</kw>
<msg timestamp="20190402 11:05:15.141" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:15.141" starttime="20190402 11:05:13.305"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:05:15.142" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:05:15.142" starttime="20190402 11:05:15.141"></status>
</kw>
<msg timestamp="20190402 11:05:15.142" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:05:15.142" starttime="20190402 11:05:13.304"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:05:15.143" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:05:15.143" starttime="20190402 11:05:15.142"></status>
</kw>
<status status="FAIL" endtime="20190402 11:05:15.143" starttime="20190402 11:05:13.304"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:25.145" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:05:25.145" starttime="20190402 11:05:25.145"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:25.145" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:05:25.145" starttime="20190402 11:05:25.145"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:25.146" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:25.146" starttime="20190402 11:05:25.146"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:25.147" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:05:26.928" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:26.929" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:05:26.929" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:26.929" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:26.929" starttime="20190402 11:05:25.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:26.931" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:26.931" starttime="20190402 11:05:26.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:26.932" starttime="20190402 11:05:26.932"></status>
</kw>
<msg timestamp="20190402 11:05:26.933" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:26.933" starttime="20190402 11:05:25.145"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:05:26.934" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:05:26.934" starttime="20190402 11:05:26.933"></status>
</kw>
<msg timestamp="20190402 11:05:26.935" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:05:26.935" starttime="20190402 11:05:25.144"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:05:26.936" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:05:26.936" starttime="20190402 11:05:26.935"></status>
</kw>
<status status="FAIL" endtime="20190402 11:05:26.936" starttime="20190402 11:05:25.143"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:36.938" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:05:36.938" starttime="20190402 11:05:36.938"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:36.939" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:05:36.939" starttime="20190402 11:05:36.938"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:36.940" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:36.940" starttime="20190402 11:05:36.939"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:36.940" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:05:38.724" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:38.725" level="INFO">${stdout} = enabled</msg>
<msg timestamp="20190402 11:05:38.725" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:38.725" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:38.725" starttime="20190402 11:05:36.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:38.726" level="INFO">${res} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:38.726" starttime="20190402 11:05:38.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:38.726" starttime="20190402 11:05:38.726"></status>
</kw>
<msg timestamp="20190402 11:05:38.726" level="INFO">${result} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:38.726" starttime="20190402 11:05:36.939"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:05:38.727" level="INFO">${value} = enabled</msg>
<status status="PASS" endtime="20190402 11:05:38.727" starttime="20190402 11:05:38.727"></status>
</kw>
<msg timestamp="20190402 11:05:38.727" level="INFO">${current_value} = enabled</msg>
<status status="PASS" endtime="20190402 11:05:38.727" starttime="20190402 11:05:36.937"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:38.727" starttime="20190402 11:05:38.727"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:38.727" starttime="20190402 11:05:36.937"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:38.728" starttime="20190402 11:03:38.451"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:38.728" starttime="20190402 11:03:35.707"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:38.728" starttime="20190402 11:01:15.058"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:38.728" starttime="20190402 11:01:15.057"></status>
</kw>
<doc>Evacuate all Cirros and Centos instances from computes
or controllers.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
</tags>
<status status="PASS" endtime="20190402 11:05:38.728" critical="yes" starttime="20190402 11:01:15.056"></status>
</test>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>OpenStack.Openstack Cleanup All</arg>
<arg>Utils.Stx Suite TearDown</arg>
</arguments>
<kw name="Openstack Cleanup All" library="OpenStack">
<doc>Delete all instances, images, flavors, networks and
keypairs generated during tests.</doc>
<kw name="Delete All Instances" library="OpenStack">
<doc>Get a list of all existing instances to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:38.731" level="INFO">${openstack_cmd} = openstack server list</msg>
<status status="PASS" endtime="20190402 11:05:38.731" starttime="20190402 11:05:38.731"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:38.732" level="INFO">${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:05:38.732" starttime="20190402 11:05:38.731"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:38.733" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:38.733" starttime="20190402 11:05:38.732"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:38.733" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:05:40.882" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:40.882" level="INFO">${stdout} = 

vm-centos-1
vm-cirros-1</msg>
<msg timestamp="20190402 11:05:40.883" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:40.883" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:40.883" starttime="20190402 11:05:38.733"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:40.886" level="INFO">${res} = {u'stdout': u'\n\nvm-centos-1\nvm-cirros-1', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:40.886" starttime="20190402 11:05:40.884"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:40.887" starttime="20190402 11:05:40.886"></status>
</kw>
<msg timestamp="20190402 11:05:40.887" level="INFO">&amp;{result} = { stdout=

vm-centos-1
vm-cirros-1 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:05:40.888" starttime="20190402 11:05:38.732"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{vm_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:05:40.889" level="INFO">${response} = 

vm-centos-1
vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:05:40.889" starttime="20190402 11:05:40.889"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:05:40.890" level="INFO">@{res_in_list} = [ vm-centos-1 | vm-cirros-1 ]</msg>
<status status="PASS" endtime="20190402 11:05:40.890" starttime="20190402 11:05:40.890"></status>
</kw>
<msg timestamp="20190402 11:05:40.891" level="INFO">@{vm_list} = [ vm-centos-1 | vm-cirros-1 ]</msg>
<status status="PASS" endtime="20190402 11:05:40.891" starttime="20190402 11:05:40.888"></status>
</kw>
<kw type="for" name="${vm} IN [ @{vm_list} ]">
<kw type="foritem" name="${vm} = vm-centos-1">
<kw name="Delete Instance" library="OpenStack">
<doc>Delete an specific instance.</doc>
<arguments>
<arg>${vm}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:40.892" level="INFO">${openstack_cmd} = openstack server delete</msg>
<status status="PASS" endtime="20190402 11:05:40.893" starttime="20190402 11:05:40.892"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${vm}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:40.893" level="INFO">${cmd} = openstack server delete vm-centos-1</msg>
<status status="PASS" endtime="20190402 11:05:40.893" starttime="20190402 11:05:40.893"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:40.895" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:40.895" starttime="20190402 11:05:40.895"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:40.896" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server delete vm-centos-1'.</msg>
<msg timestamp="20190402 11:05:42.793" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:42.793" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:05:42.794" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:42.794" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:42.794" starttime="20190402 11:05:40.895"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:42.795" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:42.795" starttime="20190402 11:05:42.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:42.795" starttime="20190402 11:05:42.795"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:42.795" starttime="20190402 11:05:40.894"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:42.796" starttime="20190402 11:05:40.891"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:42.796" starttime="20190402 11:05:40.891"></status>
</kw>
<kw type="foritem" name="${vm} = vm-cirros-1">
<kw name="Delete Instance" library="OpenStack">
<doc>Delete an specific instance.</doc>
<arguments>
<arg>${vm}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:42.797" level="INFO">${openstack_cmd} = openstack server delete</msg>
<status status="PASS" endtime="20190402 11:05:42.797" starttime="20190402 11:05:42.796"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${vm}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:42.797" level="INFO">${cmd} = openstack server delete vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:05:42.797" starttime="20190402 11:05:42.797"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:42.798" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:42.799" starttime="20190402 11:05:42.798"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:42.799" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server delete vm-cirros-1'.</msg>
<msg timestamp="20190402 11:05:44.694" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:44.694" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:05:44.694" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:44.694" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:44.694" starttime="20190402 11:05:42.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:44.695" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:44.695" starttime="20190402 11:05:44.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:44.695" starttime="20190402 11:05:44.695"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:44.695" starttime="20190402 11:05:42.797"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:44.695" starttime="20190402 11:05:42.796"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:44.695" starttime="20190402 11:05:42.796"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:44.696" starttime="20190402 11:05:40.891"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:44.696" starttime="20190402 11:05:38.730"></status>
</kw>
<kw name="Delete All Images" library="OpenStack">
<doc>Get a list of all existing images to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:44.696" level="INFO">${openstack_cmd} = openstack image list</msg>
<status status="PASS" endtime="20190402 11:05:44.696" starttime="20190402 11:05:44.696"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "Cirros"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:44.697" level="INFO">${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"</msg>
<status status="PASS" endtime="20190402 11:05:44.697" starttime="20190402 11:05:44.696"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:44.698" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:44.698" starttime="20190402 11:05:44.698"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:44.698" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.</msg>
<msg timestamp="20190402 11:05:46.161" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:46.162" level="INFO">${stdout} = 

centos
cirros</msg>
<msg timestamp="20190402 11:05:46.162" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:46.162" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:46.162" starttime="20190402 11:05:44.698"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:46.163" level="INFO">${res} = {u'stdout': u'\n\ncentos\ncirros', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:46.163" starttime="20190402 11:05:46.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:46.163" starttime="20190402 11:05:46.163"></status>
</kw>
<msg timestamp="20190402 11:05:46.163" level="INFO">&amp;{result} = { stdout=

centos
cirros | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:05:46.163" starttime="20190402 11:05:44.697"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{image_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:05:46.164" level="INFO">${response} = 

centos
cirros</msg>
<status status="PASS" endtime="20190402 11:05:46.164" starttime="20190402 11:05:46.164"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:05:46.165" level="INFO">@{res_in_list} = [ centos | cirros ]</msg>
<status status="PASS" endtime="20190402 11:05:46.165" starttime="20190402 11:05:46.164"></status>
</kw>
<msg timestamp="20190402 11:05:46.165" level="INFO">@{image_list} = [ centos | cirros ]</msg>
<status status="PASS" endtime="20190402 11:05:46.165" starttime="20190402 11:05:46.164"></status>
</kw>
<kw type="for" name="${image} IN [ @{image_list} ]">
<kw type="foritem" name="${image} = centos">
<kw name="Delete Image" library="OpenStack">
<doc>Delete an specific image.</doc>
<arguments>
<arg>${image}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:46.166" level="INFO">${openstack_cmd} = openstack image delete</msg>
<status status="PASS" endtime="20190402 11:05:46.166" starttime="20190402 11:05:46.166"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${image}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:46.166" level="INFO">${cmd} = openstack image delete centos</msg>
<status status="PASS" endtime="20190402 11:05:46.166" starttime="20190402 11:05:46.166"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:46.167" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:46.167" starttime="20190402 11:05:46.166"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:46.167" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image delete centos'.</msg>
<msg timestamp="20190402 11:05:48.630" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:48.631" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:05:48.631" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:48.631" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:48.631" starttime="20190402 11:05:46.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:48.633" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:48.633" starttime="20190402 11:05:48.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:48.634" starttime="20190402 11:05:48.634"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:48.635" starttime="20190402 11:05:46.166"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:48.635" starttime="20190402 11:05:46.165"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:48.635" starttime="20190402 11:05:46.165"></status>
</kw>
<kw type="foritem" name="${image} = cirros">
<kw name="Delete Image" library="OpenStack">
<doc>Delete an specific image.</doc>
<arguments>
<arg>${image}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:48.637" level="INFO">${openstack_cmd} = openstack image delete</msg>
<status status="PASS" endtime="20190402 11:05:48.637" starttime="20190402 11:05:48.637"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${image}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:48.638" level="INFO">${cmd} = openstack image delete cirros</msg>
<status status="PASS" endtime="20190402 11:05:48.638" starttime="20190402 11:05:48.638"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:48.640" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:48.640" starttime="20190402 11:05:48.640"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:48.642" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image delete cirros'.</msg>
<msg timestamp="20190402 11:05:50.590" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:50.590" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:05:50.590" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:50.591" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:50.591" starttime="20190402 11:05:48.641"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:50.591" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:50.592" starttime="20190402 11:05:50.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:50.592" starttime="20190402 11:05:50.592"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:50.593" starttime="20190402 11:05:48.639"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:50.593" starttime="20190402 11:05:48.636"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:50.593" starttime="20190402 11:05:48.636"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:50.593" starttime="20190402 11:05:46.165"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:50.593" starttime="20190402 11:05:44.696"></status>
</kw>
<kw name="Delete All Flavors" library="OpenStack">
<doc>Get a list of all existing flavors to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:50.594" level="INFO">${openstack_cmd} = openstack flavor list</msg>
<status status="PASS" endtime="20190402 11:05:50.594" starttime="20190402 11:05:50.594"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "m1"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:50.594" level="INFO">${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"</msg>
<status status="PASS" endtime="20190402 11:05:50.594" starttime="20190402 11:05:50.594"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:50.595" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:50.595" starttime="20190402 11:05:50.595"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:50.596" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.</msg>
<msg timestamp="20190402 11:05:51.941" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:51.941" level="INFO">${stdout} = 

f2.small
f1.small
f1.medium</msg>
<msg timestamp="20190402 11:05:51.941" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:51.941" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:51.941" starttime="20190402 11:05:50.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:51.942" level="INFO">${res} = {u'stdout': u'\n\nf2.small\nf1.small\nf1.medium', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:51.942" starttime="20190402 11:05:51.941"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:51.943" starttime="20190402 11:05:51.942"></status>
</kw>
<msg timestamp="20190402 11:05:51.943" level="INFO">&amp;{result} = { stdout=

f2.small
f1.small
f1.medium | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:05:51.943" starttime="20190402 11:05:50.595"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{flavor_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:05:51.944" level="INFO">${response} = 

f2.small
f1.small
f1.medium</msg>
<status status="PASS" endtime="20190402 11:05:51.944" starttime="20190402 11:05:51.944"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:05:51.944" level="INFO">@{res_in_list} = [ f2.small | f1.small | f1.medium ]</msg>
<status status="PASS" endtime="20190402 11:05:51.944" starttime="20190402 11:05:51.944"></status>
</kw>
<msg timestamp="20190402 11:05:51.945" level="INFO">@{flavor_list} = [ f2.small | f1.small | f1.medium ]</msg>
<status status="PASS" endtime="20190402 11:05:51.945" starttime="20190402 11:05:51.943"></status>
</kw>
<kw type="for" name="${flavor} IN [ @{flavor_list} ]">
<kw type="foritem" name="${flavor} = f2.small">
<kw name="Delete Flavor" library="OpenStack">
<doc>Delete an specific flavor.</doc>
<arguments>
<arg>${flavor}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:51.946" level="INFO">${openstack_cmd} = openstack flavor delete</msg>
<status status="PASS" endtime="20190402 11:05:51.946" starttime="20190402 11:05:51.946"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${flavor}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:51.947" level="INFO">${cmd} = openstack flavor delete f2.small</msg>
<status status="PASS" endtime="20190402 11:05:51.947" starttime="20190402 11:05:51.947"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:51.948" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:51.948" starttime="20190402 11:05:51.948"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:51.949" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor delete f2.small'.</msg>
<msg timestamp="20190402 11:05:53.378" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:53.379" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:05:53.379" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:53.379" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:53.379" starttime="20190402 11:05:51.948"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:53.381" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:53.381" starttime="20190402 11:05:53.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:53.383" starttime="20190402 11:05:53.382"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:53.383" starttime="20190402 11:05:51.947"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:53.384" starttime="20190402 11:05:51.945"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:53.384" starttime="20190402 11:05:51.945"></status>
</kw>
<kw type="foritem" name="${flavor} = f1.small">
<kw name="Delete Flavor" library="OpenStack">
<doc>Delete an specific flavor.</doc>
<arguments>
<arg>${flavor}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:53.386" level="INFO">${openstack_cmd} = openstack flavor delete</msg>
<status status="PASS" endtime="20190402 11:05:53.386" starttime="20190402 11:05:53.386"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${flavor}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:53.387" level="INFO">${cmd} = openstack flavor delete f1.small</msg>
<status status="PASS" endtime="20190402 11:05:53.387" starttime="20190402 11:05:53.386"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:53.389" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:53.389" starttime="20190402 11:05:53.389"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:53.390" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor delete f1.small'.</msg>
<msg timestamp="20190402 11:05:54.873" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:54.873" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:05:54.873" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:54.873" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:54.873" starttime="20190402 11:05:53.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:54.874" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:54.874" starttime="20190402 11:05:54.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:54.874" starttime="20190402 11:05:54.874"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:54.874" starttime="20190402 11:05:53.387"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:54.874" starttime="20190402 11:05:53.385"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:54.875" starttime="20190402 11:05:53.384"></status>
</kw>
<kw type="foritem" name="${flavor} = f1.medium">
<kw name="Delete Flavor" library="OpenStack">
<doc>Delete an specific flavor.</doc>
<arguments>
<arg>${flavor}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:54.875" level="INFO">${openstack_cmd} = openstack flavor delete</msg>
<status status="PASS" endtime="20190402 11:05:54.875" starttime="20190402 11:05:54.875"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${flavor}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:54.876" level="INFO">${cmd} = openstack flavor delete f1.medium</msg>
<status status="PASS" endtime="20190402 11:05:54.876" starttime="20190402 11:05:54.875"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:54.876" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:54.876" starttime="20190402 11:05:54.876"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:54.877" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor delete f1.medium'.</msg>
<msg timestamp="20190402 11:05:56.358" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:56.358" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:05:56.358" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:56.358" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:56.358" starttime="20190402 11:05:54.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:56.359" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:56.359" starttime="20190402 11:05:56.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:56.360" starttime="20190402 11:05:56.359"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:56.360" starttime="20190402 11:05:54.876"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:56.360" starttime="20190402 11:05:54.875"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:56.360" starttime="20190402 11:05:54.875"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:56.360" starttime="20190402 11:05:51.945"></status>
</kw>
<status status="PASS" endtime="20190402 11:05:56.360" starttime="20190402 11:05:50.593"></status>
</kw>
<kw name="Delete All Networks" library="OpenStack">
<doc>Get a list of all existing networks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:56.361" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190402 11:05:56.361" starttime="20190402 11:05:56.361"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "private"</arg>
<arg>grep -v "public"</arg>
<arg>grep -v "external"</arg>
<arg>grep -v "internal"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:56.362" level="INFO">${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"</msg>
<status status="PASS" endtime="20190402 11:05:56.362" starttime="20190402 11:05:56.361"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:56.362" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:56.362" starttime="20190402 11:05:56.362"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:56.363" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.</msg>
<msg timestamp="20190402 11:05:57.945" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:05:57.945" level="INFO">${stdout} = 

network-1</msg>
<msg timestamp="20190402 11:05:57.945" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:05:57.945" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:05:57.945" starttime="20190402 11:05:56.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:05:57.947" level="INFO">${res} = {u'stdout': u'\n\nnetwork-1', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:05:57.947" starttime="20190402 11:05:57.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:05:57.949" starttime="20190402 11:05:57.948"></status>
</kw>
<msg timestamp="20190402 11:05:57.949" level="INFO">&amp;{result} = { stdout=

network-1 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:05:57.949" starttime="20190402 11:05:56.362"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{network_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:05:57.951" level="INFO">${response} = 

network-1</msg>
<status status="PASS" endtime="20190402 11:05:57.951" starttime="20190402 11:05:57.951"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:05:57.952" level="INFO">@{res_in_list} = [ network-1 ]</msg>
<status status="PASS" endtime="20190402 11:05:57.952" starttime="20190402 11:05:57.952"></status>
</kw>
<msg timestamp="20190402 11:05:57.953" level="INFO">@{network_list} = [ network-1 ]</msg>
<status status="PASS" endtime="20190402 11:05:57.953" starttime="20190402 11:05:57.950"></status>
</kw>
<kw type="for" name="${network} IN [ @{network_list} ]">
<kw type="foritem" name="${network} = network-1">
<kw name="Delete Network" library="OpenStack">
<doc>Delete an specific network.</doc>
<arguments>
<arg>${network}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:05:57.954" level="INFO">${openstack_cmd} = openstack network delete</msg>
<status status="PASS" endtime="20190402 11:05:57.954" starttime="20190402 11:05:57.954"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${network}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:05:57.955" level="INFO">${cmd} = openstack network delete network-1</msg>
<status status="PASS" endtime="20190402 11:05:57.956" starttime="20190402 11:05:57.955"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:05:57.958" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:05:57.958" starttime="20190402 11:05:57.958"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:05:57.960" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network delete network-1'.</msg>
<msg timestamp="20190402 11:06:00.693" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:00.694" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:06:00.694" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:00.694" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:00.694" starttime="20190402 11:05:57.959"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:00.694" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:00.694" starttime="20190402 11:06:00.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:00.695" starttime="20190402 11:06:00.695"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:00.695" starttime="20190402 11:05:57.956"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:00.695" starttime="20190402 11:05:57.953"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:00.695" starttime="20190402 11:05:57.953"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:00.695" starttime="20190402 11:05:57.953"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:00.696" starttime="20190402 11:05:56.361"></status>
</kw>
<kw name="Delete All KeyPairs" library="OpenStack">
<doc>Get a list of all existing keypais to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack keypair list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:06:00.696" level="INFO">${openstack_cmd} = openstack keypair list</msg>
<status status="PASS" endtime="20190402 11:06:00.696" starttime="20190402 11:06:00.696"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:06:00.697" level="INFO">${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:06:00.697" starttime="20190402 11:06:00.696"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:06:00.697" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:06:00.697" starttime="20190402 11:06:00.697"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:00.698" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack keypair list|awk '{print$2}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:06:02.058" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:02.058" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:06:02.058" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:02.058" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:02.058" starttime="20190402 11:06:00.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:02.059" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:02.059" starttime="20190402 11:06:02.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:02.060" starttime="20190402 11:06:02.059"></status>
</kw>
<msg timestamp="20190402 11:06:02.060" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:06:02.060" starttime="20190402 11:06:00.697"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{key_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:06:02.060" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:06:02.061" starttime="20190402 11:06:02.060"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:06:02.061" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:06:02.061" starttime="20190402 11:06:02.061"></status>
</kw>
<msg timestamp="20190402 11:06:02.061" level="INFO">@{key_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:06:02.061" starttime="20190402 11:06:02.060"></status>
</kw>
<kw type="for" name="${key} IN [ @{key_list} ]">
<status status="PASS" endtime="20190402 11:06:02.061" starttime="20190402 11:06:02.061"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:02.061" starttime="20190402 11:06:00.696"></status>
</kw>
<kw name="Delete All Snapshots" library="OpenStack">
<doc>Get a list of all existing snapshots to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:06:02.062" level="INFO">${openstack_cmd} = openstack volume snapshot list</msg>
<status status="PASS" endtime="20190402 11:06:02.062" starttime="20190402 11:06:02.062"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:06:02.062" level="INFO">${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:06:02.062" starttime="20190402 11:06:02.062"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:06:02.063" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:06:02.063" starttime="20190402 11:06:02.063"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:02.063" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:06:03.393" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:03.394" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:06:03.394" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:03.394" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:03.394" starttime="20190402 11:06:02.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:03.396" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:03.396" starttime="20190402 11:06:03.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:03.397" starttime="20190402 11:06:03.396"></status>
</kw>
<msg timestamp="20190402 11:06:03.397" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:06:03.397" starttime="20190402 11:06:02.062"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{snapshot_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:06:03.399" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:06:03.399" starttime="20190402 11:06:03.399"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:06:03.401" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:06:03.401" starttime="20190402 11:06:03.400"></status>
</kw>
<msg timestamp="20190402 11:06:03.401" level="INFO">@{snapshot_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:06:03.402" starttime="20190402 11:06:03.398"></status>
</kw>
<kw type="for" name="${snapshot} IN [ @{snapshot_list} ]">
<status status="PASS" endtime="20190402 11:06:03.402" starttime="20190402 11:06:03.402"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:03.402" starttime="20190402 11:06:02.061"></status>
</kw>
<kw name="Delete All Volumes" library="OpenStack">
<doc>Get a list of all existing volumes to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:06:03.404" level="INFO">${openstack_cmd} = openstack volume list</msg>
<status status="PASS" endtime="20190402 11:06:03.404" starttime="20190402 11:06:03.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "ID"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:06:03.405" level="INFO">${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"</msg>
<status status="PASS" endtime="20190402 11:06:03.405" starttime="20190402 11:06:03.404"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:06:03.406" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:06:03.406" starttime="20190402 11:06:03.406"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:03.407" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume list|awk '{print$2}'|grep -v "ID"'.</msg>
<msg timestamp="20190402 11:06:04.839" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:04.840" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:06:04.840" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:04.840" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:04.840" starttime="20190402 11:06:03.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:04.842" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:04.842" starttime="20190402 11:06:04.841"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:04.843" starttime="20190402 11:06:04.842"></status>
</kw>
<msg timestamp="20190402 11:06:04.843" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:06:04.844" starttime="20190402 11:06:03.405"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{volume_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:06:04.845" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:06:04.845" starttime="20190402 11:06:04.845"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:06:04.846" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:06:04.846" starttime="20190402 11:06:04.846"></status>
</kw>
<msg timestamp="20190402 11:06:04.847" level="INFO">@{volume_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:06:04.847" starttime="20190402 11:06:04.844"></status>
</kw>
<kw type="for" name="${volume} IN [ @{volume_list} ]">
<status status="PASS" endtime="20190402 11:06:04.847" starttime="20190402 11:06:04.847"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:04.848" starttime="20190402 11:06:03.403"></status>
</kw>
<kw name="Delete All Stacks" library="OpenStack">
<doc>Get a list of all existing stacks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:06:04.849" level="INFO">${openstack_cmd} = openstack stack list</msg>
<status status="PASS" endtime="20190402 11:06:04.849" starttime="20190402 11:06:04.849"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:06:04.850" level="INFO">${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:06:04.850" starttime="20190402 11:06:04.849"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:06:04.851" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:06:04.851" starttime="20190402 11:06:04.851"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:04.851" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:06:06.283" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:06.284" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:06:06.284" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:06.284" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:06.284" starttime="20190402 11:06:04.851"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:06.285" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:06.286" starttime="20190402 11:06:06.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:06.287" starttime="20190402 11:06:06.286"></status>
</kw>
<msg timestamp="20190402 11:06:06.287" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:06:06.287" starttime="20190402 11:06:04.850"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{stack_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:06:06.289" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:06:06.289" starttime="20190402 11:06:06.288"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:06:06.290" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:06:06.290" starttime="20190402 11:06:06.289"></status>
</kw>
<msg timestamp="20190402 11:06:06.290" level="INFO">@{stack_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:06:06.290" starttime="20190402 11:06:06.288"></status>
</kw>
<kw type="for" name="${stack} IN [ @{stack_list} ]">
<status status="PASS" endtime="20190402 11:06:06.291" starttime="20190402 11:06:06.290"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:06.291" starttime="20190402 11:06:04.848"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:06.291" starttime="20190402 11:05:38.730"></status>
</kw>
<kw name="Stx Suite TearDown" library="Utils">
<doc>Wrapper to clean up activities on the suite.</doc>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20190402 11:06:06.296" starttime="20190402 11:06:06.292"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:06.297" starttime="20190402 11:06:06.291"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:06.297" starttime="20190402 11:05:38.729"></status>
</kw>
<doc>Tests to create instances from an image, perform different
power status and set properties, using Cirros and Centos OS.
Author(s):
- Juan Carlos Alonso juan.carlos.alonso@intel.com</doc>
<status status="PASS" endtime="20190402 11:06:06.297" starttime="20190402 10:49:59.792"></status>
</suite>
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-OpenStack/02-Instance-From-Volume.robot" id="s1-s1-s2" name="02-Instance-From-Volume">
<kw type="setup" name="Stx Suite Setup" library="Utils">
<doc>Wrapper to setup the environment needed for exercise
StarlingX features</doc>
<kw name="Open Master Controller Connection" library="Utils">
<doc>Establish a SSH connection with the master controller
to start executing the the suite.</doc>
<kw name="Connect to Controller Node" library="Utils">
<doc>Stablish a SSH connection to the controller and return
the connection id</doc>
<arguments>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_NAME}</arg>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_PSWD}</arg>
<arg>${CONFIG.general.IP_UNIT_0_ADDRESS}</arg>
</arguments>
<assign>
<var>${master_controller_connection}</var>
</assign>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${ip_address} prompt=${prompt}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${controller_connection}</var>
</assign>
<msg timestamp="20190402 11:06:06.337" level="INFO">${controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:06:06.337" starttime="20190402 11:06:06.337"></status>
</kw>
<kw name="Flexible_SSH_Login" library="Utils">
<doc>On active SSH session: if given non-empty password,
do Login, else do Login With Public Key.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${password}</arg>
</arguments>
<assign>
<var>${pwd_length}</var>
</assign>
<msg timestamp="20190402 11:06:06.338" level="INFO">Length is 10</msg>
<msg timestamp="20190402 11:06:06.338" level="INFO">${pwd_length} = 10</msg>
<status status="PASS" endtime="20190402 11:06:06.338" starttime="20190402 11:06:06.338"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${pwd_length} &gt; 0</arg>
<arg>SSHLibrary.Login</arg>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<msg timestamp="20190402 11:06:06.339" level="INFO">Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.</msg>
<msg timestamp="20190402 11:06:07.457" level="INFO">Read output: Last login: Tue Apr  2 16:38:42 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$</msg>
<status status="PASS" endtime="20190402 11:06:07.457" starttime="20190402 11:06:06.339"></status>
</kw>
<msg timestamp="20190402 11:06:07.458" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190402 11:06:07.458" starttime="20190402 11:06:06.338"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:07.458" starttime="20190402 11:06:06.337"></status>
</kw>
<msg timestamp="20190402 11:06:07.458" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:06:07.458" starttime="20190402 11:06:06.336"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190402 11:06:07.459" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:06:07.459" starttime="20190402 11:06:07.459"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190402 11:06:07.459" level="INFO">1</msg>
<status status="PASS" endtime="20190402 11:06:07.460" starttime="20190402 11:06:07.459"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:07.460" starttime="20190402 11:06:06.336"></status>
</kw>
<kw name="Set Env Vars From Openrc" library="Utils">
<doc>Sources the openrc form /etc/nova/ to have the admin
variables exported on the controller.</doc>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>source /etc/platform/openrc</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:07.461" starttime="20190402 11:06:07.461"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:06:07.462" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:06:07.462" starttime="20190402 11:06:07.462"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:07.463" starttime="20190402 11:06:07.463"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:07.464" starttime="20190402 11:06:07.463"></status>
</kw>
<msg timestamp="20190402 11:06:07.464" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:06:07.464" starttime="20190402 11:06:07.461"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20190402 11:06:07.464" starttime="20190402 11:06:07.464"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:06:07.480" level="INFO">source /etc/platform/openrc</msg>
<status status="PASS" endtime="20190402 11:06:07.480" starttime="20190402 11:06:07.465"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:06:07.872" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:06:07.872" level="INFO">${output} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:06:07.872" starttime="20190402 11:06:07.481"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:06:07.873" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:06:07.873" starttime="20190402 11:06:07.873"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:06:07.873" level="INFO">${clean_out} = </msg>
<status status="PASS" endtime="20190402 11:06:07.873" starttime="20190402 11:06:07.873"></status>
</kw>
<msg timestamp="20190402 11:06:07.873" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190402 11:06:07.873" starttime="20190402 11:06:07.872"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:06:07.876" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:06:07.876" starttime="20190402 11:06:07.874"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:07.876" level="INFO">0</msg>
<msg timestamp="20190402 11:06:07.876" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:07.876" starttime="20190402 11:06:07.876"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:06:07.876" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:06:07.877" starttime="20190402 11:06:07.876"></status>
</kw>
<msg timestamp="20190402 11:06:07.877" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:07.877" starttime="20190402 11:06:07.874"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:07.877" starttime="20190402 11:06:07.877"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:07.877" starttime="20190402 11:06:07.877"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:07.878" starttime="20190402 11:06:07.878"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:06:07.878" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: </msg>
<status status="PASS" endtime="20190402 11:06:07.878" starttime="20190402 11:06:07.878"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:07.878" starttime="20190402 11:06:07.460"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:07.878" starttime="20190402 11:06:07.460"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:07.878" starttime="20190402 11:06:06.335"></status>
</kw>
<test id="s1-s1-s2-t1" name="Create Flavors for Instances">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${flavor_property_1}</arg>
<arg>${flavor_property_2}</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190402 11:06:07.879" level="INFO">${properties} = --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared'</msg>
<status status="PASS" endtime="20190402 11:06:07.879" starttime="20190402 11:06:07.879"></status>
</kw>
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${cirros_flavor_ram}</arg>
<arg>${cirros_flavor_vcpus}</arg>
<arg>${cirros_flavor_disk}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:06:07.880" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190402 11:06:07.880" starttime="20190402 11:06:07.880"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:06:07.881" level="INFO">${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small</msg>
<status status="PASS" endtime="20190402 11:06:07.881" starttime="20190402 11:06:07.880"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:06:07.882" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:06:07.882" starttime="20190402 11:06:07.881"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:07.882" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.</msg>
<msg timestamp="20190402 11:06:09.262" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:09.262" level="INFO">${stdout} = +----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+------------------------------...</msg>
<msg timestamp="20190402 11:06:09.262" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:09.262" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:09.262" starttime="20190402 11:06:07.882"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:09.263" level="INFO">${res} = {u'stdout': u'+----------------------------+--------------------------------------+\n| Field                      | Value                                |\n+----------------------------+--------------...</msg>
<status status="PASS" endtime="20190402 11:06:09.263" starttime="20190402 11:06:09.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:09.264" starttime="20190402 11:06:09.263"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:09.264" starttime="20190402 11:06:07.881"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:09.264" starttime="20190402 11:06:07.880"></status>
</kw>
<doc>Create flavors with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:06:09.264" critical="yes" starttime="20190402 11:06:07.879"></status>
</test>
<test id="s1-s1-s2-t2" name="Create Images for Instances">
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/${cirros_image}</arg>
<arg>${host_image_path}/${cirros_image}</arg>
</arguments>
<msg timestamp="20190402 11:06:09.272" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190402 11:06:09.280" level="INFO">[chan 3] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190402 11:06:09.742" level="INFO">'/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2' -&gt; '/home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2'</msg>
<status status="PASS" endtime="20190402 11:06:09.742" starttime="20190402 11:06:09.265"></status>
</kw>
<kw name="Create Image" library="OpenStack">
<doc>Create image from a given .img file.</doc>
<arguments>
<arg>${host_image_path}/${cirros_image}</arg>
<arg>${disk_format}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<kw name="File Should Exist" library="SSHLibrary">
<doc>Fails if the given ``path`` does NOT point to an existing file.</doc>
<arguments>
<arg>${file_path}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:09.743" starttime="20190402 11:06:09.743"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:06:09.743" level="INFO">${openstack_cmd} = openstack image create</msg>
<status status="PASS" endtime="20190402 11:06:09.744" starttime="20190402 11:06:09.743"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--file ${file_path}</arg>
<arg>--disk-format ${disk_format}</arg>
<arg>--public</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:06:09.744" level="INFO">${cmd} = openstack image create --file /home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2 --disk-format qcow2 --public cirros</msg>
<status status="PASS" endtime="20190402 11:06:09.744" starttime="20190402 11:06:09.744"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>3 min</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:06:09.745" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:06:09.745" starttime="20190402 11:06:09.745"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:09.745" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image create --file /home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2 --disk-format qcow2 --public cirros'.</msg>
<msg timestamp="20190402 11:06:11.578" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:11.579" level="INFO">${stdout} = +------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<msg timestamp="20190402 11:06:11.579" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:11.579" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:11.579" starttime="20190402 11:06:09.745"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:11.581" level="INFO">${res} = {u'stdout': u"+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20190402 11:06:11.581" starttime="20190402 11:06:11.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:11.582" starttime="20190402 11:06:11.582"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:11.583" starttime="20190402 11:06:09.744"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>image</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>active</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>image</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>active</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:06:11.586" level="INFO">${openstack_cmd} = openstack image show cirros</msg>
<status status="PASS" endtime="20190402 11:06:11.586" starttime="20190402 11:06:11.585"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:06:11.587" level="INFO">${cmd} = openstack image show cirros|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:06:11.587" starttime="20190402 11:06:11.586"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:06:11.589" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:06:11.589" starttime="20190402 11:06:11.588"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:11.590" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image show cirros|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:06:12.922" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:12.923" level="INFO">${stdout} = active</msg>
<msg timestamp="20190402 11:06:12.923" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:12.923" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:12.923" starttime="20190402 11:06:11.589"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:12.924" level="INFO">${res} = {u'stdout': u'active', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:12.924" starttime="20190402 11:06:12.923"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:12.924" starttime="20190402 11:06:12.924"></status>
</kw>
<msg timestamp="20190402 11:06:12.925" level="INFO">${result} = {u'stdout': u'active', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:12.925" starttime="20190402 11:06:11.587"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:06:12.925" level="INFO">${value} = active</msg>
<status status="PASS" endtime="20190402 11:06:12.925" starttime="20190402 11:06:12.925"></status>
</kw>
<msg timestamp="20190402 11:06:12.925" level="INFO">${current_value} = active</msg>
<status status="PASS" endtime="20190402 11:06:12.925" starttime="20190402 11:06:11.584"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:12.926" starttime="20190402 11:06:12.926"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:12.926" starttime="20190402 11:06:11.584"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:12.926" starttime="20190402 11:06:11.583"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:12.926" starttime="20190402 11:06:09.742"></status>
</kw>
<doc>Create images with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:06:12.927" critical="yes" starttime="20190402 11:06:09.265"></status>
</test>
<test id="s1-s1-s2-t3" name="Create Networks for Instance">
<kw name="Create Network" library="OpenStack">
<doc>Create Network with openstack request.</doc>
<arguments>
<arg>${network_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:06:12.929" level="INFO">${openstack_cmd} = openstack network create</msg>
<status status="PASS" endtime="20190402 11:06:12.929" starttime="20190402 11:06:12.928"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${network_name}</arg>
<arg>${additional_args}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:06:12.929" level="INFO">${cmd} = openstack network create network-1 </msg>
<status status="PASS" endtime="20190402 11:06:12.930" starttime="20190402 11:06:12.929"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:06:12.931" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:06:12.931" starttime="20190402 11:06:12.930"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:12.931" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network create network-1 '.</msg>
<msg timestamp="20190402 11:06:14.313" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:14.314" level="INFO">${stdout} = +---------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<msg timestamp="20190402 11:06:14.314" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:14.314" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:14.314" starttime="20190402 11:06:12.931"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:14.316" level="INFO">${res} = {u'stdout': u"+---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20190402 11:06:14.316" starttime="20190402 11:06:14.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:14.317" starttime="20190402 11:06:14.316"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:14.317" starttime="20190402 11:06:12.930"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:14.318" starttime="20190402 11:06:12.928"></status>
</kw>
<kw name="Create Subnet" library="OpenStack">
<doc>Create SubNet for the Network with neutron request.</doc>
<arguments>
<arg>${network_name}</arg>
<arg>${subnet_range}</arg>
<arg>${subnet_extras}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack subnet create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:06:14.319" level="INFO">${openstack_cmd} = openstack subnet create</msg>
<status status="PASS" endtime="20190402 11:06:14.319" starttime="20190402 11:06:14.319"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--network ${network_name}</arg>
<arg>--subnet-range ${range_ip} ${additional_args}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:06:14.319" level="INFO">${cmd} = openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1</msg>
<status status="PASS" endtime="20190402 11:06:14.319" starttime="20190402 11:06:14.319"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:06:14.320" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:06:14.320" starttime="20190402 11:06:14.320"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:14.320" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1'.</msg>
<msg timestamp="20190402 11:06:16.083" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:16.083" level="INFO">${stdout} = +-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<msg timestamp="20190402 11:06:16.083" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:16.083" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:16.083" starttime="20190402 11:06:14.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:16.084" level="INFO">${res} = {u'stdout': u"+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20190402 11:06:16.084" starttime="20190402 11:06:16.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:16.084" starttime="20190402 11:06:16.084"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:16.084" starttime="20190402 11:06:14.319"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:16.084" starttime="20190402 11:06:14.318"></status>
</kw>
<doc>Create networks to be used to launch Cirros
instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:06:16.085" critical="yes" starttime="20190402 11:06:12.927"></status>
</test>
<test id="s1-s1-s2-t4" name="Create Volume for Instances">
<kw name="Create Volume" library="OpenStack">
<doc>Create Volume.</doc>
<arguments>
<arg>${cirros_volume_size}</arg>
<arg>${cirros_image_name}</arg>
<arg>--bootable</arg>
<arg>${cirros_volume_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:06:16.086" level="INFO">${openstack_cmd} = openstack volume create</msg>
<status status="PASS" endtime="20190402 11:06:16.086" starttime="20190402 11:06:16.086"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--size ${size}</arg>
<arg>--image ${image}</arg>
<arg>${bootable}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:06:16.086" level="INFO">${cmd} = openstack volume create --size 20 --image cirros --bootable vol-cirros-1</msg>
<status status="PASS" endtime="20190402 11:06:16.086" starttime="20190402 11:06:16.086"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:06:16.087" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:06:16.087" starttime="20190402 11:06:16.087"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:16.088" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume create --size 20 --image cirros --bootable vol-cirros-1'.</msg>
<msg timestamp="20190402 11:06:17.771" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:17.771" level="INFO">${stdout} = +---------------------+--------------------------------------+
| Field               | Value                                |
+---------------------+--------------------------------------+
| attachmen...</msg>
<msg timestamp="20190402 11:06:17.772" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:17.772" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:17.772" starttime="20190402 11:06:16.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:17.773" level="INFO">${res} = {u'stdout': u'+---------------------+--------------------------------------+\n| Field               | Value                                |\n+---------------------+-----------------------------------...</msg>
<status status="PASS" endtime="20190402 11:06:17.773" starttime="20190402 11:06:17.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:17.774" starttime="20190402 11:06:17.774"></status>
</kw>
<status status="PASS" endtime="20190402 11:06:17.775" starttime="20190402 11:06:16.086"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:06:17.778" level="INFO">${openstack_cmd} = openstack volume show vol-cirros-1</msg>
<status status="PASS" endtime="20190402 11:06:17.778" starttime="20190402 11:06:17.777"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:06:17.779" level="INFO">${cmd} = openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:06:17.779" starttime="20190402 11:06:17.778"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:06:17.781" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:06:17.782" starttime="20190402 11:06:17.781"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:17.783" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:06:19.165" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:19.165" level="INFO">${stdout} = creating</msg>
<msg timestamp="20190402 11:06:19.165" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:19.166" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:19.166" starttime="20190402 11:06:17.782"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:19.167" level="INFO">${res} = {u'stdout': u'creating', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:19.167" starttime="20190402 11:06:19.166"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:19.168" starttime="20190402 11:06:19.168"></status>
</kw>
<msg timestamp="20190402 11:06:19.169" level="INFO">${result} = {u'stdout': u'creating', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:19.169" starttime="20190402 11:06:17.779"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:06:19.170" level="INFO">${value} = creating</msg>
<status status="PASS" endtime="20190402 11:06:19.170" starttime="20190402 11:06:19.169"></status>
</kw>
<msg timestamp="20190402 11:06:19.170" level="INFO">${current_value} = creating</msg>
<status status="PASS" endtime="20190402 11:06:19.170" starttime="20190402 11:06:17.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:06:19.171" level="FAIL">creating != available</msg>
<status status="FAIL" endtime="20190402 11:06:19.171" starttime="20190402 11:06:19.171"></status>
</kw>
<status status="FAIL" endtime="20190402 11:06:19.172" starttime="20190402 11:06:17.776"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:06:29.175" level="INFO">${openstack_cmd} = openstack volume show vol-cirros-1</msg>
<status status="PASS" endtime="20190402 11:06:29.175" starttime="20190402 11:06:29.175"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:06:29.176" level="INFO">${cmd} = openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:06:29.177" starttime="20190402 11:06:29.176"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:06:29.178" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:06:29.179" starttime="20190402 11:06:29.178"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:29.180" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:06:30.713" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:30.714" level="INFO">${stdout} = creating</msg>
<msg timestamp="20190402 11:06:30.714" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:30.714" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:30.714" starttime="20190402 11:06:29.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:30.715" level="INFO">${res} = {u'stdout': u'creating', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:30.715" starttime="20190402 11:06:30.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:30.715" starttime="20190402 11:06:30.715"></status>
</kw>
<msg timestamp="20190402 11:06:30.715" level="INFO">${result} = {u'stdout': u'creating', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:30.715" starttime="20190402 11:06:29.177"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:06:30.715" level="INFO">${value} = creating</msg>
<status status="PASS" endtime="20190402 11:06:30.715" starttime="20190402 11:06:30.715"></status>
</kw>
<msg timestamp="20190402 11:06:30.716" level="INFO">${current_value} = creating</msg>
<status status="PASS" endtime="20190402 11:06:30.716" starttime="20190402 11:06:29.174"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:06:30.716" level="FAIL">creating != available</msg>
<status status="FAIL" endtime="20190402 11:06:30.716" starttime="20190402 11:06:30.716"></status>
</kw>
<status status="FAIL" endtime="20190402 11:06:30.716" starttime="20190402 11:06:29.172"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:06:40.721" level="INFO">${openstack_cmd} = openstack volume show vol-cirros-1</msg>
<status status="PASS" endtime="20190402 11:06:40.721" starttime="20190402 11:06:40.720"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:06:40.723" level="INFO">${cmd} = openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:06:40.723" starttime="20190402 11:06:40.721"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:06:40.726" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:06:40.726" starttime="20190402 11:06:40.725"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:40.728" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:06:42.109" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:42.110" level="INFO">${stdout} = creating</msg>
<msg timestamp="20190402 11:06:42.110" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:42.110" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:42.110" starttime="20190402 11:06:40.726"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:42.112" level="INFO">${res} = {u'stdout': u'creating', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:42.112" starttime="20190402 11:06:42.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:42.113" starttime="20190402 11:06:42.112"></status>
</kw>
<msg timestamp="20190402 11:06:42.114" level="INFO">${result} = {u'stdout': u'creating', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:42.114" starttime="20190402 11:06:40.723"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:06:42.115" level="INFO">${value} = creating</msg>
<status status="PASS" endtime="20190402 11:06:42.115" starttime="20190402 11:06:42.114"></status>
</kw>
<msg timestamp="20190402 11:06:42.116" level="INFO">${current_value} = creating</msg>
<status status="PASS" endtime="20190402 11:06:42.116" starttime="20190402 11:06:40.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:06:42.117" level="FAIL">creating != available</msg>
<status status="FAIL" endtime="20190402 11:06:42.117" starttime="20190402 11:06:42.116"></status>
</kw>
<status status="FAIL" endtime="20190402 11:06:42.117" starttime="20190402 11:06:40.717"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:06:52.121" level="INFO">${openstack_cmd} = openstack volume show vol-cirros-1</msg>
<status status="PASS" endtime="20190402 11:06:52.121" starttime="20190402 11:06:52.120"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:06:52.122" level="INFO">${cmd} = openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:06:52.122" starttime="20190402 11:06:52.121"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:06:52.124" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:06:52.124" starttime="20190402 11:06:52.124"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:06:52.125" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:06:53.456" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:06:53.456" level="INFO">${stdout} = downloading</msg>
<msg timestamp="20190402 11:06:53.456" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:06:53.456" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:06:53.457" starttime="20190402 11:06:52.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:06:53.457" level="INFO">${res} = {u'stdout': u'downloading', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:53.457" starttime="20190402 11:06:53.457"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:06:53.458" starttime="20190402 11:06:53.457"></status>
</kw>
<msg timestamp="20190402 11:06:53.458" level="INFO">${result} = {u'stdout': u'downloading', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:06:53.458" starttime="20190402 11:06:52.123"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:06:53.459" level="INFO">${value} = downloading</msg>
<status status="PASS" endtime="20190402 11:06:53.459" starttime="20190402 11:06:53.458"></status>
</kw>
<msg timestamp="20190402 11:06:53.459" level="INFO">${current_value} = downloading</msg>
<status status="PASS" endtime="20190402 11:06:53.459" starttime="20190402 11:06:52.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:06:53.460" level="FAIL">downloading != available</msg>
<status status="FAIL" endtime="20190402 11:06:53.460" starttime="20190402 11:06:53.459"></status>
</kw>
<status status="FAIL" endtime="20190402 11:06:53.460" starttime="20190402 11:06:52.118"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:07:03.463" level="INFO">${openstack_cmd} = openstack volume show vol-cirros-1</msg>
<status status="PASS" endtime="20190402 11:07:03.463" starttime="20190402 11:07:03.463"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:07:03.464" level="INFO">${cmd} = openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:07:03.464" starttime="20190402 11:07:03.464"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:07:03.466" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:07:03.466" starttime="20190402 11:07:03.466"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:07:03.467" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:07:04.800" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:07:04.800" level="INFO">${stdout} = downloading</msg>
<msg timestamp="20190402 11:07:04.800" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:07:04.800" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:07:04.800" starttime="20190402 11:07:03.467"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:07:04.802" level="INFO">${res} = {u'stdout': u'downloading', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:07:04.802" starttime="20190402 11:07:04.801"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:07:04.803" starttime="20190402 11:07:04.802"></status>
</kw>
<msg timestamp="20190402 11:07:04.803" level="INFO">${result} = {u'stdout': u'downloading', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:07:04.803" starttime="20190402 11:07:03.465"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:07:04.804" level="INFO">${value} = downloading</msg>
<status status="PASS" endtime="20190402 11:07:04.804" starttime="20190402 11:07:04.804"></status>
</kw>
<msg timestamp="20190402 11:07:04.805" level="INFO">${current_value} = downloading</msg>
<status status="PASS" endtime="20190402 11:07:04.805" starttime="20190402 11:07:03.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:07:04.806" level="FAIL">downloading != available</msg>
<status status="FAIL" endtime="20190402 11:07:04.806" starttime="20190402 11:07:04.805"></status>
</kw>
<status status="FAIL" endtime="20190402 11:07:04.807" starttime="20190402 11:07:03.460"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:07:14.810" level="INFO">${openstack_cmd} = openstack volume show vol-cirros-1</msg>
<status status="PASS" endtime="20190402 11:07:14.810" starttime="20190402 11:07:14.809"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:07:14.811" level="INFO">${cmd} = openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:07:14.811" starttime="20190402 11:07:14.810"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:07:14.813" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:07:14.813" starttime="20190402 11:07:14.813"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:07:14.814" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:07:16.247" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:07:16.247" level="INFO">${stdout} = available</msg>
<msg timestamp="20190402 11:07:16.247" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:07:16.247" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:07:16.248" starttime="20190402 11:07:14.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:07:16.249" level="INFO">${res} = {u'stdout': u'available', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:07:16.249" starttime="20190402 11:07:16.248"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:07:16.250" starttime="20190402 11:07:16.249"></status>
</kw>
<msg timestamp="20190402 11:07:16.251" level="INFO">${result} = {u'stdout': u'available', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:07:16.251" starttime="20190402 11:07:14.812"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:07:16.252" level="INFO">${value} = available</msg>
<status status="PASS" endtime="20190402 11:07:16.252" starttime="20190402 11:07:16.251"></status>
</kw>
<msg timestamp="20190402 11:07:16.252" level="INFO">${current_value} = available</msg>
<status status="PASS" endtime="20190402 11:07:16.252" starttime="20190402 11:07:14.808"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:07:16.253" starttime="20190402 11:07:16.253"></status>
</kw>
<status status="PASS" endtime="20190402 11:07:16.254" starttime="20190402 11:07:14.807"></status>
</kw>
<status status="PASS" endtime="20190402 11:07:16.254" starttime="20190402 11:06:17.775"></status>
</kw>
<status status="PASS" endtime="20190402 11:07:16.254" starttime="20190402 11:06:16.085"></status>
</kw>
<kw name="Create Volume" library="OpenStack">
<doc>Create Volume.</doc>
<arguments>
<arg>${cirros_volume_size}</arg>
<arg>${cirros_image_name}</arg>
<arg>--bootable</arg>
<arg>${cirros_volume_name_2}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:07:16.256" level="INFO">${openstack_cmd} = openstack volume create</msg>
<status status="PASS" endtime="20190402 11:07:16.256" starttime="20190402 11:07:16.255"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--size ${size}</arg>
<arg>--image ${image}</arg>
<arg>${bootable}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:07:16.257" level="INFO">${cmd} = openstack volume create --size 20 --image cirros --bootable vol-cirros-2</msg>
<status status="PASS" endtime="20190402 11:07:16.257" starttime="20190402 11:07:16.256"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:07:16.259" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:07:16.260" starttime="20190402 11:07:16.259"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:07:16.261" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume create --size 20 --image cirros --bootable vol-cirros-2'.</msg>
<msg timestamp="20190402 11:07:17.792" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:07:17.793" level="INFO">${stdout} = +---------------------+--------------------------------------+
| Field               | Value                                |
+---------------------+--------------------------------------+
| attachmen...</msg>
<msg timestamp="20190402 11:07:17.793" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:07:17.793" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:07:17.794" starttime="20190402 11:07:16.260"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:07:17.795" level="INFO">${res} = {u'stdout': u'+---------------------+--------------------------------------+\n| Field               | Value                                |\n+---------------------+-----------------------------------...</msg>
<status status="PASS" endtime="20190402 11:07:17.796" starttime="20190402 11:07:17.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:07:17.797" starttime="20190402 11:07:17.796"></status>
</kw>
<status status="PASS" endtime="20190402 11:07:17.797" starttime="20190402 11:07:16.258"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:07:17.800" level="INFO">${openstack_cmd} = openstack volume show vol-cirros-2</msg>
<status status="PASS" endtime="20190402 11:07:17.800" starttime="20190402 11:07:17.800"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:07:17.801" level="INFO">${cmd} = openstack volume show vol-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:07:17.801" starttime="20190402 11:07:17.801"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:07:17.803" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:07:17.803" starttime="20190402 11:07:17.803"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:07:17.804" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume show vol-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:07:19.244" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:07:19.244" level="INFO">${stdout} = creating</msg>
<msg timestamp="20190402 11:07:19.245" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:07:19.245" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:07:19.245" starttime="20190402 11:07:17.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:07:19.247" level="INFO">${res} = {u'stdout': u'creating', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:07:19.247" starttime="20190402 11:07:19.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:07:19.247" starttime="20190402 11:07:19.247"></status>
</kw>
<msg timestamp="20190402 11:07:19.247" level="INFO">${result} = {u'stdout': u'creating', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:07:19.247" starttime="20190402 11:07:17.802"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:07:19.247" level="INFO">${value} = creating</msg>
<status status="PASS" endtime="20190402 11:07:19.248" starttime="20190402 11:07:19.247"></status>
</kw>
<msg timestamp="20190402 11:07:19.248" level="INFO">${current_value} = creating</msg>
<status status="PASS" endtime="20190402 11:07:19.248" starttime="20190402 11:07:17.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:07:19.248" level="FAIL">creating != available</msg>
<status status="FAIL" endtime="20190402 11:07:19.248" starttime="20190402 11:07:19.248"></status>
</kw>
<status status="FAIL" endtime="20190402 11:07:19.248" starttime="20190402 11:07:17.798"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:07:29.252" level="INFO">${openstack_cmd} = openstack volume show vol-cirros-2</msg>
<status status="PASS" endtime="20190402 11:07:29.252" starttime="20190402 11:07:29.251"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:07:29.253" level="INFO">${cmd} = openstack volume show vol-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:07:29.253" starttime="20190402 11:07:29.252"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:07:29.257" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:07:29.257" starttime="20190402 11:07:29.254"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:07:29.258" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume show vol-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:07:30.740" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:07:30.740" level="INFO">${stdout} = downloading</msg>
<msg timestamp="20190402 11:07:30.740" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:07:30.740" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:07:30.740" starttime="20190402 11:07:29.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:07:30.741" level="INFO">${res} = {u'stdout': u'downloading', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:07:30.741" starttime="20190402 11:07:30.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:07:30.742" starttime="20190402 11:07:30.741"></status>
</kw>
<msg timestamp="20190402 11:07:30.742" level="INFO">${result} = {u'stdout': u'downloading', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:07:30.742" starttime="20190402 11:07:29.253"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:07:30.742" level="INFO">${value} = downloading</msg>
<status status="PASS" endtime="20190402 11:07:30.742" starttime="20190402 11:07:30.742"></status>
</kw>
<msg timestamp="20190402 11:07:30.743" level="INFO">${current_value} = downloading</msg>
<status status="PASS" endtime="20190402 11:07:30.743" starttime="20190402 11:07:29.250"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:07:30.743" level="FAIL">downloading != available</msg>
<status status="FAIL" endtime="20190402 11:07:30.744" starttime="20190402 11:07:30.743"></status>
</kw>
<status status="FAIL" endtime="20190402 11:07:30.744" starttime="20190402 11:07:29.249"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:07:40.746" level="INFO">${openstack_cmd} = openstack volume show vol-cirros-2</msg>
<status status="PASS" endtime="20190402 11:07:40.746" starttime="20190402 11:07:40.745"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:07:40.747" level="INFO">${cmd} = openstack volume show vol-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:07:40.747" starttime="20190402 11:07:40.746"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:07:40.748" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:07:40.748" starttime="20190402 11:07:40.747"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:07:40.748" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume show vol-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:07:42.079" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:07:42.080" level="INFO">${stdout} = downloading</msg>
<msg timestamp="20190402 11:07:42.080" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:07:42.080" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:07:42.080" starttime="20190402 11:07:40.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:07:42.080" level="INFO">${res} = {u'stdout': u'downloading', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:07:42.080" starttime="20190402 11:07:42.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:07:42.081" starttime="20190402 11:07:42.080"></status>
</kw>
<msg timestamp="20190402 11:07:42.081" level="INFO">${result} = {u'stdout': u'downloading', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:07:42.081" starttime="20190402 11:07:40.747"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:07:42.081" level="INFO">${value} = downloading</msg>
<status status="PASS" endtime="20190402 11:07:42.081" starttime="20190402 11:07:42.081"></status>
</kw>
<msg timestamp="20190402 11:07:42.081" level="INFO">${current_value} = downloading</msg>
<status status="PASS" endtime="20190402 11:07:42.081" starttime="20190402 11:07:40.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:07:42.082" level="FAIL">downloading != available</msg>
<status status="FAIL" endtime="20190402 11:07:42.082" starttime="20190402 11:07:42.082"></status>
</kw>
<status status="FAIL" endtime="20190402 11:07:42.082" starttime="20190402 11:07:40.744"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:07:52.085" level="INFO">${openstack_cmd} = openstack volume show vol-cirros-2</msg>
<status status="PASS" endtime="20190402 11:07:52.086" starttime="20190402 11:07:52.085"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:07:52.087" level="INFO">${cmd} = openstack volume show vol-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:07:52.087" starttime="20190402 11:07:52.086"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:07:52.089" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:07:52.089" starttime="20190402 11:07:52.088"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:07:52.090" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume show vol-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:07:53.421" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:07:53.421" level="INFO">${stdout} = downloading</msg>
<msg timestamp="20190402 11:07:53.421" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:07:53.421" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:07:53.421" starttime="20190402 11:07:52.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:07:53.422" level="INFO">${res} = {u'stdout': u'downloading', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:07:53.422" starttime="20190402 11:07:53.421"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:07:53.422" starttime="20190402 11:07:53.422"></status>
</kw>
<msg timestamp="20190402 11:07:53.423" level="INFO">${result} = {u'stdout': u'downloading', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:07:53.423" starttime="20190402 11:07:52.087"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:07:53.423" level="INFO">${value} = downloading</msg>
<status status="PASS" endtime="20190402 11:07:53.423" starttime="20190402 11:07:53.423"></status>
</kw>
<msg timestamp="20190402 11:07:53.423" level="INFO">${current_value} = downloading</msg>
<status status="PASS" endtime="20190402 11:07:53.423" starttime="20190402 11:07:52.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:07:53.424" level="FAIL">downloading != available</msg>
<status status="FAIL" endtime="20190402 11:07:53.424" starttime="20190402 11:07:53.423"></status>
</kw>
<status status="FAIL" endtime="20190402 11:07:53.424" starttime="20190402 11:07:52.083"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:03.426" level="INFO">${openstack_cmd} = openstack volume show vol-cirros-2</msg>
<status status="PASS" endtime="20190402 11:08:03.426" starttime="20190402 11:08:03.425"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:03.426" level="INFO">${cmd} = openstack volume show vol-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:08:03.426" starttime="20190402 11:08:03.426"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:03.427" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:03.427" starttime="20190402 11:08:03.427"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:03.428" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume show vol-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:08:04.761" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:04.761" level="INFO">${stdout} = available</msg>
<msg timestamp="20190402 11:08:04.761" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:04.762" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:04.762" starttime="20190402 11:08:03.427"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:04.763" level="INFO">${res} = {u'stdout': u'available', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:04.763" starttime="20190402 11:08:04.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:04.764" starttime="20190402 11:08:04.764"></status>
</kw>
<msg timestamp="20190402 11:08:04.765" level="INFO">${result} = {u'stdout': u'available', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:04.765" starttime="20190402 11:08:03.426"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:08:04.766" level="INFO">${value} = available</msg>
<status status="PASS" endtime="20190402 11:08:04.766" starttime="20190402 11:08:04.765"></status>
</kw>
<msg timestamp="20190402 11:08:04.767" level="INFO">${current_value} = available</msg>
<status status="PASS" endtime="20190402 11:08:04.767" starttime="20190402 11:08:03.425"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:04.768" starttime="20190402 11:08:04.767"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:04.768" starttime="20190402 11:08:03.424"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:04.768" starttime="20190402 11:07:17.797"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:04.768" starttime="20190402 11:07:16.254"></status>
</kw>
<doc>Create volumes with or without properties to be used to
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:08:04.769" critical="yes" starttime="20190402 11:06:16.085"></status>
</test>
<test id="s1-s1-s2-t5" name="Launch Instances">
<kw name="Create Instance From Volume" library="OpenStack">
<doc>Create a VM Instances with the net id of the Netowrk
flavor and volume</doc>
<arguments>
<arg>${network_name}</arg>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_volume_name}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Get Net Id" library="OpenStack">
<doc>Retrieve the net id for the given network name</doc>
<arguments>
<arg>${net_name}</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:04.773" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190402 11:08:04.773" starttime="20190402 11:08:04.772"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "${network_name}"</arg>
<arg>awk '{print$2}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:04.774" level="INFO">${cmd} = openstack network list|grep "network-1"|awk '{print$2}'</msg>
<status status="PASS" endtime="20190402 11:08:04.775" starttime="20190402 11:08:04.773"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:04.776" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:04.776" starttime="20190402 11:08:04.776"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:04.778" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|grep "network-1"|awk '{print$2}''.</msg>
<msg timestamp="20190402 11:08:06.162" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:06.162" level="INFO">${stdout} = 3f715897-04ee-4349-9180-d281351788b3</msg>
<msg timestamp="20190402 11:08:06.163" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:06.163" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:06.163" starttime="20190402 11:08:04.777"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:06.164" level="INFO">${res} = {u'stdout': u'3f715897-04ee-4349-9180-d281351788b3', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:06.165" starttime="20190402 11:08:06.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:06.166" starttime="20190402 11:08:06.165"></status>
</kw>
<msg timestamp="20190402 11:08:06.166" level="INFO">&amp;{result} = { stdout=3f715897-04ee-4349-9180-d281351788b3 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:08:06.166" starttime="20190402 11:08:04.775"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:08:06.167" level="INFO">${output} = 3f715897-04ee-4349-9180-d281351788b3</msg>
<status status="PASS" endtime="20190402 11:08:06.167" starttime="20190402 11:08:06.167"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${splitted_output}</var>
</assign>
<msg timestamp="20190402 11:08:06.168" level="INFO">${splitted_output} = [u'3f715897-04ee-4349-9180-d281351788b3']</msg>
<status status="PASS" endtime="20190402 11:08:06.168" starttime="20190402 11:08:06.168"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${splitted_output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<msg timestamp="20190402 11:08:06.169" level="INFO">${net_id} = 3f715897-04ee-4349-9180-d281351788b3</msg>
<status status="PASS" endtime="20190402 11:08:06.169" starttime="20190402 11:08:06.169"></status>
</kw>
<msg timestamp="20190402 11:08:06.170" level="INFO">${net_id} = 3f715897-04ee-4349-9180-d281351788b3</msg>
<status status="PASS" endtime="20190402 11:08:06.170" starttime="20190402 11:08:04.772"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:06.170" level="INFO">${openstack_cmd} = openstack server create</msg>
<status status="PASS" endtime="20190402 11:08:06.170" starttime="20190402 11:08:06.170"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--volume ${volume}</arg>
<arg>--flavor ${flavor}</arg>
<arg>--nic net-id=${net_id}</arg>
<arg>${vm_name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:06.172" level="INFO">${cmd} = openstack server create --volume vol-cirros-1 --flavor f1.small --nic net-id=3f715897-04ee-4349-9180-d281351788b3 vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:08:06.172" starttime="20190402 11:08:06.171"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:06.174" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:06.174" starttime="20190402 11:08:06.173"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:06.175" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server create --volume vol-cirros-1 --flavor f1.small --nic net-id=3f715897-04ee-4349-9180-d281351788b3 vm-cirros-1'.</msg>
<msg timestamp="20190402 11:08:08.709" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:08.710" level="INFO">${stdout} = +-------------------------------------+-------------------------------------------------+
| Field                               | Value                                           |
+-------------------...</msg>
<msg timestamp="20190402 11:08:08.710" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:08.710" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:08.710" starttime="20190402 11:08:06.174"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:08.712" level="INFO">${res} = {u'stdout': u"+-------------------------------------+-------------------------------------------------+\n| Field                               | Value                                           |\n+---...</msg>
<status status="PASS" endtime="20190402 11:08:08.712" starttime="20190402 11:08:08.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:08.713" starttime="20190402 11:08:08.713"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:08.714" starttime="20190402 11:08:06.172"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:08.717" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:08:08.718" starttime="20190402 11:08:08.717"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:08.719" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:08:08.719" starttime="20190402 11:08:08.718"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:08.720" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:08.721" starttime="20190402 11:08:08.720"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:08.722" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:08:10.418" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:10.418" level="INFO">${stdout} = BUILD</msg>
<msg timestamp="20190402 11:08:10.419" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:10.419" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:10.419" starttime="20190402 11:08:08.721"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:10.420" level="INFO">${res} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:10.420" starttime="20190402 11:08:10.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:10.420" starttime="20190402 11:08:10.420"></status>
</kw>
<msg timestamp="20190402 11:08:10.420" level="INFO">${result} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:10.420" starttime="20190402 11:08:08.719"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:08:10.421" level="INFO">${value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:08:10.421" starttime="20190402 11:08:10.421"></status>
</kw>
<msg timestamp="20190402 11:08:10.421" level="INFO">${current_value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:08:10.421" starttime="20190402 11:08:08.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:08:10.422" level="FAIL">BUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:08:10.422" starttime="20190402 11:08:10.421"></status>
</kw>
<status status="FAIL" endtime="20190402 11:08:10.422" starttime="20190402 11:08:08.715"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:20.426" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:08:20.426" starttime="20190402 11:08:20.425"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:20.427" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:08:20.427" starttime="20190402 11:08:20.426"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:20.430" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:20.430" starttime="20190402 11:08:20.429"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:20.431" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:08:22.215" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:22.216" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:08:22.216" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:22.216" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:22.216" starttime="20190402 11:08:20.430"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:22.217" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:22.218" starttime="20190402 11:08:22.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:22.219" starttime="20190402 11:08:22.218"></status>
</kw>
<msg timestamp="20190402 11:08:22.219" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:22.219" starttime="20190402 11:08:20.427"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:08:22.220" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:08:22.220" starttime="20190402 11:08:22.219"></status>
</kw>
<msg timestamp="20190402 11:08:22.221" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:08:22.221" starttime="20190402 11:08:20.424"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:22.222" starttime="20190402 11:08:22.221"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:22.222" starttime="20190402 11:08:20.423"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:22.222" starttime="20190402 11:08:08.714"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:22.226" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:08:22.226" starttime="20190402 11:08:22.225"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:22.227" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w power_state|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:08:22.227" starttime="20190402 11:08:22.226"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:22.229" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:22.229" starttime="20190402 11:08:22.229"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:22.230" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w power_state|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:08:23.819" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:23.819" level="INFO">${stdout} = Running</msg>
<msg timestamp="20190402 11:08:23.820" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:23.820" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:23.820" starttime="20190402 11:08:22.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:23.821" level="INFO">${res} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:23.821" starttime="20190402 11:08:23.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:23.822" starttime="20190402 11:08:23.822"></status>
</kw>
<msg timestamp="20190402 11:08:23.823" level="INFO">${result} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:23.823" starttime="20190402 11:08:22.228"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:08:23.825" level="INFO">${value} = Running</msg>
<status status="PASS" endtime="20190402 11:08:23.825" starttime="20190402 11:08:23.824"></status>
</kw>
<msg timestamp="20190402 11:08:23.826" level="INFO">${current_value} = Running</msg>
<status status="PASS" endtime="20190402 11:08:23.826" starttime="20190402 11:08:22.224"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:23.827" starttime="20190402 11:08:23.826"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:23.828" starttime="20190402 11:08:22.223"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:23.828" starttime="20190402 11:08:22.222"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:23.828" starttime="20190402 11:08:04.771"></status>
</kw>
<kw name="Create Instance From Volume" library="OpenStack">
<doc>Create a VM Instances with the net id of the Netowrk
flavor and volume</doc>
<arguments>
<arg>${network_name}</arg>
<arg>${cirros_instance_name_2}</arg>
<arg>${cirros_volume_name_2}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Get Net Id" library="OpenStack">
<doc>Retrieve the net id for the given network name</doc>
<arguments>
<arg>${net_name}</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:23.829" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190402 11:08:23.829" starttime="20190402 11:08:23.829"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "${network_name}"</arg>
<arg>awk '{print$2}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:23.830" level="INFO">${cmd} = openstack network list|grep "network-1"|awk '{print$2}'</msg>
<status status="PASS" endtime="20190402 11:08:23.830" starttime="20190402 11:08:23.829"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:23.830" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:23.830" starttime="20190402 11:08:23.830"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:23.831" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|grep "network-1"|awk '{print$2}''.</msg>
<msg timestamp="20190402 11:08:25.218" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:25.218" level="INFO">${stdout} = 3f715897-04ee-4349-9180-d281351788b3</msg>
<msg timestamp="20190402 11:08:25.218" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:25.219" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:25.219" starttime="20190402 11:08:23.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:25.220" level="INFO">${res} = {u'stdout': u'3f715897-04ee-4349-9180-d281351788b3', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:25.220" starttime="20190402 11:08:25.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:25.222" starttime="20190402 11:08:25.221"></status>
</kw>
<msg timestamp="20190402 11:08:25.223" level="INFO">&amp;{result} = { stdout=3f715897-04ee-4349-9180-d281351788b3 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:08:25.223" starttime="20190402 11:08:23.830"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:08:25.225" level="INFO">${output} = 3f715897-04ee-4349-9180-d281351788b3</msg>
<status status="PASS" endtime="20190402 11:08:25.225" starttime="20190402 11:08:25.224"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${splitted_output}</var>
</assign>
<msg timestamp="20190402 11:08:25.226" level="INFO">${splitted_output} = [u'3f715897-04ee-4349-9180-d281351788b3']</msg>
<status status="PASS" endtime="20190402 11:08:25.226" starttime="20190402 11:08:25.225"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${splitted_output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<msg timestamp="20190402 11:08:25.227" level="INFO">${net_id} = 3f715897-04ee-4349-9180-d281351788b3</msg>
<status status="PASS" endtime="20190402 11:08:25.227" starttime="20190402 11:08:25.227"></status>
</kw>
<msg timestamp="20190402 11:08:25.228" level="INFO">${net_id} = 3f715897-04ee-4349-9180-d281351788b3</msg>
<status status="PASS" endtime="20190402 11:08:25.228" starttime="20190402 11:08:23.829"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:25.229" level="INFO">${openstack_cmd} = openstack server create</msg>
<status status="PASS" endtime="20190402 11:08:25.229" starttime="20190402 11:08:25.228"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--volume ${volume}</arg>
<arg>--flavor ${flavor}</arg>
<arg>--nic net-id=${net_id}</arg>
<arg>${vm_name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:25.230" level="INFO">${cmd} = openstack server create --volume vol-cirros-2 --flavor f1.small --nic net-id=3f715897-04ee-4349-9180-d281351788b3 vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:08:25.230" starttime="20190402 11:08:25.229"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:25.232" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:25.232" starttime="20190402 11:08:25.231"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:25.233" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server create --volume vol-cirros-2 --flavor f1.small --nic net-id=3f715897-04ee-4349-9180-d281351788b3 vm-cirros-2'.</msg>
<msg timestamp="20190402 11:08:28.124" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:28.124" level="INFO">${stdout} = +-------------------------------------+-------------------------------------------------+
| Field                               | Value                                           |
+-------------------...</msg>
<msg timestamp="20190402 11:08:28.124" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:28.124" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:28.124" starttime="20190402 11:08:25.232"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:28.126" level="INFO">${res} = {u'stdout': u"+-------------------------------------+-------------------------------------------------+\n| Field                               | Value                                           |\n+---...</msg>
<status status="PASS" endtime="20190402 11:08:28.126" starttime="20190402 11:08:28.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:28.127" starttime="20190402 11:08:28.126"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:28.127" starttime="20190402 11:08:25.230"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:28.131" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:08:28.131" starttime="20190402 11:08:28.130"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:28.132" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:08:28.132" starttime="20190402 11:08:28.131"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:28.133" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:28.134" starttime="20190402 11:08:28.133"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:28.135" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:08:29.818" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:29.818" level="INFO">${stdout} = BUILD</msg>
<msg timestamp="20190402 11:08:29.818" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:29.819" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:29.819" starttime="20190402 11:08:28.134"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:29.820" level="INFO">${res} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:29.820" starttime="20190402 11:08:29.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:29.821" starttime="20190402 11:08:29.821"></status>
</kw>
<msg timestamp="20190402 11:08:29.822" level="INFO">${result} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:29.822" starttime="20190402 11:08:28.132"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:08:29.823" level="INFO">${value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:08:29.823" starttime="20190402 11:08:29.822"></status>
</kw>
<msg timestamp="20190402 11:08:29.823" level="INFO">${current_value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:08:29.823" starttime="20190402 11:08:28.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:08:29.825" level="FAIL">BUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:08:29.825" starttime="20190402 11:08:29.824"></status>
</kw>
<status status="FAIL" endtime="20190402 11:08:29.825" starttime="20190402 11:08:28.128"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:39.827" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:08:39.827" starttime="20190402 11:08:39.827"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:39.827" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:08:39.827" starttime="20190402 11:08:39.827"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:39.828" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:39.828" starttime="20190402 11:08:39.828"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:39.829" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:08:41.409" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:41.409" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:08:41.409" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:41.409" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:41.409" starttime="20190402 11:08:39.828"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:41.410" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:41.410" starttime="20190402 11:08:41.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:41.410" starttime="20190402 11:08:41.410"></status>
</kw>
<msg timestamp="20190402 11:08:41.411" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:41.411" starttime="20190402 11:08:39.828"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:08:41.411" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:08:41.411" starttime="20190402 11:08:41.411"></status>
</kw>
<msg timestamp="20190402 11:08:41.411" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:08:41.411" starttime="20190402 11:08:39.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:41.412" starttime="20190402 11:08:41.411"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:41.412" starttime="20190402 11:08:39.826"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:41.412" starttime="20190402 11:08:28.128"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:41.413" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:08:41.413" starttime="20190402 11:08:41.413"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:41.413" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w power_state|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:08:41.413" starttime="20190402 11:08:41.413"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:41.414" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:41.414" starttime="20190402 11:08:41.414"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:41.415" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w power_state|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:08:43.025" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:43.025" level="INFO">${stdout} = Running</msg>
<msg timestamp="20190402 11:08:43.025" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:43.026" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:43.026" starttime="20190402 11:08:41.414"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:43.026" level="INFO">${res} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:43.027" starttime="20190402 11:08:43.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:43.027" starttime="20190402 11:08:43.027"></status>
</kw>
<msg timestamp="20190402 11:08:43.027" level="INFO">${result} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:43.027" starttime="20190402 11:08:41.414"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:08:43.028" level="INFO">${value} = Running</msg>
<status status="PASS" endtime="20190402 11:08:43.028" starttime="20190402 11:08:43.028"></status>
</kw>
<msg timestamp="20190402 11:08:43.028" level="INFO">${current_value} = Running</msg>
<status status="PASS" endtime="20190402 11:08:43.028" starttime="20190402 11:08:41.412"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:43.029" starttime="20190402 11:08:43.029"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:43.029" starttime="20190402 11:08:41.412"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:43.029" starttime="20190402 11:08:41.412"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:43.029" starttime="20190402 11:08:23.828"></status>
</kw>
<doc>Launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:08:43.030" critical="yes" starttime="20190402 11:08:04.770"></status>
</test>
<test id="s1-s1-s2-t6" name="Suspend Resume Instance">
<kw name="Suspend Instance" library="OpenStack">
<doc>Suspend the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server suspend ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:43.032" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:43.032" starttime="20190402 11:08:43.032"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:43.033" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server suspend vm-cirros-1'.</msg>
<msg timestamp="20190402 11:08:45.019" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:45.020" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:08:45.020" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:45.020" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:45.020" starttime="20190402 11:08:43.032"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:45.020" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:45.020" starttime="20190402 11:08:45.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:45.021" starttime="20190402 11:08:45.021"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:45.021" starttime="20190402 11:08:43.031"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SUSPENDED</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SUSPENDED</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:45.023" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:08:45.023" starttime="20190402 11:08:45.023"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:45.023" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:08:45.023" starttime="20190402 11:08:45.023"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:45.024" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:45.024" starttime="20190402 11:08:45.024"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:45.025" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:08:46.863" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:46.864" level="INFO">${stdout} = SUSPENDED</msg>
<msg timestamp="20190402 11:08:46.864" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:46.864" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:46.864" starttime="20190402 11:08:45.024"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:46.864" level="INFO">${res} = {u'stdout': u'SUSPENDED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:46.864" starttime="20190402 11:08:46.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:46.865" starttime="20190402 11:08:46.865"></status>
</kw>
<msg timestamp="20190402 11:08:46.865" level="INFO">${result} = {u'stdout': u'SUSPENDED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:46.865" starttime="20190402 11:08:45.024"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:08:46.865" level="INFO">${value} = SUSPENDED</msg>
<status status="PASS" endtime="20190402 11:08:46.865" starttime="20190402 11:08:46.865"></status>
</kw>
<msg timestamp="20190402 11:08:46.866" level="INFO">${current_value} = SUSPENDED</msg>
<status status="PASS" endtime="20190402 11:08:46.866" starttime="20190402 11:08:45.022"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:46.866" starttime="20190402 11:08:46.866"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:46.866" starttime="20190402 11:08:45.021"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:46.866" starttime="20190402 11:08:45.021"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:46.866" starttime="20190402 11:08:43.031"></status>
</kw>
<kw name="Resume Instance" library="OpenStack">
<doc>Resume the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resume ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:46.867" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:46.867" starttime="20190402 11:08:46.867"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:46.868" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resume vm-cirros-1'.</msg>
<msg timestamp="20190402 11:08:48.650" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:48.651" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:08:48.651" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:48.651" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:48.651" starttime="20190402 11:08:46.867"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:48.652" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:48.653" starttime="20190402 11:08:48.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:48.653" starttime="20190402 11:08:48.653"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:48.654" starttime="20190402 11:08:46.867"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:48.657" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:08:48.657" starttime="20190402 11:08:48.656"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:48.658" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:08:48.658" starttime="20190402 11:08:48.657"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:48.661" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:48.661" starttime="20190402 11:08:48.660"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:48.662" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:08:50.344" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:50.344" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:08:50.344" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:50.344" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:50.344" starttime="20190402 11:08:48.661"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:50.345" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:50.345" starttime="20190402 11:08:50.344"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:50.345" starttime="20190402 11:08:50.345"></status>
</kw>
<msg timestamp="20190402 11:08:50.345" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:50.345" starttime="20190402 11:08:48.658"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:08:50.346" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:08:50.346" starttime="20190402 11:08:50.346"></status>
</kw>
<msg timestamp="20190402 11:08:50.346" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:08:50.346" starttime="20190402 11:08:48.655"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:50.346" starttime="20190402 11:08:50.346"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:50.346" starttime="20190402 11:08:48.655"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:50.347" starttime="20190402 11:08:48.654"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:50.347" starttime="20190402 11:08:46.866"></status>
</kw>
<kw name="Suspend Instance" library="OpenStack">
<doc>Suspend the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server suspend ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:50.348" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:50.348" starttime="20190402 11:08:50.347"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:50.348" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server suspend vm-cirros-2'.</msg>
<msg timestamp="20190402 11:08:52.031" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:52.031" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:08:52.032" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:52.032" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:52.032" starttime="20190402 11:08:50.348"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:52.032" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:52.032" starttime="20190402 11:08:52.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:52.033" starttime="20190402 11:08:52.032"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:52.033" starttime="20190402 11:08:50.347"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SUSPENDED</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SUSPENDED</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:52.034" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:08:52.034" starttime="20190402 11:08:52.034"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:52.035" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:08:52.035" starttime="20190402 11:08:52.034"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:52.035" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:52.036" starttime="20190402 11:08:52.035"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:52.036" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:08:53.669" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:53.669" level="INFO">${stdout} = SUSPENDED</msg>
<msg timestamp="20190402 11:08:53.669" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:53.669" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:53.669" starttime="20190402 11:08:52.036"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:53.670" level="INFO">${res} = {u'stdout': u'SUSPENDED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:53.670" starttime="20190402 11:08:53.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:53.671" starttime="20190402 11:08:53.670"></status>
</kw>
<msg timestamp="20190402 11:08:53.671" level="INFO">${result} = {u'stdout': u'SUSPENDED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:53.671" starttime="20190402 11:08:52.035"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:08:53.671" level="INFO">${value} = SUSPENDED</msg>
<status status="PASS" endtime="20190402 11:08:53.671" starttime="20190402 11:08:53.671"></status>
</kw>
<msg timestamp="20190402 11:08:53.671" level="INFO">${current_value} = SUSPENDED</msg>
<status status="PASS" endtime="20190402 11:08:53.671" starttime="20190402 11:08:52.034"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:53.672" starttime="20190402 11:08:53.672"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:53.672" starttime="20190402 11:08:52.033"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:53.672" starttime="20190402 11:08:52.033"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:53.672" starttime="20190402 11:08:50.347"></status>
</kw>
<kw name="Resume Instance" library="OpenStack">
<doc>Resume the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resume ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:53.673" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:53.674" starttime="20190402 11:08:53.673"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:53.674" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resume vm-cirros-2'.</msg>
<msg timestamp="20190402 11:08:55.505" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:55.506" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:08:55.506" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:55.506" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:55.506" starttime="20190402 11:08:53.674"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:55.509" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:55.509" starttime="20190402 11:08:55.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:55.510" starttime="20190402 11:08:55.510"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:55.511" starttime="20190402 11:08:53.673"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:55.514" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:08:55.514" starttime="20190402 11:08:55.513"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:55.515" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:08:55.515" starttime="20190402 11:08:55.514"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:55.517" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:55.517" starttime="20190402 11:08:55.516"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:55.518" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:08:57.250" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:57.251" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:08:57.251" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:57.251" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:57.251" starttime="20190402 11:08:55.517"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:57.251" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:57.251" starttime="20190402 11:08:57.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:57.252" starttime="20190402 11:08:57.252"></status>
</kw>
<msg timestamp="20190402 11:08:57.252" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:57.252" starttime="20190402 11:08:55.515"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:08:57.252" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:08:57.252" starttime="20190402 11:08:57.252"></status>
</kw>
<msg timestamp="20190402 11:08:57.253" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:08:57.253" starttime="20190402 11:08:55.513"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:57.253" starttime="20190402 11:08:57.253"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:57.253" starttime="20190402 11:08:55.512"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:57.253" starttime="20190402 11:08:55.511"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:57.253" starttime="20190402 11:08:53.672"></status>
</kw>
<doc>Suspend and Resume Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:08:57.254" critical="yes" starttime="20190402 11:08:43.030"></status>
</test>
<test id="s1-s1-s2-t7" name="Set Error Active Flags Instance">
<kw name="Set Error State Instance" library="OpenStack">
<doc>Set 'Error' value to the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>error</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:57.256" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:57.256" starttime="20190402 11:08:57.255"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:57.256" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state error vm-cirros-1'.</msg>
<msg timestamp="20190402 11:08:59.169" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:08:59.169" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:08:59.169" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:08:59.169" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:08:59.169" starttime="20190402 11:08:57.256"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:08:59.170" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:08:59.170" starttime="20190402 11:08:59.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:08:59.171" starttime="20190402 11:08:59.170"></status>
</kw>
<status status="PASS" endtime="20190402 11:08:59.171" starttime="20190402 11:08:57.255"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ERROR</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ERROR</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:08:59.173" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:08:59.173" starttime="20190402 11:08:59.173"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:08:59.174" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:08:59.174" starttime="20190402 11:08:59.173"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:08:59.175" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:08:59.175" starttime="20190402 11:08:59.175"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:08:59.176" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:09:00.756" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:00.757" level="INFO">${stdout} = ERROR</msg>
<msg timestamp="20190402 11:09:00.757" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:00.757" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:00.757" starttime="20190402 11:08:59.175"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:00.758" level="INFO">${res} = {u'stdout': u'ERROR', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:00.758" starttime="20190402 11:09:00.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:00.758" starttime="20190402 11:09:00.758"></status>
</kw>
<msg timestamp="20190402 11:09:00.758" level="INFO">${result} = {u'stdout': u'ERROR', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:00.759" starttime="20190402 11:08:59.174"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:09:00.759" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20190402 11:09:00.759" starttime="20190402 11:09:00.759"></status>
</kw>
<msg timestamp="20190402 11:09:00.759" level="INFO">${current_value} = ERROR</msg>
<status status="PASS" endtime="20190402 11:09:00.759" starttime="20190402 11:08:59.172"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:00.759" starttime="20190402 11:09:00.759"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:00.760" starttime="20190402 11:08:59.171"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:00.760" starttime="20190402 11:08:59.171"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:00.760" starttime="20190402 11:08:57.254"></status>
</kw>
<kw name="Set Active State Instance" library="OpenStack">
<doc>Set 'Active' value to the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>active</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:00.761" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:00.761" starttime="20190402 11:09:00.761"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:00.761" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state active vm-cirros-1'.</msg>
<msg timestamp="20190402 11:09:02.608" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:02.608" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:09:02.608" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:02.608" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:02.608" starttime="20190402 11:09:00.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:02.609" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:02.609" starttime="20190402 11:09:02.609"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:02.610" starttime="20190402 11:09:02.609"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:02.610" starttime="20190402 11:09:00.760"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:09:02.611" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:09:02.611" starttime="20190402 11:09:02.611"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:09:02.612" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:09:02.612" starttime="20190402 11:09:02.612"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:02.613" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:02.613" starttime="20190402 11:09:02.613"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:02.613" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:09:04.245" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:04.245" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:09:04.245" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:04.245" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:04.245" starttime="20190402 11:09:02.613"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:04.246" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:04.246" starttime="20190402 11:09:04.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:04.246" starttime="20190402 11:09:04.246"></status>
</kw>
<msg timestamp="20190402 11:09:04.246" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:04.246" starttime="20190402 11:09:02.612"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:09:04.247" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:09:04.247" starttime="20190402 11:09:04.246"></status>
</kw>
<msg timestamp="20190402 11:09:04.247" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:09:04.247" starttime="20190402 11:09:02.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:04.247" starttime="20190402 11:09:04.247"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:04.247" starttime="20190402 11:09:02.610"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:04.247" starttime="20190402 11:09:02.610"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:04.248" starttime="20190402 11:09:00.760"></status>
</kw>
<kw name="Set Error State Instance" library="OpenStack">
<doc>Set 'Error' value to the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
<arg>error</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:04.249" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:04.249" starttime="20190402 11:09:04.249"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:04.249" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state error vm-cirros-2'.</msg>
<msg timestamp="20190402 11:09:05.931" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:05.931" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:09:05.931" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:05.931" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:05.932" starttime="20190402 11:09:04.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:05.933" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:05.933" starttime="20190402 11:09:05.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:05.934" starttime="20190402 11:09:05.934"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:05.935" starttime="20190402 11:09:04.248"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ERROR</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ERROR</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:09:05.937" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:09:05.937" starttime="20190402 11:09:05.937"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:09:05.937" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:09:05.937" starttime="20190402 11:09:05.937"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:05.938" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:05.938" starttime="20190402 11:09:05.938"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:05.939" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:09:07.551" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:07.551" level="INFO">${stdout} = ERROR</msg>
<msg timestamp="20190402 11:09:07.551" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:07.551" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:07.551" starttime="20190402 11:09:05.938"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:07.552" level="INFO">${res} = {u'stdout': u'ERROR', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:07.552" starttime="20190402 11:09:07.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:07.552" starttime="20190402 11:09:07.552"></status>
</kw>
<msg timestamp="20190402 11:09:07.552" level="INFO">${result} = {u'stdout': u'ERROR', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:07.552" starttime="20190402 11:09:05.937"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:09:07.553" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20190402 11:09:07.553" starttime="20190402 11:09:07.552"></status>
</kw>
<msg timestamp="20190402 11:09:07.553" level="INFO">${current_value} = ERROR</msg>
<status status="PASS" endtime="20190402 11:09:07.553" starttime="20190402 11:09:05.936"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:07.553" starttime="20190402 11:09:07.553"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:07.553" starttime="20190402 11:09:05.936"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:07.553" starttime="20190402 11:09:05.935"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:07.554" starttime="20190402 11:09:04.248"></status>
</kw>
<kw name="Set Active State Instance" library="OpenStack">
<doc>Set 'Active' value to the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
<arg>active</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:07.555" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:07.555" starttime="20190402 11:09:07.555"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:07.555" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state active vm-cirros-2'.</msg>
<msg timestamp="20190402 11:09:09.368" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:09.368" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:09:09.370" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:09.370" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:09.371" starttime="20190402 11:09:07.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:09.373" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:09.373" starttime="20190402 11:09:09.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:09.374" starttime="20190402 11:09:09.373"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:09.374" starttime="20190402 11:09:07.554"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:09:09.379" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:09:09.379" starttime="20190402 11:09:09.378"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:09:09.380" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:09:09.380" starttime="20190402 11:09:09.379"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:09.382" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:09.382" starttime="20190402 11:09:09.381"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:09.383" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:09:10.994" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:10.995" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:09:10.995" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:10.995" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:10.995" starttime="20190402 11:09:09.382"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:10.996" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:10.996" starttime="20190402 11:09:10.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:10.996" starttime="20190402 11:09:10.996"></status>
</kw>
<msg timestamp="20190402 11:09:10.996" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:10.996" starttime="20190402 11:09:09.380"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:09:10.997" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:09:10.997" starttime="20190402 11:09:10.997"></status>
</kw>
<msg timestamp="20190402 11:09:10.997" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:09:10.997" starttime="20190402 11:09:09.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:10.998" starttime="20190402 11:09:10.997"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:10.998" starttime="20190402 11:09:09.376"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:10.998" starttime="20190402 11:09:09.375"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:10.998" starttime="20190402 11:09:07.554"></status>
</kw>
<doc>Set 'Error' and 'Active' flags to Cirros
instance.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:09:10.998" critical="yes" starttime="20190402 11:08:57.254"></status>
</test>
<test id="s1-s1-s2-t8" name="Pause Unpause Instances">
<kw name="Pause Instance" library="OpenStack">
<doc>Pause an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server pause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:11.000" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:11.000" starttime="20190402 11:09:11.000"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:11.000" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server pause vm-cirros-1'.</msg>
<msg timestamp="20190402 11:09:12.732" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:12.732" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:09:12.732" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:12.732" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:12.732" starttime="20190402 11:09:11.000"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:12.733" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:12.733" starttime="20190402 11:09:12.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:12.733" starttime="20190402 11:09:12.733"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:12.733" starttime="20190402 11:09:10.999"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>PAUSED</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>PAUSED</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:09:12.735" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:09:12.735" starttime="20190402 11:09:12.734"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:09:12.735" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:09:12.735" starttime="20190402 11:09:12.735"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:12.736" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:12.736" starttime="20190402 11:09:12.735"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:12.736" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:09:14.419" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:14.420" level="INFO">${stdout} = PAUSED</msg>
<msg timestamp="20190402 11:09:14.420" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:14.420" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:14.420" starttime="20190402 11:09:12.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:14.421" level="INFO">${res} = {u'stdout': u'PAUSED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:14.421" starttime="20190402 11:09:14.420"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:14.422" starttime="20190402 11:09:14.421"></status>
</kw>
<msg timestamp="20190402 11:09:14.422" level="INFO">${result} = {u'stdout': u'PAUSED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:14.422" starttime="20190402 11:09:12.735"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:09:14.422" level="INFO">${value} = PAUSED</msg>
<status status="PASS" endtime="20190402 11:09:14.422" starttime="20190402 11:09:14.422"></status>
</kw>
<msg timestamp="20190402 11:09:14.422" level="INFO">${current_value} = PAUSED</msg>
<status status="PASS" endtime="20190402 11:09:14.422" starttime="20190402 11:09:12.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:14.423" starttime="20190402 11:09:14.423"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:14.423" starttime="20190402 11:09:12.734"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:14.423" starttime="20190402 11:09:12.733"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:14.423" starttime="20190402 11:09:10.999"></status>
</kw>
<kw name="Pause Instance" library="OpenStack">
<doc>Pause an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server pause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:14.424" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:14.424" starttime="20190402 11:09:14.424"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:14.425" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server pause vm-cirros-2'.</msg>
<msg timestamp="20190402 11:09:16.236" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:16.236" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:09:16.236" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:16.236" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:16.236" starttime="20190402 11:09:14.425"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:16.237" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:16.237" starttime="20190402 11:09:16.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:16.238" starttime="20190402 11:09:16.237"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:16.238" starttime="20190402 11:09:14.424"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>PAUSED</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>PAUSED</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:09:16.239" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:09:16.239" starttime="20190402 11:09:16.239"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:09:16.240" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:09:16.240" starttime="20190402 11:09:16.239"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:16.241" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:16.241" starttime="20190402 11:09:16.240"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:16.241" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:09:17.872" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:17.872" level="INFO">${stdout} = PAUSED</msg>
<msg timestamp="20190402 11:09:17.873" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:17.873" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:17.873" starttime="20190402 11:09:16.241"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:17.876" level="INFO">${res} = {u'stdout': u'PAUSED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:17.876" starttime="20190402 11:09:17.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:17.877" starttime="20190402 11:09:17.877"></status>
</kw>
<msg timestamp="20190402 11:09:17.878" level="INFO">${result} = {u'stdout': u'PAUSED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:17.878" starttime="20190402 11:09:16.240"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:09:17.879" level="INFO">${value} = PAUSED</msg>
<status status="PASS" endtime="20190402 11:09:17.879" starttime="20190402 11:09:17.878"></status>
</kw>
<msg timestamp="20190402 11:09:17.879" level="INFO">${current_value} = PAUSED</msg>
<status status="PASS" endtime="20190402 11:09:17.879" starttime="20190402 11:09:16.239"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:17.880" starttime="20190402 11:09:17.880"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:17.880" starttime="20190402 11:09:16.238"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:17.881" starttime="20190402 11:09:16.238"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:17.881" starttime="20190402 11:09:14.423"></status>
</kw>
<kw name="Unpause Instance" library="OpenStack">
<doc>Unpause an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unpause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:17.883" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:17.883" starttime="20190402 11:09:17.883"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:17.884" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unpause vm-cirros-1'.</msg>
<msg timestamp="20190402 11:09:19.566" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:19.567" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:09:19.569" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:19.569" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:19.569" starttime="20190402 11:09:17.884"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:19.571" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:19.571" starttime="20190402 11:09:19.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:19.597" starttime="20190402 11:09:19.571"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:19.597" starttime="20190402 11:09:17.882"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:09:19.598" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:09:19.598" starttime="20190402 11:09:19.598"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:09:19.599" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:09:19.599" starttime="20190402 11:09:19.599"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:19.599" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:19.599" starttime="20190402 11:09:19.599"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:19.600" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:09:21.232" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:21.233" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:09:21.233" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:21.233" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:21.233" starttime="20190402 11:09:19.600"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:21.236" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:21.236" starttime="20190402 11:09:21.234"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:21.237" starttime="20190402 11:09:21.236"></status>
</kw>
<msg timestamp="20190402 11:09:21.238" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:21.238" starttime="20190402 11:09:19.599"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:09:21.239" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:09:21.239" starttime="20190402 11:09:21.238"></status>
</kw>
<msg timestamp="20190402 11:09:21.240" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:09:21.240" starttime="20190402 11:09:19.598"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:21.241" starttime="20190402 11:09:21.240"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:21.241" starttime="20190402 11:09:19.598"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:21.241" starttime="20190402 11:09:19.597"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:21.242" starttime="20190402 11:09:17.881"></status>
</kw>
<kw name="Unpause Instance" library="OpenStack">
<doc>Unpause an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unpause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:21.244" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:21.244" starttime="20190402 11:09:21.244"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:21.245" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unpause vm-cirros-2'.</msg>
<msg timestamp="20190402 11:09:22.928" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:22.928" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:09:22.928" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:22.928" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:22.928" starttime="20190402 11:09:21.244"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:22.930" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:22.930" starttime="20190402 11:09:22.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:22.931" starttime="20190402 11:09:22.930"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:22.932" starttime="20190402 11:09:21.243"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:09:22.935" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:09:22.935" starttime="20190402 11:09:22.935"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:09:22.936" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:09:22.936" starttime="20190402 11:09:22.936"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:22.938" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:22.938" starttime="20190402 11:09:22.938"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:22.940" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:09:24.538" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:24.538" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:09:24.539" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:24.539" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:24.539" starttime="20190402 11:09:22.939"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:24.540" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:24.540" starttime="20190402 11:09:24.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:24.541" starttime="20190402 11:09:24.541"></status>
</kw>
<msg timestamp="20190402 11:09:24.542" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:24.542" starttime="20190402 11:09:22.937"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:09:24.543" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:09:24.543" starttime="20190402 11:09:24.542"></status>
</kw>
<msg timestamp="20190402 11:09:24.543" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:09:24.543" starttime="20190402 11:09:22.933"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:24.544" starttime="20190402 11:09:24.544"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:24.545" starttime="20190402 11:09:22.933"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:24.545" starttime="20190402 11:09:22.932"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:24.545" starttime="20190402 11:09:21.242"></status>
</kw>
<doc>Pause and Unpause Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:09:24.546" critical="yes" starttime="20190402 11:09:10.998"></status>
</test>
<test id="s1-s1-s2-t9" name="Stop Start Instances">
<kw name="Stop Instance" library="OpenStack">
<doc>Stop an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server stop ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:24.550" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:24.550" starttime="20190402 11:09:24.549"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:24.551" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server stop vm-cirros-1'.</msg>
<msg timestamp="20190402 11:09:26.498" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:26.498" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:09:26.498" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:26.498" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:26.499" starttime="20190402 11:09:24.550"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:26.500" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:26.500" starttime="20190402 11:09:26.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:26.501" starttime="20190402 11:09:26.500"></status>
</kw>
<status status="PASS" endtime="20190402 11:09:26.501" starttime="20190402 11:09:24.548"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:09:26.505" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:09:26.505" starttime="20190402 11:09:26.504"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:09:26.506" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:09:26.506" starttime="20190402 11:09:26.505"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:26.508" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:26.508" starttime="20190402 11:09:26.507"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:26.510" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:09:28.098" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:28.098" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:09:28.098" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:28.098" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:28.098" starttime="20190402 11:09:26.508"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:28.099" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:28.099" starttime="20190402 11:09:28.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:28.100" starttime="20190402 11:09:28.099"></status>
</kw>
<msg timestamp="20190402 11:09:28.100" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:28.100" starttime="20190402 11:09:26.506"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:09:28.101" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:09:28.101" starttime="20190402 11:09:28.100"></status>
</kw>
<msg timestamp="20190402 11:09:28.101" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:09:28.101" starttime="20190402 11:09:26.503"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:09:28.102" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:09:28.102" starttime="20190402 11:09:28.101"></status>
</kw>
<status status="FAIL" endtime="20190402 11:09:28.102" starttime="20190402 11:09:26.502"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:09:38.104" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:09:38.104" starttime="20190402 11:09:38.104"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:09:38.105" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:09:38.105" starttime="20190402 11:09:38.104"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:38.106" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:38.106" starttime="20190402 11:09:38.106"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:38.107" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:09:39.687" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:39.687" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:09:39.687" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:39.687" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:39.687" starttime="20190402 11:09:38.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:39.688" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:39.688" starttime="20190402 11:09:39.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:39.689" starttime="20190402 11:09:39.689"></status>
</kw>
<msg timestamp="20190402 11:09:39.689" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:39.689" starttime="20190402 11:09:38.105"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:09:39.690" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:09:39.690" starttime="20190402 11:09:39.690"></status>
</kw>
<msg timestamp="20190402 11:09:39.690" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:09:39.690" starttime="20190402 11:09:38.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:09:39.691" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:09:39.691" starttime="20190402 11:09:39.691"></status>
</kw>
<status status="FAIL" endtime="20190402 11:09:39.691" starttime="20190402 11:09:38.102"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:09:49.693" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:09:49.693" starttime="20190402 11:09:49.693"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:09:49.693" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:09:49.693" starttime="20190402 11:09:49.693"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:09:49.694" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:09:49.694" starttime="20190402 11:09:49.694"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:09:49.694" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:09:51.324" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:09:51.325" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:09:51.325" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:09:51.325" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:09:51.325" starttime="20190402 11:09:49.694"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:09:51.325" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:51.326" starttime="20190402 11:09:51.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:09:51.326" starttime="20190402 11:09:51.326"></status>
</kw>
<msg timestamp="20190402 11:09:51.326" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:09:51.326" starttime="20190402 11:09:49.693"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:09:51.326" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:09:51.327" starttime="20190402 11:09:51.326"></status>
</kw>
<msg timestamp="20190402 11:09:51.327" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:09:51.327" starttime="20190402 11:09:49.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:09:51.327" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:09:51.327" starttime="20190402 11:09:51.327"></status>
</kw>
<status status="FAIL" endtime="20190402 11:09:51.327" starttime="20190402 11:09:49.692"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:10:01.329" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:10:01.329" starttime="20190402 11:10:01.329"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:10:01.330" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:10:01.330" starttime="20190402 11:10:01.330"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:10:01.331" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:10:01.331" starttime="20190402 11:10:01.331"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:10:01.332" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:10:02.913" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:10:02.913" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:10:02.913" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:10:02.913" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:10:02.914" starttime="20190402 11:10:01.331"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:10:02.914" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:10:02.915" starttime="20190402 11:10:02.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:10:02.915" starttime="20190402 11:10:02.915"></status>
</kw>
<msg timestamp="20190402 11:10:02.915" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:10:02.915" starttime="20190402 11:10:01.330"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:10:02.916" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:10:02.916" starttime="20190402 11:10:02.916"></status>
</kw>
<msg timestamp="20190402 11:10:02.916" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:10:02.916" starttime="20190402 11:10:01.328"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:10:02.917" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:10:02.917" starttime="20190402 11:10:02.916"></status>
</kw>
<status status="FAIL" endtime="20190402 11:10:02.917" starttime="20190402 11:10:01.328"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:10:12.919" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:10:12.919" starttime="20190402 11:10:12.919"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:10:12.920" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:10:12.920" starttime="20190402 11:10:12.920"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:10:12.921" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:10:12.921" starttime="20190402 11:10:12.921"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:10:12.922" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:10:14.553" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:10:14.553" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:10:14.553" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:10:14.554" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:10:14.554" starttime="20190402 11:10:12.921"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:10:14.556" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:10:14.556" starttime="20190402 11:10:14.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:10:14.557" starttime="20190402 11:10:14.556"></status>
</kw>
<msg timestamp="20190402 11:10:14.557" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:10:14.557" starttime="20190402 11:10:12.920"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:10:14.558" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:10:14.558" starttime="20190402 11:10:14.558"></status>
</kw>
<msg timestamp="20190402 11:10:14.558" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:10:14.558" starttime="20190402 11:10:12.918"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:10:14.559" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:10:14.559" starttime="20190402 11:10:14.559"></status>
</kw>
<status status="FAIL" endtime="20190402 11:10:14.559" starttime="20190402 11:10:12.918"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:10:24.563" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:10:24.563" starttime="20190402 11:10:24.562"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:10:24.564" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:10:24.564" starttime="20190402 11:10:24.563"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:10:24.566" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:10:24.566" starttime="20190402 11:10:24.565"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:10:24.567" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:10:26.199" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:10:26.199" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:10:26.199" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:10:26.199" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:10:26.199" starttime="20190402 11:10:24.566"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:10:26.200" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:10:26.200" starttime="20190402 11:10:26.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:10:26.201" starttime="20190402 11:10:26.200"></status>
</kw>
<msg timestamp="20190402 11:10:26.201" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:10:26.201" starttime="20190402 11:10:24.564"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:10:26.201" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:10:26.201" starttime="20190402 11:10:26.201"></status>
</kw>
<msg timestamp="20190402 11:10:26.201" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:10:26.201" starttime="20190402 11:10:24.561"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:10:26.202" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:10:26.202" starttime="20190402 11:10:26.202"></status>
</kw>
<status status="FAIL" endtime="20190402 11:10:26.202" starttime="20190402 11:10:24.560"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:10:36.204" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:10:36.204" starttime="20190402 11:10:36.204"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:10:36.204" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:10:36.204" starttime="20190402 11:10:36.204"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:10:36.205" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:10:36.205" starttime="20190402 11:10:36.205"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:10:36.206" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:10:37.787" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:10:37.788" level="INFO">${stdout} = SHUTOFF</msg>
<msg timestamp="20190402 11:10:37.788" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:10:37.788" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:10:37.788" starttime="20190402 11:10:36.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:10:37.790" level="INFO">${res} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:10:37.790" starttime="20190402 11:10:37.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:10:37.791" starttime="20190402 11:10:37.790"></status>
</kw>
<msg timestamp="20190402 11:10:37.791" level="INFO">${result} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:10:37.791" starttime="20190402 11:10:36.205"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:10:37.791" level="INFO">${value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 11:10:37.791" starttime="20190402 11:10:37.791"></status>
</kw>
<msg timestamp="20190402 11:10:37.791" level="INFO">${current_value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 11:10:37.791" starttime="20190402 11:10:36.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:10:37.792" starttime="20190402 11:10:37.791"></status>
</kw>
<status status="PASS" endtime="20190402 11:10:37.792" starttime="20190402 11:10:36.203"></status>
</kw>
<status status="PASS" endtime="20190402 11:10:37.792" starttime="20190402 11:09:26.502"></status>
</kw>
<status status="PASS" endtime="20190402 11:10:37.792" starttime="20190402 11:09:24.547"></status>
</kw>
<kw name="Stop Instance" library="OpenStack">
<doc>Stop an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server stop ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:10:37.793" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:10:37.793" starttime="20190402 11:10:37.793"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:10:37.794" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server stop vm-cirros-2'.</msg>
<msg timestamp="20190402 11:10:39.546" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:10:39.546" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:10:39.547" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:10:39.547" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:10:39.547" starttime="20190402 11:10:37.793"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:10:39.548" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:10:39.548" starttime="20190402 11:10:39.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:10:39.548" starttime="20190402 11:10:39.548"></status>
</kw>
<status status="PASS" endtime="20190402 11:10:39.549" starttime="20190402 11:10:37.792"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:10:39.551" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:10:39.551" starttime="20190402 11:10:39.550"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:10:39.552" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:10:39.552" starttime="20190402 11:10:39.551"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:10:39.553" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:10:39.553" starttime="20190402 11:10:39.553"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:10:39.554" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:10:41.166" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:10:41.166" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:10:41.166" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:10:41.166" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:10:41.166" starttime="20190402 11:10:39.553"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:10:41.168" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:10:41.169" starttime="20190402 11:10:41.167"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:10:41.170" starttime="20190402 11:10:41.169"></status>
</kw>
<msg timestamp="20190402 11:10:41.170" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:10:41.170" starttime="20190402 11:10:39.552"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:10:41.171" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:10:41.171" starttime="20190402 11:10:41.171"></status>
</kw>
<msg timestamp="20190402 11:10:41.172" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:10:41.172" starttime="20190402 11:10:39.550"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:10:41.173" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:10:41.174" starttime="20190402 11:10:41.172"></status>
</kw>
<status status="FAIL" endtime="20190402 11:10:41.174" starttime="20190402 11:10:39.549"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:10:51.177" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:10:51.177" starttime="20190402 11:10:51.177"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:10:51.178" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:10:51.178" starttime="20190402 11:10:51.178"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:10:51.180" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:10:51.180" starttime="20190402 11:10:51.180"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:10:51.181" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:10:52.814" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:10:52.814" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:10:52.814" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:10:52.815" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:10:52.815" starttime="20190402 11:10:51.180"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:10:52.817" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:10:52.817" starttime="20190402 11:10:52.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:10:52.818" starttime="20190402 11:10:52.817"></status>
</kw>
<msg timestamp="20190402 11:10:52.818" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:10:52.819" starttime="20190402 11:10:51.179"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:10:52.820" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:10:52.820" starttime="20190402 11:10:52.819"></status>
</kw>
<msg timestamp="20190402 11:10:52.821" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:10:52.821" starttime="20190402 11:10:51.176"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:10:52.822" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:10:52.822" starttime="20190402 11:10:52.821"></status>
</kw>
<status status="FAIL" endtime="20190402 11:10:52.823" starttime="20190402 11:10:51.175"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:11:02.824" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:11:02.824" starttime="20190402 11:11:02.824"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:11:02.825" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:11:02.825" starttime="20190402 11:11:02.825"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:11:02.826" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:11:02.826" starttime="20190402 11:11:02.826"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:11:02.827" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:11:04.409" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:11:04.409" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:11:04.409" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:11:04.409" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:11:04.409" starttime="20190402 11:11:02.826"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:11:04.410" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:04.410" starttime="20190402 11:11:04.409"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:11:04.410" starttime="20190402 11:11:04.410"></status>
</kw>
<msg timestamp="20190402 11:11:04.410" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:04.410" starttime="20190402 11:11:02.825"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:11:04.410" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:11:04.411" starttime="20190402 11:11:04.410"></status>
</kw>
<msg timestamp="20190402 11:11:04.411" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:11:04.411" starttime="20190402 11:11:02.824"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:11:04.411" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:11:04.411" starttime="20190402 11:11:04.411"></status>
</kw>
<status status="FAIL" endtime="20190402 11:11:04.411" starttime="20190402 11:11:02.823"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:11:14.415" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:11:14.415" starttime="20190402 11:11:14.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:11:14.416" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:11:14.416" starttime="20190402 11:11:14.415"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:11:14.418" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:11:14.418" starttime="20190402 11:11:14.418"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:11:14.420" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:11:16.152" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:11:16.153" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:11:16.153" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:11:16.153" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:11:16.153" starttime="20190402 11:11:14.419"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:11:16.154" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:16.154" starttime="20190402 11:11:16.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:11:16.154" starttime="20190402 11:11:16.154"></status>
</kw>
<msg timestamp="20190402 11:11:16.154" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:16.155" starttime="20190402 11:11:14.416"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:11:16.155" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:11:16.155" starttime="20190402 11:11:16.155"></status>
</kw>
<msg timestamp="20190402 11:11:16.155" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:11:16.155" starttime="20190402 11:11:14.413"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:11:16.156" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:11:16.156" starttime="20190402 11:11:16.155"></status>
</kw>
<status status="FAIL" endtime="20190402 11:11:16.156" starttime="20190402 11:11:14.412"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:11:26.159" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:11:26.159" starttime="20190402 11:11:26.158"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:11:26.160" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:11:26.160" starttime="20190402 11:11:26.159"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:11:26.161" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:11:26.161" starttime="20190402 11:11:26.161"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:11:26.162" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:11:28.094" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:11:28.094" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:11:28.094" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:11:28.094" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:11:28.094" starttime="20190402 11:11:26.161"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:11:28.095" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:28.095" starttime="20190402 11:11:28.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:11:28.096" starttime="20190402 11:11:28.095"></status>
</kw>
<msg timestamp="20190402 11:11:28.096" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:28.096" starttime="20190402 11:11:26.160"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:11:28.096" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:11:28.096" starttime="20190402 11:11:28.096"></status>
</kw>
<msg timestamp="20190402 11:11:28.097" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:11:28.097" starttime="20190402 11:11:26.157"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:11:28.097" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:11:28.097" starttime="20190402 11:11:28.097"></status>
</kw>
<status status="FAIL" endtime="20190402 11:11:28.098" starttime="20190402 11:11:26.157"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:11:38.101" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:11:38.102" starttime="20190402 11:11:38.100"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:11:38.104" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:11:38.104" starttime="20190402 11:11:38.102"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:11:38.106" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:11:38.106" starttime="20190402 11:11:38.106"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:11:38.107" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:11:40.142" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:11:40.142" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:11:40.142" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:11:40.142" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:11:40.142" starttime="20190402 11:11:38.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:11:40.143" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:40.143" starttime="20190402 11:11:40.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:11:40.144" starttime="20190402 11:11:40.143"></status>
</kw>
<msg timestamp="20190402 11:11:40.144" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:40.144" starttime="20190402 11:11:38.104"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:11:40.144" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:11:40.145" starttime="20190402 11:11:40.144"></status>
</kw>
<msg timestamp="20190402 11:11:40.145" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:11:40.145" starttime="20190402 11:11:38.099"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:11:40.145" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:11:40.145" starttime="20190402 11:11:40.145"></status>
</kw>
<status status="FAIL" endtime="20190402 11:11:40.146" starttime="20190402 11:11:38.098"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:11:50.150" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:11:50.150" starttime="20190402 11:11:50.149"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:11:50.152" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:11:50.152" starttime="20190402 11:11:50.151"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:11:50.154" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:11:50.155" starttime="20190402 11:11:50.154"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:11:50.156" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:11:52.042" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:11:52.042" level="INFO">${stdout} = SHUTOFF</msg>
<msg timestamp="20190402 11:11:52.043" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:11:52.043" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:11:52.043" starttime="20190402 11:11:50.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:11:52.045" level="INFO">${res} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:52.045" starttime="20190402 11:11:52.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:11:52.046" starttime="20190402 11:11:52.045"></status>
</kw>
<msg timestamp="20190402 11:11:52.047" level="INFO">${result} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:52.047" starttime="20190402 11:11:50.153"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:11:52.049" level="INFO">${value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 11:11:52.049" starttime="20190402 11:11:52.048"></status>
</kw>
<msg timestamp="20190402 11:11:52.050" level="INFO">${current_value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 11:11:52.050" starttime="20190402 11:11:50.147"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:11:52.051" starttime="20190402 11:11:52.050"></status>
</kw>
<status status="PASS" endtime="20190402 11:11:52.051" starttime="20190402 11:11:50.146"></status>
</kw>
<status status="PASS" endtime="20190402 11:11:52.052" starttime="20190402 11:10:39.549"></status>
</kw>
<status status="PASS" endtime="20190402 11:11:52.052" starttime="20190402 11:10:37.792"></status>
</kw>
<kw name="Start Instance" library="OpenStack">
<doc>Start an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server start ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:11:52.055" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:11:52.055" starttime="20190402 11:11:52.054"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:11:52.056" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server start vm-cirros-1'.</msg>
<msg timestamp="20190402 11:11:53.791" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:11:53.791" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:11:53.791" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:11:53.791" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:11:53.791" starttime="20190402 11:11:52.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:11:53.793" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:53.793" starttime="20190402 11:11:53.792"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:11:53.794" starttime="20190402 11:11:53.793"></status>
</kw>
<status status="PASS" endtime="20190402 11:11:53.794" starttime="20190402 11:11:52.053"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:11:53.797" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:11:53.797" starttime="20190402 11:11:53.797"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:11:53.798" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:11:53.798" starttime="20190402 11:11:53.798"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:11:53.801" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:11:53.801" starttime="20190402 11:11:53.800"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:11:53.802" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:11:55.586" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:11:55.586" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:11:55.586" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:11:55.586" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:11:55.586" starttime="20190402 11:11:53.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:11:55.587" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:55.587" starttime="20190402 11:11:55.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:11:55.587" starttime="20190402 11:11:55.587"></status>
</kw>
<msg timestamp="20190402 11:11:55.588" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:55.588" starttime="20190402 11:11:53.799"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:11:55.588" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:11:55.588" starttime="20190402 11:11:55.588"></status>
</kw>
<msg timestamp="20190402 11:11:55.588" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:11:55.588" starttime="20190402 11:11:53.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:11:55.589" starttime="20190402 11:11:55.588"></status>
</kw>
<status status="PASS" endtime="20190402 11:11:55.589" starttime="20190402 11:11:53.795"></status>
</kw>
<status status="PASS" endtime="20190402 11:11:55.589" starttime="20190402 11:11:53.794"></status>
</kw>
<status status="PASS" endtime="20190402 11:11:55.589" starttime="20190402 11:11:52.052"></status>
</kw>
<kw name="Start Instance" library="OpenStack">
<doc>Start an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server start ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:11:55.590" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:11:55.590" starttime="20190402 11:11:55.590"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:11:55.590" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server start vm-cirros-2'.</msg>
<msg timestamp="20190402 11:11:57.422" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:11:57.422" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:11:57.422" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:11:57.422" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:11:57.422" starttime="20190402 11:11:55.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:11:57.423" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:57.423" starttime="20190402 11:11:57.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:11:57.423" starttime="20190402 11:11:57.423"></status>
</kw>
<status status="PASS" endtime="20190402 11:11:57.423" starttime="20190402 11:11:55.589"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:11:57.425" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:11:57.425" starttime="20190402 11:11:57.424"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:11:57.425" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:11:57.425" starttime="20190402 11:11:57.425"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:11:57.426" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:11:57.426" starttime="20190402 11:11:57.426"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:11:57.426" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:11:59.210" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:11:59.210" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:11:59.210" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:11:59.210" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:11:59.210" starttime="20190402 11:11:57.426"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:11:59.211" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:59.211" starttime="20190402 11:11:59.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:11:59.212" starttime="20190402 11:11:59.211"></status>
</kw>
<msg timestamp="20190402 11:11:59.212" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:11:59.212" starttime="20190402 11:11:57.425"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:11:59.212" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:11:59.212" starttime="20190402 11:11:59.212"></status>
</kw>
<msg timestamp="20190402 11:11:59.212" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:11:59.212" starttime="20190402 11:11:57.424"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:11:59.213" starttime="20190402 11:11:59.213"></status>
</kw>
<status status="PASS" endtime="20190402 11:11:59.213" starttime="20190402 11:11:57.424"></status>
</kw>
<status status="PASS" endtime="20190402 11:11:59.213" starttime="20190402 11:11:57.423"></status>
</kw>
<status status="PASS" endtime="20190402 11:11:59.213" starttime="20190402 11:11:55.589"></status>
</kw>
<doc>Stop and Start Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:11:59.213" critical="yes" starttime="20190402 11:09:24.546"></status>
</test>
<test id="s1-s1-s2-t10" name="Lock Unlock Instances">
<kw name="Lock Instance" library="OpenStack">
<doc>Lock an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server lock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:11:59.215" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:11:59.215" starttime="20190402 11:11:59.215"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:11:59.216" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server lock vm-cirros-1'.</msg>
<msg timestamp="20190402 11:12:00.897" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:12:00.897" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:12:00.897" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:12:00.897" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:12:00.897" starttime="20190402 11:11:59.215"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:12:00.900" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:00.900" starttime="20190402 11:12:00.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:12:00.901" starttime="20190402 11:12:00.900"></status>
</kw>
<status status="PASS" endtime="20190402 11:12:00.901" starttime="20190402 11:11:59.214"></status>
</kw>
<status status="PASS" endtime="20190402 11:12:00.901" starttime="20190402 11:11:59.214"></status>
</kw>
<kw name="Lock Instance" library="OpenStack">
<doc>Lock an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server lock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:12:00.903" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:12:00.903" starttime="20190402 11:12:00.903"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:12:00.903" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server lock vm-cirros-2'.</msg>
<msg timestamp="20190402 11:12:02.792" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:12:02.792" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:12:02.793" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:12:02.793" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:12:02.793" starttime="20190402 11:12:00.903"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:12:02.795" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:02.795" starttime="20190402 11:12:02.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:12:02.796" starttime="20190402 11:12:02.795"></status>
</kw>
<status status="PASS" endtime="20190402 11:12:02.796" starttime="20190402 11:12:00.902"></status>
</kw>
<status status="PASS" endtime="20190402 11:12:02.797" starttime="20190402 11:12:00.902"></status>
</kw>
<kw name="Unlock Instance" library="OpenStack">
<doc>Unlock an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unlock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:12:02.800" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:12:02.800" starttime="20190402 11:12:02.799"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:12:02.801" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unlock vm-cirros-1'.</msg>
<msg timestamp="20190402 11:12:04.698" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:12:04.698" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:12:04.698" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:12:04.698" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:12:04.698" starttime="20190402 11:12:02.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:12:04.699" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:04.699" starttime="20190402 11:12:04.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:12:04.700" starttime="20190402 11:12:04.699"></status>
</kw>
<status status="PASS" endtime="20190402 11:12:04.700" starttime="20190402 11:12:02.798"></status>
</kw>
<status status="PASS" endtime="20190402 11:12:04.700" starttime="20190402 11:12:02.797"></status>
</kw>
<kw name="Unlock Instance" library="OpenStack">
<doc>Unlock an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unlock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:12:04.702" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:12:04.702" starttime="20190402 11:12:04.701"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:12:04.702" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unlock vm-cirros-2'.</msg>
<msg timestamp="20190402 11:12:06.485" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:12:06.486" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:12:06.486" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:12:06.486" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:12:06.486" starttime="20190402 11:12:04.702"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:12:06.486" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:06.486" starttime="20190402 11:12:06.486"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:12:06.487" starttime="20190402 11:12:06.487"></status>
</kw>
<status status="PASS" endtime="20190402 11:12:06.487" starttime="20190402 11:12:04.701"></status>
</kw>
<status status="PASS" endtime="20190402 11:12:06.487" starttime="20190402 11:12:04.700"></status>
</kw>
<doc>Lock and Unlock Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:12:06.487" critical="yes" starttime="20190402 11:11:59.214"></status>
</test>
<test id="s1-s1-s2-t11" name="Reboot Instances">
<kw name="Reboot Instance" library="OpenStack">
<doc>Reboot an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server reboot ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:12:06.489" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:12:06.489" starttime="20190402 11:12:06.489"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:12:06.489" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server reboot vm-cirros-1'.</msg>
<msg timestamp="20190402 11:12:08.272" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:12:08.272" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:12:08.272" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:12:08.272" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:12:08.273" starttime="20190402 11:12:06.489"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:12:08.274" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:08.274" starttime="20190402 11:12:08.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:12:08.274" starttime="20190402 11:12:08.274"></status>
</kw>
<status status="PASS" endtime="20190402 11:12:08.275" starttime="20190402 11:12:06.488"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBOOT</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBOOT</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:12:08.277" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:12:08.277" starttime="20190402 11:12:08.277"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:12:08.278" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:12:08.278" starttime="20190402 11:12:08.278"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:12:08.280" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:12:08.280" starttime="20190402 11:12:08.279"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:12:08.281" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:12:09.862" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:12:09.862" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:12:09.862" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:12:09.862" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:12:09.862" starttime="20190402 11:12:08.280"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:12:09.863" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:09.863" starttime="20190402 11:12:09.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:12:09.863" starttime="20190402 11:12:09.863"></status>
</kw>
<msg timestamp="20190402 11:12:09.863" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:09.864" starttime="20190402 11:12:08.279"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:12:09.864" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:12:09.864" starttime="20190402 11:12:09.864"></status>
</kw>
<msg timestamp="20190402 11:12:09.864" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:12:09.864" starttime="20190402 11:12:08.276"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:12:09.865" starttime="20190402 11:12:09.864"></status>
</kw>
<status status="PASS" endtime="20190402 11:12:09.865" starttime="20190402 11:12:08.275"></status>
</kw>
<status status="PASS" endtime="20190402 11:12:09.865" starttime="20190402 11:12:08.275"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:12:09.867" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:12:09.867" starttime="20190402 11:12:09.866"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:12:09.867" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:12:09.867" starttime="20190402 11:12:09.867"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:12:09.868" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:12:09.868" starttime="20190402 11:12:09.868"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:12:09.868" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:12:11.479" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:12:11.479" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:12:11.480" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:12:11.480" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:12:11.480" starttime="20190402 11:12:09.868"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:12:11.482" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:11.482" starttime="20190402 11:12:11.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:12:11.482" starttime="20190402 11:12:11.482"></status>
</kw>
<msg timestamp="20190402 11:12:11.483" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:11.483" starttime="20190402 11:12:09.867"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:12:11.483" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:12:11.483" starttime="20190402 11:12:11.483"></status>
</kw>
<msg timestamp="20190402 11:12:11.484" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:12:11.484" starttime="20190402 11:12:09.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:12:11.485" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:12:11.485" starttime="20190402 11:12:11.484"></status>
</kw>
<status status="FAIL" endtime="20190402 11:12:11.485" starttime="20190402 11:12:09.866"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:12:21.486" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:12:21.486" starttime="20190402 11:12:21.486"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:12:21.487" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:12:21.487" starttime="20190402 11:12:21.486"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:12:21.487" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:12:21.487" starttime="20190402 11:12:21.487"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:12:21.488" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:12:23.118" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:12:23.119" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:12:23.119" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:12:23.119" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:12:23.119" starttime="20190402 11:12:21.487"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:12:23.121" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:23.121" starttime="20190402 11:12:23.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:12:23.122" starttime="20190402 11:12:23.121"></status>
</kw>
<msg timestamp="20190402 11:12:23.122" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:23.122" starttime="20190402 11:12:21.487"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:12:23.123" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:12:23.123" starttime="20190402 11:12:23.122"></status>
</kw>
<msg timestamp="20190402 11:12:23.124" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:12:23.124" starttime="20190402 11:12:21.486"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:12:23.125" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:12:23.125" starttime="20190402 11:12:23.124"></status>
</kw>
<status status="FAIL" endtime="20190402 11:12:23.125" starttime="20190402 11:12:21.485"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:12:33.129" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:12:33.129" starttime="20190402 11:12:33.128"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:12:33.130" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:12:33.130" starttime="20190402 11:12:33.129"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:12:33.133" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:12:33.133" starttime="20190402 11:12:33.132"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:12:33.134" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:12:34.717" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:12:34.717" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:12:34.717" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:12:34.717" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:12:34.717" starttime="20190402 11:12:33.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:12:34.719" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:34.719" starttime="20190402 11:12:34.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:12:34.719" starttime="20190402 11:12:34.719"></status>
</kw>
<msg timestamp="20190402 11:12:34.720" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:34.720" starttime="20190402 11:12:33.131"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:12:34.720" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:12:34.720" starttime="20190402 11:12:34.720"></status>
</kw>
<msg timestamp="20190402 11:12:34.721" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:12:34.721" starttime="20190402 11:12:33.127"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:12:34.722" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:12:34.722" starttime="20190402 11:12:34.721"></status>
</kw>
<status status="FAIL" endtime="20190402 11:12:34.723" starttime="20190402 11:12:33.126"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:12:44.726" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:12:44.726" starttime="20190402 11:12:44.726"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:12:44.727" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:12:44.727" starttime="20190402 11:12:44.727"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:12:44.729" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:12:44.729" starttime="20190402 11:12:44.729"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:12:44.731" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:12:46.363" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:12:46.363" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:12:46.364" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:12:46.364" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:12:46.364" starttime="20190402 11:12:44.730"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:12:46.366" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:46.366" starttime="20190402 11:12:46.364"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:12:46.367" starttime="20190402 11:12:46.366"></status>
</kw>
<msg timestamp="20190402 11:12:46.368" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:46.368" starttime="20190402 11:12:44.728"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:12:46.370" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:12:46.370" starttime="20190402 11:12:46.369"></status>
</kw>
<msg timestamp="20190402 11:12:46.370" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:12:46.370" starttime="20190402 11:12:44.725"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:12:46.372" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:12:46.372" starttime="20190402 11:12:46.371"></status>
</kw>
<status status="FAIL" endtime="20190402 11:12:46.372" starttime="20190402 11:12:44.723"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:12:56.374" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:12:56.374" starttime="20190402 11:12:56.373"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:12:56.374" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:12:56.374" starttime="20190402 11:12:56.374"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:12:56.375" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:12:56.375" starttime="20190402 11:12:56.375"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:12:56.375" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:12:58.006" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:12:58.007" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:12:58.007" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:12:58.007" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:12:58.007" starttime="20190402 11:12:56.375"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:12:58.009" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:58.009" starttime="20190402 11:12:58.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:12:58.010" starttime="20190402 11:12:58.009"></status>
</kw>
<msg timestamp="20190402 11:12:58.010" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:12:58.010" starttime="20190402 11:12:56.374"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:12:58.011" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:12:58.011" starttime="20190402 11:12:58.010"></status>
</kw>
<msg timestamp="20190402 11:12:58.011" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:12:58.011" starttime="20190402 11:12:56.373"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:12:58.012" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:12:58.012" starttime="20190402 11:12:58.011"></status>
</kw>
<status status="FAIL" endtime="20190402 11:12:58.012" starttime="20190402 11:12:56.373"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:13:08.014" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:13:08.014" starttime="20190402 11:13:08.014"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:13:08.015" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:13:08.015" starttime="20190402 11:13:08.015"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:13:08.016" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:13:08.016" starttime="20190402 11:13:08.016"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:13:08.016" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:13:09.598" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:13:09.599" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:13:09.599" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:13:09.599" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:13:09.599" starttime="20190402 11:13:08.016"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:13:09.601" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:13:09.601" starttime="20190402 11:13:09.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:13:09.602" starttime="20190402 11:13:09.601"></status>
</kw>
<msg timestamp="20190402 11:13:09.603" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:13:09.603" starttime="20190402 11:13:08.015"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:13:09.604" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:13:09.604" starttime="20190402 11:13:09.603"></status>
</kw>
<msg timestamp="20190402 11:13:09.604" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:13:09.604" starttime="20190402 11:13:08.013"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:13:09.606" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:13:09.606" starttime="20190402 11:13:09.605"></status>
</kw>
<status status="FAIL" endtime="20190402 11:13:09.606" starttime="20190402 11:13:08.012"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:13:19.610" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:13:19.610" starttime="20190402 11:13:19.609"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:13:19.611" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:13:19.611" starttime="20190402 11:13:19.610"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:13:19.613" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:13:19.613" starttime="20190402 11:13:19.613"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:13:19.615" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:13:21.197" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:13:21.198" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:13:21.198" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:13:21.198" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:13:21.198" starttime="20190402 11:13:19.614"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:13:21.201" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:13:21.201" starttime="20190402 11:13:21.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:13:21.202" starttime="20190402 11:13:21.201"></status>
</kw>
<msg timestamp="20190402 11:13:21.203" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:13:21.203" starttime="20190402 11:13:19.612"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:13:21.204" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:13:21.204" starttime="20190402 11:13:21.203"></status>
</kw>
<msg timestamp="20190402 11:13:21.204" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:13:21.204" starttime="20190402 11:13:19.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:13:21.206" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:13:21.206" starttime="20190402 11:13:21.205"></status>
</kw>
<status status="FAIL" endtime="20190402 11:13:21.206" starttime="20190402 11:13:19.607"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:13:31.209" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:13:31.209" starttime="20190402 11:13:31.208"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:13:31.210" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:13:31.210" starttime="20190402 11:13:31.209"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:13:31.210" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:13:31.211" starttime="20190402 11:13:31.210"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:13:31.211" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:13:32.792" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:13:32.792" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:13:32.792" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:13:32.792" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:13:32.792" starttime="20190402 11:13:31.211"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:13:32.794" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:13:32.794" starttime="20190402 11:13:32.793"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:13:32.795" starttime="20190402 11:13:32.795"></status>
</kw>
<msg timestamp="20190402 11:13:32.796" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:13:32.796" starttime="20190402 11:13:31.210"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:13:32.797" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:13:32.797" starttime="20190402 11:13:32.796"></status>
</kw>
<msg timestamp="20190402 11:13:32.797" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:13:32.798" starttime="20190402 11:13:31.207"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:13:32.799" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:13:32.799" starttime="20190402 11:13:32.798"></status>
</kw>
<status status="FAIL" endtime="20190402 11:13:32.799" starttime="20190402 11:13:31.207"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:13:42.803" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:13:42.803" starttime="20190402 11:13:42.802"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:13:42.804" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:13:42.804" starttime="20190402 11:13:42.803"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:13:42.806" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:13:42.806" starttime="20190402 11:13:42.805"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:13:42.807" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:13:44.439" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:13:44.440" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:13:44.440" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:13:44.440" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:13:44.440" starttime="20190402 11:13:42.806"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:13:44.442" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:13:44.442" starttime="20190402 11:13:44.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:13:44.443" starttime="20190402 11:13:44.442"></status>
</kw>
<msg timestamp="20190402 11:13:44.443" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:13:44.443" starttime="20190402 11:13:42.804"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:13:44.444" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:13:44.444" starttime="20190402 11:13:44.443"></status>
</kw>
<msg timestamp="20190402 11:13:44.444" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:13:44.444" starttime="20190402 11:13:42.801"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:13:44.445" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:13:44.445" starttime="20190402 11:13:44.445"></status>
</kw>
<status status="FAIL" endtime="20190402 11:13:44.445" starttime="20190402 11:13:42.800"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:13:54.448" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:13:54.448" starttime="20190402 11:13:54.447"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:13:54.448" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:13:54.448" starttime="20190402 11:13:54.448"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:13:54.450" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:13:54.450" starttime="20190402 11:13:54.449"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:13:54.451" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:13:56.082" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:13:56.083" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:13:56.083" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:13:56.083" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:13:56.083" starttime="20190402 11:13:54.450"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:13:56.083" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:13:56.083" starttime="20190402 11:13:56.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:13:56.084" starttime="20190402 11:13:56.084"></status>
</kw>
<msg timestamp="20190402 11:13:56.084" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:13:56.084" starttime="20190402 11:13:54.448"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:13:56.084" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:13:56.084" starttime="20190402 11:13:56.084"></status>
</kw>
<msg timestamp="20190402 11:13:56.085" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:13:56.085" starttime="20190402 11:13:54.446"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:13:56.085" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:13:56.085" starttime="20190402 11:13:56.085"></status>
</kw>
<status status="FAIL" endtime="20190402 11:13:56.085" starttime="20190402 11:13:54.446"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:14:06.087" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:14:06.087" starttime="20190402 11:14:06.087"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:14:06.088" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:14:06.088" starttime="20190402 11:14:06.087"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:14:06.089" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:14:06.089" starttime="20190402 11:14:06.088"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:14:06.089" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:14:07.770" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:14:07.770" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:14:07.771" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:14:07.771" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:14:07.771" starttime="20190402 11:14:06.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:14:07.772" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:07.772" starttime="20190402 11:14:07.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:14:07.772" starttime="20190402 11:14:07.772"></status>
</kw>
<msg timestamp="20190402 11:14:07.772" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:07.772" starttime="20190402 11:14:06.088"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:14:07.773" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:14:07.773" starttime="20190402 11:14:07.773"></status>
</kw>
<msg timestamp="20190402 11:14:07.773" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:14:07.773" starttime="20190402 11:14:06.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:14:07.774" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:14:07.774" starttime="20190402 11:14:07.774"></status>
</kw>
<status status="FAIL" endtime="20190402 11:14:07.774" starttime="20190402 11:14:06.086"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:14:17.779" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:14:17.779" starttime="20190402 11:14:17.778"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:14:17.781" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:14:17.781" starttime="20190402 11:14:17.779"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:14:17.783" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:14:17.783" starttime="20190402 11:14:17.782"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:14:17.784" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:14:19.467" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:14:19.467" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:14:19.467" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:14:19.467" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:14:19.467" starttime="20190402 11:14:17.783"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:14:19.468" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:19.468" starttime="20190402 11:14:19.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:14:19.469" starttime="20190402 11:14:19.468"></status>
</kw>
<msg timestamp="20190402 11:14:19.469" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:19.469" starttime="20190402 11:14:17.781"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:14:19.469" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:14:19.469" starttime="20190402 11:14:19.469"></status>
</kw>
<msg timestamp="20190402 11:14:19.470" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:14:19.470" starttime="20190402 11:14:17.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:14:19.470" starttime="20190402 11:14:19.470"></status>
</kw>
<status status="PASS" endtime="20190402 11:14:19.470" starttime="20190402 11:14:17.775"></status>
</kw>
<status status="PASS" endtime="20190402 11:14:19.470" starttime="20190402 11:12:09.865"></status>
</kw>
<status status="PASS" endtime="20190402 11:14:19.471" starttime="20190402 11:12:06.488"></status>
</kw>
<kw name="Reboot Instance" library="OpenStack">
<doc>Reboot an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server reboot ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:14:19.472" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:14:19.472" starttime="20190402 11:14:19.472"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:14:19.472" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server reboot vm-cirros-2'.</msg>
<msg timestamp="20190402 11:14:21.136" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:14:21.136" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:14:21.136" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:14:21.137" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:14:21.137" starttime="20190402 11:14:19.472"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:14:21.137" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:21.137" starttime="20190402 11:14:21.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:14:21.138" starttime="20190402 11:14:21.137"></status>
</kw>
<status status="PASS" endtime="20190402 11:14:21.138" starttime="20190402 11:14:19.471"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBOOT</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBOOT</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:14:21.139" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:14:21.139" starttime="20190402 11:14:21.139"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:14:21.140" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:14:21.140" starttime="20190402 11:14:21.139"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:14:21.140" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:14:21.140" starttime="20190402 11:14:21.140"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:14:21.141" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:14:22.853" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:14:22.853" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:14:22.853" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:14:22.853" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:14:22.853" starttime="20190402 11:14:21.140"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:14:22.854" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:22.854" starttime="20190402 11:14:22.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:14:22.854" starttime="20190402 11:14:22.854"></status>
</kw>
<msg timestamp="20190402 11:14:22.854" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:22.854" starttime="20190402 11:14:21.140"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:14:22.855" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:14:22.855" starttime="20190402 11:14:22.855"></status>
</kw>
<msg timestamp="20190402 11:14:22.855" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:14:22.855" starttime="20190402 11:14:21.139"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:14:22.856" starttime="20190402 11:14:22.855"></status>
</kw>
<status status="PASS" endtime="20190402 11:14:22.856" starttime="20190402 11:14:21.138"></status>
</kw>
<status status="PASS" endtime="20190402 11:14:22.856" starttime="20190402 11:14:21.138"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:14:22.857" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:14:22.857" starttime="20190402 11:14:22.857"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:14:22.858" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:14:22.858" starttime="20190402 11:14:22.857"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:14:22.859" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:14:22.859" starttime="20190402 11:14:22.858"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:14:22.859" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:14:24.454" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:14:24.455" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:14:24.455" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:14:24.455" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:14:24.455" starttime="20190402 11:14:22.859"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:14:24.456" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:24.456" starttime="20190402 11:14:24.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:14:24.457" starttime="20190402 11:14:24.456"></status>
</kw>
<msg timestamp="20190402 11:14:24.457" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:24.457" starttime="20190402 11:14:22.858"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:14:24.457" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:14:24.457" starttime="20190402 11:14:24.457"></status>
</kw>
<msg timestamp="20190402 11:14:24.458" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:14:24.458" starttime="20190402 11:14:22.857"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:14:24.458" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:14:24.459" starttime="20190402 11:14:24.458"></status>
</kw>
<status status="FAIL" endtime="20190402 11:14:24.459" starttime="20190402 11:14:22.856"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:14:34.460" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:14:34.460" starttime="20190402 11:14:34.460"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:14:34.461" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:14:34.461" starttime="20190402 11:14:34.461"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:14:34.462" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:14:34.462" starttime="20190402 11:14:34.461"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:14:34.462" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:14:36.094" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:14:36.094" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:14:36.094" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:14:36.094" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:14:36.094" starttime="20190402 11:14:34.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:14:36.095" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:36.095" starttime="20190402 11:14:36.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:14:36.095" starttime="20190402 11:14:36.095"></status>
</kw>
<msg timestamp="20190402 11:14:36.096" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:36.096" starttime="20190402 11:14:34.461"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:14:36.096" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:14:36.096" starttime="20190402 11:14:36.096"></status>
</kw>
<msg timestamp="20190402 11:14:36.096" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:14:36.096" starttime="20190402 11:14:34.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:14:36.097" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:14:36.097" starttime="20190402 11:14:36.096"></status>
</kw>
<status status="FAIL" endtime="20190402 11:14:36.097" starttime="20190402 11:14:34.459"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:14:46.098" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:14:46.098" starttime="20190402 11:14:46.098"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:14:46.099" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:14:46.099" starttime="20190402 11:14:46.098"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:14:46.100" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:14:46.100" starttime="20190402 11:14:46.099"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:14:46.100" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:14:47.682" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:14:47.682" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:14:47.682" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:14:47.683" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:14:47.683" starttime="20190402 11:14:46.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:14:47.683" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:47.683" starttime="20190402 11:14:47.683"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:14:47.684" starttime="20190402 11:14:47.683"></status>
</kw>
<msg timestamp="20190402 11:14:47.684" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:47.684" starttime="20190402 11:14:46.099"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:14:47.684" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:14:47.684" starttime="20190402 11:14:47.684"></status>
</kw>
<msg timestamp="20190402 11:14:47.684" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:14:47.684" starttime="20190402 11:14:46.098"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:14:47.685" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:14:47.685" starttime="20190402 11:14:47.685"></status>
</kw>
<status status="FAIL" endtime="20190402 11:14:47.685" starttime="20190402 11:14:46.097"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:14:57.688" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:14:57.688" starttime="20190402 11:14:57.688"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:14:57.689" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:14:57.690" starttime="20190402 11:14:57.689"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:14:57.691" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:14:57.692" starttime="20190402 11:14:57.691"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:14:57.693" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:14:59.275" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:14:59.275" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:14:59.275" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:14:59.275" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:14:59.275" starttime="20190402 11:14:57.692"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:14:59.276" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:59.276" starttime="20190402 11:14:59.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:14:59.277" starttime="20190402 11:14:59.276"></status>
</kw>
<msg timestamp="20190402 11:14:59.277" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:14:59.277" starttime="20190402 11:14:57.690"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:14:59.277" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:14:59.277" starttime="20190402 11:14:59.277"></status>
</kw>
<msg timestamp="20190402 11:14:59.277" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:14:59.277" starttime="20190402 11:14:57.687"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:14:59.278" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:14:59.278" starttime="20190402 11:14:59.278"></status>
</kw>
<status status="FAIL" endtime="20190402 11:14:59.278" starttime="20190402 11:14:57.686"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:15:09.280" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:15:09.280" starttime="20190402 11:15:09.279"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:15:09.280" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:15:09.280" starttime="20190402 11:15:09.280"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:15:09.281" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:15:09.281" starttime="20190402 11:15:09.281"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:15:09.281" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:15:10.912" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:15:10.913" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:15:10.913" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:15:10.913" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:15:10.913" starttime="20190402 11:15:09.281"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:15:10.915" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:15:10.915" starttime="20190402 11:15:10.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:15:10.916" starttime="20190402 11:15:10.915"></status>
</kw>
<msg timestamp="20190402 11:15:10.916" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:15:10.916" starttime="20190402 11:15:09.280"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:15:10.917" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:15:10.917" starttime="20190402 11:15:10.917"></status>
</kw>
<msg timestamp="20190402 11:15:10.918" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:15:10.918" starttime="20190402 11:15:09.279"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:15:10.919" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:15:10.919" starttime="20190402 11:15:10.918"></status>
</kw>
<status status="FAIL" endtime="20190402 11:15:10.920" starttime="20190402 11:15:09.279"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:15:20.922" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:15:20.922" starttime="20190402 11:15:20.921"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:15:20.923" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:15:20.923" starttime="20190402 11:15:20.922"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:15:20.924" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:15:20.924" starttime="20190402 11:15:20.924"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:15:20.925" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:15:22.507" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:15:22.507" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:15:22.507" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:15:22.507" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:15:22.507" starttime="20190402 11:15:20.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:15:22.508" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:15:22.508" starttime="20190402 11:15:22.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:15:22.508" starttime="20190402 11:15:22.508"></status>
</kw>
<msg timestamp="20190402 11:15:22.508" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:15:22.508" starttime="20190402 11:15:20.923"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:15:22.509" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:15:22.509" starttime="20190402 11:15:22.509"></status>
</kw>
<msg timestamp="20190402 11:15:22.509" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:15:22.509" starttime="20190402 11:15:20.921"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:15:22.510" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:15:22.510" starttime="20190402 11:15:22.509"></status>
</kw>
<status status="FAIL" endtime="20190402 11:15:22.510" starttime="20190402 11:15:20.920"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:15:32.511" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:15:32.511" starttime="20190402 11:15:32.511"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:15:32.512" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:15:32.512" starttime="20190402 11:15:32.512"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:15:32.513" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:15:32.513" starttime="20190402 11:15:32.513"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:15:32.513" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:15:34.398" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:15:34.398" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:15:34.398" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:15:34.398" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:15:34.398" starttime="20190402 11:15:32.513"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:15:34.399" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:15:34.399" starttime="20190402 11:15:34.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:15:34.399" starttime="20190402 11:15:34.399"></status>
</kw>
<msg timestamp="20190402 11:15:34.399" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:15:34.399" starttime="20190402 11:15:32.512"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:15:34.399" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:15:34.400" starttime="20190402 11:15:34.399"></status>
</kw>
<msg timestamp="20190402 11:15:34.400" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:15:34.400" starttime="20190402 11:15:32.511"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:15:34.400" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:15:34.400" starttime="20190402 11:15:34.400"></status>
</kw>
<status status="FAIL" endtime="20190402 11:15:34.400" starttime="20190402 11:15:32.510"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:15:44.404" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:15:44.404" starttime="20190402 11:15:44.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:15:44.405" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:15:44.405" starttime="20190402 11:15:44.404"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:15:44.407" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:15:44.407" starttime="20190402 11:15:44.406"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:15:44.408" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:15:46.040" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:15:46.040" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:15:46.040" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:15:46.041" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:15:46.041" starttime="20190402 11:15:44.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:15:46.041" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:15:46.041" starttime="20190402 11:15:46.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:15:46.042" starttime="20190402 11:15:46.042"></status>
</kw>
<msg timestamp="20190402 11:15:46.042" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:15:46.042" starttime="20190402 11:15:44.405"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:15:46.042" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:15:46.042" starttime="20190402 11:15:46.042"></status>
</kw>
<msg timestamp="20190402 11:15:46.043" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:15:46.043" starttime="20190402 11:15:44.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:15:46.043" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:15:46.043" starttime="20190402 11:15:46.043"></status>
</kw>
<status status="FAIL" endtime="20190402 11:15:46.043" starttime="20190402 11:15:44.401"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:15:56.045" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:15:56.045" starttime="20190402 11:15:56.045"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:15:56.046" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:15:56.046" starttime="20190402 11:15:56.045"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:15:56.046" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:15:56.046" starttime="20190402 11:15:56.046"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:15:56.047" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:15:57.630" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:15:57.630" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:15:57.630" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:15:57.630" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:15:57.630" starttime="20190402 11:15:56.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:15:57.632" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:15:57.632" starttime="20190402 11:15:57.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:15:57.633" starttime="20190402 11:15:57.632"></status>
</kw>
<msg timestamp="20190402 11:15:57.633" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:15:57.633" starttime="20190402 11:15:56.046"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:15:57.634" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:15:57.634" starttime="20190402 11:15:57.634"></status>
</kw>
<msg timestamp="20190402 11:15:57.635" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:15:57.635" starttime="20190402 11:15:56.045"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:15:57.636" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:15:57.636" starttime="20190402 11:15:57.635"></status>
</kw>
<status status="FAIL" endtime="20190402 11:15:57.637" starttime="20190402 11:15:56.044"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:16:07.641" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:16:07.642" starttime="20190402 11:16:07.640"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:16:07.643" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:16:07.643" starttime="20190402 11:16:07.642"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:16:07.645" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:16:07.645" starttime="20190402 11:16:07.645"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:16:07.646" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:16:09.228" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:16:09.228" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:16:09.229" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:16:09.229" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:16:09.229" starttime="20190402 11:16:07.646"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:16:09.229" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:16:09.229" starttime="20190402 11:16:09.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:16:09.230" starttime="20190402 11:16:09.229"></status>
</kw>
<msg timestamp="20190402 11:16:09.230" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:16:09.230" starttime="20190402 11:16:07.644"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:16:09.230" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:16:09.230" starttime="20190402 11:16:09.230"></status>
</kw>
<msg timestamp="20190402 11:16:09.230" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:16:09.230" starttime="20190402 11:16:07.639"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:16:09.231" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:16:09.231" starttime="20190402 11:16:09.231"></status>
</kw>
<status status="FAIL" endtime="20190402 11:16:09.231" starttime="20190402 11:16:07.637"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:16:19.234" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:16:19.234" starttime="20190402 11:16:19.233"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:16:19.235" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:16:19.235" starttime="20190402 11:16:19.235"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:16:19.237" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:16:19.237" starttime="20190402 11:16:19.237"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:16:19.238" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:16:20.820" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:16:20.820" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:16:20.821" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:16:20.821" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:16:20.821" starttime="20190402 11:16:19.237"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:16:20.822" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:16:20.822" starttime="20190402 11:16:20.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:16:20.822" starttime="20190402 11:16:20.822"></status>
</kw>
<msg timestamp="20190402 11:16:20.823" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:16:20.823" starttime="20190402 11:16:19.236"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:16:20.823" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:16:20.823" starttime="20190402 11:16:20.823"></status>
</kw>
<msg timestamp="20190402 11:16:20.824" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:16:20.824" starttime="20190402 11:16:19.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:16:20.824" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:16:20.824" starttime="20190402 11:16:20.824"></status>
</kw>
<status status="FAIL" endtime="20190402 11:16:20.824" starttime="20190402 11:16:19.232"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:16:30.826" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:16:30.826" starttime="20190402 11:16:30.826"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:16:30.826" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:16:30.826" starttime="20190402 11:16:30.826"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:16:30.827" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:16:30.827" starttime="20190402 11:16:30.827"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:16:30.828" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:16:32.561" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:16:32.561" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:16:32.561" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:16:32.561" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:16:32.561" starttime="20190402 11:16:30.827"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:16:32.562" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:16:32.562" starttime="20190402 11:16:32.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:16:32.562" starttime="20190402 11:16:32.562"></status>
</kw>
<msg timestamp="20190402 11:16:32.562" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:16:32.563" starttime="20190402 11:16:30.826"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:16:32.563" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:16:32.563" starttime="20190402 11:16:32.563"></status>
</kw>
<msg timestamp="20190402 11:16:32.563" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:16:32.563" starttime="20190402 11:16:30.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:16:32.564" starttime="20190402 11:16:32.563"></status>
</kw>
<status status="PASS" endtime="20190402 11:16:32.564" starttime="20190402 11:16:30.825"></status>
</kw>
<status status="PASS" endtime="20190402 11:16:32.564" starttime="20190402 11:14:22.856"></status>
</kw>
<status status="PASS" endtime="20190402 11:16:32.564" starttime="20190402 11:14:19.471"></status>
</kw>
<doc>Reboot Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:16:32.564" critical="yes" starttime="20190402 11:12:06.487"></status>
</test>
<test id="s1-s1-s2-t12" name="Rebuild Instances">
<kw name="Rebuild Instance From Volume" library="OpenStack">
<doc>Rebuild an instance from volume</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server rebuild --image ${image} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:16:32.565" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:16:32.566" starttime="20190402 11:16:32.565"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:16:32.566" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server rebuild --image cirros vm-cirros-1'.</msg>
<msg timestamp="20190402 11:16:34.750" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:16:34.750" level="INFO">${stdout} = +-------------------+----------------------------------------------------------+
| Field             | Value                                                    |
+-------------------+-----------------...</msg>
<msg timestamp="20190402 11:16:34.750" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:16:34.750" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:16:34.750" starttime="20190402 11:16:32.566"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:16:34.751" level="INFO">${res} = {u'stdout': u'+-------------------+----------------------------------------------------------+\n| Field             | Value                                                    |\n+-------------------+-...</msg>
<status status="PASS" endtime="20190402 11:16:34.751" starttime="20190402 11:16:34.750"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:16:34.751" starttime="20190402 11:16:34.751"></status>
</kw>
<status status="PASS" endtime="20190402 11:16:34.751" starttime="20190402 11:16:32.565"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBUILD</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBUILD</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:16:34.753" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:16:34.753" starttime="20190402 11:16:34.752"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:16:34.753" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:16:34.753" starttime="20190402 11:16:34.753"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:16:34.754" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:16:34.754" starttime="20190402 11:16:34.754"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:16:34.754" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:16:36.536" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:16:36.537" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:16:36.537" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:16:36.537" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:16:36.538" starttime="20190402 11:16:34.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:16:36.540" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:16:36.540" starttime="20190402 11:16:36.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:16:36.541" starttime="20190402 11:16:36.540"></status>
</kw>
<msg timestamp="20190402 11:16:36.541" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:16:36.542" starttime="20190402 11:16:34.753"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:16:36.543" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:16:36.543" starttime="20190402 11:16:36.542"></status>
</kw>
<msg timestamp="20190402 11:16:36.543" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:16:36.544" starttime="20190402 11:16:34.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:16:36.545" starttime="20190402 11:16:36.544"></status>
</kw>
<status status="PASS" endtime="20190402 11:16:36.545" starttime="20190402 11:16:34.752"></status>
</kw>
<status status="PASS" endtime="20190402 11:16:36.546" starttime="20190402 11:16:34.751"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:16:36.551" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:16:36.551" starttime="20190402 11:16:36.551"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:16:36.552" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:16:36.553" starttime="20190402 11:16:36.552"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:16:36.554" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:16:36.554" starttime="20190402 11:16:36.554"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:16:36.555" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:16:38.240" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:16:38.241" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:16:38.241" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:16:38.241" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:16:38.241" starttime="20190402 11:16:36.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:16:38.243" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:16:38.243" starttime="20190402 11:16:38.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:16:38.244" starttime="20190402 11:16:38.243"></status>
</kw>
<msg timestamp="20190402 11:16:38.244" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:16:38.244" starttime="20190402 11:16:36.553"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:16:38.245" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:16:38.245" starttime="20190402 11:16:38.245"></status>
</kw>
<msg timestamp="20190402 11:16:38.246" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:16:38.246" starttime="20190402 11:16:36.548"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:16:38.247" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:16:38.247" starttime="20190402 11:16:38.246"></status>
</kw>
<status status="FAIL" endtime="20190402 11:16:38.248" starttime="20190402 11:16:36.547"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:16:48.253" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:16:48.253" starttime="20190402 11:16:48.252"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:16:48.255" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:16:48.255" starttime="20190402 11:16:48.254"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:16:48.257" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:16:48.257" starttime="20190402 11:16:48.256"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:16:48.258" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:16:49.943" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:16:49.944" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:16:49.944" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:16:49.944" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:16:49.944" starttime="20190402 11:16:48.257"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:16:49.946" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:16:49.946" starttime="20190402 11:16:49.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:16:49.947" starttime="20190402 11:16:49.947"></status>
</kw>
<msg timestamp="20190402 11:16:49.948" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:16:49.948" starttime="20190402 11:16:48.255"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:16:49.949" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:16:49.949" starttime="20190402 11:16:49.948"></status>
</kw>
<msg timestamp="20190402 11:16:49.949" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:16:49.949" starttime="20190402 11:16:48.251"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:16:49.951" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:16:49.951" starttime="20190402 11:16:49.950"></status>
</kw>
<status status="FAIL" endtime="20190402 11:16:49.951" starttime="20190402 11:16:48.250"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:16:59.955" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:16:59.955" starttime="20190402 11:16:59.954"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:16:59.958" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:16:59.958" starttime="20190402 11:16:59.955"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:16:59.959" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:16:59.960" starttime="20190402 11:16:59.959"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:16:59.960" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:17:01.592" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:17:01.593" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:17:01.593" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:17:01.593" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:17:01.593" starttime="20190402 11:16:59.960"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:17:01.593" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:17:01.593" starttime="20190402 11:17:01.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:17:01.594" starttime="20190402 11:17:01.594"></status>
</kw>
<msg timestamp="20190402 11:17:01.594" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:17:01.594" starttime="20190402 11:16:59.958"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:17:01.594" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:17:01.594" starttime="20190402 11:17:01.594"></status>
</kw>
<msg timestamp="20190402 11:17:01.595" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:17:01.595" starttime="20190402 11:16:59.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:17:01.595" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:17:01.595" starttime="20190402 11:17:01.595"></status>
</kw>
<status status="FAIL" endtime="20190402 11:17:01.595" starttime="20190402 11:16:59.952"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:17:11.598" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:17:11.599" starttime="20190402 11:17:11.598"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:17:11.599" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:17:11.600" starttime="20190402 11:17:11.599"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:17:11.601" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:17:11.601" starttime="20190402 11:17:11.601"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:17:11.603" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:17:13.184" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:17:13.185" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:17:13.185" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:17:13.185" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:17:13.185" starttime="20190402 11:17:11.602"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:17:13.187" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:17:13.187" starttime="20190402 11:17:13.185"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:17:13.188" starttime="20190402 11:17:13.187"></status>
</kw>
<msg timestamp="20190402 11:17:13.189" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:17:13.189" starttime="20190402 11:17:11.600"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:17:13.190" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:17:13.190" starttime="20190402 11:17:13.189"></status>
</kw>
<msg timestamp="20190402 11:17:13.191" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:17:13.191" starttime="20190402 11:17:11.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:17:13.192" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:17:13.192" starttime="20190402 11:17:13.191"></status>
</kw>
<status status="FAIL" endtime="20190402 11:17:13.192" starttime="20190402 11:17:11.596"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:17:23.195" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:17:23.195" starttime="20190402 11:17:23.194"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:17:23.195" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:17:23.195" starttime="20190402 11:17:23.195"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:17:23.196" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:17:23.196" starttime="20190402 11:17:23.196"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:17:23.197" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:17:24.877" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:17:24.878" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:17:24.878" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:17:24.878" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:17:24.878" starttime="20190402 11:17:23.197"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:17:24.878" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:17:24.878" starttime="20190402 11:17:24.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:17:24.879" starttime="20190402 11:17:24.879"></status>
</kw>
<msg timestamp="20190402 11:17:24.879" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:17:24.879" starttime="20190402 11:17:23.195"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:17:24.879" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:17:24.879" starttime="20190402 11:17:24.879"></status>
</kw>
<msg timestamp="20190402 11:17:24.880" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:17:24.880" starttime="20190402 11:17:23.194"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:17:24.880" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:17:24.880" starttime="20190402 11:17:24.880"></status>
</kw>
<status status="FAIL" endtime="20190402 11:17:24.880" starttime="20190402 11:17:23.193"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:17:34.884" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:17:34.884" starttime="20190402 11:17:34.883"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:17:34.885" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:17:34.885" starttime="20190402 11:17:34.884"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:17:34.888" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:17:34.888" starttime="20190402 11:17:34.887"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:17:34.889" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:17:36.622" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:17:36.623" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:17:36.623" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:17:36.623" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:17:36.623" starttime="20190402 11:17:34.888"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:17:36.625" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:17:36.625" starttime="20190402 11:17:36.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:17:36.626" starttime="20190402 11:17:36.625"></status>
</kw>
<msg timestamp="20190402 11:17:36.626" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:17:36.626" starttime="20190402 11:17:34.886"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:17:36.627" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:17:36.627" starttime="20190402 11:17:36.627"></status>
</kw>
<msg timestamp="20190402 11:17:36.628" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:17:36.628" starttime="20190402 11:17:34.882"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:17:36.629" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:17:36.629" starttime="20190402 11:17:36.628"></status>
</kw>
<status status="FAIL" endtime="20190402 11:17:36.629" starttime="20190402 11:17:34.881"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:17:46.632" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:17:46.632" starttime="20190402 11:17:46.632"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:17:46.633" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:17:46.633" starttime="20190402 11:17:46.632"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:17:46.635" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:17:46.635" starttime="20190402 11:17:46.635"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:17:46.636" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:17:48.417" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:17:48.418" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:17:48.418" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:17:48.418" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:17:48.419" starttime="20190402 11:17:46.635"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:17:48.422" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:17:48.422" starttime="20190402 11:17:48.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:17:48.424" starttime="20190402 11:17:48.422"></status>
</kw>
<msg timestamp="20190402 11:17:48.424" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:17:48.424" starttime="20190402 11:17:46.634"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:17:48.425" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:17:48.426" starttime="20190402 11:17:48.425"></status>
</kw>
<msg timestamp="20190402 11:17:48.426" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:17:48.426" starttime="20190402 11:17:46.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:17:48.427" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:17:48.428" starttime="20190402 11:17:48.427"></status>
</kw>
<status status="FAIL" endtime="20190402 11:17:48.428" starttime="20190402 11:17:46.630"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:17:58.432" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:17:58.432" starttime="20190402 11:17:58.431"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:17:58.433" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:17:58.433" starttime="20190402 11:17:58.432"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:17:58.435" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:17:58.435" starttime="20190402 11:17:58.434"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:17:58.436" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:18:00.071" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:18:00.071" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:18:00.071" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:18:00.071" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:18:00.071" starttime="20190402 11:17:58.435"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:18:00.072" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:18:00.072" starttime="20190402 11:18:00.071"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:18:00.072" starttime="20190402 11:18:00.072"></status>
</kw>
<msg timestamp="20190402 11:18:00.072" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:18:00.072" starttime="20190402 11:17:58.433"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:18:00.073" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:18:00.073" starttime="20190402 11:18:00.073"></status>
</kw>
<msg timestamp="20190402 11:18:00.073" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:18:00.073" starttime="20190402 11:17:58.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:18:00.073" starttime="20190402 11:18:00.073"></status>
</kw>
<status status="PASS" endtime="20190402 11:18:00.074" starttime="20190402 11:17:58.429"></status>
</kw>
<status status="PASS" endtime="20190402 11:18:00.074" starttime="20190402 11:16:36.546"></status>
</kw>
<status status="PASS" endtime="20190402 11:18:00.074" starttime="20190402 11:16:32.565"></status>
</kw>
<kw name="Rebuild Instance From Volume" library="OpenStack">
<doc>Rebuild an instance from volume</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server rebuild --image ${image} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:18:00.075" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:18:00.075" starttime="20190402 11:18:00.075"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:18:00.075" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server rebuild --image cirros vm-cirros-2'.</msg>
<msg timestamp="20190402 11:18:02.109" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:18:02.109" level="INFO">${stdout} = +-------------------+----------------------------------------------------------+
| Field             | Value                                                    |
+-------------------+-----------------...</msg>
<msg timestamp="20190402 11:18:02.109" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:18:02.110" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:18:02.110" starttime="20190402 11:18:00.075"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:18:02.110" level="INFO">${res} = {u'stdout': u'+-------------------+----------------------------------------------------------+\n| Field             | Value                                                    |\n+-------------------+-...</msg>
<status status="PASS" endtime="20190402 11:18:02.110" starttime="20190402 11:18:02.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:18:02.111" starttime="20190402 11:18:02.110"></status>
</kw>
<status status="PASS" endtime="20190402 11:18:02.111" starttime="20190402 11:18:00.074"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBUILD</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBUILD</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:18:02.112" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:18:02.112" starttime="20190402 11:18:02.112"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:18:02.113" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:18:02.113" starttime="20190402 11:18:02.112"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:18:02.114" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:18:02.114" starttime="20190402 11:18:02.113"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:18:02.114" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:18:03.698" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:18:03.698" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:18:03.698" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:18:03.698" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:18:03.698" starttime="20190402 11:18:02.114"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:18:03.699" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:18:03.699" starttime="20190402 11:18:03.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:18:03.699" starttime="20190402 11:18:03.699"></status>
</kw>
<msg timestamp="20190402 11:18:03.700" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:18:03.700" starttime="20190402 11:18:02.113"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:18:03.700" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:18:03.700" starttime="20190402 11:18:03.700"></status>
</kw>
<msg timestamp="20190402 11:18:03.700" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:18:03.701" starttime="20190402 11:18:02.112"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:18:03.701" starttime="20190402 11:18:03.701"></status>
</kw>
<status status="PASS" endtime="20190402 11:18:03.701" starttime="20190402 11:18:02.111"></status>
</kw>
<status status="PASS" endtime="20190402 11:18:03.701" starttime="20190402 11:18:02.111"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:18:03.703" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:18:03.703" starttime="20190402 11:18:03.703"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:18:03.704" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:18:03.704" starttime="20190402 11:18:03.703"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:18:03.704" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:18:03.704" starttime="20190402 11:18:03.704"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:18:03.705" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:18:05.337" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:18:05.337" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:18:05.337" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:18:05.337" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:18:05.337" starttime="20190402 11:18:03.705"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:18:05.338" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:18:05.338" starttime="20190402 11:18:05.337"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:18:05.338" starttime="20190402 11:18:05.338"></status>
</kw>
<msg timestamp="20190402 11:18:05.338" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:18:05.338" starttime="20190402 11:18:03.704"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:18:05.339" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:18:05.339" starttime="20190402 11:18:05.339"></status>
</kw>
<msg timestamp="20190402 11:18:05.339" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:18:05.339" starttime="20190402 11:18:03.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:18:05.339" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:18:05.340" starttime="20190402 11:18:05.339"></status>
</kw>
<status status="FAIL" endtime="20190402 11:18:05.340" starttime="20190402 11:18:03.702"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:18:15.341" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:18:15.341" starttime="20190402 11:18:15.341"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:18:15.342" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:18:15.342" starttime="20190402 11:18:15.341"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:18:15.342" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:18:15.342" starttime="20190402 11:18:15.342"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:18:15.343" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:18:16.975" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:18:16.976" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:18:16.976" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:18:16.976" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:18:16.976" starttime="20190402 11:18:15.342"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:18:16.978" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:18:16.978" starttime="20190402 11:18:16.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:18:16.979" starttime="20190402 11:18:16.978"></status>
</kw>
<msg timestamp="20190402 11:18:16.980" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:18:16.980" starttime="20190402 11:18:15.342"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:18:16.981" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:18:16.981" starttime="20190402 11:18:16.980"></status>
</kw>
<msg timestamp="20190402 11:18:16.981" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:18:16.981" starttime="20190402 11:18:15.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:18:16.983" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:18:16.983" starttime="20190402 11:18:16.982"></status>
</kw>
<status status="FAIL" endtime="20190402 11:18:16.984" starttime="20190402 11:18:15.340"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:18:26.985" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:18:26.985" starttime="20190402 11:18:26.985"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:18:26.986" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:18:26.986" starttime="20190402 11:18:26.985"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:18:26.986" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:18:26.986" starttime="20190402 11:18:26.986"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:18:26.987" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:18:28.569" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:18:28.569" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:18:28.569" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:18:28.569" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:18:28.569" starttime="20190402 11:18:26.986"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:18:28.570" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:18:28.570" starttime="20190402 11:18:28.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:18:28.570" starttime="20190402 11:18:28.570"></status>
</kw>
<msg timestamp="20190402 11:18:28.571" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:18:28.571" starttime="20190402 11:18:26.986"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:18:28.571" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:18:28.571" starttime="20190402 11:18:28.571"></status>
</kw>
<msg timestamp="20190402 11:18:28.571" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:18:28.571" starttime="20190402 11:18:26.985"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:18:28.572" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:18:28.572" starttime="20190402 11:18:28.571"></status>
</kw>
<status status="FAIL" endtime="20190402 11:18:28.572" starttime="20190402 11:18:26.984"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:18:38.573" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:18:38.573" starttime="20190402 11:18:38.573"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:18:38.574" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:18:38.574" starttime="20190402 11:18:38.573"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:18:38.574" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:18:38.574" starttime="20190402 11:18:38.574"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:18:38.575" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:18:40.212" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:18:40.212" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:18:40.212" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:18:40.212" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:18:40.213" starttime="20190402 11:18:38.575"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:18:40.214" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:18:40.214" starttime="20190402 11:18:40.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:18:40.215" starttime="20190402 11:18:40.214"></status>
</kw>
<msg timestamp="20190402 11:18:40.216" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:18:40.216" starttime="20190402 11:18:38.574"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:18:40.217" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:18:40.218" starttime="20190402 11:18:40.216"></status>
</kw>
<msg timestamp="20190402 11:18:40.218" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:18:40.218" starttime="20190402 11:18:38.573"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:18:40.220" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:18:40.220" starttime="20190402 11:18:40.219"></status>
</kw>
<status status="FAIL" endtime="20190402 11:18:40.221" starttime="20190402 11:18:38.572"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:18:50.225" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:18:50.225" starttime="20190402 11:18:50.224"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:18:50.226" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:18:50.226" starttime="20190402 11:18:50.225"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:18:50.228" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:18:50.228" starttime="20190402 11:18:50.228"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:18:50.230" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:18:51.862" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:18:51.862" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:18:51.863" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:18:51.863" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:18:51.863" starttime="20190402 11:18:50.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:18:51.864" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:18:51.865" starttime="20190402 11:18:51.863"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:18:51.866" starttime="20190402 11:18:51.865"></status>
</kw>
<msg timestamp="20190402 11:18:51.866" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:18:51.866" starttime="20190402 11:18:50.226"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:18:51.867" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:18:51.867" starttime="20190402 11:18:51.867"></status>
</kw>
<msg timestamp="20190402 11:18:51.868" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:18:51.868" starttime="20190402 11:18:50.223"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:18:51.869" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:18:51.869" starttime="20190402 11:18:51.868"></status>
</kw>
<status status="FAIL" endtime="20190402 11:18:51.870" starttime="20190402 11:18:50.222"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:19:01.872" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:19:01.872" starttime="20190402 11:19:01.872"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:19:01.872" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:19:01.872" starttime="20190402 11:19:01.872"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:19:01.873" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:19:01.873" starttime="20190402 11:19:01.873"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:19:01.874" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:19:03.557" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:19:03.557" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:19:03.557" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:19:03.557" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:19:03.558" starttime="20190402 11:19:01.873"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:19:03.559" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:03.559" starttime="20190402 11:19:03.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:19:03.560" starttime="20190402 11:19:03.559"></status>
</kw>
<msg timestamp="20190402 11:19:03.560" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:03.560" starttime="20190402 11:19:01.872"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:19:03.561" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:19:03.561" starttime="20190402 11:19:03.561"></status>
</kw>
<msg timestamp="20190402 11:19:03.562" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:19:03.562" starttime="20190402 11:19:01.871"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:19:03.563" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:19:03.563" starttime="20190402 11:19:03.562"></status>
</kw>
<status status="FAIL" endtime="20190402 11:19:03.564" starttime="20190402 11:19:01.870"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:19:13.568" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:19:13.568" starttime="20190402 11:19:13.567"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:19:13.570" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:19:13.570" starttime="20190402 11:19:13.569"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:19:13.572" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:19:13.572" starttime="20190402 11:19:13.572"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:19:13.573" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:19:15.257" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:19:15.257" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:19:15.257" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:19:15.257" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:19:15.258" starttime="20190402 11:19:13.573"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:19:15.258" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:15.258" starttime="20190402 11:19:15.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:19:15.259" starttime="20190402 11:19:15.258"></status>
</kw>
<msg timestamp="20190402 11:19:15.259" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:15.259" starttime="20190402 11:19:13.570"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:19:15.259" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:19:15.259" starttime="20190402 11:19:15.259"></status>
</kw>
<msg timestamp="20190402 11:19:15.259" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:19:15.259" starttime="20190402 11:19:13.565"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:19:15.260" starttime="20190402 11:19:15.260"></status>
</kw>
<status status="PASS" endtime="20190402 11:19:15.260" starttime="20190402 11:19:13.564"></status>
</kw>
<status status="PASS" endtime="20190402 11:19:15.260" starttime="20190402 11:18:03.702"></status>
</kw>
<status status="PASS" endtime="20190402 11:19:15.260" starttime="20190402 11:18:00.074"></status>
</kw>
<doc>Rebuild Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:19:15.260" critical="yes" starttime="20190402 11:16:32.564"></status>
</test>
<test id="s1-s1-s2-t13" name="Resize Instances">
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${cirros_flavor_ram}</arg>
<arg>${cirros_flavor_vcpus}</arg>
<arg>${cirros_flavor_disk}</arg>
<arg>${cirros_flavor_name_2}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:19:15.262" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190402 11:19:15.262" starttime="20190402 11:19:15.261"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:19:15.262" level="INFO">${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small</msg>
<status status="PASS" endtime="20190402 11:19:15.262" starttime="20190402 11:19:15.262"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:19:15.263" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:19:15.263" starttime="20190402 11:19:15.263"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:19:15.263" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small'.</msg>
<msg timestamp="20190402 11:19:16.702" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:19:16.702" level="INFO">${stdout} = +----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+------------------------------...</msg>
<msg timestamp="20190402 11:19:16.702" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:19:16.703" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:19:16.703" starttime="20190402 11:19:15.263"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:19:16.705" level="INFO">${res} = {u'stdout': u'+----------------------------+--------------------------------------+\n| Field                      | Value                                |\n+----------------------------+--------------...</msg>
<status status="PASS" endtime="20190402 11:19:16.705" starttime="20190402 11:19:16.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:19:16.706" starttime="20190402 11:19:16.705"></status>
</kw>
<status status="PASS" endtime="20190402 11:19:16.706" starttime="20190402 11:19:15.262"></status>
</kw>
<status status="PASS" endtime="20190402 11:19:16.706" starttime="20190402 11:19:15.261"></status>
</kw>
<kw name="Resize Instance" library="OpenStack">
<doc>Resize an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_flavor_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resize --flavor ${flavor} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:19:16.709" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:19:16.709" starttime="20190402 11:19:16.709"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:19:16.711" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resize --flavor f2.small vm-cirros-1'.</msg>
<msg timestamp="20190402 11:19:19.796" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:19:19.796" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:19:19.796" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:19:19.796" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:19:19.796" starttime="20190402 11:19:16.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:19:19.797" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:19.797" starttime="20190402 11:19:19.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:19:19.797" starttime="20190402 11:19:19.797"></status>
</kw>
<status status="PASS" endtime="20190402 11:19:19.797" starttime="20190402 11:19:16.708"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>RESIZE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:19:19.799" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:19:19.799" starttime="20190402 11:19:19.799"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:19:19.800" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:19:19.800" starttime="20190402 11:19:19.799"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:19:19.800" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:19:19.800" starttime="20190402 11:19:19.800"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:19:19.801" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:19:21.563" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:19:21.564" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:19:21.564" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:19:21.564" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:19:21.564" starttime="20190402 11:19:19.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:19:21.565" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:21.565" starttime="20190402 11:19:21.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:19:21.566" starttime="20190402 11:19:21.565"></status>
</kw>
<msg timestamp="20190402 11:19:21.566" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:21.566" starttime="20190402 11:19:19.800"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:19:21.566" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:19:21.567" starttime="20190402 11:19:21.566"></status>
</kw>
<msg timestamp="20190402 11:19:21.567" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:19:21.567" starttime="20190402 11:19:19.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:19:21.567" starttime="20190402 11:19:21.567"></status>
</kw>
<status status="PASS" endtime="20190402 11:19:21.568" starttime="20190402 11:19:19.798"></status>
</kw>
<status status="PASS" endtime="20190402 11:19:21.568" starttime="20190402 11:19:19.797"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:19:21.570" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:19:21.570" starttime="20190402 11:19:21.569"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:19:21.570" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:19:21.571" starttime="20190402 11:19:21.570"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:19:21.572" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:19:21.572" starttime="20190402 11:19:21.571"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:19:21.572" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:19:23.161" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:19:23.161" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:19:23.161" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:19:23.161" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:19:23.161" starttime="20190402 11:19:21.572"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:19:23.162" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:23.162" starttime="20190402 11:19:23.161"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:19:23.162" starttime="20190402 11:19:23.162"></status>
</kw>
<msg timestamp="20190402 11:19:23.163" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:23.163" starttime="20190402 11:19:21.571"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:19:23.163" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:19:23.163" starttime="20190402 11:19:23.163"></status>
</kw>
<msg timestamp="20190402 11:19:23.163" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:19:23.163" starttime="20190402 11:19:21.569"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:19:23.164" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:19:23.164" starttime="20190402 11:19:23.164"></status>
</kw>
<status status="FAIL" endtime="20190402 11:19:23.164" starttime="20190402 11:19:21.568"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:19:33.168" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:19:33.168" starttime="20190402 11:19:33.168"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:19:33.169" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:19:33.170" starttime="20190402 11:19:33.169"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:19:33.173" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:19:33.173" starttime="20190402 11:19:33.172"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:19:33.175" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:19:34.807" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:19:34.808" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:19:34.808" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:19:34.808" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:19:34.808" starttime="20190402 11:19:33.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:19:34.809" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:34.809" starttime="20190402 11:19:34.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:19:34.809" starttime="20190402 11:19:34.809"></status>
</kw>
<msg timestamp="20190402 11:19:34.809" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:34.809" starttime="20190402 11:19:33.170"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:19:34.810" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:19:34.810" starttime="20190402 11:19:34.809"></status>
</kw>
<msg timestamp="20190402 11:19:34.810" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:19:34.810" starttime="20190402 11:19:33.166"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:19:34.810" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:19:34.811" starttime="20190402 11:19:34.810"></status>
</kw>
<status status="FAIL" endtime="20190402 11:19:34.811" starttime="20190402 11:19:33.165"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:19:44.815" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:19:44.815" starttime="20190402 11:19:44.814"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:19:44.816" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:19:44.817" starttime="20190402 11:19:44.815"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:19:44.819" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:19:44.819" starttime="20190402 11:19:44.818"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:19:44.820" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:19:46.455" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:19:46.455" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:19:46.455" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:19:46.455" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:19:46.455" starttime="20190402 11:19:44.819"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:19:46.456" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:46.456" starttime="20190402 11:19:46.456"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:19:46.456" starttime="20190402 11:19:46.456"></status>
</kw>
<msg timestamp="20190402 11:19:46.457" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:46.457" starttime="20190402 11:19:44.817"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:19:46.457" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:19:46.457" starttime="20190402 11:19:46.457"></status>
</kw>
<msg timestamp="20190402 11:19:46.457" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:19:46.457" starttime="20190402 11:19:44.813"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:19:46.458" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:19:46.458" starttime="20190402 11:19:46.457"></status>
</kw>
<status status="FAIL" endtime="20190402 11:19:46.458" starttime="20190402 11:19:44.811"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:19:56.461" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:19:56.461" starttime="20190402 11:19:56.460"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:19:56.462" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:19:56.462" starttime="20190402 11:19:56.462"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:19:56.465" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:19:56.465" starttime="20190402 11:19:56.464"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:19:56.467" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:19:58.201" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:19:58.201" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:19:58.202" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:19:58.202" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:19:58.202" starttime="20190402 11:19:56.466"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:19:58.204" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:58.204" starttime="20190402 11:19:58.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:19:58.205" starttime="20190402 11:19:58.204"></status>
</kw>
<msg timestamp="20190402 11:19:58.205" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:19:58.205" starttime="20190402 11:19:56.463"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:19:58.206" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:19:58.206" starttime="20190402 11:19:58.206"></status>
</kw>
<msg timestamp="20190402 11:19:58.207" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:19:58.207" starttime="20190402 11:19:56.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:19:58.208" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:19:58.208" starttime="20190402 11:19:58.207"></status>
</kw>
<status status="FAIL" endtime="20190402 11:19:58.209" starttime="20190402 11:19:56.459"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:20:08.211" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:20:08.211" starttime="20190402 11:20:08.210"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:20:08.211" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:20:08.211" starttime="20190402 11:20:08.211"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:20:08.212" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:20:08.212" starttime="20190402 11:20:08.212"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:20:08.212" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:20:09.894" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:20:09.894" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:20:09.894" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:20:09.894" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:20:09.894" starttime="20190402 11:20:08.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:20:09.896" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:09.896" starttime="20190402 11:20:09.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:20:09.897" starttime="20190402 11:20:09.897"></status>
</kw>
<msg timestamp="20190402 11:20:09.898" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:09.898" starttime="20190402 11:20:08.211"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:20:09.899" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:20:09.899" starttime="20190402 11:20:09.898"></status>
</kw>
<msg timestamp="20190402 11:20:09.899" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:20:09.899" starttime="20190402 11:20:08.210"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:20:09.901" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:20:09.901" starttime="20190402 11:20:09.900"></status>
</kw>
<status status="FAIL" endtime="20190402 11:20:09.901" starttime="20190402 11:20:08.209"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:20:19.905" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:20:19.905" starttime="20190402 11:20:19.904"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:20:19.906" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:20:19.906" starttime="20190402 11:20:19.905"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:20:19.908" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:20:19.908" starttime="20190402 11:20:19.908"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:20:19.910" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:20:21.492" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:20:21.492" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:20:21.492" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:20:21.492" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:20:21.492" starttime="20190402 11:20:19.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:20:21.493" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:21.493" starttime="20190402 11:20:21.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:20:21.493" starttime="20190402 11:20:21.493"></status>
</kw>
<msg timestamp="20190402 11:20:21.494" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:21.494" starttime="20190402 11:20:19.907"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:20:21.494" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:20:21.494" starttime="20190402 11:20:21.494"></status>
</kw>
<msg timestamp="20190402 11:20:21.495" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:20:21.495" starttime="20190402 11:20:19.903"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:20:21.495" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:20:21.496" starttime="20190402 11:20:21.495"></status>
</kw>
<status status="FAIL" endtime="20190402 11:20:21.496" starttime="20190402 11:20:19.902"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:20:31.501" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:20:31.501" starttime="20190402 11:20:31.500"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:20:31.503" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:20:31.503" starttime="20190402 11:20:31.502"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:20:31.506" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:20:31.506" starttime="20190402 11:20:31.506"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:20:31.508" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:20:33.090" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:20:33.090" level="INFO">${stdout} = VERIFY_RESIZE</msg>
<msg timestamp="20190402 11:20:33.090" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:20:33.090" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:20:33.090" starttime="20190402 11:20:31.507"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:20:33.091" level="INFO">${res} = {u'stdout': u'VERIFY_RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:33.091" starttime="20190402 11:20:33.091"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:20:33.092" starttime="20190402 11:20:33.091"></status>
</kw>
<msg timestamp="20190402 11:20:33.092" level="INFO">${result} = {u'stdout': u'VERIFY_RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:33.092" starttime="20190402 11:20:31.504"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:20:33.092" level="INFO">${value} = VERIFY_RESIZE</msg>
<status status="PASS" endtime="20190402 11:20:33.092" starttime="20190402 11:20:33.092"></status>
</kw>
<msg timestamp="20190402 11:20:33.092" level="INFO">${current_value} = VERIFY_RESIZE</msg>
<status status="PASS" endtime="20190402 11:20:33.092" starttime="20190402 11:20:31.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:20:33.093" starttime="20190402 11:20:33.092"></status>
</kw>
<status status="PASS" endtime="20190402 11:20:33.093" starttime="20190402 11:20:31.496"></status>
</kw>
<status status="PASS" endtime="20190402 11:20:33.093" starttime="20190402 11:19:21.568"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resize --confirm ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:20:33.094" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:20:33.094" starttime="20190402 11:20:33.093"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:20:33.094" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resize --confirm vm-cirros-1'.</msg>
<msg timestamp="20190402 11:20:34.799" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:20:34.799" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:20:34.799" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:20:34.799" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:20:34.799" starttime="20190402 11:20:33.094"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:20:34.800" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:34.800" starttime="20190402 11:20:34.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:20:34.800" starttime="20190402 11:20:34.800"></status>
</kw>
<status status="PASS" endtime="20190402 11:20:34.800" starttime="20190402 11:20:33.093"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:20:34.801" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:20:34.801" starttime="20190402 11:20:34.801"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:20:34.802" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:20:34.802" starttime="20190402 11:20:34.802"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:20:34.803" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:20:34.803" starttime="20190402 11:20:34.803"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:20:34.803" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:20:36.585" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:20:36.585" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:20:36.585" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:20:36.585" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:20:36.585" starttime="20190402 11:20:34.803"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:20:36.586" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:36.586" starttime="20190402 11:20:36.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:20:36.587" starttime="20190402 11:20:36.586"></status>
</kw>
<msg timestamp="20190402 11:20:36.587" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:36.587" starttime="20190402 11:20:34.802"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:20:36.588" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:20:36.588" starttime="20190402 11:20:36.587"></status>
</kw>
<msg timestamp="20190402 11:20:36.588" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:20:36.588" starttime="20190402 11:20:34.801"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:20:36.589" starttime="20190402 11:20:36.588"></status>
</kw>
<status status="PASS" endtime="20190402 11:20:36.589" starttime="20190402 11:20:34.801"></status>
</kw>
<status status="PASS" endtime="20190402 11:20:36.589" starttime="20190402 11:20:34.800"></status>
</kw>
<status status="PASS" endtime="20190402 11:20:36.589" starttime="20190402 11:19:16.707"></status>
</kw>
<kw name="Resize Instance" library="OpenStack">
<doc>Resize an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resize --flavor ${flavor} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:20:36.591" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:20:36.591" starttime="20190402 11:20:36.591"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:20:36.592" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resize --flavor f1.small vm-cirros-1'.</msg>
<msg timestamp="20190402 11:20:39.875" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:20:39.876" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:20:39.876" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:20:39.876" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:20:39.876" starttime="20190402 11:20:36.591"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:20:39.878" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:39.878" starttime="20190402 11:20:39.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:20:39.879" starttime="20190402 11:20:39.878"></status>
</kw>
<status status="PASS" endtime="20190402 11:20:39.879" starttime="20190402 11:20:36.590"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>RESIZE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:20:39.883" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:20:39.883" starttime="20190402 11:20:39.882"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:20:39.885" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:20:39.885" starttime="20190402 11:20:39.884"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:20:39.888" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:20:39.888" starttime="20190402 11:20:39.887"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:20:39.889" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:20:41.471" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:20:41.471" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:20:41.471" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:20:41.471" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:20:41.471" starttime="20190402 11:20:39.888"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:20:41.472" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:41.472" starttime="20190402 11:20:41.472"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:20:41.472" starttime="20190402 11:20:41.472"></status>
</kw>
<msg timestamp="20190402 11:20:41.473" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:41.473" starttime="20190402 11:20:39.886"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:20:41.473" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:20:41.473" starttime="20190402 11:20:41.473"></status>
</kw>
<msg timestamp="20190402 11:20:41.473" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:20:41.473" starttime="20190402 11:20:39.882"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:20:41.474" starttime="20190402 11:20:41.473"></status>
</kw>
<status status="PASS" endtime="20190402 11:20:41.474" starttime="20190402 11:20:39.881"></status>
</kw>
<status status="PASS" endtime="20190402 11:20:41.474" starttime="20190402 11:20:39.880"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:20:41.476" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:20:41.476" starttime="20190402 11:20:41.475"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:20:41.476" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:20:41.476" starttime="20190402 11:20:41.476"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:20:41.477" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:20:41.477" starttime="20190402 11:20:41.477"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:20:41.477" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:20:43.066" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:20:43.066" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:20:43.066" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:20:43.066" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:20:43.067" starttime="20190402 11:20:41.477"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:20:43.068" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:43.069" starttime="20190402 11:20:43.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:20:43.070" starttime="20190402 11:20:43.069"></status>
</kw>
<msg timestamp="20190402 11:20:43.070" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:43.070" starttime="20190402 11:20:41.476"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:20:43.071" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:20:43.071" starttime="20190402 11:20:43.071"></status>
</kw>
<msg timestamp="20190402 11:20:43.072" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:20:43.072" starttime="20190402 11:20:41.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:20:43.073" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:20:43.073" starttime="20190402 11:20:43.072"></status>
</kw>
<status status="FAIL" endtime="20190402 11:20:43.074" starttime="20190402 11:20:41.474"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:20:53.076" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:20:53.076" starttime="20190402 11:20:53.075"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:20:53.077" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:20:53.077" starttime="20190402 11:20:53.076"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:20:53.078" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:20:53.078" starttime="20190402 11:20:53.078"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:20:53.079" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:20:54.861" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:20:54.861" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:20:54.861" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:20:54.861" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:20:54.861" starttime="20190402 11:20:53.078"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:20:54.862" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:54.862" starttime="20190402 11:20:54.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:20:54.863" starttime="20190402 11:20:54.863"></status>
</kw>
<msg timestamp="20190402 11:20:54.863" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:20:54.863" starttime="20190402 11:20:53.077"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:20:54.863" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:20:54.863" starttime="20190402 11:20:54.863"></status>
</kw>
<msg timestamp="20190402 11:20:54.863" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:20:54.864" starttime="20190402 11:20:53.075"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:20:54.864" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:20:54.864" starttime="20190402 11:20:54.864"></status>
</kw>
<status status="FAIL" endtime="20190402 11:20:54.864" starttime="20190402 11:20:53.074"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:21:04.866" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:21:04.866" starttime="20190402 11:21:04.865"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:21:04.866" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:21:04.866" starttime="20190402 11:21:04.866"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:21:04.867" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:21:04.867" starttime="20190402 11:21:04.867"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:21:04.868" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:21:06.548" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:21:06.548" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:21:06.548" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:21:06.548" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:21:06.548" starttime="20190402 11:21:04.867"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:21:06.549" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:21:06.549" starttime="20190402 11:21:06.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:21:06.549" starttime="20190402 11:21:06.549"></status>
</kw>
<msg timestamp="20190402 11:21:06.550" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:21:06.550" starttime="20190402 11:21:04.866"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:21:06.550" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:21:06.550" starttime="20190402 11:21:06.550"></status>
</kw>
<msg timestamp="20190402 11:21:06.550" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:21:06.550" starttime="20190402 11:21:04.865"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:21:06.551" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:21:06.551" starttime="20190402 11:21:06.550"></status>
</kw>
<status status="FAIL" endtime="20190402 11:21:06.551" starttime="20190402 11:21:04.864"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:21:16.553" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:21:16.553" starttime="20190402 11:21:16.552"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:21:16.553" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:21:16.553" starttime="20190402 11:21:16.553"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:21:16.554" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:21:16.555" starttime="20190402 11:21:16.554"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:21:16.555" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:21:18.187" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:21:18.188" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:21:18.188" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:21:18.188" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:21:18.188" starttime="20190402 11:21:16.555"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:21:18.190" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:21:18.190" starttime="20190402 11:21:18.189"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:21:18.191" starttime="20190402 11:21:18.190"></status>
</kw>
<msg timestamp="20190402 11:21:18.191" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:21:18.192" starttime="20190402 11:21:16.554"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:21:18.192" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:21:18.193" starttime="20190402 11:21:18.192"></status>
</kw>
<msg timestamp="20190402 11:21:18.193" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:21:18.193" starttime="20190402 11:21:16.552"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:21:18.194" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:21:18.195" starttime="20190402 11:21:18.194"></status>
</kw>
<status status="FAIL" endtime="20190402 11:21:18.195" starttime="20190402 11:21:16.551"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:21:28.197" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:21:28.197" starttime="20190402 11:21:28.196"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:21:28.197" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:21:28.197" starttime="20190402 11:21:28.197"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:21:28.198" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:21:28.198" starttime="20190402 11:21:28.197"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:21:28.198" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:21:29.881" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:21:29.881" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:21:29.881" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:21:29.881" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:21:29.881" starttime="20190402 11:21:28.198"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:21:29.882" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:21:29.882" starttime="20190402 11:21:29.881"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:21:29.882" starttime="20190402 11:21:29.882"></status>
</kw>
<msg timestamp="20190402 11:21:29.882" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:21:29.882" starttime="20190402 11:21:28.197"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:21:29.883" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:21:29.883" starttime="20190402 11:21:29.883"></status>
</kw>
<msg timestamp="20190402 11:21:29.883" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:21:29.883" starttime="20190402 11:21:28.196"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:21:29.884" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:21:29.884" starttime="20190402 11:21:29.883"></status>
</kw>
<status status="FAIL" endtime="20190402 11:21:29.884" starttime="20190402 11:21:28.195"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:21:39.885" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:21:39.885" starttime="20190402 11:21:39.885"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:21:39.886" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:21:39.886" starttime="20190402 11:21:39.886"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:21:39.887" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:21:39.887" starttime="20190402 11:21:39.886"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:21:39.887" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:21:41.869" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:21:41.870" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:21:41.870" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:21:41.870" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:21:41.870" starttime="20190402 11:21:39.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:21:41.871" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:21:41.871" starttime="20190402 11:21:41.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:21:41.871" starttime="20190402 11:21:41.871"></status>
</kw>
<msg timestamp="20190402 11:21:41.871" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:21:41.871" starttime="20190402 11:21:39.886"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:21:41.872" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:21:41.872" starttime="20190402 11:21:41.872"></status>
</kw>
<msg timestamp="20190402 11:21:41.872" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:21:41.872" starttime="20190402 11:21:39.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:21:41.873" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:21:41.873" starttime="20190402 11:21:41.872"></status>
</kw>
<status status="FAIL" endtime="20190402 11:21:41.873" starttime="20190402 11:21:39.884"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:21:51.874" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:21:51.874" starttime="20190402 11:21:51.874"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:21:51.875" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:21:51.875" starttime="20190402 11:21:51.875"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:21:51.876" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:21:51.876" starttime="20190402 11:21:51.876"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:21:51.876" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:21:53.712" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:21:53.713" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:21:53.713" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:21:53.713" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:21:53.713" starttime="20190402 11:21:51.876"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:21:53.714" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:21:53.714" starttime="20190402 11:21:53.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:21:53.715" starttime="20190402 11:21:53.715"></status>
</kw>
<msg timestamp="20190402 11:21:53.716" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:21:53.716" starttime="20190402 11:21:51.875"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:21:53.717" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:21:53.717" starttime="20190402 11:21:53.716"></status>
</kw>
<msg timestamp="20190402 11:21:53.718" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:21:53.718" starttime="20190402 11:21:51.874"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:21:53.719" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:21:53.719" starttime="20190402 11:21:53.718"></status>
</kw>
<status status="FAIL" endtime="20190402 11:21:53.720" starttime="20190402 11:21:51.873"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:22:03.722" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:22:03.722" starttime="20190402 11:22:03.721"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:22:03.722" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:22:03.722" starttime="20190402 11:22:03.722"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:22:03.723" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:22:03.723" starttime="20190402 11:22:03.723"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:22:03.724" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:22:05.354" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:22:05.355" level="INFO">${stdout} = VERIFY_RESIZE</msg>
<msg timestamp="20190402 11:22:05.355" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:22:05.355" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:22:05.355" starttime="20190402 11:22:03.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:22:05.357" level="INFO">${res} = {u'stdout': u'VERIFY_RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:05.357" starttime="20190402 11:22:05.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:05.358" starttime="20190402 11:22:05.357"></status>
</kw>
<msg timestamp="20190402 11:22:05.358" level="INFO">${result} = {u'stdout': u'VERIFY_RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:05.358" starttime="20190402 11:22:03.723"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:22:05.359" level="INFO">${value} = VERIFY_RESIZE</msg>
<status status="PASS" endtime="20190402 11:22:05.359" starttime="20190402 11:22:05.358"></status>
</kw>
<msg timestamp="20190402 11:22:05.360" level="INFO">${current_value} = VERIFY_RESIZE</msg>
<status status="PASS" endtime="20190402 11:22:05.360" starttime="20190402 11:22:03.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:05.361" starttime="20190402 11:22:05.360"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:05.361" starttime="20190402 11:22:03.720"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:05.361" starttime="20190402 11:20:41.474"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resize --confirm ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:22:05.362" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:22:05.362" starttime="20190402 11:22:05.362"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:22:05.362" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resize --confirm vm-cirros-1'.</msg>
<msg timestamp="20190402 11:22:07.225" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:22:07.225" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:22:07.225" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:22:07.225" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:22:07.225" starttime="20190402 11:22:05.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:22:07.226" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:07.226" starttime="20190402 11:22:07.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:07.226" starttime="20190402 11:22:07.226"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:07.226" starttime="20190402 11:22:05.361"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:22:07.228" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:22:07.228" starttime="20190402 11:22:07.227"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:22:07.228" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:22:07.228" starttime="20190402 11:22:07.228"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:22:07.229" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:22:07.229" starttime="20190402 11:22:07.229"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:22:07.229" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:22:08.968" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:22:08.968" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:22:08.968" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:22:08.969" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:22:08.969" starttime="20190402 11:22:07.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:22:08.970" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:08.970" starttime="20190402 11:22:08.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:08.971" starttime="20190402 11:22:08.971"></status>
</kw>
<msg timestamp="20190402 11:22:08.972" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:08.972" starttime="20190402 11:22:07.228"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:22:08.973" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:22:08.973" starttime="20190402 11:22:08.972"></status>
</kw>
<msg timestamp="20190402 11:22:08.973" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:22:08.974" starttime="20190402 11:22:07.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:08.975" starttime="20190402 11:22:08.974"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:08.975" starttime="20190402 11:22:07.227"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:08.975" starttime="20190402 11:22:07.227"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:08.976" starttime="20190402 11:20:36.589"></status>
</kw>
<doc>Resize Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:22:08.977" critical="yes" starttime="20190402 11:19:15.261"></status>
</test>
<test id="s1-s1-s2-t14" name="Set Unset Properties Instances">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${instance_property_1}='true'</arg>
<arg>${instance_property_2}='500'</arg>
<arg>${instance_property_3}='180'</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190402 11:22:08.980" level="INFO">${properties} = --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180'</msg>
<status status="PASS" endtime="20190402 11:22:08.980" starttime="20190402 11:22:08.979"></status>
</kw>
<kw name="Set Instance Property" library="OpenStack">
<doc>Set properties of an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:22:08.983" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:22:08.983" starttime="20190402 11:22:08.982"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:22:08.984" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-cirros-1'.</msg>
<msg timestamp="20190402 11:22:10.918" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:22:10.918" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:22:10.918" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:22:10.918" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:22:10.919" starttime="20190402 11:22:08.983"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:22:10.920" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:10.920" starttime="20190402 11:22:10.919"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:10.921" starttime="20190402 11:22:10.921"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:10.922" starttime="20190402 11:22:08.982"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:10.922" starttime="20190402 11:22:08.981"></status>
</kw>
<kw name="Set Instance Property" library="OpenStack">
<doc>Set properties of an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:22:10.925" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:22:10.925" starttime="20190402 11:22:10.925"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:22:10.927" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-cirros-2'.</msg>
<msg timestamp="20190402 11:22:12.709" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:22:12.710" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:22:12.710" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:22:12.710" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:22:12.710" starttime="20190402 11:22:10.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:22:12.712" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:12.712" starttime="20190402 11:22:12.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:12.713" starttime="20190402 11:22:12.713"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:12.714" starttime="20190402 11:22:10.924"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:12.714" starttime="20190402 11:22:10.923"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${instance_property_1}</arg>
<arg>${instance_property_2}</arg>
<arg>${instance_property_3}</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190402 11:22:12.716" level="INFO">${properties} = --property sw:wrs:auto_recovery --property hw:wrs:live_migration_max_downtime --property hw:wrs:live_migration_timeout</msg>
<status status="PASS" endtime="20190402 11:22:12.716" starttime="20190402 11:22:12.715"></status>
</kw>
<kw name="Unset Instance Property" library="OpenStack">
<doc>Unset properties of an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unset ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:22:12.718" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:22:12.719" starttime="20190402 11:22:12.718"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:22:12.720" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unset --property sw:wrs:auto_recovery --property hw:wrs:live_migration_max_downtime --property hw:wrs:live_migration_timeout vm-cirros-1'.</msg>
<msg timestamp="20190402 11:22:14.802" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:22:14.803" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:22:14.803" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:22:14.803" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:22:14.803" starttime="20190402 11:22:12.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:22:14.804" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:14.804" starttime="20190402 11:22:14.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:14.805" starttime="20190402 11:22:14.804"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:14.805" starttime="20190402 11:22:12.717"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:14.805" starttime="20190402 11:22:12.716"></status>
</kw>
<kw name="Unset Instance Property" library="OpenStack">
<doc>Unset properties of an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unset ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:22:14.807" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:22:14.807" starttime="20190402 11:22:14.807"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:22:14.808" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unset --property sw:wrs:auto_recovery --property hw:wrs:live_migration_max_downtime --property hw:wrs:live_migration_timeout vm-cirros-2'.</msg>
<msg timestamp="20190402 11:22:16.990" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:22:16.990" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:22:16.991" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:22:16.991" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:22:16.991" starttime="20190402 11:22:14.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:22:16.993" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:16.993" starttime="20190402 11:22:16.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:16.995" starttime="20190402 11:22:16.994"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:16.995" starttime="20190402 11:22:14.806"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:16.995" starttime="20190402 11:22:14.805"></status>
</kw>
<doc>Set Unset properties of Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:22:16.996" critical="yes" starttime="20190402 11:22:08.978"></status>
</test>
<test id="s1-s1-s2-t15" name="Evacuate Instances From Hosts">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CONFIGURATION_TYPE}' == 'Duplex'</arg>
<arg>Run Keywords</arg>
<arg>Evacuate Instances</arg>
<arg>controller-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>controller-1</arg>
<arg>ELSE IF</arg>
<arg>'${CONFIGURATION_TYPE}' == 'MN-Local' or '${CONFIGURATION_TYPE}' == 'MN-External'</arg>
<arg>Run Keywords</arg>
<arg>Evacuate Instances</arg>
<arg>compute-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>compute-1</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Evacuate Instances</arg>
<arg>controller-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>controller-1</arg>
</arguments>
<kw name="Evacuate Instances" library="OpenStack">
<doc>Evacuate all VMs from computes or from controllers.</doc>
<arguments>
<arg>controller-0</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:22:17.001" level="INFO">${openstack_cmd} = openstack compute service set</msg>
<status status="PASS" endtime="20190402 11:22:17.001" starttime="20190402 11:22:17.000"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--disable</arg>
<arg>--disable-reason test-evacuate</arg>
<arg>${host}</arg>
<arg>nova-compute</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:22:17.002" level="INFO">${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute</msg>
<status status="PASS" endtime="20190402 11:22:17.002" starttime="20190402 11:22:17.001"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:22:17.004" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:22:17.004" starttime="20190402 11:22:17.003"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:22:17.005" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute'.</msg>
<msg timestamp="20190402 11:22:18.390" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:22:18.390" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:22:18.391" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:22:18.391" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:22:18.391" starttime="20190402 11:22:17.004"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:22:18.392" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:18.392" starttime="20190402 11:22:18.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:18.393" starttime="20190402 11:22:18.392"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:18.393" starttime="20190402 11:22:17.002"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Compute Service Property</arg>
<arg>${host}</arg>
<arg>disabled</arg>
</arguments>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>disabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:22:18.395" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:22:18.395" starttime="20190402 11:22:18.394"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:22:18.395" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:22:18.395" starttime="20190402 11:22:18.395"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:22:18.396" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:22:18.396" starttime="20190402 11:22:18.396"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:22:18.397" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:22:19.733" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:22:19.733" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:22:19.734" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:22:19.734" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:22:19.734" starttime="20190402 11:22:18.397"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:22:19.735" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:19.735" starttime="20190402 11:22:19.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:19.736" starttime="20190402 11:22:19.736"></status>
</kw>
<msg timestamp="20190402 11:22:19.737" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:19.737" starttime="20190402 11:22:18.395"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:22:19.738" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:22:19.738" starttime="20190402 11:22:19.737"></status>
</kw>
<msg timestamp="20190402 11:22:19.738" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:22:19.738" starttime="20190402 11:22:18.394"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:19.739" starttime="20190402 11:22:19.739"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:19.739" starttime="20190402 11:22:18.393"></status>
</kw>
<status status="PASS" endtime="20190402 11:22:19.740" starttime="20190402 11:22:18.393"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Compute Service Property</arg>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:22:19.743" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:22:19.743" starttime="20190402 11:22:19.742"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:22:19.744" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:22:19.744" starttime="20190402 11:22:19.743"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:22:19.746" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:22:19.746" starttime="20190402 11:22:19.745"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:22:19.747" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:22:21.093" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:22:21.093" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:22:21.094" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:22:21.094" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:22:21.094" starttime="20190402 11:22:19.746"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:22:21.095" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:21.095" starttime="20190402 11:22:21.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:21.096" starttime="20190402 11:22:21.096"></status>
</kw>
<msg timestamp="20190402 11:22:21.097" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:21.097" starttime="20190402 11:22:19.744"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:22:21.098" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:22:21.098" starttime="20190402 11:22:21.097"></status>
</kw>
<msg timestamp="20190402 11:22:21.098" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:22:21.098" starttime="20190402 11:22:19.741"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:22:21.099" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:22:21.100" starttime="20190402 11:22:21.099"></status>
</kw>
<status status="FAIL" endtime="20190402 11:22:21.100" starttime="20190402 11:22:19.741"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:22:31.103" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:22:31.103" starttime="20190402 11:22:31.102"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:22:31.104" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:22:31.104" starttime="20190402 11:22:31.103"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:22:31.106" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:22:31.106" starttime="20190402 11:22:31.106"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:22:31.108" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:22:32.490" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:22:32.490" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:22:32.490" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:22:32.490" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:22:32.490" starttime="20190402 11:22:31.107"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:22:32.492" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:32.492" starttime="20190402 11:22:32.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:32.492" starttime="20190402 11:22:32.492"></status>
</kw>
<msg timestamp="20190402 11:22:32.493" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:32.493" starttime="20190402 11:22:31.105"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:22:32.493" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:22:32.494" starttime="20190402 11:22:32.493"></status>
</kw>
<msg timestamp="20190402 11:22:32.494" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:22:32.494" starttime="20190402 11:22:31.101"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:22:32.495" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:22:32.495" starttime="20190402 11:22:32.494"></status>
</kw>
<status status="FAIL" endtime="20190402 11:22:32.495" starttime="20190402 11:22:31.100"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:22:42.497" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:22:42.497" starttime="20190402 11:22:42.497"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:22:42.497" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:22:42.497" starttime="20190402 11:22:42.497"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:22:42.498" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:22:42.499" starttime="20190402 11:22:42.498"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:22:42.499" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:22:43.881" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:22:43.881" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:22:43.882" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:22:43.882" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:22:43.882" starttime="20190402 11:22:42.499"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:22:43.882" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:43.882" starttime="20190402 11:22:43.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:43.883" starttime="20190402 11:22:43.882"></status>
</kw>
<msg timestamp="20190402 11:22:43.883" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:43.883" starttime="20190402 11:22:42.498"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:22:43.883" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:22:43.883" starttime="20190402 11:22:43.883"></status>
</kw>
<msg timestamp="20190402 11:22:43.884" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:22:43.884" starttime="20190402 11:22:42.496"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:22:43.884" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:22:43.884" starttime="20190402 11:22:43.884"></status>
</kw>
<status status="FAIL" endtime="20190402 11:22:43.884" starttime="20190402 11:22:42.496"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:22:53.886" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:22:53.886" starttime="20190402 11:22:53.885"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:22:53.886" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:22:53.886" starttime="20190402 11:22:53.886"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:22:53.887" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:22:53.887" starttime="20190402 11:22:53.886"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:22:53.887" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:22:55.267" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:22:55.267" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:22:55.267" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:22:55.267" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:22:55.267" starttime="20190402 11:22:53.887"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:22:55.268" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:55.268" starttime="20190402 11:22:55.267"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:22:55.268" starttime="20190402 11:22:55.268"></status>
</kw>
<msg timestamp="20190402 11:22:55.268" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:22:55.268" starttime="20190402 11:22:53.886"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:22:55.269" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:22:55.269" starttime="20190402 11:22:55.268"></status>
</kw>
<msg timestamp="20190402 11:22:55.269" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:22:55.269" starttime="20190402 11:22:53.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:22:55.269" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:22:55.270" starttime="20190402 11:22:55.269"></status>
</kw>
<status status="FAIL" endtime="20190402 11:22:55.270" starttime="20190402 11:22:53.885"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:23:05.272" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:23:05.272" starttime="20190402 11:23:05.272"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:23:05.272" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:23:05.272" starttime="20190402 11:23:05.272"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:23:05.273" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:23:05.274" starttime="20190402 11:23:05.273"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:23:05.274" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:23:06.655" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:23:06.655" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:23:06.656" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:23:06.656" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:23:06.656" starttime="20190402 11:23:05.274"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:23:06.658" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:23:06.658" starttime="20190402 11:23:06.657"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:23:06.659" starttime="20190402 11:23:06.658"></status>
</kw>
<msg timestamp="20190402 11:23:06.660" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:23:06.660" starttime="20190402 11:23:05.273"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:23:06.661" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:23:06.661" starttime="20190402 11:23:06.660"></status>
</kw>
<msg timestamp="20190402 11:23:06.661" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:23:06.662" starttime="20190402 11:23:05.271"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:23:06.663" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:23:06.663" starttime="20190402 11:23:06.662"></status>
</kw>
<status status="FAIL" endtime="20190402 11:23:06.663" starttime="20190402 11:23:05.270"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:23:16.665" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:23:16.665" starttime="20190402 11:23:16.664"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:23:16.665" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:23:16.665" starttime="20190402 11:23:16.665"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:23:16.666" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:23:16.666" starttime="20190402 11:23:16.665"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:23:16.666" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:23:17.997" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:23:17.997" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:23:17.997" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:23:17.997" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:23:17.997" starttime="20190402 11:23:16.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:23:17.999" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:23:17.999" starttime="20190402 11:23:17.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:23:18.000" starttime="20190402 11:23:17.999"></status>
</kw>
<msg timestamp="20190402 11:23:18.000" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:23:18.000" starttime="20190402 11:23:16.665"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:23:18.001" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:23:18.001" starttime="20190402 11:23:18.001"></status>
</kw>
<msg timestamp="20190402 11:23:18.002" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:23:18.002" starttime="20190402 11:23:16.664"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:23:18.003" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:23:18.003" starttime="20190402 11:23:18.002"></status>
</kw>
<status status="FAIL" endtime="20190402 11:23:18.003" starttime="20190402 11:23:16.664"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:23:28.005" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:23:28.005" starttime="20190402 11:23:28.005"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:23:28.006" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:23:28.006" starttime="20190402 11:23:28.005"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:23:28.007" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:23:28.007" starttime="20190402 11:23:28.007"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:23:28.007" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:23:29.388" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:23:29.389" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:23:29.389" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:23:29.389" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:23:29.389" starttime="20190402 11:23:28.007"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:23:29.389" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:23:29.389" starttime="20190402 11:23:29.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:23:29.390" starttime="20190402 11:23:29.390"></status>
</kw>
<msg timestamp="20190402 11:23:29.390" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:23:29.390" starttime="20190402 11:23:28.006"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:23:29.390" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:23:29.390" starttime="20190402 11:23:29.390"></status>
</kw>
<msg timestamp="20190402 11:23:29.391" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:23:29.391" starttime="20190402 11:23:28.004"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:23:29.391" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:23:29.391" starttime="20190402 11:23:29.391"></status>
</kw>
<status status="FAIL" endtime="20190402 11:23:29.391" starttime="20190402 11:23:28.004"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:23:39.393" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:23:39.393" starttime="20190402 11:23:39.393"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:23:39.393" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:23:39.393" starttime="20190402 11:23:39.393"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:23:39.394" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:23:39.394" starttime="20190402 11:23:39.394"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:23:39.395" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:23:40.726" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:23:40.726" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:23:40.726" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:23:40.726" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:23:40.727" starttime="20190402 11:23:39.394"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:23:40.727" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:23:40.727" starttime="20190402 11:23:40.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:23:40.728" starttime="20190402 11:23:40.728"></status>
</kw>
<msg timestamp="20190402 11:23:40.728" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:23:40.728" starttime="20190402 11:23:39.394"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:23:40.729" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:23:40.729" starttime="20190402 11:23:40.728"></status>
</kw>
<msg timestamp="20190402 11:23:40.729" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:23:40.729" starttime="20190402 11:23:39.393"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:23:40.730" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:23:40.730" starttime="20190402 11:23:40.729"></status>
</kw>
<status status="FAIL" endtime="20190402 11:23:40.730" starttime="20190402 11:23:39.392"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:23:50.733" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:23:50.733" starttime="20190402 11:23:50.732"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:23:50.734" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:23:50.734" starttime="20190402 11:23:50.733"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:23:50.736" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:23:50.736" starttime="20190402 11:23:50.735"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:23:50.737" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:23:52.067" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:23:52.068" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:23:52.068" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:23:52.068" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:23:52.068" starttime="20190402 11:23:50.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:23:52.070" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:23:52.070" starttime="20190402 11:23:52.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:23:52.072" starttime="20190402 11:23:52.071"></status>
</kw>
<msg timestamp="20190402 11:23:52.073" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:23:52.073" starttime="20190402 11:23:50.734"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:23:52.074" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:23:52.074" starttime="20190402 11:23:52.073"></status>
</kw>
<msg timestamp="20190402 11:23:52.075" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:23:52.075" starttime="20190402 11:23:50.731"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:23:52.076" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:23:52.076" starttime="20190402 11:23:52.075"></status>
</kw>
<status status="FAIL" endtime="20190402 11:23:52.077" starttime="20190402 11:23:50.730"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:24:02.079" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:24:02.079" starttime="20190402 11:24:02.078"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:24:02.080" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:24:02.080" starttime="20190402 11:24:02.079"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:24:02.081" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:24:02.081" starttime="20190402 11:24:02.081"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:24:02.082" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:24:03.413" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:24:03.414" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:24:03.414" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:24:03.414" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:24:03.414" starttime="20190402 11:24:02.082"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:24:03.415" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:03.415" starttime="20190402 11:24:03.414"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:24:03.415" starttime="20190402 11:24:03.415"></status>
</kw>
<msg timestamp="20190402 11:24:03.416" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:03.416" starttime="20190402 11:24:02.080"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:24:03.416" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:24:03.416" starttime="20190402 11:24:03.416"></status>
</kw>
<msg timestamp="20190402 11:24:03.416" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:24:03.416" starttime="20190402 11:24:02.078"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:24:03.417" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:24:03.417" starttime="20190402 11:24:03.417"></status>
</kw>
<status status="FAIL" endtime="20190402 11:24:03.417" starttime="20190402 11:24:02.077"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:24:13.419" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:24:13.419" starttime="20190402 11:24:13.419"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:24:13.419" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:24:13.419" starttime="20190402 11:24:13.419"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:24:13.420" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:24:13.420" starttime="20190402 11:24:13.420"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:24:13.421" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:24:14.802" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:24:14.802" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:24:14.802" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:24:14.802" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:24:14.802" starttime="20190402 11:24:13.421"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:24:14.803" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:14.803" starttime="20190402 11:24:14.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:24:14.804" starttime="20190402 11:24:14.803"></status>
</kw>
<msg timestamp="20190402 11:24:14.804" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:14.804" starttime="20190402 11:24:13.420"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:24:14.805" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:24:14.805" starttime="20190402 11:24:14.804"></status>
</kw>
<msg timestamp="20190402 11:24:14.805" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:24:14.805" starttime="20190402 11:24:13.418"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:24:14.806" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:24:14.806" starttime="20190402 11:24:14.805"></status>
</kw>
<status status="FAIL" endtime="20190402 11:24:14.806" starttime="20190402 11:24:13.418"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:24:24.808" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:24:24.808" starttime="20190402 11:24:24.808"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:24:24.808" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:24:24.808" starttime="20190402 11:24:24.808"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:24:24.809" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:24:24.809" starttime="20190402 11:24:24.809"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:24:24.810" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:24:26.242" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:24:26.242" level="INFO">${stdout} = enabled</msg>
<msg timestamp="20190402 11:24:26.242" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:24:26.242" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:24:26.242" starttime="20190402 11:24:24.809"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:24:26.243" level="INFO">${res} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:26.243" starttime="20190402 11:24:26.242"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:24:26.243" starttime="20190402 11:24:26.243"></status>
</kw>
<msg timestamp="20190402 11:24:26.243" level="INFO">${result} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:26.243" starttime="20190402 11:24:24.808"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:24:26.244" level="INFO">${value} = enabled</msg>
<status status="PASS" endtime="20190402 11:24:26.244" starttime="20190402 11:24:26.244"></status>
</kw>
<msg timestamp="20190402 11:24:26.244" level="INFO">${current_value} = enabled</msg>
<status status="PASS" endtime="20190402 11:24:26.244" starttime="20190402 11:24:24.807"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:24:26.245" starttime="20190402 11:24:26.244"></status>
</kw>
<status status="PASS" endtime="20190402 11:24:26.245" starttime="20190402 11:24:24.806"></status>
</kw>
<status status="PASS" endtime="20190402 11:24:26.245" starttime="20190402 11:22:19.740"></status>
</kw>
<status status="PASS" endtime="20190402 11:24:26.245" starttime="20190402 11:22:17.000"></status>
</kw>
<kw name="Evacuate Instances" library="OpenStack">
<doc>Evacuate all VMs from computes or from controllers.</doc>
<arguments>
<arg>controller-1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:24:26.245" level="INFO">${openstack_cmd} = openstack compute service set</msg>
<status status="PASS" endtime="20190402 11:24:26.245" starttime="20190402 11:24:26.245"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--disable</arg>
<arg>--disable-reason test-evacuate</arg>
<arg>${host}</arg>
<arg>nova-compute</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:24:26.246" level="INFO">${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-1 nova-compute</msg>
<status status="PASS" endtime="20190402 11:24:26.246" starttime="20190402 11:24:26.246"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:24:26.247" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:24:26.247" starttime="20190402 11:24:26.246"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:24:26.247" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service set --disable --disable-reason test-evacuate controller-1 nova-compute'.</msg>
<msg timestamp="20190402 11:24:27.578" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:24:27.578" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:24:27.578" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:24:27.578" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:24:27.578" starttime="20190402 11:24:26.247"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:24:27.580" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:27.580" starttime="20190402 11:24:27.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:24:27.581" starttime="20190402 11:24:27.580"></status>
</kw>
<status status="PASS" endtime="20190402 11:24:27.581" starttime="20190402 11:24:26.246"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Compute Service Property</arg>
<arg>${host}</arg>
<arg>disabled</arg>
</arguments>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>disabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:24:27.584" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:24:27.584" starttime="20190402 11:24:27.584"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:24:27.585" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:24:27.585" starttime="20190402 11:24:27.584"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:24:27.587" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:24:27.587" starttime="20190402 11:24:27.586"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:24:27.589" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:24:28.920" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:24:28.920" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:24:28.921" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:24:28.921" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:24:28.921" starttime="20190402 11:24:27.588"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:24:28.922" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:28.922" starttime="20190402 11:24:28.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:24:28.923" starttime="20190402 11:24:28.922"></status>
</kw>
<msg timestamp="20190402 11:24:28.923" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:28.923" starttime="20190402 11:24:27.585"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:24:28.924" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:24:28.924" starttime="20190402 11:24:28.923"></status>
</kw>
<msg timestamp="20190402 11:24:28.924" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:24:28.924" starttime="20190402 11:24:27.583"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:24:28.925" starttime="20190402 11:24:28.924"></status>
</kw>
<status status="PASS" endtime="20190402 11:24:28.925" starttime="20190402 11:24:27.582"></status>
</kw>
<status status="PASS" endtime="20190402 11:24:28.925" starttime="20190402 11:24:27.582"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Compute Service Property</arg>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:24:28.927" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:24:28.927" starttime="20190402 11:24:28.926"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:24:28.927" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:24:28.927" starttime="20190402 11:24:28.927"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:24:28.928" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:24:28.928" starttime="20190402 11:24:28.928"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:24:28.929" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:24:30.415" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:24:30.415" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:24:30.415" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:24:30.415" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:24:30.416" starttime="20190402 11:24:28.928"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:24:30.417" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:30.417" starttime="20190402 11:24:30.416"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:24:30.418" starttime="20190402 11:24:30.417"></status>
</kw>
<msg timestamp="20190402 11:24:30.418" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:30.419" starttime="20190402 11:24:28.927"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:24:30.419" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:24:30.419" starttime="20190402 11:24:30.419"></status>
</kw>
<msg timestamp="20190402 11:24:30.420" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:24:30.420" starttime="20190402 11:24:28.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:24:30.421" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:24:30.421" starttime="20190402 11:24:30.420"></status>
</kw>
<status status="FAIL" endtime="20190402 11:24:30.422" starttime="20190402 11:24:28.925"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:24:40.423" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:24:40.423" starttime="20190402 11:24:40.423"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:24:40.423" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:24:40.423" starttime="20190402 11:24:40.423"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:24:40.424" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:24:40.424" starttime="20190402 11:24:40.424"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:24:40.424" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:24:41.756" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:24:41.756" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:24:41.756" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:24:41.756" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:24:41.756" starttime="20190402 11:24:40.424"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:24:41.757" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:41.757" starttime="20190402 11:24:41.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:24:41.757" starttime="20190402 11:24:41.757"></status>
</kw>
<msg timestamp="20190402 11:24:41.758" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:41.758" starttime="20190402 11:24:40.423"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:24:41.758" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:24:41.758" starttime="20190402 11:24:41.758"></status>
</kw>
<msg timestamp="20190402 11:24:41.758" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:24:41.758" starttime="20190402 11:24:40.422"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:24:41.759" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:24:41.759" starttime="20190402 11:24:41.758"></status>
</kw>
<status status="FAIL" endtime="20190402 11:24:41.759" starttime="20190402 11:24:40.422"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:24:51.761" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:24:51.761" starttime="20190402 11:24:51.761"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:24:51.761" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:24:51.761" starttime="20190402 11:24:51.761"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:24:51.762" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:24:51.762" starttime="20190402 11:24:51.762"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:24:51.762" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:24:53.094" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:24:53.095" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:24:53.095" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:24:53.095" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:24:53.095" starttime="20190402 11:24:51.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:24:53.098" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:53.098" starttime="20190402 11:24:53.096"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:24:53.100" starttime="20190402 11:24:53.099"></status>
</kw>
<msg timestamp="20190402 11:24:53.100" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:24:53.100" starttime="20190402 11:24:51.761"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:24:53.102" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:24:53.102" starttime="20190402 11:24:53.101"></status>
</kw>
<msg timestamp="20190402 11:24:53.102" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:24:53.102" starttime="20190402 11:24:51.760"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:24:53.104" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:24:53.104" starttime="20190402 11:24:53.103"></status>
</kw>
<status status="FAIL" endtime="20190402 11:24:53.104" starttime="20190402 11:24:51.759"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:25:03.107" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:25:03.107" starttime="20190402 11:25:03.106"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:25:03.107" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:25:03.107" starttime="20190402 11:25:03.107"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:25:03.109" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:25:03.109" starttime="20190402 11:25:03.108"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:25:03.109" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:25:04.441" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:25:04.442" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:25:04.442" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:25:04.442" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:25:04.442" starttime="20190402 11:25:03.109"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:25:04.444" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:25:04.444" starttime="20190402 11:25:04.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:25:04.445" starttime="20190402 11:25:04.444"></status>
</kw>
<msg timestamp="20190402 11:25:04.445" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:25:04.445" starttime="20190402 11:25:03.108"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:25:04.446" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:25:04.446" starttime="20190402 11:25:04.446"></status>
</kw>
<msg timestamp="20190402 11:25:04.447" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:25:04.447" starttime="20190402 11:25:03.106"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:25:04.448" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:25:04.448" starttime="20190402 11:25:04.447"></status>
</kw>
<status status="FAIL" endtime="20190402 11:25:04.448" starttime="20190402 11:25:03.105"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:25:14.451" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:25:14.451" starttime="20190402 11:25:14.451"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:25:14.452" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:25:14.452" starttime="20190402 11:25:14.452"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:25:14.455" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:25:14.455" starttime="20190402 11:25:14.454"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:25:14.456" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:25:15.888" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:25:15.889" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:25:15.889" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:25:15.889" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:25:15.889" starttime="20190402 11:25:14.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:25:15.889" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:25:15.890" starttime="20190402 11:25:15.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:25:15.890" starttime="20190402 11:25:15.890"></status>
</kw>
<msg timestamp="20190402 11:25:15.890" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:25:15.890" starttime="20190402 11:25:14.453"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:25:15.890" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:25:15.890" starttime="20190402 11:25:15.890"></status>
</kw>
<msg timestamp="20190402 11:25:15.891" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:25:15.891" starttime="20190402 11:25:14.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:25:15.891" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:25:15.891" starttime="20190402 11:25:15.891"></status>
</kw>
<status status="FAIL" endtime="20190402 11:25:15.891" starttime="20190402 11:25:14.449"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:25:25.893" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:25:25.893" starttime="20190402 11:25:25.893"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:25:25.894" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:25:25.894" starttime="20190402 11:25:25.893"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:25:25.895" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:25:25.895" starttime="20190402 11:25:25.895"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:25:25.896" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:25:27.282" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:25:27.282" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:25:27.282" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:25:27.282" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:25:27.282" starttime="20190402 11:25:25.896"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:25:27.283" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:25:27.283" starttime="20190402 11:25:27.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:25:27.284" starttime="20190402 11:25:27.283"></status>
</kw>
<msg timestamp="20190402 11:25:27.284" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:25:27.284" starttime="20190402 11:25:25.894"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:25:27.285" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:25:27.285" starttime="20190402 11:25:27.284"></status>
</kw>
<msg timestamp="20190402 11:25:27.285" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:25:27.285" starttime="20190402 11:25:25.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:25:27.286" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:25:27.286" starttime="20190402 11:25:27.285"></status>
</kw>
<status status="FAIL" endtime="20190402 11:25:27.286" starttime="20190402 11:25:25.892"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:25:37.287" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:25:37.287" starttime="20190402 11:25:37.287"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:25:37.288" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:25:37.288" starttime="20190402 11:25:37.287"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:25:37.288" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:25:37.288" starttime="20190402 11:25:37.288"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:25:37.289" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:25:38.619" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:25:38.620" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:25:38.620" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:25:38.620" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:25:38.620" starttime="20190402 11:25:37.289"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:25:38.621" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:25:38.621" starttime="20190402 11:25:38.620"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:25:38.621" starttime="20190402 11:25:38.621"></status>
</kw>
<msg timestamp="20190402 11:25:38.622" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:25:38.622" starttime="20190402 11:25:37.288"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:25:38.622" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:25:38.622" starttime="20190402 11:25:38.622"></status>
</kw>
<msg timestamp="20190402 11:25:38.623" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:25:38.623" starttime="20190402 11:25:37.287"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:25:38.623" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:25:38.623" starttime="20190402 11:25:38.623"></status>
</kw>
<status status="FAIL" endtime="20190402 11:25:38.623" starttime="20190402 11:25:37.286"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:25:48.625" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:25:48.625" starttime="20190402 11:25:48.625"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:25:48.625" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:25:48.625" starttime="20190402 11:25:48.625"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:25:48.626" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:25:48.626" starttime="20190402 11:25:48.626"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:25:48.627" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:25:49.958" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:25:49.959" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:25:49.959" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:25:49.959" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:25:49.959" starttime="20190402 11:25:48.626"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:25:49.961" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:25:49.961" starttime="20190402 11:25:49.960"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:25:49.962" starttime="20190402 11:25:49.961"></status>
</kw>
<msg timestamp="20190402 11:25:49.963" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:25:49.963" starttime="20190402 11:25:48.625"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:25:49.964" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:25:49.964" starttime="20190402 11:25:49.963"></status>
</kw>
<msg timestamp="20190402 11:25:49.964" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:25:49.964" starttime="20190402 11:25:48.624"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:25:49.966" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:25:49.966" starttime="20190402 11:25:49.965"></status>
</kw>
<status status="FAIL" endtime="20190402 11:25:49.966" starttime="20190402 11:25:48.624"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:25:59.968" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:25:59.968" starttime="20190402 11:25:59.967"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:25:59.968" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:25:59.968" starttime="20190402 11:25:59.968"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:25:59.969" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:25:59.969" starttime="20190402 11:25:59.969"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:25:59.969" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:26:01.301" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:26:01.301" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:26:01.301" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:26:01.302" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:26:01.302" starttime="20190402 11:25:59.969"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:26:01.303" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:26:01.303" starttime="20190402 11:26:01.302"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:26:01.304" starttime="20190402 11:26:01.303"></status>
</kw>
<msg timestamp="20190402 11:26:01.304" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:26:01.304" starttime="20190402 11:25:59.968"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:26:01.304" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:26:01.304" starttime="20190402 11:26:01.304"></status>
</kw>
<msg timestamp="20190402 11:26:01.304" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:26:01.305" starttime="20190402 11:25:59.967"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:26:01.305" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:26:01.305" starttime="20190402 11:26:01.305"></status>
</kw>
<status status="FAIL" endtime="20190402 11:26:01.305" starttime="20190402 11:25:59.966"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:26:11.307" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:26:11.307" starttime="20190402 11:26:11.306"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:26:11.307" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:26:11.307" starttime="20190402 11:26:11.307"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:26:11.308" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:26:11.308" starttime="20190402 11:26:11.308"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:26:11.308" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:26:12.690" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:26:12.690" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:26:12.690" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:26:12.690" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:26:12.691" starttime="20190402 11:26:11.308"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:26:12.691" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:26:12.691" starttime="20190402 11:26:12.691"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:26:12.692" starttime="20190402 11:26:12.692"></status>
</kw>
<msg timestamp="20190402 11:26:12.692" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:26:12.692" starttime="20190402 11:26:11.307"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:26:12.692" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:26:12.692" starttime="20190402 11:26:12.692"></status>
</kw>
<msg timestamp="20190402 11:26:12.693" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:26:12.693" starttime="20190402 11:26:11.306"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:26:12.693" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:26:12.693" starttime="20190402 11:26:12.693"></status>
</kw>
<status status="FAIL" endtime="20190402 11:26:12.693" starttime="20190402 11:26:11.305"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:26:22.695" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:26:22.695" starttime="20190402 11:26:22.695"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:26:22.695" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:26:22.696" starttime="20190402 11:26:22.695"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:26:22.696" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:26:22.696" starttime="20190402 11:26:22.696"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:26:22.697" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:26:24.027" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:26:24.028" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:26:24.028" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:26:24.028" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:26:24.028" starttime="20190402 11:26:22.697"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:26:24.028" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:26:24.028" starttime="20190402 11:26:24.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:26:24.029" starttime="20190402 11:26:24.029"></status>
</kw>
<msg timestamp="20190402 11:26:24.029" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:26:24.029" starttime="20190402 11:26:22.696"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:26:24.030" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:26:24.030" starttime="20190402 11:26:24.029"></status>
</kw>
<msg timestamp="20190402 11:26:24.030" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:26:24.030" starttime="20190402 11:26:22.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:26:24.031" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:26:24.031" starttime="20190402 11:26:24.030"></status>
</kw>
<status status="FAIL" endtime="20190402 11:26:24.031" starttime="20190402 11:26:22.694"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:26:34.034" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:26:34.034" starttime="20190402 11:26:34.034"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:26:34.035" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:26:34.035" starttime="20190402 11:26:34.035"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:26:34.038" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:26:34.038" starttime="20190402 11:26:34.037"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:26:34.039" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:26:36.075" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:26:36.076" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:26:36.076" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:26:36.076" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:26:36.076" starttime="20190402 11:26:34.038"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:26:36.078" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:26:36.078" starttime="20190402 11:26:36.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:26:36.079" starttime="20190402 11:26:36.079"></status>
</kw>
<msg timestamp="20190402 11:26:36.080" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:26:36.080" starttime="20190402 11:26:34.036"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:26:36.081" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:26:36.081" starttime="20190402 11:26:36.080"></status>
</kw>
<msg timestamp="20190402 11:26:36.082" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:26:36.082" starttime="20190402 11:26:34.033"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:26:36.083" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:26:36.084" starttime="20190402 11:26:36.082"></status>
</kw>
<status status="FAIL" endtime="20190402 11:26:36.084" starttime="20190402 11:26:34.031"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:26:46.085" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:26:46.085" starttime="20190402 11:26:46.085"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:26:46.086" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:26:46.086" starttime="20190402 11:26:46.086"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:26:46.086" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:26:46.087" starttime="20190402 11:26:46.086"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:26:46.087" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:26:48.019" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:26:48.020" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:26:48.020" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:26:48.020" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:26:48.020" starttime="20190402 11:26:46.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:26:48.021" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:26:48.021" starttime="20190402 11:26:48.020"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:26:48.021" starttime="20190402 11:26:48.021"></status>
</kw>
<msg timestamp="20190402 11:26:48.021" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:26:48.021" starttime="20190402 11:26:46.086"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:26:48.022" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:26:48.022" starttime="20190402 11:26:48.022"></status>
</kw>
<msg timestamp="20190402 11:26:48.022" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:26:48.022" starttime="20190402 11:26:46.085"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:26:48.023" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:26:48.023" starttime="20190402 11:26:48.022"></status>
</kw>
<status status="FAIL" endtime="20190402 11:26:48.023" starttime="20190402 11:26:46.084"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:26:58.026" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:26:58.026" starttime="20190402 11:26:58.026"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:26:58.027" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:26:58.028" starttime="20190402 11:26:58.027"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:26:58.029" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:26:58.030" starttime="20190402 11:26:58.029"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:26:58.031" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:26:59.613" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:26:59.614" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:26:59.614" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:26:59.614" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:26:59.614" starttime="20190402 11:26:58.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:26:59.616" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:26:59.616" starttime="20190402 11:26:59.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:26:59.617" starttime="20190402 11:26:59.616"></status>
</kw>
<msg timestamp="20190402 11:26:59.617" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:26:59.617" starttime="20190402 11:26:58.028"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:26:59.619" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:26:59.619" starttime="20190402 11:26:59.618"></status>
</kw>
<msg timestamp="20190402 11:26:59.619" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:26:59.619" starttime="20190402 11:26:58.025"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:26:59.619" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:26:59.620" starttime="20190402 11:26:59.619"></status>
</kw>
<status status="FAIL" endtime="20190402 11:26:59.620" starttime="20190402 11:26:58.024"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:09.621" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:27:09.621" starttime="20190402 11:27:09.621"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:09.622" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:27:09.622" starttime="20190402 11:27:09.622"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:09.623" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:09.623" starttime="20190402 11:27:09.623"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:09.624" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:27:11.005" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:11.005" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:27:11.005" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:11.005" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:11.005" starttime="20190402 11:27:09.623"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:11.007" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:11.007" starttime="20190402 11:27:11.006"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:11.008" starttime="20190402 11:27:11.007"></status>
</kw>
<msg timestamp="20190402 11:27:11.009" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:11.009" starttime="20190402 11:27:09.622"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:27:11.010" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:27:11.010" starttime="20190402 11:27:11.009"></status>
</kw>
<msg timestamp="20190402 11:27:11.010" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:27:11.010" starttime="20190402 11:27:09.621"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:27:11.011" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:27:11.012" starttime="20190402 11:27:11.011"></status>
</kw>
<status status="FAIL" endtime="20190402 11:27:11.012" starttime="20190402 11:27:09.620"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:21.015" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:27:21.015" starttime="20190402 11:27:21.015"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:21.016" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:27:21.016" starttime="20190402 11:27:21.016"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:21.018" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:21.018" starttime="20190402 11:27:21.018"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:21.020" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:27:22.352" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:22.352" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:27:22.352" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:22.352" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:22.352" starttime="20190402 11:27:21.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:22.353" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:22.353" starttime="20190402 11:27:22.352"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:22.354" starttime="20190402 11:27:22.353"></status>
</kw>
<msg timestamp="20190402 11:27:22.354" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:22.354" starttime="20190402 11:27:21.017"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:27:22.354" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:27:22.354" starttime="20190402 11:27:22.354"></status>
</kw>
<msg timestamp="20190402 11:27:22.354" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:27:22.355" starttime="20190402 11:27:21.014"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:27:22.355" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:27:22.355" starttime="20190402 11:27:22.355"></status>
</kw>
<status status="FAIL" endtime="20190402 11:27:22.355" starttime="20190402 11:27:21.013"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:32.359" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:27:32.359" starttime="20190402 11:27:32.358"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:32.360" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:27:32.360" starttime="20190402 11:27:32.359"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:32.361" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:32.361" starttime="20190402 11:27:32.361"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:32.363" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:27:33.846" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:33.846" level="INFO">${stdout} = enabled</msg>
<msg timestamp="20190402 11:27:33.846" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:33.846" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:33.846" starttime="20190402 11:27:32.362"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:33.847" level="INFO">${res} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:33.847" starttime="20190402 11:27:33.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:33.848" starttime="20190402 11:27:33.847"></status>
</kw>
<msg timestamp="20190402 11:27:33.848" level="INFO">${result} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:33.848" starttime="20190402 11:27:32.360"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:27:33.848" level="INFO">${value} = enabled</msg>
<status status="PASS" endtime="20190402 11:27:33.848" starttime="20190402 11:27:33.848"></status>
</kw>
<msg timestamp="20190402 11:27:33.848" level="INFO">${current_value} = enabled</msg>
<status status="PASS" endtime="20190402 11:27:33.848" starttime="20190402 11:27:32.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:33.849" starttime="20190402 11:27:33.848"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:33.849" starttime="20190402 11:27:32.356"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:33.849" starttime="20190402 11:24:28.925"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:33.849" starttime="20190402 11:24:26.245"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:33.849" starttime="20190402 11:22:16.999"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:33.849" starttime="20190402 11:22:16.998"></status>
</kw>
<doc>Evacuate all Cirros instances from computes
or controllers.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
</tags>
<status status="PASS" endtime="20190402 11:27:33.849" critical="yes" starttime="20190402 11:22:16.997"></status>
</test>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>OpenStack.Openstack Cleanup All</arg>
<arg>Utils.Stx Suite TearDown</arg>
</arguments>
<kw name="Openstack Cleanup All" library="OpenStack">
<doc>Delete all instances, images, flavors, networks and
keypairs generated during tests.</doc>
<kw name="Delete All Instances" library="OpenStack">
<doc>Get a list of all existing instances to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:33.851" level="INFO">${openstack_cmd} = openstack server list</msg>
<status status="PASS" endtime="20190402 11:27:33.851" starttime="20190402 11:27:33.851"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:33.852" level="INFO">${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:27:33.852" starttime="20190402 11:27:33.851"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:33.852" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:33.852" starttime="20190402 11:27:33.852"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:33.853" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:27:35.616" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:35.616" level="INFO">${stdout} = 

vm-cirros-2
vm-cirros-1</msg>
<msg timestamp="20190402 11:27:35.616" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:35.616" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:35.616" starttime="20190402 11:27:33.852"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:35.617" level="INFO">${res} = {u'stdout': u'\n\nvm-cirros-2\nvm-cirros-1', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:35.617" starttime="20190402 11:27:35.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:35.617" starttime="20190402 11:27:35.617"></status>
</kw>
<msg timestamp="20190402 11:27:35.617" level="INFO">&amp;{result} = { stdout=

vm-cirros-2
vm-cirros-1 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:27:35.617" starttime="20190402 11:27:33.852"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{vm_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:27:35.618" level="INFO">${response} = 

vm-cirros-2
vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:27:35.618" starttime="20190402 11:27:35.618"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:27:35.618" level="INFO">@{res_in_list} = [ vm-cirros-2 | vm-cirros-1 ]</msg>
<status status="PASS" endtime="20190402 11:27:35.618" starttime="20190402 11:27:35.618"></status>
</kw>
<msg timestamp="20190402 11:27:35.619" level="INFO">@{vm_list} = [ vm-cirros-2 | vm-cirros-1 ]</msg>
<status status="PASS" endtime="20190402 11:27:35.619" starttime="20190402 11:27:35.617"></status>
</kw>
<kw type="for" name="${vm} IN [ @{vm_list} ]">
<kw type="foritem" name="${vm} = vm-cirros-2">
<kw name="Delete Instance" library="OpenStack">
<doc>Delete an specific instance.</doc>
<arguments>
<arg>${vm}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:35.619" level="INFO">${openstack_cmd} = openstack server delete</msg>
<status status="PASS" endtime="20190402 11:27:35.619" starttime="20190402 11:27:35.619"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${vm}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:35.620" level="INFO">${cmd} = openstack server delete vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:27:35.620" starttime="20190402 11:27:35.619"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:35.620" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:35.620" starttime="20190402 11:27:35.620"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:35.621" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server delete vm-cirros-2'.</msg>
<msg timestamp="20190402 11:27:37.454" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:37.454" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:27:37.454" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:37.454" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:37.454" starttime="20190402 11:27:35.621"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:37.456" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:37.456" starttime="20190402 11:27:37.455"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:37.457" starttime="20190402 11:27:37.456"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:37.457" starttime="20190402 11:27:35.620"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:37.458" starttime="20190402 11:27:35.619"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:37.458" starttime="20190402 11:27:35.619"></status>
</kw>
<kw type="foritem" name="${vm} = vm-cirros-1">
<kw name="Delete Instance" library="OpenStack">
<doc>Delete an specific instance.</doc>
<arguments>
<arg>${vm}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:37.459" level="INFO">${openstack_cmd} = openstack server delete</msg>
<status status="PASS" endtime="20190402 11:27:37.459" starttime="20190402 11:27:37.459"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${vm}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:37.460" level="INFO">${cmd} = openstack server delete vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:27:37.460" starttime="20190402 11:27:37.459"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:37.462" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:37.462" starttime="20190402 11:27:37.461"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:37.463" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server delete vm-cirros-1'.</msg>
<msg timestamp="20190402 11:27:39.275" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:39.276" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:27:39.276" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:39.276" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:39.276" starttime="20190402 11:27:37.462"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:39.277" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:39.277" starttime="20190402 11:27:39.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:39.278" starttime="20190402 11:27:39.277"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:39.278" starttime="20190402 11:27:37.460"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:39.278" starttime="20190402 11:27:37.458"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:39.278" starttime="20190402 11:27:37.458"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:39.278" starttime="20190402 11:27:35.619"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:39.278" starttime="20190402 11:27:33.851"></status>
</kw>
<kw name="Delete All Images" library="OpenStack">
<doc>Get a list of all existing images to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:39.279" level="INFO">${openstack_cmd} = openstack image list</msg>
<status status="PASS" endtime="20190402 11:27:39.279" starttime="20190402 11:27:39.279"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "Cirros"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:39.279" level="INFO">${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"</msg>
<status status="PASS" endtime="20190402 11:27:39.279" starttime="20190402 11:27:39.279"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:39.280" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:39.280" starttime="20190402 11:27:39.280"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:39.281" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.</msg>
<msg timestamp="20190402 11:27:40.662" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:40.662" level="INFO">${stdout} = 

cirros</msg>
<msg timestamp="20190402 11:27:40.662" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:40.662" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:40.662" starttime="20190402 11:27:39.280"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:40.663" level="INFO">${res} = {u'stdout': u'\n\ncirros', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:40.663" starttime="20190402 11:27:40.662"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:40.664" starttime="20190402 11:27:40.663"></status>
</kw>
<msg timestamp="20190402 11:27:40.664" level="INFO">&amp;{result} = { stdout=

cirros | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:27:40.664" starttime="20190402 11:27:39.280"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{image_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:27:40.665" level="INFO">${response} = 

cirros</msg>
<status status="PASS" endtime="20190402 11:27:40.665" starttime="20190402 11:27:40.665"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:27:40.665" level="INFO">@{res_in_list} = [ cirros ]</msg>
<status status="PASS" endtime="20190402 11:27:40.665" starttime="20190402 11:27:40.665"></status>
</kw>
<msg timestamp="20190402 11:27:40.666" level="INFO">@{image_list} = [ cirros ]</msg>
<status status="PASS" endtime="20190402 11:27:40.666" starttime="20190402 11:27:40.664"></status>
</kw>
<kw type="for" name="${image} IN [ @{image_list} ]">
<kw type="foritem" name="${image} = cirros">
<kw name="Delete Image" library="OpenStack">
<doc>Delete an specific image.</doc>
<arguments>
<arg>${image}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:40.666" level="INFO">${openstack_cmd} = openstack image delete</msg>
<status status="PASS" endtime="20190402 11:27:40.666" starttime="20190402 11:27:40.666"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${image}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:40.666" level="INFO">${cmd} = openstack image delete cirros</msg>
<status status="PASS" endtime="20190402 11:27:40.667" starttime="20190402 11:27:40.666"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:40.667" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:40.667" starttime="20190402 11:27:40.667"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:40.668" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image delete cirros'.</msg>
<msg timestamp="20190402 11:27:43.152" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:43.152" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:27:43.152" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:43.152" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:43.153" starttime="20190402 11:27:40.668"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:43.153" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:43.153" starttime="20190402 11:27:43.153"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:43.154" starttime="20190402 11:27:43.154"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:43.154" starttime="20190402 11:27:40.667"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:43.154" starttime="20190402 11:27:40.666"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:43.154" starttime="20190402 11:27:40.666"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:43.154" starttime="20190402 11:27:40.666"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:43.155" starttime="20190402 11:27:39.278"></status>
</kw>
<kw name="Delete All Flavors" library="OpenStack">
<doc>Get a list of all existing flavors to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:43.155" level="INFO">${openstack_cmd} = openstack flavor list</msg>
<status status="PASS" endtime="20190402 11:27:43.155" starttime="20190402 11:27:43.155"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "m1"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:43.156" level="INFO">${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"</msg>
<status status="PASS" endtime="20190402 11:27:43.156" starttime="20190402 11:27:43.155"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:43.157" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:43.157" starttime="20190402 11:27:43.156"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:43.157" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.</msg>
<msg timestamp="20190402 11:27:44.554" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:44.554" level="INFO">${stdout} = 

f2.small
f1.small</msg>
<msg timestamp="20190402 11:27:44.554" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:44.554" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:44.554" starttime="20190402 11:27:43.157"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:44.555" level="INFO">${res} = {u'stdout': u'\n\nf2.small\nf1.small', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:44.555" starttime="20190402 11:27:44.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:44.556" starttime="20190402 11:27:44.555"></status>
</kw>
<msg timestamp="20190402 11:27:44.556" level="INFO">&amp;{result} = { stdout=

f2.small
f1.small | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:27:44.556" starttime="20190402 11:27:43.156"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{flavor_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:27:44.557" level="INFO">${response} = 

f2.small
f1.small</msg>
<status status="PASS" endtime="20190402 11:27:44.557" starttime="20190402 11:27:44.557"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:27:44.558" level="INFO">@{res_in_list} = [ f2.small | f1.small ]</msg>
<status status="PASS" endtime="20190402 11:27:44.558" starttime="20190402 11:27:44.557"></status>
</kw>
<msg timestamp="20190402 11:27:44.558" level="INFO">@{flavor_list} = [ f2.small | f1.small ]</msg>
<status status="PASS" endtime="20190402 11:27:44.558" starttime="20190402 11:27:44.556"></status>
</kw>
<kw type="for" name="${flavor} IN [ @{flavor_list} ]">
<kw type="foritem" name="${flavor} = f2.small">
<kw name="Delete Flavor" library="OpenStack">
<doc>Delete an specific flavor.</doc>
<arguments>
<arg>${flavor}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:44.559" level="INFO">${openstack_cmd} = openstack flavor delete</msg>
<status status="PASS" endtime="20190402 11:27:44.559" starttime="20190402 11:27:44.559"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${flavor}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:44.560" level="INFO">${cmd} = openstack flavor delete f2.small</msg>
<status status="PASS" endtime="20190402 11:27:44.560" starttime="20190402 11:27:44.559"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:44.561" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:44.561" starttime="20190402 11:27:44.560"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:44.562" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor delete f2.small'.</msg>
<msg timestamp="20190402 11:27:46.243" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:46.243" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:27:46.244" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:46.244" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:46.244" starttime="20190402 11:27:44.561"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:46.245" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:46.245" starttime="20190402 11:27:46.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:46.245" starttime="20190402 11:27:46.245"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:46.246" starttime="20190402 11:27:44.560"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:46.246" starttime="20190402 11:27:44.558"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:46.246" starttime="20190402 11:27:44.558"></status>
</kw>
<kw type="foritem" name="${flavor} = f1.small">
<kw name="Delete Flavor" library="OpenStack">
<doc>Delete an specific flavor.</doc>
<arguments>
<arg>${flavor}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:46.247" level="INFO">${openstack_cmd} = openstack flavor delete</msg>
<status status="PASS" endtime="20190402 11:27:46.247" starttime="20190402 11:27:46.247"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${flavor}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:46.248" level="INFO">${cmd} = openstack flavor delete f1.small</msg>
<status status="PASS" endtime="20190402 11:27:46.248" starttime="20190402 11:27:46.247"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:46.249" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:46.249" starttime="20190402 11:27:46.249"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:46.250" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor delete f1.small'.</msg>
<msg timestamp="20190402 11:27:47.638" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:47.638" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:27:47.638" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:47.639" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:47.639" starttime="20190402 11:27:46.249"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:47.640" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:47.640" starttime="20190402 11:27:47.639"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:47.641" starttime="20190402 11:27:47.640"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:47.641" starttime="20190402 11:27:46.248"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:47.641" starttime="20190402 11:27:46.246"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:47.642" starttime="20190402 11:27:46.246"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:47.642" starttime="20190402 11:27:44.558"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:47.642" starttime="20190402 11:27:43.155"></status>
</kw>
<kw name="Delete All Networks" library="OpenStack">
<doc>Get a list of all existing networks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:47.643" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190402 11:27:47.644" starttime="20190402 11:27:47.643"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "private"</arg>
<arg>grep -v "public"</arg>
<arg>grep -v "external"</arg>
<arg>grep -v "internal"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:47.645" level="INFO">${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"</msg>
<status status="PASS" endtime="20190402 11:27:47.645" starttime="20190402 11:27:47.644"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:47.647" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:47.647" starttime="20190402 11:27:47.646"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:47.648" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.</msg>
<msg timestamp="20190402 11:27:49.060" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:49.060" level="INFO">${stdout} = 

network-1</msg>
<msg timestamp="20190402 11:27:49.060" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:49.060" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:49.060" starttime="20190402 11:27:47.647"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:49.061" level="INFO">${res} = {u'stdout': u'\n\nnetwork-1', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:49.061" starttime="20190402 11:27:49.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:49.061" starttime="20190402 11:27:49.061"></status>
</kw>
<msg timestamp="20190402 11:27:49.062" level="INFO">&amp;{result} = { stdout=

network-1 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:27:49.062" starttime="20190402 11:27:47.645"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{network_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:27:49.063" level="INFO">${response} = 

network-1</msg>
<status status="PASS" endtime="20190402 11:27:49.063" starttime="20190402 11:27:49.062"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:27:49.063" level="INFO">@{res_in_list} = [ network-1 ]</msg>
<status status="PASS" endtime="20190402 11:27:49.063" starttime="20190402 11:27:49.063"></status>
</kw>
<msg timestamp="20190402 11:27:49.063" level="INFO">@{network_list} = [ network-1 ]</msg>
<status status="PASS" endtime="20190402 11:27:49.063" starttime="20190402 11:27:49.062"></status>
</kw>
<kw type="for" name="${network} IN [ @{network_list} ]">
<kw type="foritem" name="${network} = network-1">
<kw name="Delete Network" library="OpenStack">
<doc>Delete an specific network.</doc>
<arguments>
<arg>${network}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:49.064" level="INFO">${openstack_cmd} = openstack network delete</msg>
<status status="PASS" endtime="20190402 11:27:49.064" starttime="20190402 11:27:49.064"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${network}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:49.064" level="INFO">${cmd} = openstack network delete network-1</msg>
<status status="PASS" endtime="20190402 11:27:49.064" starttime="20190402 11:27:49.064"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:49.065" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:49.065" starttime="20190402 11:27:49.065"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:49.065" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network delete network-1'.</msg>
<msg timestamp="20190402 11:27:52.000" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:52.000" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:27:52.000" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:52.000" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:52.000" starttime="20190402 11:27:49.065"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:52.001" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:52.001" starttime="20190402 11:27:52.001"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:52.002" starttime="20190402 11:27:52.001"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:52.002" starttime="20190402 11:27:49.064"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:52.002" starttime="20190402 11:27:49.063"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:52.002" starttime="20190402 11:27:49.063"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:52.002" starttime="20190402 11:27:49.063"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:52.002" starttime="20190402 11:27:47.642"></status>
</kw>
<kw name="Delete All KeyPairs" library="OpenStack">
<doc>Get a list of all existing keypais to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack keypair list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:52.003" level="INFO">${openstack_cmd} = openstack keypair list</msg>
<status status="PASS" endtime="20190402 11:27:52.003" starttime="20190402 11:27:52.003"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:52.003" level="INFO">${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:27:52.003" starttime="20190402 11:27:52.003"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:52.005" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:52.005" starttime="20190402 11:27:52.005"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:52.006" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack keypair list|awk '{print$2}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:27:53.342" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:53.342" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:27:53.342" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:53.342" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:53.342" starttime="20190402 11:27:52.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:53.343" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:53.343" starttime="20190402 11:27:53.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:53.343" starttime="20190402 11:27:53.343"></status>
</kw>
<msg timestamp="20190402 11:27:53.344" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:27:53.344" starttime="20190402 11:27:52.004"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{key_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:27:53.345" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:27:53.345" starttime="20190402 11:27:53.344"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:27:53.345" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:27:53.345" starttime="20190402 11:27:53.345"></status>
</kw>
<msg timestamp="20190402 11:27:53.345" level="INFO">@{key_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:27:53.345" starttime="20190402 11:27:53.344"></status>
</kw>
<kw type="for" name="${key} IN [ @{key_list} ]">
<status status="PASS" endtime="20190402 11:27:53.345" starttime="20190402 11:27:53.345"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:53.345" starttime="20190402 11:27:52.002"></status>
</kw>
<kw name="Delete All Snapshots" library="OpenStack">
<doc>Get a list of all existing snapshots to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:53.346" level="INFO">${openstack_cmd} = openstack volume snapshot list</msg>
<status status="PASS" endtime="20190402 11:27:53.346" starttime="20190402 11:27:53.346"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:53.346" level="INFO">${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:27:53.346" starttime="20190402 11:27:53.346"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:53.347" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:53.347" starttime="20190402 11:27:53.347"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:53.348" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:27:54.728" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:54.728" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:27:54.728" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:54.728" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:54.728" starttime="20190402 11:27:53.347"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:54.729" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:54.729" starttime="20190402 11:27:54.728"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:54.729" starttime="20190402 11:27:54.729"></status>
</kw>
<msg timestamp="20190402 11:27:54.730" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:27:54.730" starttime="20190402 11:27:53.347"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{snapshot_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:27:54.730" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:27:54.731" starttime="20190402 11:27:54.730"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:27:54.731" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:27:54.731" starttime="20190402 11:27:54.731"></status>
</kw>
<msg timestamp="20190402 11:27:54.731" level="INFO">@{snapshot_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:27:54.731" starttime="20190402 11:27:54.730"></status>
</kw>
<kw type="for" name="${snapshot} IN [ @{snapshot_list} ]">
<status status="PASS" endtime="20190402 11:27:54.731" starttime="20190402 11:27:54.731"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:54.731" starttime="20190402 11:27:53.346"></status>
</kw>
<kw name="Delete All Volumes" library="OpenStack">
<doc>Get a list of all existing volumes to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:54.732" level="INFO">${openstack_cmd} = openstack volume list</msg>
<status status="PASS" endtime="20190402 11:27:54.732" starttime="20190402 11:27:54.732"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "ID"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:54.732" level="INFO">${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"</msg>
<status status="PASS" endtime="20190402 11:27:54.732" starttime="20190402 11:27:54.732"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:54.733" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:54.733" starttime="20190402 11:27:54.733"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:54.733" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume list|awk '{print$2}'|grep -v "ID"'.</msg>
<msg timestamp="20190402 11:27:56.315" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:56.316" level="INFO">${stdout} = 

2168d291-ffd6-4dcc-b727-3e686f86145a
3ce6d85f-8f2e-4f6a-80be-148eb0a6d3b2</msg>
<msg timestamp="20190402 11:27:56.316" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:56.316" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:56.316" starttime="20190402 11:27:54.733"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:56.317" level="INFO">${res} = {u'stdout': u'\n\n2168d291-ffd6-4dcc-b727-3e686f86145a\n3ce6d85f-8f2e-4f6a-80be-148eb0a6d3b2', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:56.317" starttime="20190402 11:27:56.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:56.317" starttime="20190402 11:27:56.317"></status>
</kw>
<msg timestamp="20190402 11:27:56.317" level="INFO">&amp;{result} = { stdout=

2168d291-ffd6-4dcc-b727-3e686f86145a
3ce6d85f-8f2e-4f6a-80be-148eb0a6d3b2 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:27:56.317" starttime="20190402 11:27:54.732"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{volume_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:27:56.318" level="INFO">${response} = 

2168d291-ffd6-4dcc-b727-3e686f86145a
3ce6d85f-8f2e-4f6a-80be-148eb0a6d3b2</msg>
<status status="PASS" endtime="20190402 11:27:56.318" starttime="20190402 11:27:56.318"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:27:56.318" level="INFO">@{res_in_list} = [ 2168d291-ffd6-4dcc-b727-3e686f86145a | 3ce6d85f-8f2e-4f6a-80be-148eb0a6d3b2 ]</msg>
<status status="PASS" endtime="20190402 11:27:56.318" starttime="20190402 11:27:56.318"></status>
</kw>
<msg timestamp="20190402 11:27:56.318" level="INFO">@{volume_list} = [ 2168d291-ffd6-4dcc-b727-3e686f86145a | 3ce6d85f-8f2e-4f6a-80be-148eb0a6d3b2 ]</msg>
<status status="PASS" endtime="20190402 11:27:56.318" starttime="20190402 11:27:56.317"></status>
</kw>
<kw type="for" name="${volume} IN [ @{volume_list} ]">
<kw type="foritem" name="${volume} = 2168d291-ffd6-4dcc-b727-3e686f86145a">
<kw name="Delete Volume" library="OpenStack">
<doc>Delete an specific volume.</doc>
<arguments>
<arg>${volume}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:56.319" level="INFO">${openstack_cmd} = openstack volume delete</msg>
<status status="PASS" endtime="20190402 11:27:56.319" starttime="20190402 11:27:56.319"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${volume}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:56.319" level="INFO">${cmd} = openstack volume delete 2168d291-ffd6-4dcc-b727-3e686f86145a</msg>
<status status="PASS" endtime="20190402 11:27:56.319" starttime="20190402 11:27:56.319"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:56.320" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:56.320" starttime="20190402 11:27:56.320"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:56.321" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume delete 2168d291-ffd6-4dcc-b727-3e686f86145a'.</msg>
<msg timestamp="20190402 11:27:57.702" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:57.703" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:27:57.703" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:57.703" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:57.703" starttime="20190402 11:27:56.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:57.704" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:57.704" starttime="20190402 11:27:57.703"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:57.705" starttime="20190402 11:27:57.704"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:57.705" starttime="20190402 11:27:56.320"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:57.706" starttime="20190402 11:27:56.319"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:57.706" starttime="20190402 11:27:56.319"></status>
</kw>
<kw type="foritem" name="${volume} = 3ce6d85f-8f2e-4f6a-80be-148eb0a6d3b2">
<kw name="Delete Volume" library="OpenStack">
<doc>Delete an specific volume.</doc>
<arguments>
<arg>${volume}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:57.707" level="INFO">${openstack_cmd} = openstack volume delete</msg>
<status status="PASS" endtime="20190402 11:27:57.707" starttime="20190402 11:27:57.707"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${volume}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:57.708" level="INFO">${cmd} = openstack volume delete 3ce6d85f-8f2e-4f6a-80be-148eb0a6d3b2</msg>
<status status="PASS" endtime="20190402 11:27:57.708" starttime="20190402 11:27:57.707"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:57.709" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:57.710" starttime="20190402 11:27:57.709"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:57.711" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume delete 3ce6d85f-8f2e-4f6a-80be-148eb0a6d3b2'.</msg>
<msg timestamp="20190402 11:27:59.193" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:27:59.193" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:27:59.194" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:27:59.194" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:27:59.194" starttime="20190402 11:27:57.710"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:27:59.196" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:27:59.196" starttime="20190402 11:27:59.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:27:59.197" starttime="20190402 11:27:59.196"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:59.198" starttime="20190402 11:27:57.708"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:59.198" starttime="20190402 11:27:57.706"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:59.198" starttime="20190402 11:27:57.706"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:59.198" starttime="20190402 11:27:56.319"></status>
</kw>
<status status="PASS" endtime="20190402 11:27:59.199" starttime="20190402 11:27:54.731"></status>
</kw>
<kw name="Delete All Stacks" library="OpenStack">
<doc>Get a list of all existing stacks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:27:59.200" level="INFO">${openstack_cmd} = openstack stack list</msg>
<status status="PASS" endtime="20190402 11:27:59.200" starttime="20190402 11:27:59.200"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:27:59.201" level="INFO">${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:27:59.201" starttime="20190402 11:27:59.201"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:27:59.204" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:27:59.204" starttime="20190402 11:27:59.203"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:27:59.205" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:28:00.540" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:00.540" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:28:00.540" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:00.540" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:00.540" starttime="20190402 11:27:59.204"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:00.541" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:00.541" starttime="20190402 11:28:00.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:00.542" starttime="20190402 11:28:00.541"></status>
</kw>
<msg timestamp="20190402 11:28:00.542" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:28:00.542" starttime="20190402 11:27:59.202"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{stack_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:28:00.543" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:28:00.543" starttime="20190402 11:28:00.542"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:28:00.543" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:28:00.543" starttime="20190402 11:28:00.543"></status>
</kw>
<msg timestamp="20190402 11:28:00.543" level="INFO">@{stack_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:28:00.543" starttime="20190402 11:28:00.542"></status>
</kw>
<kw type="for" name="${stack} IN [ @{stack_list} ]">
<status status="PASS" endtime="20190402 11:28:00.544" starttime="20190402 11:28:00.543"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:00.544" starttime="20190402 11:27:59.199"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:00.544" starttime="20190402 11:27:33.851"></status>
</kw>
<kw name="Stx Suite TearDown" library="Utils">
<doc>Wrapper to clean up activities on the suite.</doc>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20190402 11:28:00.576" starttime="20190402 11:28:00.544"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:00.577" starttime="20190402 11:28:00.544"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:00.577" starttime="20190402 11:27:33.850"></status>
</kw>
<doc>Tests to create instances from volume, perform different
power status and set properties, using Cirros OS.
Author(s):
- Juan Carlos Alonso juan.carlos.alonso@intel.com</doc>
<status status="PASS" endtime="20190402 11:28:00.577" starttime="20190402 11:06:06.305"></status>
</suite>
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-OpenStack/03-Instance-From-Snapshot.robot" id="s1-s1-s3" name="03-Instance-From-Snapshot">
<kw type="setup" name="Stx Suite Setup" library="Utils">
<doc>Wrapper to setup the environment needed for exercise
StarlingX features</doc>
<kw name="Open Master Controller Connection" library="Utils">
<doc>Establish a SSH connection with the master controller
to start executing the the suite.</doc>
<kw name="Connect to Controller Node" library="Utils">
<doc>Stablish a SSH connection to the controller and return
the connection id</doc>
<arguments>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_NAME}</arg>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_PSWD}</arg>
<arg>${CONFIG.general.IP_UNIT_0_ADDRESS}</arg>
</arguments>
<assign>
<var>${master_controller_connection}</var>
</assign>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${ip_address} prompt=${prompt}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${controller_connection}</var>
</assign>
<msg timestamp="20190402 11:28:00.615" level="INFO">${controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:28:00.615" starttime="20190402 11:28:00.614"></status>
</kw>
<kw name="Flexible_SSH_Login" library="Utils">
<doc>On active SSH session: if given non-empty password,
do Login, else do Login With Public Key.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${password}</arg>
</arguments>
<assign>
<var>${pwd_length}</var>
</assign>
<msg timestamp="20190402 11:28:00.616" level="INFO">Length is 10</msg>
<msg timestamp="20190402 11:28:00.616" level="INFO">${pwd_length} = 10</msg>
<status status="PASS" endtime="20190402 11:28:00.616" starttime="20190402 11:28:00.616"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${pwd_length} &gt; 0</arg>
<arg>SSHLibrary.Login</arg>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<msg timestamp="20190402 11:28:00.617" level="INFO">Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.</msg>
<msg timestamp="20190402 11:28:01.740" level="INFO">Read output: Last login: Tue Apr  2 16:54:49 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$</msg>
<status status="PASS" endtime="20190402 11:28:01.740" starttime="20190402 11:28:00.617"></status>
</kw>
<msg timestamp="20190402 11:28:01.740" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190402 11:28:01.740" starttime="20190402 11:28:00.616"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:01.741" starttime="20190402 11:28:00.615"></status>
</kw>
<msg timestamp="20190402 11:28:01.741" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:28:01.741" starttime="20190402 11:28:00.614"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190402 11:28:01.741" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:28:01.741" starttime="20190402 11:28:01.741"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190402 11:28:01.742" level="INFO">1</msg>
<status status="PASS" endtime="20190402 11:28:01.742" starttime="20190402 11:28:01.741"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:01.742" starttime="20190402 11:28:00.613"></status>
</kw>
<kw name="Set Env Vars From Openrc" library="Utils">
<doc>Sources the openrc form /etc/nova/ to have the admin
variables exported on the controller.</doc>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>source /etc/platform/openrc</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:01.743" starttime="20190402 11:28:01.743"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:28:01.744" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:28:01.744" starttime="20190402 11:28:01.744"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:01.745" starttime="20190402 11:28:01.744"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:01.745" starttime="20190402 11:28:01.745"></status>
</kw>
<msg timestamp="20190402 11:28:01.745" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:28:01.746" starttime="20190402 11:28:01.743"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20190402 11:28:01.746" starttime="20190402 11:28:01.746"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:28:01.752" level="INFO">source /etc/platform/openrc</msg>
<status status="PASS" endtime="20190402 11:28:01.752" starttime="20190402 11:28:01.746"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:28:02.142" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:28:02.142" level="INFO">${output} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:28:02.142" starttime="20190402 11:28:01.752"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:28:02.143" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:28:02.143" starttime="20190402 11:28:02.143"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:28:02.144" level="INFO">${clean_out} = </msg>
<status status="PASS" endtime="20190402 11:28:02.144" starttime="20190402 11:28:02.144"></status>
</kw>
<msg timestamp="20190402 11:28:02.144" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190402 11:28:02.144" starttime="20190402 11:28:02.143"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:28:02.146" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:28:02.146" starttime="20190402 11:28:02.144"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:02.147" level="INFO">0</msg>
<msg timestamp="20190402 11:28:02.147" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:02.147" starttime="20190402 11:28:02.147"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:28:02.147" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:28:02.147" starttime="20190402 11:28:02.147"></status>
</kw>
<msg timestamp="20190402 11:28:02.147" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:02.147" starttime="20190402 11:28:02.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:02.148" starttime="20190402 11:28:02.148"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:02.148" starttime="20190402 11:28:02.148"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:02.149" starttime="20190402 11:28:02.148"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:28:02.149" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: </msg>
<status status="PASS" endtime="20190402 11:28:02.149" starttime="20190402 11:28:02.149"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:02.149" starttime="20190402 11:28:01.742"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:02.149" starttime="20190402 11:28:01.742"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:02.149" starttime="20190402 11:28:00.613"></status>
</kw>
<test id="s1-s1-s3-t1" name="Create Flavors for Instances">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${flavor_property_1}</arg>
<arg>${flavor_property_2}</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190402 11:28:02.150" level="INFO">${properties} = --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared'</msg>
<status status="PASS" endtime="20190402 11:28:02.150" starttime="20190402 11:28:02.150"></status>
</kw>
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${cirros_flavor_ram}</arg>
<arg>${cirros_flavor_vcpus}</arg>
<arg>${cirros_flavor_disk}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:28:02.151" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190402 11:28:02.151" starttime="20190402 11:28:02.151"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:28:02.151" level="INFO">${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small</msg>
<status status="PASS" endtime="20190402 11:28:02.151" starttime="20190402 11:28:02.151"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:02.152" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:02.152" starttime="20190402 11:28:02.152"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:02.153" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.</msg>
<msg timestamp="20190402 11:28:03.534" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:03.535" level="INFO">${stdout} = +----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+------------------------------...</msg>
<msg timestamp="20190402 11:28:03.535" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:03.535" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:03.535" starttime="20190402 11:28:02.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:03.536" level="INFO">${res} = {u'stdout': u'+----------------------------+--------------------------------------+\n| Field                      | Value                                |\n+----------------------------+--------------...</msg>
<status status="PASS" endtime="20190402 11:28:03.536" starttime="20190402 11:28:03.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:03.536" starttime="20190402 11:28:03.536"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:03.536" starttime="20190402 11:28:02.152"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:03.536" starttime="20190402 11:28:02.150"></status>
</kw>
<doc>Create flavors with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:28:03.536" critical="yes" starttime="20190402 11:28:02.149"></status>
</test>
<test id="s1-s1-s3-t2" name="Create Images for Instances">
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/${cirros_image}</arg>
<arg>${host_image_path}/${cirros_image}</arg>
</arguments>
<msg timestamp="20190402 11:28:03.545" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190402 11:28:03.551" level="INFO">[chan 3] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190402 11:28:04.016" level="INFO">'/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2' -&gt; '/home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2'</msg>
<status status="PASS" endtime="20190402 11:28:04.017" starttime="20190402 11:28:03.537"></status>
</kw>
<kw name="Create Image" library="OpenStack">
<doc>Create image from a given .img file.</doc>
<arguments>
<arg>${host_image_path}/${cirros_image}</arg>
<arg>${disk_format}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<kw name="File Should Exist" library="SSHLibrary">
<doc>Fails if the given ``path`` does NOT point to an existing file.</doc>
<arguments>
<arg>${file_path}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:04.018" starttime="20190402 11:28:04.017"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:28:04.018" level="INFO">${openstack_cmd} = openstack image create</msg>
<status status="PASS" endtime="20190402 11:28:04.018" starttime="20190402 11:28:04.018"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--file ${file_path}</arg>
<arg>--disk-format ${disk_format}</arg>
<arg>--public</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:28:04.019" level="INFO">${cmd} = openstack image create --file /home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2 --disk-format qcow2 --public cirros</msg>
<status status="PASS" endtime="20190402 11:28:04.019" starttime="20190402 11:28:04.018"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>3 min</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:04.019" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:04.019" starttime="20190402 11:28:04.019"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:04.020" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image create --file /home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2 --disk-format qcow2 --public cirros'.</msg>
<msg timestamp="20190402 11:28:21.840" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:21.840" level="INFO">${stdout} = +------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<msg timestamp="20190402 11:28:21.840" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:21.840" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:21.841" starttime="20190402 11:28:04.019"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:21.841" level="INFO">${res} = {u'stdout': u"+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20190402 11:28:21.841" starttime="20190402 11:28:21.841"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:21.842" starttime="20190402 11:28:21.842"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:21.842" starttime="20190402 11:28:04.019"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>image</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>active</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>image</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>active</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:28:21.844" level="INFO">${openstack_cmd} = openstack image show cirros</msg>
<status status="PASS" endtime="20190402 11:28:21.844" starttime="20190402 11:28:21.843"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:28:21.844" level="INFO">${cmd} = openstack image show cirros|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:28:21.844" starttime="20190402 11:28:21.844"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:21.845" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:21.845" starttime="20190402 11:28:21.844"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:21.845" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image show cirros|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:28:23.125" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:23.125" level="INFO">${stdout} = active</msg>
<msg timestamp="20190402 11:28:23.125" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:23.125" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:23.125" starttime="20190402 11:28:21.845"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:23.126" level="INFO">${res} = {u'stdout': u'active', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:23.126" starttime="20190402 11:28:23.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:23.127" starttime="20190402 11:28:23.126"></status>
</kw>
<msg timestamp="20190402 11:28:23.127" level="INFO">${result} = {u'stdout': u'active', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:23.127" starttime="20190402 11:28:21.844"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:28:23.127" level="INFO">${value} = active</msg>
<status status="PASS" endtime="20190402 11:28:23.127" starttime="20190402 11:28:23.127"></status>
</kw>
<msg timestamp="20190402 11:28:23.128" level="INFO">${current_value} = active</msg>
<status status="PASS" endtime="20190402 11:28:23.128" starttime="20190402 11:28:21.843"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:23.128" starttime="20190402 11:28:23.128"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:23.128" starttime="20190402 11:28:21.843"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:23.128" starttime="20190402 11:28:21.842"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:23.128" starttime="20190402 11:28:04.017"></status>
</kw>
<doc>Create images with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:28:23.129" critical="yes" starttime="20190402 11:28:03.537"></status>
</test>
<test id="s1-s1-s3-t3" name="Create Networks for Instance">
<kw name="Create Network" library="OpenStack">
<doc>Create Network with openstack request.</doc>
<arguments>
<arg>${network_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:28:23.130" level="INFO">${openstack_cmd} = openstack network create</msg>
<status status="PASS" endtime="20190402 11:28:23.130" starttime="20190402 11:28:23.130"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${network_name}</arg>
<arg>${additional_args}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:28:23.130" level="INFO">${cmd} = openstack network create network-1 </msg>
<status status="PASS" endtime="20190402 11:28:23.130" starttime="20190402 11:28:23.130"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:23.131" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:23.131" starttime="20190402 11:28:23.131"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:23.131" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network create network-1 '.</msg>
<msg timestamp="20190402 11:28:24.680" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:24.680" level="INFO">${stdout} = +---------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<msg timestamp="20190402 11:28:24.680" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:24.681" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:24.681" starttime="20190402 11:28:23.131"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:24.681" level="INFO">${res} = {u'stdout': u"+---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20190402 11:28:24.681" starttime="20190402 11:28:24.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:24.682" starttime="20190402 11:28:24.681"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:24.682" starttime="20190402 11:28:23.130"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:24.682" starttime="20190402 11:28:23.129"></status>
</kw>
<kw name="Create Subnet" library="OpenStack">
<doc>Create SubNet for the Network with neutron request.</doc>
<arguments>
<arg>${network_name}</arg>
<arg>${subnet_range}</arg>
<arg>${subnet_extras}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack subnet create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:28:24.683" level="INFO">${openstack_cmd} = openstack subnet create</msg>
<status status="PASS" endtime="20190402 11:28:24.683" starttime="20190402 11:28:24.683"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--network ${network_name}</arg>
<arg>--subnet-range ${range_ip} ${additional_args}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:28:24.683" level="INFO">${cmd} = openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1</msg>
<status status="PASS" endtime="20190402 11:28:24.683" starttime="20190402 11:28:24.683"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:24.684" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:24.684" starttime="20190402 11:28:24.684"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:24.684" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1'.</msg>
<msg timestamp="20190402 11:28:26.430" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:26.430" level="INFO">${stdout} = +-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<msg timestamp="20190402 11:28:26.430" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:26.430" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:26.430" starttime="20190402 11:28:24.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:26.431" level="INFO">${res} = {u'stdout': u"+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20190402 11:28:26.431" starttime="20190402 11:28:26.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:26.432" starttime="20190402 11:28:26.431"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:26.432" starttime="20190402 11:28:24.683"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:26.432" starttime="20190402 11:28:24.682"></status>
</kw>
<doc>Create networks to be used to launch Cirros and Centos
instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:28:26.432" critical="yes" starttime="20190402 11:28:23.129"></status>
</test>
<test id="s1-s1-s3-t4" name="Create Volume for Instances">
<kw name="Create Volume" library="OpenStack">
<doc>Create Volume.</doc>
<arguments>
<arg>${cirros_volume_size}</arg>
<arg>${cirros_image_name}</arg>
<arg>--bootable</arg>
<arg>${cirros_volume_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:28:26.434" level="INFO">${openstack_cmd} = openstack volume create</msg>
<status status="PASS" endtime="20190402 11:28:26.434" starttime="20190402 11:28:26.434"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--size ${size}</arg>
<arg>--image ${image}</arg>
<arg>${bootable}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:28:26.434" level="INFO">${cmd} = openstack volume create --size 20 --image cirros --bootable vol-cirros-1</msg>
<status status="PASS" endtime="20190402 11:28:26.434" starttime="20190402 11:28:26.434"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:26.435" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:26.436" starttime="20190402 11:28:26.435"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:26.436" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume create --size 20 --image cirros --bootable vol-cirros-1'.</msg>
<msg timestamp="20190402 11:28:27.968" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:27.969" level="INFO">${stdout} = +---------------------+--------------------------------------+
| Field               | Value                                |
+---------------------+--------------------------------------+
| attachmen...</msg>
<msg timestamp="20190402 11:28:27.969" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:27.969" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:27.969" starttime="20190402 11:28:26.436"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:27.969" level="INFO">${res} = {u'stdout': u'+---------------------+--------------------------------------+\n| Field               | Value                                |\n+---------------------+-----------------------------------...</msg>
<status status="PASS" endtime="20190402 11:28:27.969" starttime="20190402 11:28:27.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:27.970" starttime="20190402 11:28:27.970"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:27.970" starttime="20190402 11:28:26.435"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>10 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:28:27.971" level="INFO">${openstack_cmd} = openstack volume show vol-cirros-1</msg>
<status status="PASS" endtime="20190402 11:28:27.971" starttime="20190402 11:28:27.971"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:28:27.972" level="INFO">${cmd} = openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:28:27.972" starttime="20190402 11:28:27.971"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:27.972" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:27.973" starttime="20190402 11:28:27.972"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:27.973" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:28:29.435" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:29.435" level="INFO">${stdout} = creating</msg>
<msg timestamp="20190402 11:28:29.436" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:29.436" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:29.436" starttime="20190402 11:28:27.973"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:29.437" level="INFO">${res} = {u'stdout': u'creating', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:29.437" starttime="20190402 11:28:29.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:29.438" starttime="20190402 11:28:29.438"></status>
</kw>
<msg timestamp="20190402 11:28:29.439" level="INFO">${result} = {u'stdout': u'creating', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:29.439" starttime="20190402 11:28:27.972"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:28:29.440" level="INFO">${value} = creating</msg>
<status status="PASS" endtime="20190402 11:28:29.440" starttime="20190402 11:28:29.439"></status>
</kw>
<msg timestamp="20190402 11:28:29.440" level="INFO">${current_value} = creating</msg>
<status status="PASS" endtime="20190402 11:28:29.440" starttime="20190402 11:28:27.971"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:28:29.441" level="FAIL">creating != available</msg>
<status status="FAIL" endtime="20190402 11:28:29.442" starttime="20190402 11:28:29.441"></status>
</kw>
<status status="FAIL" endtime="20190402 11:28:29.442" starttime="20190402 11:28:27.970"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:28:39.444" level="INFO">${openstack_cmd} = openstack volume show vol-cirros-1</msg>
<status status="PASS" endtime="20190402 11:28:39.444" starttime="20190402 11:28:39.443"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:28:39.444" level="INFO">${cmd} = openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:28:39.444" starttime="20190402 11:28:39.444"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:39.445" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:39.445" starttime="20190402 11:28:39.445"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:39.446" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume show vol-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:28:40.827" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:40.827" level="INFO">${stdout} = available</msg>
<msg timestamp="20190402 11:28:40.827" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:40.827" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:40.828" starttime="20190402 11:28:39.445"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:40.828" level="INFO">${res} = {u'stdout': u'available', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:40.828" starttime="20190402 11:28:40.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:40.829" starttime="20190402 11:28:40.828"></status>
</kw>
<msg timestamp="20190402 11:28:40.829" level="INFO">${result} = {u'stdout': u'available', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:40.829" starttime="20190402 11:28:39.444"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:28:40.829" level="INFO">${value} = available</msg>
<status status="PASS" endtime="20190402 11:28:40.829" starttime="20190402 11:28:40.829"></status>
</kw>
<msg timestamp="20190402 11:28:40.829" level="INFO">${current_value} = available</msg>
<status status="PASS" endtime="20190402 11:28:40.829" starttime="20190402 11:28:39.443"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:40.830" starttime="20190402 11:28:40.830"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:40.830" starttime="20190402 11:28:39.442"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:40.830" starttime="20190402 11:28:27.970"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:40.830" starttime="20190402 11:28:26.433"></status>
</kw>
<doc>Create volumes with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:28:40.830" critical="yes" starttime="20190402 11:28:26.433"></status>
</test>
<test id="s1-s1-s3-t5" name="Create Snapshot for Instance">
<kw name="Create Snapshot" library="OpenStack">
<doc>Create Snapshot.</doc>
<arguments>
<arg>${cirros_volume_name}</arg>
<arg>${cirros_snapshot_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack volume snapshot create --volume ${volume} ${name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:40.832" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:40.832" starttime="20190402 11:28:40.831"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:40.832" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot create --volume vol-cirros-1 snap-cirros-1'.</msg>
<msg timestamp="20190402 11:28:42.264" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:42.264" level="INFO">${stdout} = +-------------+--------------------------------------+
| Field       | Value                                |
+-------------+--------------------------------------+
| created_at  | 2019-04-02T17:17:24...</msg>
<msg timestamp="20190402 11:28:42.264" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:42.264" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:42.264" starttime="20190402 11:28:40.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:42.265" level="INFO">${res} = {u'stdout': u'+-------------+--------------------------------------+\n| Field       | Value                                |\n+-------------+--------------------------------------+\n| created_at  | 20...</msg>
<status status="PASS" endtime="20190402 11:28:42.265" starttime="20190402 11:28:42.264"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:42.266" starttime="20190402 11:28:42.265"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:42.266" starttime="20190402 11:28:40.831"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>volume snapshot</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume snapshot</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:28:42.268" level="INFO">${openstack_cmd} = openstack volume snapshot show snap-cirros-1</msg>
<status status="PASS" endtime="20190402 11:28:42.268" starttime="20190402 11:28:42.267"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:28:42.268" level="INFO">${cmd} = openstack volume snapshot show snap-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:28:42.268" starttime="20190402 11:28:42.268"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:42.269" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:42.269" starttime="20190402 11:28:42.269"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:42.270" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot show snap-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:28:43.601" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:43.602" level="INFO">${stdout} = available</msg>
<msg timestamp="20190402 11:28:43.602" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:43.602" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:43.602" starttime="20190402 11:28:42.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:43.603" level="INFO">${res} = {u'stdout': u'available', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:43.603" starttime="20190402 11:28:43.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:43.603" starttime="20190402 11:28:43.603"></status>
</kw>
<msg timestamp="20190402 11:28:43.603" level="INFO">${result} = {u'stdout': u'available', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:43.603" starttime="20190402 11:28:42.268"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:28:43.604" level="INFO">${value} = available</msg>
<status status="PASS" endtime="20190402 11:28:43.604" starttime="20190402 11:28:43.603"></status>
</kw>
<msg timestamp="20190402 11:28:43.604" level="INFO">${current_value} = available</msg>
<status status="PASS" endtime="20190402 11:28:43.604" starttime="20190402 11:28:42.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:43.604" starttime="20190402 11:28:43.604"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:43.604" starttime="20190402 11:28:42.266"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:43.604" starttime="20190402 11:28:42.266"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:43.605" starttime="20190402 11:28:40.831"></status>
</kw>
<kw name="Create Snapshot" library="OpenStack">
<doc>Create Snapshot.</doc>
<arguments>
<arg>${cirros_volume_name}</arg>
<arg>${cirros_snapshot_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack volume snapshot create --volume ${volume} ${name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:43.606" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:43.606" starttime="20190402 11:28:43.605"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:43.606" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot create --volume vol-cirros-1 snap-cirros-2'.</msg>
<msg timestamp="20190402 11:28:45.037" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:45.037" level="INFO">${stdout} = +-------------+--------------------------------------+
| Field       | Value                                |
+-------------+--------------------------------------+
| created_at  | 2019-04-02T17:17:27...</msg>
<msg timestamp="20190402 11:28:45.037" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:45.037" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:45.037" starttime="20190402 11:28:43.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:45.039" level="INFO">${res} = {u'stdout': u'+-------------+--------------------------------------+\n| Field       | Value                                |\n+-------------+--------------------------------------+\n| created_at  | 20...</msg>
<status status="PASS" endtime="20190402 11:28:45.039" starttime="20190402 11:28:45.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:45.040" starttime="20190402 11:28:45.039"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:45.040" starttime="20190402 11:28:43.605"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>volume snapshot</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>volume snapshot</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>available</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:28:45.044" level="INFO">${openstack_cmd} = openstack volume snapshot show snap-cirros-2</msg>
<status status="PASS" endtime="20190402 11:28:45.044" starttime="20190402 11:28:45.043"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:28:45.045" level="INFO">${cmd} = openstack volume snapshot show snap-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:28:45.045" starttime="20190402 11:28:45.044"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:45.046" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:45.046" starttime="20190402 11:28:45.046"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:45.046" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot show snap-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:28:46.478" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:46.478" level="INFO">${stdout} = available</msg>
<msg timestamp="20190402 11:28:46.479" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:46.479" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:46.479" starttime="20190402 11:28:45.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:46.481" level="INFO">${res} = {u'stdout': u'available', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:46.481" starttime="20190402 11:28:46.480"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:46.482" starttime="20190402 11:28:46.482"></status>
</kw>
<msg timestamp="20190402 11:28:46.483" level="INFO">${result} = {u'stdout': u'available', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:46.483" starttime="20190402 11:28:45.045"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:28:46.484" level="INFO">${value} = available</msg>
<status status="PASS" endtime="20190402 11:28:46.484" starttime="20190402 11:28:46.483"></status>
</kw>
<msg timestamp="20190402 11:28:46.484" level="INFO">${current_value} = available</msg>
<status status="PASS" endtime="20190402 11:28:46.485" starttime="20190402 11:28:45.042"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:46.486" starttime="20190402 11:28:46.485"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:46.486" starttime="20190402 11:28:45.041"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:46.486" starttime="20190402 11:28:45.040"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:46.486" starttime="20190402 11:28:43.605"></status>
</kw>
<doc>Create snapshots with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:28:46.487" critical="yes" starttime="20190402 11:28:40.830"></status>
</test>
<test id="s1-s1-s3-t6" name="Launch Instances">
<kw name="Create Instance From Snapshot" library="OpenStack">
<doc>Create a VM Instances with the net id of the Netowrk
flavor and snapshot</doc>
<arguments>
<arg>${network_name}</arg>
<arg>${cirros_image_name}</arg>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_snapshot_name}</arg>
<arg>${cirros_snapshot_size}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Get Net Id" library="OpenStack">
<doc>Retrieve the net id for the given network name</doc>
<arguments>
<arg>${net_name}</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:28:46.491" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190402 11:28:46.491" starttime="20190402 11:28:46.490"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "${network_name}"</arg>
<arg>awk '{print$2}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:28:46.492" level="INFO">${cmd} = openstack network list|grep "network-1"|awk '{print$2}'</msg>
<status status="PASS" endtime="20190402 11:28:46.492" starttime="20190402 11:28:46.492"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:46.494" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:46.494" starttime="20190402 11:28:46.494"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:46.495" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|grep "network-1"|awk '{print$2}''.</msg>
<msg timestamp="20190402 11:28:47.827" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:47.827" level="INFO">${stdout} = ee85ac71-8e0c-42ee-b680-c3409d6d710b</msg>
<msg timestamp="20190402 11:28:47.827" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:47.828" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:47.828" starttime="20190402 11:28:46.495"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:47.829" level="INFO">${res} = {u'stdout': u'ee85ac71-8e0c-42ee-b680-c3409d6d710b', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:47.829" starttime="20190402 11:28:47.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:47.830" starttime="20190402 11:28:47.830"></status>
</kw>
<msg timestamp="20190402 11:28:47.830" level="INFO">&amp;{result} = { stdout=ee85ac71-8e0c-42ee-b680-c3409d6d710b | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:28:47.830" starttime="20190402 11:28:46.493"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:28:47.831" level="INFO">${output} = ee85ac71-8e0c-42ee-b680-c3409d6d710b</msg>
<status status="PASS" endtime="20190402 11:28:47.831" starttime="20190402 11:28:47.830"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${splitted_output}</var>
</assign>
<msg timestamp="20190402 11:28:47.832" level="INFO">${splitted_output} = [u'ee85ac71-8e0c-42ee-b680-c3409d6d710b']</msg>
<status status="PASS" endtime="20190402 11:28:47.832" starttime="20190402 11:28:47.832"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${splitted_output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<msg timestamp="20190402 11:28:47.832" level="INFO">${net_id} = ee85ac71-8e0c-42ee-b680-c3409d6d710b</msg>
<status status="PASS" endtime="20190402 11:28:47.832" starttime="20190402 11:28:47.832"></status>
</kw>
<msg timestamp="20190402 11:28:47.832" level="INFO">${net_id} = ee85ac71-8e0c-42ee-b680-c3409d6d710b</msg>
<status status="PASS" endtime="20190402 11:28:47.832" starttime="20190402 11:28:46.490"></status>
</kw>
<kw name="Get Snapshot ID" library="OpenStack">
<doc>Retrieve the snapshot id for the given snapshot name</doc>
<arguments>
<arg>${snapshot}</arg>
</arguments>
<assign>
<var>${snapshot_id}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:28:47.833" level="INFO">${openstack_cmd} = openstack volume snapshot list</msg>
<status status="PASS" endtime="20190402 11:28:47.833" starttime="20190402 11:28:47.833"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "${snapshot}"</arg>
<arg>awk '{print$2}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:28:47.833" level="INFO">${cmd} = openstack volume snapshot list|grep "snap-cirros-1"|awk '{print$2}'</msg>
<status status="PASS" endtime="20190402 11:28:47.833" starttime="20190402 11:28:47.833"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:47.834" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:47.834" starttime="20190402 11:28:47.834"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:47.834" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot list|grep "snap-cirros-1"|awk '{print$2}''.</msg>
<msg timestamp="20190402 11:28:49.200" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:49.200" level="INFO">${stdout} = e750512f-e0a7-4a6d-84df-ce5b84649f99</msg>
<msg timestamp="20190402 11:28:49.200" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:49.200" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:49.201" starttime="20190402 11:28:47.834"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:49.201" level="INFO">${res} = {u'stdout': u'e750512f-e0a7-4a6d-84df-ce5b84649f99', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:49.201" starttime="20190402 11:28:49.201"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:49.202" starttime="20190402 11:28:49.201"></status>
</kw>
<msg timestamp="20190402 11:28:49.202" level="INFO">&amp;{result} = { stdout=e750512f-e0a7-4a6d-84df-ce5b84649f99 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:28:49.202" starttime="20190402 11:28:47.833"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:28:49.202" level="INFO">${output} = e750512f-e0a7-4a6d-84df-ce5b84649f99</msg>
<status status="PASS" endtime="20190402 11:28:49.202" starttime="20190402 11:28:49.202"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${splitted_output}</var>
</assign>
<msg timestamp="20190402 11:28:49.203" level="INFO">${splitted_output} = [u'e750512f-e0a7-4a6d-84df-ce5b84649f99']</msg>
<status status="PASS" endtime="20190402 11:28:49.203" starttime="20190402 11:28:49.202"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${splitted_output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${snapshot_id}</var>
</assign>
<msg timestamp="20190402 11:28:49.203" level="INFO">${snapshot_id} = e750512f-e0a7-4a6d-84df-ce5b84649f99</msg>
<status status="PASS" endtime="20190402 11:28:49.203" starttime="20190402 11:28:49.203"></status>
</kw>
<msg timestamp="20190402 11:28:49.203" level="INFO">${snapshot_id} = e750512f-e0a7-4a6d-84df-ce5b84649f99</msg>
<status status="PASS" endtime="20190402 11:28:49.203" starttime="20190402 11:28:47.832"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:28:49.203" level="INFO">${openstack_cmd} = openstack server create</msg>
<status status="PASS" endtime="20190402 11:28:49.204" starttime="20190402 11:28:49.203"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=:</arg>
<arg>${snapshot_id}</arg>
<arg>snapshot</arg>
<arg>${size}</arg>
</arguments>
<assign>
<var>${mapping}</var>
</assign>
<msg timestamp="20190402 11:28:49.204" level="INFO">${mapping} = e750512f-e0a7-4a6d-84df-ce5b84649f99:snapshot:20</msg>
<status status="PASS" endtime="20190402 11:28:49.204" starttime="20190402 11:28:49.204"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--flavor ${flavor}</arg>
<arg>--image ${image}</arg>
<arg>--nic net-id=${net_id}</arg>
<arg>--block-device-mapping</arg>
<arg>vdb=${mapping}</arg>
<arg>${vm_name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:28:49.204" level="INFO">${cmd} = openstack server create --flavor f1.small --image cirros --nic net-id=ee85ac71-8e0c-42ee-b680-c3409d6d710b --block-device-mapping vdb=e750512f-e0a7-4a6d-84df-ce5b84649f99:snapshot:20 vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:28:49.204" starttime="20190402 11:28:49.204"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:49.205" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:49.205" starttime="20190402 11:28:49.205"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:49.206" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server create --flavor f1.small --image cirros --nic net-id=ee85ac71-8e0c-42ee-b680-c3409d6d710b --block-device-mapping vdb=e750512f-e0a7-4a6d-84df-ce5b84649f99:snapshot:20 vm-cirros-1'.</msg>
<msg timestamp="20190402 11:28:51.640" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:51.640" level="INFO">${stdout} = +-------------------------------------+-------------------------------------------------+
| Field                               | Value                                           |
+-------------------...</msg>
<msg timestamp="20190402 11:28:51.640" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:51.640" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:51.641" starttime="20190402 11:28:49.205"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:51.642" level="INFO">${res} = {u'stdout': u"+-------------------------------------+-------------------------------------------------+\n| Field                               | Value                                           |\n+---...</msg>
<status status="PASS" endtime="20190402 11:28:51.642" starttime="20190402 11:28:51.641"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:51.642" starttime="20190402 11:28:51.642"></status>
</kw>
<status status="PASS" endtime="20190402 11:28:51.642" starttime="20190402 11:28:49.205"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:28:51.645" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:28:51.645" starttime="20190402 11:28:51.644"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:28:51.646" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:28:51.646" starttime="20190402 11:28:51.645"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:28:51.647" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:28:51.647" starttime="20190402 11:28:51.647"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:28:51.648" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:28:53.229" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:28:53.229" level="INFO">${stdout} = BUILD</msg>
<msg timestamp="20190402 11:28:53.229" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:28:53.229" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:28:53.229" starttime="20190402 11:28:51.647"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:28:53.230" level="INFO">${res} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:53.230" starttime="20190402 11:28:53.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:28:53.230" starttime="20190402 11:28:53.230"></status>
</kw>
<msg timestamp="20190402 11:28:53.230" level="INFO">${result} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:28:53.230" starttime="20190402 11:28:51.646"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:28:53.231" level="INFO">${value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:28:53.231" starttime="20190402 11:28:53.230"></status>
</kw>
<msg timestamp="20190402 11:28:53.231" level="INFO">${current_value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:28:53.231" starttime="20190402 11:28:51.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:28:53.231" level="FAIL">BUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:28:53.231" starttime="20190402 11:28:53.231"></status>
</kw>
<status status="FAIL" endtime="20190402 11:28:53.232" starttime="20190402 11:28:51.643"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:29:03.233" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:29:03.233" starttime="20190402 11:29:03.233"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:29:03.234" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:29:03.234" starttime="20190402 11:29:03.233"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:29:03.234" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:29:03.234" starttime="20190402 11:29:03.234"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:29:03.235" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:29:04.867" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:29:04.867" level="INFO">${stdout} = BUILD</msg>
<msg timestamp="20190402 11:29:04.867" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:29:04.867" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:29:04.867" starttime="20190402 11:29:03.235"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:29:04.868" level="INFO">${res} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:29:04.868" starttime="20190402 11:29:04.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:29:04.869" starttime="20190402 11:29:04.869"></status>
</kw>
<msg timestamp="20190402 11:29:04.869" level="INFO">${result} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:29:04.869" starttime="20190402 11:29:03.234"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:29:04.870" level="INFO">${value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:29:04.870" starttime="20190402 11:29:04.870"></status>
</kw>
<msg timestamp="20190402 11:29:04.870" level="INFO">${current_value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:29:04.870" starttime="20190402 11:29:03.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:29:04.871" level="FAIL">BUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:29:04.871" starttime="20190402 11:29:04.871"></status>
</kw>
<status status="FAIL" endtime="20190402 11:29:04.871" starttime="20190402 11:29:03.232"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:29:14.875" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:29:14.875" starttime="20190402 11:29:14.874"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:29:14.875" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:29:14.875" starttime="20190402 11:29:14.875"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:29:14.877" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:29:14.877" starttime="20190402 11:29:14.877"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:29:14.878" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:29:16.560" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:29:16.561" level="INFO">${stdout} = BUILD</msg>
<msg timestamp="20190402 11:29:16.561" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:29:16.561" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:29:16.561" starttime="20190402 11:29:14.878"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:29:16.561" level="INFO">${res} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:29:16.561" starttime="20190402 11:29:16.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:29:16.562" starttime="20190402 11:29:16.561"></status>
</kw>
<msg timestamp="20190402 11:29:16.562" level="INFO">${result} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:29:16.562" starttime="20190402 11:29:14.876"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:29:16.562" level="INFO">${value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:29:16.562" starttime="20190402 11:29:16.562"></status>
</kw>
<msg timestamp="20190402 11:29:16.562" level="INFO">${current_value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:29:16.563" starttime="20190402 11:29:14.873"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:29:16.563" level="FAIL">BUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:29:16.563" starttime="20190402 11:29:16.563"></status>
</kw>
<status status="FAIL" endtime="20190402 11:29:16.563" starttime="20190402 11:29:14.872"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:29:26.567" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:29:26.567" starttime="20190402 11:29:26.566"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:29:26.568" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:29:26.568" starttime="20190402 11:29:26.567"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:29:26.570" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:29:26.570" starttime="20190402 11:29:26.569"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:29:26.571" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:29:28.203" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:29:28.203" level="INFO">${stdout} = BUILD</msg>
<msg timestamp="20190402 11:29:28.203" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:29:28.203" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:29:28.203" starttime="20190402 11:29:26.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:29:28.205" level="INFO">${res} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:29:28.205" starttime="20190402 11:29:28.204"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:29:28.206" starttime="20190402 11:29:28.205"></status>
</kw>
<msg timestamp="20190402 11:29:28.207" level="INFO">${result} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:29:28.207" starttime="20190402 11:29:26.568"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:29:28.208" level="INFO">${value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:29:28.208" starttime="20190402 11:29:28.207"></status>
</kw>
<msg timestamp="20190402 11:29:28.209" level="INFO">${current_value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:29:28.209" starttime="20190402 11:29:26.565"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:29:28.211" level="FAIL">BUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:29:28.211" starttime="20190402 11:29:28.209"></status>
</kw>
<status status="FAIL" endtime="20190402 11:29:28.211" starttime="20190402 11:29:26.564"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:29:38.213" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:29:38.213" starttime="20190402 11:29:38.213"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:29:38.214" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:29:38.214" starttime="20190402 11:29:38.213"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:29:38.215" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:29:38.215" starttime="20190402 11:29:38.214"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:29:38.215" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:29:39.948" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:29:39.948" level="INFO">${stdout} = BUILD</msg>
<msg timestamp="20190402 11:29:39.948" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:29:39.949" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:29:39.949" starttime="20190402 11:29:38.215"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:29:39.949" level="INFO">${res} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:29:39.949" starttime="20190402 11:29:39.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:29:39.950" starttime="20190402 11:29:39.949"></status>
</kw>
<msg timestamp="20190402 11:29:39.950" level="INFO">${result} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:29:39.950" starttime="20190402 11:29:38.214"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:29:39.950" level="INFO">${value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:29:39.950" starttime="20190402 11:29:39.950"></status>
</kw>
<msg timestamp="20190402 11:29:39.950" level="INFO">${current_value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:29:39.951" starttime="20190402 11:29:38.212"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:29:39.951" level="FAIL">BUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:29:39.951" starttime="20190402 11:29:39.951"></status>
</kw>
<status status="FAIL" endtime="20190402 11:29:39.951" starttime="20190402 11:29:38.212"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:29:49.953" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:29:49.953" starttime="20190402 11:29:49.953"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:29:49.954" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:29:49.954" starttime="20190402 11:29:49.953"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:29:49.955" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:29:49.955" starttime="20190402 11:29:49.954"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:29:49.955" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:29:51.787" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:29:51.788" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:29:51.788" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:29:51.788" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:29:51.788" starttime="20190402 11:29:49.955"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:29:51.789" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:29:51.789" starttime="20190402 11:29:51.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:29:51.789" starttime="20190402 11:29:51.789"></status>
</kw>
<msg timestamp="20190402 11:29:51.789" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:29:51.789" starttime="20190402 11:29:49.954"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:29:51.790" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:29:51.790" starttime="20190402 11:29:51.789"></status>
</kw>
<msg timestamp="20190402 11:29:51.790" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:29:51.790" starttime="20190402 11:29:49.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:29:51.791" starttime="20190402 11:29:51.790"></status>
</kw>
<status status="PASS" endtime="20190402 11:29:51.791" starttime="20190402 11:29:49.952"></status>
</kw>
<status status="PASS" endtime="20190402 11:29:51.791" starttime="20190402 11:28:51.643"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:29:51.792" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:29:51.792" starttime="20190402 11:29:51.792"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:29:51.793" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w power_state|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:29:51.793" starttime="20190402 11:29:51.792"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:29:51.794" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:29:51.794" starttime="20190402 11:29:51.793"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:29:51.794" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w power_state|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:29:53.426" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:29:53.426" level="INFO">${stdout} = Running</msg>
<msg timestamp="20190402 11:29:53.426" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:29:53.426" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:29:53.426" starttime="20190402 11:29:51.794"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:29:53.427" level="INFO">${res} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:29:53.428" starttime="20190402 11:29:53.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:29:53.428" starttime="20190402 11:29:53.428"></status>
</kw>
<msg timestamp="20190402 11:29:53.429" level="INFO">${result} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:29:53.429" starttime="20190402 11:29:51.793"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:29:53.429" level="INFO">${value} = Running</msg>
<status status="PASS" endtime="20190402 11:29:53.429" starttime="20190402 11:29:53.429"></status>
</kw>
<msg timestamp="20190402 11:29:53.429" level="INFO">${current_value} = Running</msg>
<status status="PASS" endtime="20190402 11:29:53.429" starttime="20190402 11:29:51.792"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:29:53.430" starttime="20190402 11:29:53.430"></status>
</kw>
<status status="PASS" endtime="20190402 11:29:53.430" starttime="20190402 11:29:51.791"></status>
</kw>
<status status="PASS" endtime="20190402 11:29:53.430" starttime="20190402 11:29:51.791"></status>
</kw>
<status status="PASS" endtime="20190402 11:29:53.430" starttime="20190402 11:28:46.488"></status>
</kw>
<kw name="Create Instance From Snapshot" library="OpenStack">
<doc>Create a VM Instances with the net id of the Netowrk
flavor and snapshot</doc>
<arguments>
<arg>${network_name}</arg>
<arg>${cirros_image_name}</arg>
<arg>${cirros_instance_name_2}</arg>
<arg>${cirros_snapshot_name_2}</arg>
<arg>${cirros_snapshot_size}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Get Net Id" library="OpenStack">
<doc>Retrieve the net id for the given network name</doc>
<arguments>
<arg>${net_name}</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:29:53.432" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190402 11:29:53.432" starttime="20190402 11:29:53.432"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "${network_name}"</arg>
<arg>awk '{print$2}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:29:53.433" level="INFO">${cmd} = openstack network list|grep "network-1"|awk '{print$2}'</msg>
<status status="PASS" endtime="20190402 11:29:53.433" starttime="20190402 11:29:53.432"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:29:53.434" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:29:53.434" starttime="20190402 11:29:53.433"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:29:53.434" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|grep "network-1"|awk '{print$2}''.</msg>
<msg timestamp="20190402 11:29:54.816" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:29:54.816" level="INFO">${stdout} = ee85ac71-8e0c-42ee-b680-c3409d6d710b</msg>
<msg timestamp="20190402 11:29:54.816" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:29:54.816" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:29:54.816" starttime="20190402 11:29:53.434"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:29:54.817" level="INFO">${res} = {u'stdout': u'ee85ac71-8e0c-42ee-b680-c3409d6d710b', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:29:54.817" starttime="20190402 11:29:54.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:29:54.817" starttime="20190402 11:29:54.817"></status>
</kw>
<msg timestamp="20190402 11:29:54.817" level="INFO">&amp;{result} = { stdout=ee85ac71-8e0c-42ee-b680-c3409d6d710b | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:29:54.817" starttime="20190402 11:29:53.433"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:29:54.818" level="INFO">${output} = ee85ac71-8e0c-42ee-b680-c3409d6d710b</msg>
<status status="PASS" endtime="20190402 11:29:54.818" starttime="20190402 11:29:54.818"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${splitted_output}</var>
</assign>
<msg timestamp="20190402 11:29:54.818" level="INFO">${splitted_output} = [u'ee85ac71-8e0c-42ee-b680-c3409d6d710b']</msg>
<status status="PASS" endtime="20190402 11:29:54.818" starttime="20190402 11:29:54.818"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${splitted_output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<msg timestamp="20190402 11:29:54.819" level="INFO">${net_id} = ee85ac71-8e0c-42ee-b680-c3409d6d710b</msg>
<status status="PASS" endtime="20190402 11:29:54.819" starttime="20190402 11:29:54.818"></status>
</kw>
<msg timestamp="20190402 11:29:54.819" level="INFO">${net_id} = ee85ac71-8e0c-42ee-b680-c3409d6d710b</msg>
<status status="PASS" endtime="20190402 11:29:54.819" starttime="20190402 11:29:53.431"></status>
</kw>
<kw name="Get Snapshot ID" library="OpenStack">
<doc>Retrieve the snapshot id for the given snapshot name</doc>
<arguments>
<arg>${snapshot}</arg>
</arguments>
<assign>
<var>${snapshot_id}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:29:54.819" level="INFO">${openstack_cmd} = openstack volume snapshot list</msg>
<status status="PASS" endtime="20190402 11:29:54.820" starttime="20190402 11:29:54.819"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "${snapshot}"</arg>
<arg>awk '{print$2}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:29:54.820" level="INFO">${cmd} = openstack volume snapshot list|grep "snap-cirros-2"|awk '{print$2}'</msg>
<status status="PASS" endtime="20190402 11:29:54.820" starttime="20190402 11:29:54.820"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:29:54.821" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:29:54.821" starttime="20190402 11:29:54.820"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:29:54.821" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot list|grep "snap-cirros-2"|awk '{print$2}''.</msg>
<msg timestamp="20190402 11:29:56.255" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:29:56.256" level="INFO">${stdout} = 657cdc14-4ba9-49c8-86ff-fe2092114844</msg>
<msg timestamp="20190402 11:29:56.256" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:29:56.256" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:29:56.256" starttime="20190402 11:29:54.821"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:29:56.257" level="INFO">${res} = {u'stdout': u'657cdc14-4ba9-49c8-86ff-fe2092114844', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:29:56.257" starttime="20190402 11:29:56.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:29:56.257" starttime="20190402 11:29:56.257"></status>
</kw>
<msg timestamp="20190402 11:29:56.258" level="INFO">&amp;{result} = { stdout=657cdc14-4ba9-49c8-86ff-fe2092114844 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:29:56.258" starttime="20190402 11:29:54.820"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:29:56.258" level="INFO">${output} = 657cdc14-4ba9-49c8-86ff-fe2092114844</msg>
<status status="PASS" endtime="20190402 11:29:56.258" starttime="20190402 11:29:56.258"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${splitted_output}</var>
</assign>
<msg timestamp="20190402 11:29:56.259" level="INFO">${splitted_output} = [u'657cdc14-4ba9-49c8-86ff-fe2092114844']</msg>
<status status="PASS" endtime="20190402 11:29:56.259" starttime="20190402 11:29:56.258"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${splitted_output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${snapshot_id}</var>
</assign>
<msg timestamp="20190402 11:29:56.259" level="INFO">${snapshot_id} = 657cdc14-4ba9-49c8-86ff-fe2092114844</msg>
<status status="PASS" endtime="20190402 11:29:56.259" starttime="20190402 11:29:56.259"></status>
</kw>
<msg timestamp="20190402 11:29:56.259" level="INFO">${snapshot_id} = 657cdc14-4ba9-49c8-86ff-fe2092114844</msg>
<status status="PASS" endtime="20190402 11:29:56.259" starttime="20190402 11:29:54.819"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:29:56.259" level="INFO">${openstack_cmd} = openstack server create</msg>
<status status="PASS" endtime="20190402 11:29:56.259" starttime="20190402 11:29:56.259"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=:</arg>
<arg>${snapshot_id}</arg>
<arg>snapshot</arg>
<arg>${size}</arg>
</arguments>
<assign>
<var>${mapping}</var>
</assign>
<msg timestamp="20190402 11:29:56.260" level="INFO">${mapping} = 657cdc14-4ba9-49c8-86ff-fe2092114844:snapshot:20</msg>
<status status="PASS" endtime="20190402 11:29:56.260" starttime="20190402 11:29:56.260"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--flavor ${flavor}</arg>
<arg>--image ${image}</arg>
<arg>--nic net-id=${net_id}</arg>
<arg>--block-device-mapping</arg>
<arg>vdb=${mapping}</arg>
<arg>${vm_name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:29:56.260" level="INFO">${cmd} = openstack server create --flavor f1.small --image cirros --nic net-id=ee85ac71-8e0c-42ee-b680-c3409d6d710b --block-device-mapping vdb=657cdc14-4ba9-49c8-86ff-fe2092114844:snapshot:20 vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:29:56.260" starttime="20190402 11:29:56.260"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:29:56.261" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:29:56.261" starttime="20190402 11:29:56.261"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:29:56.261" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server create --flavor f1.small --image cirros --nic net-id=ee85ac71-8e0c-42ee-b680-c3409d6d710b --block-device-mapping vdb=657cdc14-4ba9-49c8-86ff-fe2092114844:snapshot:20 vm-cirros-2'.</msg>
<msg timestamp="20190402 11:29:58.459" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:29:58.460" level="INFO">${stdout} = +-------------------------------------+-------------------------------------------------+
| Field                               | Value                                           |
+-------------------...</msg>
<msg timestamp="20190402 11:29:58.460" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:29:58.460" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:29:58.460" starttime="20190402 11:29:56.261"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:29:58.460" level="INFO">${res} = {u'stdout': u"+-------------------------------------+-------------------------------------------------+\n| Field                               | Value                                           |\n+---...</msg>
<status status="PASS" endtime="20190402 11:29:58.461" starttime="20190402 11:29:58.460"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:29:58.461" starttime="20190402 11:29:58.461"></status>
</kw>
<status status="PASS" endtime="20190402 11:29:58.461" starttime="20190402 11:29:56.260"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:29:58.463" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:29:58.463" starttime="20190402 11:29:58.463"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:29:58.463" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:29:58.463" starttime="20190402 11:29:58.463"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:29:58.464" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:29:58.464" starttime="20190402 11:29:58.464"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:29:58.465" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:30:00.161" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:00.161" level="INFO">${stdout} = BUILD</msg>
<msg timestamp="20190402 11:30:00.161" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:00.162" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:00.162" starttime="20190402 11:29:58.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:00.162" level="INFO">${res} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:00.162" starttime="20190402 11:30:00.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:00.163" starttime="20190402 11:30:00.163"></status>
</kw>
<msg timestamp="20190402 11:30:00.163" level="INFO">${result} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:00.163" starttime="20190402 11:29:58.463"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:30:00.163" level="INFO">${value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:30:00.164" starttime="20190402 11:30:00.163"></status>
</kw>
<msg timestamp="20190402 11:30:00.164" level="INFO">${current_value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:30:00.164" starttime="20190402 11:29:58.462"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:30:00.164" level="FAIL">BUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:30:00.164" starttime="20190402 11:30:00.164"></status>
</kw>
<status status="FAIL" endtime="20190402 11:30:00.165" starttime="20190402 11:29:58.462"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:30:10.168" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:30:10.168" starttime="20190402 11:30:10.167"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:30:10.169" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:30:10.169" starttime="20190402 11:30:10.169"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:10.172" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:10.172" starttime="20190402 11:30:10.171"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:10.174" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:30:13.912" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:13.912" level="INFO">${stdout} = BUILD</msg>
<msg timestamp="20190402 11:30:13.912" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:13.912" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:13.912" starttime="20190402 11:30:10.172"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:13.913" level="INFO">${res} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:13.913" starttime="20190402 11:30:13.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:13.913" starttime="20190402 11:30:13.913"></status>
</kw>
<msg timestamp="20190402 11:30:13.914" level="INFO">${result} = {u'stdout': u'BUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:13.914" starttime="20190402 11:30:10.170"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:30:13.914" level="INFO">${value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:30:13.914" starttime="20190402 11:30:13.914"></status>
</kw>
<msg timestamp="20190402 11:30:13.914" level="INFO">${current_value} = BUILD</msg>
<status status="PASS" endtime="20190402 11:30:13.914" starttime="20190402 11:30:10.166"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:30:13.915" level="FAIL">BUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:30:13.915" starttime="20190402 11:30:13.914"></status>
</kw>
<status status="FAIL" endtime="20190402 11:30:13.915" starttime="20190402 11:30:10.165"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:30:23.917" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:30:23.917" starttime="20190402 11:30:23.916"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:30:23.917" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:30:23.917" starttime="20190402 11:30:23.917"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:23.918" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:23.918" starttime="20190402 11:30:23.918"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:23.918" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:30:25.549" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:25.550" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:30:25.550" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:25.550" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:25.550" starttime="20190402 11:30:23.918"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:25.552" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:25.552" starttime="20190402 11:30:25.551"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:25.553" starttime="20190402 11:30:25.552"></status>
</kw>
<msg timestamp="20190402 11:30:25.553" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:25.554" starttime="20190402 11:30:23.917"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:30:25.555" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:30:25.555" starttime="20190402 11:30:25.554"></status>
</kw>
<msg timestamp="20190402 11:30:25.555" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:30:25.555" starttime="20190402 11:30:23.916"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:25.557" starttime="20190402 11:30:25.556"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:25.557" starttime="20190402 11:30:23.915"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:25.557" starttime="20190402 11:29:58.461"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:30:25.561" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:30:25.561" starttime="20190402 11:30:25.560"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:30:25.562" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w power_state|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:30:25.562" starttime="20190402 11:30:25.561"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:25.564" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:25.564" starttime="20190402 11:30:25.563"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:25.565" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w power_state|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:30:27.403" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:27.403" level="INFO">${stdout} = Running</msg>
<msg timestamp="20190402 11:30:27.403" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:27.404" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:27.404" starttime="20190402 11:30:25.564"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:27.405" level="INFO">${res} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:27.405" starttime="20190402 11:30:27.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:27.406" starttime="20190402 11:30:27.406"></status>
</kw>
<msg timestamp="20190402 11:30:27.406" level="INFO">${result} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:27.406" starttime="20190402 11:30:25.562"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:30:27.407" level="INFO">${value} = Running</msg>
<status status="PASS" endtime="20190402 11:30:27.407" starttime="20190402 11:30:27.406"></status>
</kw>
<msg timestamp="20190402 11:30:27.407" level="INFO">${current_value} = Running</msg>
<status status="PASS" endtime="20190402 11:30:27.407" starttime="20190402 11:30:25.559"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:27.408" starttime="20190402 11:30:27.407"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:27.408" starttime="20190402 11:30:25.559"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:27.408" starttime="20190402 11:30:25.558"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:27.408" starttime="20190402 11:29:53.431"></status>
</kw>
<doc>Launch Cirros instances from snapshot.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:30:27.409" critical="yes" starttime="20190402 11:28:46.487"></status>
</test>
<test id="s1-s1-s3-t7" name="Suspend Resume Instances">
<kw name="Suspend Instance" library="OpenStack">
<doc>Suspend the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server suspend ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:27.411" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:27.411" starttime="20190402 11:30:27.411"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:27.412" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server suspend vm-cirros-1'.</msg>
<msg timestamp="20190402 11:30:29.145" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:29.145" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:30:29.145" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:29.145" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:29.145" starttime="20190402 11:30:27.411"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:29.146" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:29.146" starttime="20190402 11:30:29.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:29.146" starttime="20190402 11:30:29.146"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:29.147" starttime="20190402 11:30:27.410"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SUSPENDED</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SUSPENDED</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:30:29.148" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:30:29.148" starttime="20190402 11:30:29.148"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:30:29.148" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:30:29.148" starttime="20190402 11:30:29.148"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:29.149" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:29.149" starttime="20190402 11:30:29.149"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:29.149" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:30:30.981" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:30.981" level="INFO">${stdout} = SUSPENDED</msg>
<msg timestamp="20190402 11:30:30.981" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:30.981" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:30.982" starttime="20190402 11:30:29.149"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:30.982" level="INFO">${res} = {u'stdout': u'SUSPENDED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:30.983" starttime="20190402 11:30:30.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:30.983" starttime="20190402 11:30:30.983"></status>
</kw>
<msg timestamp="20190402 11:30:30.983" level="INFO">${result} = {u'stdout': u'SUSPENDED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:30.983" starttime="20190402 11:30:29.148"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:30:30.984" level="INFO">${value} = SUSPENDED</msg>
<status status="PASS" endtime="20190402 11:30:30.984" starttime="20190402 11:30:30.984"></status>
</kw>
<msg timestamp="20190402 11:30:30.984" level="INFO">${current_value} = SUSPENDED</msg>
<status status="PASS" endtime="20190402 11:30:30.984" starttime="20190402 11:30:29.147"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:30.985" starttime="20190402 11:30:30.985"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:30.985" starttime="20190402 11:30:29.147"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:30.985" starttime="20190402 11:30:29.147"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:30.985" starttime="20190402 11:30:27.410"></status>
</kw>
<kw name="Resume Instance" library="OpenStack">
<doc>Resume the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resume ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:30.988" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:30.988" starttime="20190402 11:30:30.987"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:30.989" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resume vm-cirros-1'.</msg>
<msg timestamp="20190402 11:30:32.871" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:32.871" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:30:32.871" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:32.871" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:32.872" starttime="20190402 11:30:30.988"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:32.873" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:32.873" starttime="20190402 11:30:32.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:32.874" starttime="20190402 11:30:32.873"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:32.874" starttime="20190402 11:30:30.987"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:30:32.876" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:30:32.876" starttime="20190402 11:30:32.876"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:30:32.877" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:30:32.877" starttime="20190402 11:30:32.876"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:32.877" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:32.877" starttime="20190402 11:30:32.877"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:32.878" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:30:34.559" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:34.559" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:30:34.559" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:34.560" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:34.560" starttime="20190402 11:30:32.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:34.561" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:34.561" starttime="20190402 11:30:34.560"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:34.562" starttime="20190402 11:30:34.561"></status>
</kw>
<msg timestamp="20190402 11:30:34.562" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:34.563" starttime="20190402 11:30:32.877"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:30:34.563" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:30:34.563" starttime="20190402 11:30:34.563"></status>
</kw>
<msg timestamp="20190402 11:30:34.564" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:30:34.564" starttime="20190402 11:30:32.875"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:34.565" starttime="20190402 11:30:34.564"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:34.565" starttime="20190402 11:30:32.875"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:34.565" starttime="20190402 11:30:32.874"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:34.566" starttime="20190402 11:30:30.986"></status>
</kw>
<kw name="Suspend Instance" library="OpenStack">
<doc>Suspend the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server suspend ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:34.568" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:34.568" starttime="20190402 11:30:34.567"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:34.569" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server suspend vm-cirros-2'.</msg>
<msg timestamp="20190402 11:30:36.451" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:36.452" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:30:36.452" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:36.452" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:36.452" starttime="20190402 11:30:34.568"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:36.452" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:36.452" starttime="20190402 11:30:36.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:36.453" starttime="20190402 11:30:36.453"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:36.453" starttime="20190402 11:30:34.567"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SUSPENDED</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SUSPENDED</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:30:36.455" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:30:36.455" starttime="20190402 11:30:36.454"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:30:36.455" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:30:36.455" starttime="20190402 11:30:36.455"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:36.456" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:36.456" starttime="20190402 11:30:36.456"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:36.457" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:30:38.088" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:38.088" level="INFO">${stdout} = SUSPENDED</msg>
<msg timestamp="20190402 11:30:38.088" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:38.088" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:38.089" starttime="20190402 11:30:36.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:38.090" level="INFO">${res} = {u'stdout': u'SUSPENDED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:38.090" starttime="20190402 11:30:38.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:38.091" starttime="20190402 11:30:38.091"></status>
</kw>
<msg timestamp="20190402 11:30:38.092" level="INFO">${result} = {u'stdout': u'SUSPENDED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:38.092" starttime="20190402 11:30:36.455"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:30:38.093" level="INFO">${value} = SUSPENDED</msg>
<status status="PASS" endtime="20190402 11:30:38.093" starttime="20190402 11:30:38.092"></status>
</kw>
<msg timestamp="20190402 11:30:38.094" level="INFO">${current_value} = SUSPENDED</msg>
<status status="PASS" endtime="20190402 11:30:38.094" starttime="20190402 11:30:36.454"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:38.095" starttime="20190402 11:30:38.094"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:38.095" starttime="20190402 11:30:36.454"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:38.095" starttime="20190402 11:30:36.453"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:38.096" starttime="20190402 11:30:34.566"></status>
</kw>
<kw name="Resume Instance" library="OpenStack">
<doc>Resume the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resume ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:38.098" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:38.098" starttime="20190402 11:30:38.098"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:38.100" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resume vm-cirros-2'.</msg>
<msg timestamp="20190402 11:30:40.000" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:40.000" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:30:40.000" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:40.000" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:40.000" starttime="20190402 11:30:38.099"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:40.001" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:40.001" starttime="20190402 11:30:40.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:40.001" starttime="20190402 11:30:40.001"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:40.001" starttime="20190402 11:30:38.097"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:30:40.003" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:30:40.003" starttime="20190402 11:30:40.003"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:30:40.003" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:30:40.003" starttime="20190402 11:30:40.003"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:40.004" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:40.004" starttime="20190402 11:30:40.004"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:40.005" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:30:41.744" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:41.744" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:30:41.744" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:41.744" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:41.744" starttime="20190402 11:30:40.004"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:41.746" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:41.746" starttime="20190402 11:30:41.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:41.747" starttime="20190402 11:30:41.746"></status>
</kw>
<msg timestamp="20190402 11:30:41.747" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:41.747" starttime="20190402 11:30:40.003"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:30:41.748" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:30:41.748" starttime="20190402 11:30:41.748"></status>
</kw>
<msg timestamp="20190402 11:30:41.749" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:30:41.749" starttime="20190402 11:30:40.002"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:41.750" starttime="20190402 11:30:41.749"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:41.750" starttime="20190402 11:30:40.002"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:41.750" starttime="20190402 11:30:40.001"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:41.750" starttime="20190402 11:30:38.096"></status>
</kw>
<doc>Suspend and Resume Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:30:41.751" critical="yes" starttime="20190402 11:30:27.409"></status>
</test>
<test id="s1-s1-s3-t8" name="Set Error Active Flags Instances">
<kw name="Set Error State Instance" library="OpenStack">
<doc>Set 'Error' value to the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>error</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:41.755" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:41.755" starttime="20190402 11:30:41.754"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:41.756" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state error vm-cirros-1'.</msg>
<msg timestamp="20190402 11:30:43.438" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:43.438" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:30:43.439" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:43.439" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:43.439" starttime="20190402 11:30:41.756"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:43.440" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:43.440" starttime="20190402 11:30:43.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:43.441" starttime="20190402 11:30:43.440"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:43.441" starttime="20190402 11:30:41.753"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ERROR</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ERROR</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:30:43.443" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:30:43.443" starttime="20190402 11:30:43.443"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:30:43.444" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:30:43.444" starttime="20190402 11:30:43.443"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:43.445" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:43.445" starttime="20190402 11:30:43.445"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:43.446" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:30:45.077" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:45.077" level="INFO">${stdout} = ERROR</msg>
<msg timestamp="20190402 11:30:45.077" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:45.077" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:45.077" starttime="20190402 11:30:43.445"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:45.078" level="INFO">${res} = {u'stdout': u'ERROR', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:45.078" starttime="20190402 11:30:45.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:45.078" starttime="20190402 11:30:45.078"></status>
</kw>
<msg timestamp="20190402 11:30:45.078" level="INFO">${result} = {u'stdout': u'ERROR', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:45.078" starttime="20190402 11:30:43.444"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:30:45.079" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20190402 11:30:45.079" starttime="20190402 11:30:45.079"></status>
</kw>
<msg timestamp="20190402 11:30:45.079" level="INFO">${current_value} = ERROR</msg>
<status status="PASS" endtime="20190402 11:30:45.079" starttime="20190402 11:30:43.442"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:45.079" starttime="20190402 11:30:45.079"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:45.079" starttime="20190402 11:30:43.441"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:45.080" starttime="20190402 11:30:43.441"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:45.080" starttime="20190402 11:30:41.752"></status>
</kw>
<kw name="Set Active State Instance" library="OpenStack">
<doc>Set 'Active' value to the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>active</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:45.081" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:45.081" starttime="20190402 11:30:45.081"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:45.081" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state active vm-cirros-1'.</msg>
<msg timestamp="20190402 11:30:46.994" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:46.994" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:30:46.994" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:46.994" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:46.994" starttime="20190402 11:30:45.081"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:46.995" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:46.995" starttime="20190402 11:30:46.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:46.995" starttime="20190402 11:30:46.995"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:46.995" starttime="20190402 11:30:45.080"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:30:46.997" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:30:46.997" starttime="20190402 11:30:46.996"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:30:46.997" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:30:46.997" starttime="20190402 11:30:46.997"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:46.998" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:46.998" starttime="20190402 11:30:46.998"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:46.998" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:30:48.630" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:48.630" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:30:48.630" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:48.630" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:48.630" starttime="20190402 11:30:46.998"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:48.631" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:48.631" starttime="20190402 11:30:48.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:48.631" starttime="20190402 11:30:48.631"></status>
</kw>
<msg timestamp="20190402 11:30:48.631" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:48.631" starttime="20190402 11:30:46.997"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:30:48.632" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:30:48.632" starttime="20190402 11:30:48.631"></status>
</kw>
<msg timestamp="20190402 11:30:48.632" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:30:48.632" starttime="20190402 11:30:46.996"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:48.632" starttime="20190402 11:30:48.632"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:48.632" starttime="20190402 11:30:46.996"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:48.633" starttime="20190402 11:30:46.995"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:48.633" starttime="20190402 11:30:45.080"></status>
</kw>
<kw name="Set Error State Instance" library="OpenStack">
<doc>Set 'Error' value to the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
<arg>error</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:48.634" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:48.634" starttime="20190402 11:30:48.633"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:48.634" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state error vm-cirros-2'.</msg>
<msg timestamp="20190402 11:30:50.378" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:50.378" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:30:50.379" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:50.379" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:50.379" starttime="20190402 11:30:48.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:50.380" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:50.381" starttime="20190402 11:30:50.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:50.382" starttime="20190402 11:30:50.381"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:50.382" starttime="20190402 11:30:48.633"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ERROR</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ERROR</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:30:50.386" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:30:50.386" starttime="20190402 11:30:50.385"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:30:50.387" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:30:50.387" starttime="20190402 11:30:50.386"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:50.389" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:50.389" starttime="20190402 11:30:50.388"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:50.390" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:30:52.022" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:52.022" level="INFO">${stdout} = ERROR</msg>
<msg timestamp="20190402 11:30:52.023" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:52.023" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:52.023" starttime="20190402 11:30:50.389"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:52.023" level="INFO">${res} = {u'stdout': u'ERROR', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:52.023" starttime="20190402 11:30:52.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:52.024" starttime="20190402 11:30:52.024"></status>
</kw>
<msg timestamp="20190402 11:30:52.024" level="INFO">${result} = {u'stdout': u'ERROR', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:52.024" starttime="20190402 11:30:50.387"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:30:52.025" level="INFO">${value} = ERROR</msg>
<status status="PASS" endtime="20190402 11:30:52.025" starttime="20190402 11:30:52.024"></status>
</kw>
<msg timestamp="20190402 11:30:52.026" level="INFO">${current_value} = ERROR</msg>
<status status="PASS" endtime="20190402 11:30:52.026" starttime="20190402 11:30:50.384"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:52.026" starttime="20190402 11:30:52.026"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:52.026" starttime="20190402 11:30:50.383"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:52.026" starttime="20190402 11:30:50.382"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:52.026" starttime="20190402 11:30:48.633"></status>
</kw>
<kw name="Set Active State Instance" library="OpenStack">
<doc>Set 'Active' value to the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
<arg>active</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:52.028" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:52.028" starttime="20190402 11:30:52.027"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:52.028" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state active vm-cirros-2'.</msg>
<msg timestamp="20190402 11:30:53.741" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:53.741" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:30:53.741" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:53.741" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:53.741" starttime="20190402 11:30:52.028"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:53.742" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:53.742" starttime="20190402 11:30:53.742"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:53.743" starttime="20190402 11:30:53.743"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:53.743" starttime="20190402 11:30:52.027"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:30:53.746" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:30:53.746" starttime="20190402 11:30:53.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:30:53.747" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:30:53.747" starttime="20190402 11:30:53.746"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:53.748" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:53.748" starttime="20190402 11:30:53.748"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:53.749" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:30:55.412" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:55.412" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:30:55.412" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:55.412" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:55.412" starttime="20190402 11:30:53.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:55.413" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:55.413" starttime="20190402 11:30:55.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:55.413" starttime="20190402 11:30:55.413"></status>
</kw>
<msg timestamp="20190402 11:30:55.413" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:55.413" starttime="20190402 11:30:53.747"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:30:55.414" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:30:55.414" starttime="20190402 11:30:55.413"></status>
</kw>
<msg timestamp="20190402 11:30:55.414" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:30:55.414" starttime="20190402 11:30:53.745"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:55.414" starttime="20190402 11:30:55.414"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:55.414" starttime="20190402 11:30:53.744"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:55.414" starttime="20190402 11:30:53.744"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:55.415" starttime="20190402 11:30:52.027"></status>
</kw>
<doc>Set 'Error' and 'Active' flags to Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:30:55.415" critical="yes" starttime="20190402 11:30:41.751"></status>
</test>
<test id="s1-s1-s3-t9" name="Pause Unpause Instances">
<kw name="Pause Instance" library="OpenStack">
<doc>Pause an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server pause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:55.416" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:55.416" starttime="20190402 11:30:55.416"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:55.417" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server pause vm-cirros-1'.</msg>
<msg timestamp="20190402 11:30:57.198" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:57.199" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:30:57.199" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:57.199" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:57.199" starttime="20190402 11:30:55.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:57.202" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:57.202" starttime="20190402 11:30:57.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:57.203" starttime="20190402 11:30:57.202"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:57.203" starttime="20190402 11:30:55.416"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>PAUSED</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>PAUSED</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:30:57.208" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:30:57.208" starttime="20190402 11:30:57.207"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:30:57.208" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:30:57.208" starttime="20190402 11:30:57.208"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:57.209" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:57.209" starttime="20190402 11:30:57.208"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:57.209" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:30:58.861" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:30:58.861" level="INFO">${stdout} = PAUSED</msg>
<msg timestamp="20190402 11:30:58.861" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:30:58.861" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:30:58.861" starttime="20190402 11:30:57.209"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:30:58.862" level="INFO">${res} = {u'stdout': u'PAUSED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:58.862" starttime="20190402 11:30:58.861"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:58.862" starttime="20190402 11:30:58.862"></status>
</kw>
<msg timestamp="20190402 11:30:58.862" level="INFO">${result} = {u'stdout': u'PAUSED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:30:58.862" starttime="20190402 11:30:57.208"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:30:58.863" level="INFO">${value} = PAUSED</msg>
<status status="PASS" endtime="20190402 11:30:58.863" starttime="20190402 11:30:58.862"></status>
</kw>
<msg timestamp="20190402 11:30:58.863" level="INFO">${current_value} = PAUSED</msg>
<status status="PASS" endtime="20190402 11:30:58.863" starttime="20190402 11:30:57.206"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:30:58.863" starttime="20190402 11:30:58.863"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:58.863" starttime="20190402 11:30:57.205"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:58.863" starttime="20190402 11:30:57.204"></status>
</kw>
<status status="PASS" endtime="20190402 11:30:58.864" starttime="20190402 11:30:55.415"></status>
</kw>
<kw name="Pause Instance" library="OpenStack">
<doc>Pause an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server pause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:30:58.864" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:30:58.865" starttime="20190402 11:30:58.864"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:30:58.865" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server pause vm-cirros-2'.</msg>
<msg timestamp="20190402 11:31:00.946" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:31:00.947" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:31:00.947" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:31:00.947" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:31:00.947" starttime="20190402 11:30:58.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:31:00.948" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:00.948" starttime="20190402 11:31:00.947"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:31:00.949" starttime="20190402 11:31:00.949"></status>
</kw>
<status status="PASS" endtime="20190402 11:31:00.950" starttime="20190402 11:30:58.864"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>PAUSED</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>PAUSED</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:31:00.953" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:31:00.953" starttime="20190402 11:31:00.952"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:31:00.954" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:31:00.954" starttime="20190402 11:31:00.953"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:31:00.956" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:31:00.957" starttime="20190402 11:31:00.956"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:31:00.958" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:31:02.590" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:31:02.590" level="INFO">${stdout} = PAUSED</msg>
<msg timestamp="20190402 11:31:02.590" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:31:02.590" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:31:02.590" starttime="20190402 11:31:00.957"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:31:02.591" level="INFO">${res} = {u'stdout': u'PAUSED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:02.591" starttime="20190402 11:31:02.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:31:02.592" starttime="20190402 11:31:02.592"></status>
</kw>
<msg timestamp="20190402 11:31:02.592" level="INFO">${result} = {u'stdout': u'PAUSED', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:02.592" starttime="20190402 11:31:00.954"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:31:02.593" level="INFO">${value} = PAUSED</msg>
<status status="PASS" endtime="20190402 11:31:02.593" starttime="20190402 11:31:02.592"></status>
</kw>
<msg timestamp="20190402 11:31:02.593" level="INFO">${current_value} = PAUSED</msg>
<status status="PASS" endtime="20190402 11:31:02.593" starttime="20190402 11:31:00.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:31:02.594" starttime="20190402 11:31:02.593"></status>
</kw>
<status status="PASS" endtime="20190402 11:31:02.594" starttime="20190402 11:31:00.951"></status>
</kw>
<status status="PASS" endtime="20190402 11:31:02.594" starttime="20190402 11:31:00.950"></status>
</kw>
<status status="PASS" endtime="20190402 11:31:02.594" starttime="20190402 11:30:58.864"></status>
</kw>
<kw name="Unpause Instance" library="OpenStack">
<doc>Unpause an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unpause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:31:02.595" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:31:02.595" starttime="20190402 11:31:02.595"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:31:02.596" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unpause vm-cirros-1'.</msg>
<msg timestamp="20190402 11:31:04.327" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:31:04.327" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:31:04.328" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:31:04.328" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:31:04.328" starttime="20190402 11:31:02.596"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:31:04.329" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:04.329" starttime="20190402 11:31:04.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:31:04.330" starttime="20190402 11:31:04.329"></status>
</kw>
<status status="PASS" endtime="20190402 11:31:04.330" starttime="20190402 11:31:02.595"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:31:04.333" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:31:04.333" starttime="20190402 11:31:04.333"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:31:04.333" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:31:04.333" starttime="20190402 11:31:04.333"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:31:04.334" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:31:04.334" starttime="20190402 11:31:04.334"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:31:04.334" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:31:06.115" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:31:06.116" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:31:06.116" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:31:06.116" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:31:06.116" starttime="20190402 11:31:04.334"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:31:06.118" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:06.118" starttime="20190402 11:31:06.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:31:06.119" starttime="20190402 11:31:06.118"></status>
</kw>
<msg timestamp="20190402 11:31:06.120" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:06.120" starttime="20190402 11:31:04.333"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:31:06.121" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:31:06.121" starttime="20190402 11:31:06.120"></status>
</kw>
<msg timestamp="20190402 11:31:06.122" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:31:06.122" starttime="20190402 11:31:04.332"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:31:06.123" starttime="20190402 11:31:06.122"></status>
</kw>
<status status="PASS" endtime="20190402 11:31:06.123" starttime="20190402 11:31:04.331"></status>
</kw>
<status status="PASS" endtime="20190402 11:31:06.124" starttime="20190402 11:31:04.331"></status>
</kw>
<status status="PASS" endtime="20190402 11:31:06.124" starttime="20190402 11:31:02.594"></status>
</kw>
<kw name="Unpause Instance" library="OpenStack">
<doc>Unpause an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unpause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:31:06.126" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:31:06.126" starttime="20190402 11:31:06.126"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:31:06.127" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unpause vm-cirros-2'.</msg>
<msg timestamp="20190402 11:31:07.810" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:31:07.811" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:31:07.811" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:31:07.811" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:31:07.811" starttime="20190402 11:31:06.127"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:31:07.811" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:07.811" starttime="20190402 11:31:07.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:31:07.812" starttime="20190402 11:31:07.811"></status>
</kw>
<status status="PASS" endtime="20190402 11:31:07.812" starttime="20190402 11:31:06.125"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:31:07.813" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:31:07.813" starttime="20190402 11:31:07.813"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:31:07.814" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:31:07.814" starttime="20190402 11:31:07.813"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:31:07.814" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:31:07.814" starttime="20190402 11:31:07.814"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:31:07.815" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:31:09.612" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:31:09.612" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:31:09.612" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:31:09.612" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:31:09.612" starttime="20190402 11:31:07.814"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:31:09.613" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:09.613" starttime="20190402 11:31:09.612"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:31:09.613" starttime="20190402 11:31:09.613"></status>
</kw>
<msg timestamp="20190402 11:31:09.613" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:09.614" starttime="20190402 11:31:07.814"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:31:09.614" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:31:09.614" starttime="20190402 11:31:09.614"></status>
</kw>
<msg timestamp="20190402 11:31:09.614" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:31:09.614" starttime="20190402 11:31:07.813"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:31:09.615" starttime="20190402 11:31:09.614"></status>
</kw>
<status status="PASS" endtime="20190402 11:31:09.615" starttime="20190402 11:31:07.812"></status>
</kw>
<status status="PASS" endtime="20190402 11:31:09.615" starttime="20190402 11:31:07.812"></status>
</kw>
<status status="PASS" endtime="20190402 11:31:09.615" starttime="20190402 11:31:06.124"></status>
</kw>
<doc>Pause and Unpause Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:31:09.615" critical="yes" starttime="20190402 11:30:55.415"></status>
</test>
<test id="s1-s1-s3-t10" name="Stop Start Instances">
<kw name="Stop Instance" library="OpenStack">
<doc>Stop an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server stop ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:31:09.616" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:31:09.616" starttime="20190402 11:31:09.616"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:31:09.617" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server stop vm-cirros-1'.</msg>
<msg timestamp="20190402 11:31:11.348" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:31:11.349" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:31:11.349" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:31:11.349" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:31:11.349" starttime="20190402 11:31:09.617"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:31:11.351" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:11.351" starttime="20190402 11:31:11.350"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:31:11.352" starttime="20190402 11:31:11.352"></status>
</kw>
<status status="PASS" endtime="20190402 11:31:11.353" starttime="20190402 11:31:09.616"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:31:11.357" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:31:11.357" starttime="20190402 11:31:11.356"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:31:11.358" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:31:11.358" starttime="20190402 11:31:11.357"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:31:11.360" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:31:11.360" starttime="20190402 11:31:11.359"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:31:11.361" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:31:12.943" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:31:12.944" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:31:12.944" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:31:12.944" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:31:12.944" starttime="20190402 11:31:11.360"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:31:12.946" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:12.946" starttime="20190402 11:31:12.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:31:12.947" starttime="20190402 11:31:12.946"></status>
</kw>
<msg timestamp="20190402 11:31:12.947" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:12.948" starttime="20190402 11:31:11.358"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:31:12.949" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:31:12.949" starttime="20190402 11:31:12.948"></status>
</kw>
<msg timestamp="20190402 11:31:12.949" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:31:12.949" starttime="20190402 11:31:11.355"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:31:12.951" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:31:12.951" starttime="20190402 11:31:12.950"></status>
</kw>
<status status="FAIL" endtime="20190402 11:31:12.951" starttime="20190402 11:31:11.354"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:31:22.956" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:31:22.956" starttime="20190402 11:31:22.955"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:31:22.957" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:31:22.957" starttime="20190402 11:31:22.956"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:31:22.959" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:31:22.959" starttime="20190402 11:31:22.958"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:31:22.960" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:31:24.594" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:31:24.594" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:31:24.594" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:31:24.594" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:31:24.594" starttime="20190402 11:31:22.959"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:31:24.596" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:24.596" starttime="20190402 11:31:24.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:31:24.597" starttime="20190402 11:31:24.596"></status>
</kw>
<msg timestamp="20190402 11:31:24.597" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:24.597" starttime="20190402 11:31:22.957"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:31:24.598" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:31:24.598" starttime="20190402 11:31:24.598"></status>
</kw>
<msg timestamp="20190402 11:31:24.599" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:31:24.599" starttime="20190402 11:31:22.954"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:31:24.600" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:31:24.600" starttime="20190402 11:31:24.599"></status>
</kw>
<status status="FAIL" endtime="20190402 11:31:24.600" starttime="20190402 11:31:22.952"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:31:34.602" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:31:34.602" starttime="20190402 11:31:34.602"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:31:34.603" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:31:34.603" starttime="20190402 11:31:34.602"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:31:34.604" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:31:34.604" starttime="20190402 11:31:34.604"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:31:34.604" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:31:37.093" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:31:37.093" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:31:37.093" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:31:37.093" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:31:37.093" starttime="20190402 11:31:34.604"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:31:37.095" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:37.095" starttime="20190402 11:31:37.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:31:37.096" starttime="20190402 11:31:37.095"></status>
</kw>
<msg timestamp="20190402 11:31:37.096" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:37.096" starttime="20190402 11:31:34.603"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:31:37.097" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:31:37.097" starttime="20190402 11:31:37.097"></status>
</kw>
<msg timestamp="20190402 11:31:37.098" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:31:37.098" starttime="20190402 11:31:34.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:31:37.099" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:31:37.099" starttime="20190402 11:31:37.098"></status>
</kw>
<status status="FAIL" endtime="20190402 11:31:37.099" starttime="20190402 11:31:34.601"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:31:47.101" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:31:47.102" starttime="20190402 11:31:47.101"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:31:47.102" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:31:47.102" starttime="20190402 11:31:47.102"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:31:47.103" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:31:47.103" starttime="20190402 11:31:47.103"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:31:47.104" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:31:49.236" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:31:49.236" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:31:49.237" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:31:49.237" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:31:49.237" starttime="20190402 11:31:47.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:31:49.238" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:49.239" starttime="20190402 11:31:49.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:31:49.240" starttime="20190402 11:31:49.239"></status>
</kw>
<msg timestamp="20190402 11:31:49.240" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:31:49.240" starttime="20190402 11:31:47.102"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:31:49.241" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:31:49.241" starttime="20190402 11:31:49.241"></status>
</kw>
<msg timestamp="20190402 11:31:49.242" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:31:49.242" starttime="20190402 11:31:47.101"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:31:49.243" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:31:49.243" starttime="20190402 11:31:49.242"></status>
</kw>
<status status="FAIL" endtime="20190402 11:31:49.244" starttime="20190402 11:31:47.100"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:31:59.247" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:31:59.247" starttime="20190402 11:31:59.246"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:31:59.248" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:31:59.248" starttime="20190402 11:31:59.247"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:31:59.250" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:31:59.250" starttime="20190402 11:31:59.249"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:31:59.251" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:32:01.283" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:32:01.284" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:32:01.284" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:32:01.284" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:32:01.284" starttime="20190402 11:31:59.250"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:32:01.285" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:32:01.285" starttime="20190402 11:32:01.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:32:01.286" starttime="20190402 11:32:01.285"></status>
</kw>
<msg timestamp="20190402 11:32:01.286" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:32:01.286" starttime="20190402 11:31:59.248"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:32:01.286" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:32:01.286" starttime="20190402 11:32:01.286"></status>
</kw>
<msg timestamp="20190402 11:32:01.287" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:32:01.287" starttime="20190402 11:31:59.245"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:32:01.287" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:32:01.288" starttime="20190402 11:32:01.287"></status>
</kw>
<status status="FAIL" endtime="20190402 11:32:01.288" starttime="20190402 11:31:59.244"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:32:11.291" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:32:11.291" starttime="20190402 11:32:11.291"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:32:11.293" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:32:11.293" starttime="20190402 11:32:11.292"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:32:11.295" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:32:11.295" starttime="20190402 11:32:11.294"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:32:11.296" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:32:13.079" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:32:13.080" level="INFO">${stdout} = SHUTOFF</msg>
<msg timestamp="20190402 11:32:13.080" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:32:13.080" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:32:13.080" starttime="20190402 11:32:11.295"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:32:13.082" level="INFO">${res} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:32:13.082" starttime="20190402 11:32:13.081"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:32:13.084" starttime="20190402 11:32:13.083"></status>
</kw>
<msg timestamp="20190402 11:32:13.084" level="INFO">${result} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:32:13.084" starttime="20190402 11:32:11.293"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:32:13.086" level="INFO">${value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 11:32:13.086" starttime="20190402 11:32:13.085"></status>
</kw>
<msg timestamp="20190402 11:32:13.086" level="INFO">${current_value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 11:32:13.086" starttime="20190402 11:32:11.290"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:32:13.088" starttime="20190402 11:32:13.087"></status>
</kw>
<status status="PASS" endtime="20190402 11:32:13.088" starttime="20190402 11:32:11.288"></status>
</kw>
<status status="PASS" endtime="20190402 11:32:13.088" starttime="20190402 11:31:11.353"></status>
</kw>
<status status="PASS" endtime="20190402 11:32:13.089" starttime="20190402 11:31:09.616"></status>
</kw>
<kw name="Stop Instance" library="OpenStack">
<doc>Stop an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server stop ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:32:13.092" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:32:13.092" starttime="20190402 11:32:13.091"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:32:13.093" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server stop vm-cirros-2'.</msg>
<msg timestamp="20190402 11:32:15.127" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:32:15.127" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:32:15.127" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:32:15.127" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:32:15.127" starttime="20190402 11:32:13.092"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:32:15.128" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:32:15.128" starttime="20190402 11:32:15.128"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:32:15.129" starttime="20190402 11:32:15.129"></status>
</kw>
<status status="PASS" endtime="20190402 11:32:15.129" starttime="20190402 11:32:13.090"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:32:15.131" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:32:15.131" starttime="20190402 11:32:15.131"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:32:15.132" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:32:15.132" starttime="20190402 11:32:15.132"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:32:15.133" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:32:15.133" starttime="20190402 11:32:15.133"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:32:15.134" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:32:16.764" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:32:16.765" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:32:16.765" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:32:16.765" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:32:16.766" starttime="20190402 11:32:15.133"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:32:16.767" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:32:16.768" starttime="20190402 11:32:16.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:32:16.769" starttime="20190402 11:32:16.768"></status>
</kw>
<msg timestamp="20190402 11:32:16.769" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:32:16.769" starttime="20190402 11:32:15.132"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:32:16.770" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:32:16.770" starttime="20190402 11:32:16.769"></status>
</kw>
<msg timestamp="20190402 11:32:16.771" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:32:16.771" starttime="20190402 11:32:15.130"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:32:16.772" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:32:16.772" starttime="20190402 11:32:16.771"></status>
</kw>
<status status="FAIL" endtime="20190402 11:32:16.772" starttime="20190402 11:32:15.130"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:32:26.777" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:32:26.778" starttime="20190402 11:32:26.777"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:32:26.779" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:32:26.779" starttime="20190402 11:32:26.778"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:32:26.781" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:32:26.782" starttime="20190402 11:32:26.781"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:32:26.783" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:32:28.415" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:32:28.416" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:32:28.416" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:32:28.416" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:32:28.416" starttime="20190402 11:32:26.782"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:32:28.419" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:32:28.419" starttime="20190402 11:32:28.417"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:32:28.420" starttime="20190402 11:32:28.420"></status>
</kw>
<msg timestamp="20190402 11:32:28.421" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:32:28.421" starttime="20190402 11:32:26.780"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:32:28.422" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:32:28.422" starttime="20190402 11:32:28.422"></status>
</kw>
<msg timestamp="20190402 11:32:28.423" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:32:28.423" starttime="20190402 11:32:26.775"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:32:28.425" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:32:28.425" starttime="20190402 11:32:28.424"></status>
</kw>
<status status="FAIL" endtime="20190402 11:32:28.425" starttime="20190402 11:32:26.773"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:32:38.429" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:32:38.429" starttime="20190402 11:32:38.428"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:32:38.430" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:32:38.430" starttime="20190402 11:32:38.429"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:32:38.432" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:32:38.432" starttime="20190402 11:32:38.432"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:32:38.434" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:32:40.117" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:32:40.117" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:32:40.118" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:32:40.118" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:32:40.118" starttime="20190402 11:32:38.433"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:32:40.122" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:32:40.123" starttime="20190402 11:32:40.119"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:32:40.124" starttime="20190402 11:32:40.123"></status>
</kw>
<msg timestamp="20190402 11:32:40.124" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:32:40.125" starttime="20190402 11:32:38.431"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:32:40.126" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:32:40.126" starttime="20190402 11:32:40.125"></status>
</kw>
<msg timestamp="20190402 11:32:40.126" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:32:40.126" starttime="20190402 11:32:38.427"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:32:40.128" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:32:40.128" starttime="20190402 11:32:40.127"></status>
</kw>
<status status="FAIL" endtime="20190402 11:32:40.128" starttime="20190402 11:32:38.426"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:32:50.132" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:32:50.133" starttime="20190402 11:32:50.132"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:32:50.134" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:32:50.134" starttime="20190402 11:32:50.133"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:32:50.136" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:32:50.136" starttime="20190402 11:32:50.136"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:32:50.138" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:32:51.771" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:32:51.772" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:32:51.772" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:32:51.772" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:32:51.772" starttime="20190402 11:32:50.137"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:32:51.774" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:32:51.774" starttime="20190402 11:32:51.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:32:51.775" starttime="20190402 11:32:51.775"></status>
</kw>
<msg timestamp="20190402 11:32:51.776" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:32:51.776" starttime="20190402 11:32:50.134"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:32:51.777" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:32:51.777" starttime="20190402 11:32:51.776"></status>
</kw>
<msg timestamp="20190402 11:32:51.778" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:32:51.778" starttime="20190402 11:32:50.130"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:32:51.779" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:32:51.780" starttime="20190402 11:32:51.778"></status>
</kw>
<status status="FAIL" endtime="20190402 11:32:51.780" starttime="20190402 11:32:50.129"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:33:01.784" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:33:01.784" starttime="20190402 11:33:01.783"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:33:01.787" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:33:01.787" starttime="20190402 11:33:01.785"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:01.789" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:01.789" starttime="20190402 11:33:01.788"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:01.790" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:33:03.474" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:03.474" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:33:03.474" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:03.474" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:03.475" starttime="20190402 11:33:01.789"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:03.476" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:03.476" starttime="20190402 11:33:03.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:03.478" starttime="20190402 11:33:03.477"></status>
</kw>
<msg timestamp="20190402 11:33:03.478" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:03.478" starttime="20190402 11:33:01.787"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:33:03.479" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:33:03.479" starttime="20190402 11:33:03.479"></status>
</kw>
<msg timestamp="20190402 11:33:03.480" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:33:03.480" starttime="20190402 11:33:01.782"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:33:03.481" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:33:03.482" starttime="20190402 11:33:03.480"></status>
</kw>
<status status="FAIL" endtime="20190402 11:33:03.482" starttime="20190402 11:33:01.781"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:33:13.484" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:33:13.484" starttime="20190402 11:33:13.483"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:33:13.484" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:33:13.484" starttime="20190402 11:33:13.484"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:13.485" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:13.485" starttime="20190402 11:33:13.485"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:13.485" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:33:15.217" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:15.218" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:33:15.218" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:15.218" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:15.218" starttime="20190402 11:33:13.485"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:15.220" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:15.220" starttime="20190402 11:33:15.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:15.221" starttime="20190402 11:33:15.220"></status>
</kw>
<msg timestamp="20190402 11:33:15.221" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:15.221" starttime="20190402 11:33:13.484"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:33:15.222" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:33:15.222" starttime="20190402 11:33:15.222"></status>
</kw>
<msg timestamp="20190402 11:33:15.223" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:33:15.223" starttime="20190402 11:33:13.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:33:15.224" level="FAIL">ACTIVE != SHUTOFF</msg>
<status status="FAIL" endtime="20190402 11:33:15.224" starttime="20190402 11:33:15.223"></status>
</kw>
<status status="FAIL" endtime="20190402 11:33:15.225" starttime="20190402 11:33:13.482"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>SHUTOFF</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:33:25.229" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:33:25.229" starttime="20190402 11:33:25.228"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:33:25.230" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:33:25.230" starttime="20190402 11:33:25.229"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:25.232" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:25.232" starttime="20190402 11:33:25.232"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:25.234" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:33:26.867" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:26.867" level="INFO">${stdout} = SHUTOFF</msg>
<msg timestamp="20190402 11:33:26.868" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:26.868" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:26.868" starttime="20190402 11:33:25.233"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:26.869" level="INFO">${res} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:26.869" starttime="20190402 11:33:26.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:26.870" starttime="20190402 11:33:26.870"></status>
</kw>
<msg timestamp="20190402 11:33:26.871" level="INFO">${result} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:26.871" starttime="20190402 11:33:25.230"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:33:26.872" level="INFO">${value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 11:33:26.872" starttime="20190402 11:33:26.871"></status>
</kw>
<msg timestamp="20190402 11:33:26.872" level="INFO">${current_value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 11:33:26.872" starttime="20190402 11:33:25.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:26.873" starttime="20190402 11:33:26.873"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:26.874" starttime="20190402 11:33:25.225"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:26.874" starttime="20190402 11:32:15.130"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:26.874" starttime="20190402 11:32:13.089"></status>
</kw>
<kw name="Start Instance" library="OpenStack">
<doc>Start an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server start ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:26.877" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:26.877" starttime="20190402 11:33:26.876"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:26.878" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server start vm-cirros-1'.</msg>
<msg timestamp="20190402 11:33:28.610" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:28.611" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:33:28.611" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:28.611" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:28.611" starttime="20190402 11:33:26.877"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:28.611" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:28.611" starttime="20190402 11:33:28.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:28.612" starttime="20190402 11:33:28.611"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:28.612" starttime="20190402 11:33:26.875"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:33:28.614" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:33:28.614" starttime="20190402 11:33:28.614"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:33:28.614" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:33:28.614" starttime="20190402 11:33:28.614"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:28.615" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:28.615" starttime="20190402 11:33:28.615"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:28.615" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:33:30.397" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:30.397" level="INFO">${stdout} = SHUTOFF</msg>
<msg timestamp="20190402 11:33:30.397" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:30.397" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:30.397" starttime="20190402 11:33:28.615"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:30.398" level="INFO">${res} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:30.398" starttime="20190402 11:33:30.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:30.399" starttime="20190402 11:33:30.398"></status>
</kw>
<msg timestamp="20190402 11:33:30.399" level="INFO">${result} = {u'stdout': u'SHUTOFF', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:30.399" starttime="20190402 11:33:28.614"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:33:30.399" level="INFO">${value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 11:33:30.399" starttime="20190402 11:33:30.399"></status>
</kw>
<msg timestamp="20190402 11:33:30.399" level="INFO">${current_value} = SHUTOFF</msg>
<status status="PASS" endtime="20190402 11:33:30.399" starttime="20190402 11:33:28.613"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:33:30.400" level="FAIL">SHUTOFF != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:33:30.400" starttime="20190402 11:33:30.400"></status>
</kw>
<status status="FAIL" endtime="20190402 11:33:30.400" starttime="20190402 11:33:28.613"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:33:40.404" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:33:40.404" starttime="20190402 11:33:40.403"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:33:40.405" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:33:40.405" starttime="20190402 11:33:40.404"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:40.407" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:40.407" starttime="20190402 11:33:40.406"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:40.408" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:33:42.601" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:42.601" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:33:42.601" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:42.602" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:42.602" starttime="20190402 11:33:40.407"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:42.603" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:42.603" starttime="20190402 11:33:42.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:42.604" starttime="20190402 11:33:42.603"></status>
</kw>
<msg timestamp="20190402 11:33:42.604" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:42.604" starttime="20190402 11:33:40.405"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:33:42.604" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:33:42.604" starttime="20190402 11:33:42.604"></status>
</kw>
<msg timestamp="20190402 11:33:42.605" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:33:42.605" starttime="20190402 11:33:40.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:42.605" starttime="20190402 11:33:42.605"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:42.605" starttime="20190402 11:33:40.401"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:42.605" starttime="20190402 11:33:28.612"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:42.606" starttime="20190402 11:33:26.874"></status>
</kw>
<kw name="Start Instance" library="OpenStack">
<doc>Start an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server start ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:42.607" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:42.607" starttime="20190402 11:33:42.606"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:42.607" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server start vm-cirros-2'.</msg>
<msg timestamp="20190402 11:33:44.352" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:44.353" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:33:44.353" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:44.353" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:44.353" starttime="20190402 11:33:42.607"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:44.355" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:44.355" starttime="20190402 11:33:44.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:44.356" starttime="20190402 11:33:44.355"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:44.356" starttime="20190402 11:33:42.606"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:33:44.359" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:33:44.360" starttime="20190402 11:33:44.359"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:33:44.360" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:33:44.361" starttime="20190402 11:33:44.360"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:44.362" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:44.362" starttime="20190402 11:33:44.362"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:44.364" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:33:46.297" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:46.297" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:33:46.298" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:46.298" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:46.298" starttime="20190402 11:33:44.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:46.299" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:46.300" starttime="20190402 11:33:46.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:46.301" starttime="20190402 11:33:46.300"></status>
</kw>
<msg timestamp="20190402 11:33:46.301" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:46.301" starttime="20190402 11:33:44.361"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:33:46.302" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:33:46.302" starttime="20190402 11:33:46.301"></status>
</kw>
<msg timestamp="20190402 11:33:46.303" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:33:46.303" starttime="20190402 11:33:44.358"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:46.304" starttime="20190402 11:33:46.303"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:46.304" starttime="20190402 11:33:44.357"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:46.304" starttime="20190402 11:33:44.357"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:46.304" starttime="20190402 11:33:42.606"></status>
</kw>
<doc>Stop and Start Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:33:46.305" critical="yes" starttime="20190402 11:31:09.615"></status>
</test>
<test id="s1-s1-s3-t11" name="Lock Unlock Instances">
<kw name="Lock Instance" library="OpenStack">
<doc>Lock an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server lock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:46.308" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:46.309" starttime="20190402 11:33:46.308"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:46.310" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server lock vm-cirros-1'.</msg>
<msg timestamp="20190402 11:33:48.058" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:48.058" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:33:48.058" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:48.058" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:48.059" starttime="20190402 11:33:46.309"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:48.062" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:48.062" starttime="20190402 11:33:48.059"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:48.064" starttime="20190402 11:33:48.063"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:48.064" starttime="20190402 11:33:46.307"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:48.065" starttime="20190402 11:33:46.307"></status>
</kw>
<kw name="Lock Instance" library="OpenStack">
<doc>Lock an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server lock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:48.068" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:48.068" starttime="20190402 11:33:48.067"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:48.069" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server lock vm-cirros-2'.</msg>
<msg timestamp="20190402 11:33:49.752" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:49.752" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:33:49.752" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:49.752" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:49.752" starttime="20190402 11:33:48.068"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:49.752" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:49.753" starttime="20190402 11:33:49.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:49.753" starttime="20190402 11:33:49.753"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:49.753" starttime="20190402 11:33:48.066"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:49.753" starttime="20190402 11:33:48.065"></status>
</kw>
<kw name="Unlock Instance" library="OpenStack">
<doc>Unlock an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unlock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:49.754" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:49.754" starttime="20190402 11:33:49.754"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:49.755" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unlock vm-cirros-1'.</msg>
<msg timestamp="20190402 11:33:51.702" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:51.703" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:33:51.703" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:51.703" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:51.703" starttime="20190402 11:33:49.754"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:51.705" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:51.705" starttime="20190402 11:33:51.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:51.706" starttime="20190402 11:33:51.705"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:51.706" starttime="20190402 11:33:49.754"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:51.706" starttime="20190402 11:33:49.753"></status>
</kw>
<kw name="Unlock Instance" library="OpenStack">
<doc>Unlock an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unlock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:51.709" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:51.709" starttime="20190402 11:33:51.709"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:51.710" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unlock vm-cirros-2'.</msg>
<msg timestamp="20190402 11:33:53.743" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:53.743" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:33:53.743" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:53.743" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:53.743" starttime="20190402 11:33:51.709"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:53.745" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:53.745" starttime="20190402 11:33:53.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:53.746" starttime="20190402 11:33:53.745"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:53.746" starttime="20190402 11:33:51.708"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:53.747" starttime="20190402 11:33:51.707"></status>
</kw>
<doc>Lock and Unlock Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:33:53.747" critical="yes" starttime="20190402 11:33:46.306"></status>
</test>
<test id="s1-s1-s3-t12" name="Reboot Instances">
<kw name="Reboot Instance" library="OpenStack">
<doc>Reboot an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server reboot ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:53.751" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:53.751" starttime="20190402 11:33:53.750"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:53.752" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server reboot vm-cirros-1'.</msg>
<msg timestamp="20190402 11:33:55.485" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:55.486" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:33:55.486" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:55.486" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:55.486" starttime="20190402 11:33:53.751"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:55.486" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:55.487" starttime="20190402 11:33:55.486"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:55.487" starttime="20190402 11:33:55.487"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:55.487" starttime="20190402 11:33:53.749"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBOOT</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBOOT</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:33:55.489" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:33:55.489" starttime="20190402 11:33:55.489"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:33:55.489" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:33:55.489" starttime="20190402 11:33:55.489"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:55.490" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:55.490" starttime="20190402 11:33:55.490"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:55.491" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:33:57.172" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:57.173" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:33:57.173" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:57.173" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:57.173" starttime="20190402 11:33:55.490"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:57.174" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:57.174" starttime="20190402 11:33:57.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:57.174" starttime="20190402 11:33:57.174"></status>
</kw>
<msg timestamp="20190402 11:33:57.175" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:57.175" starttime="20190402 11:33:55.490"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:33:57.175" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:33:57.175" starttime="20190402 11:33:57.175"></status>
</kw>
<msg timestamp="20190402 11:33:57.176" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:33:57.176" starttime="20190402 11:33:55.488"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:57.176" starttime="20190402 11:33:57.176"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:57.176" starttime="20190402 11:33:55.488"></status>
</kw>
<status status="PASS" endtime="20190402 11:33:57.176" starttime="20190402 11:33:55.487"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:33:57.178" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:33:57.179" starttime="20190402 11:33:57.178"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:33:57.179" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:33:57.179" starttime="20190402 11:33:57.179"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:33:57.180" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:33:57.180" starttime="20190402 11:33:57.180"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:33:57.181" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:33:58.919" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:33:58.920" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:33:58.920" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:33:58.920" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:33:58.920" starttime="20190402 11:33:57.181"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:33:58.922" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:58.922" starttime="20190402 11:33:58.920"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:33:58.923" starttime="20190402 11:33:58.923"></status>
</kw>
<msg timestamp="20190402 11:33:58.924" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:33:58.924" starttime="20190402 11:33:57.179"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:33:58.924" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:33:58.925" starttime="20190402 11:33:58.924"></status>
</kw>
<msg timestamp="20190402 11:33:58.925" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:33:58.925" starttime="20190402 11:33:57.177"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:33:58.926" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:33:58.926" starttime="20190402 11:33:58.925"></status>
</kw>
<status status="FAIL" endtime="20190402 11:33:58.927" starttime="20190402 11:33:57.177"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:34:08.931" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:34:08.931" starttime="20190402 11:34:08.930"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:34:08.932" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:34:08.932" starttime="20190402 11:34:08.931"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:34:08.934" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:34:08.934" starttime="20190402 11:34:08.934"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:34:08.936" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:34:10.568" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:34:10.569" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:34:10.569" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:34:10.569" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:34:10.569" starttime="20190402 11:34:08.935"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:34:10.571" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:34:10.571" starttime="20190402 11:34:10.569"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:34:10.572" starttime="20190402 11:34:10.571"></status>
</kw>
<msg timestamp="20190402 11:34:10.572" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:34:10.572" starttime="20190402 11:34:08.933"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:34:10.573" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:34:10.573" starttime="20190402 11:34:10.573"></status>
</kw>
<msg timestamp="20190402 11:34:10.574" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:34:10.574" starttime="20190402 11:34:08.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:34:10.575" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:34:10.575" starttime="20190402 11:34:10.574"></status>
</kw>
<status status="FAIL" endtime="20190402 11:34:10.576" starttime="20190402 11:34:08.927"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:34:20.581" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:34:20.581" starttime="20190402 11:34:20.580"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:34:20.582" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:34:20.582" starttime="20190402 11:34:20.581"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:34:20.584" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:34:20.585" starttime="20190402 11:34:20.584"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:34:20.586" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:34:22.220" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:34:22.220" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:34:22.220" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:34:22.221" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:34:22.221" starttime="20190402 11:34:20.585"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:34:22.222" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:34:22.222" starttime="20190402 11:34:22.221"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:34:22.223" starttime="20190402 11:34:22.223"></status>
</kw>
<msg timestamp="20190402 11:34:22.224" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:34:22.224" starttime="20190402 11:34:20.583"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:34:22.225" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:34:22.225" starttime="20190402 11:34:22.224"></status>
</kw>
<msg timestamp="20190402 11:34:22.225" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:34:22.225" starttime="20190402 11:34:20.578"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:34:22.227" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:34:22.227" starttime="20190402 11:34:22.226"></status>
</kw>
<status status="FAIL" endtime="20190402 11:34:22.228" starttime="20190402 11:34:20.576"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:34:32.232" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:34:32.232" starttime="20190402 11:34:32.231"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:34:32.233" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:34:32.234" starttime="20190402 11:34:32.232"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:34:32.236" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:34:32.236" starttime="20190402 11:34:32.235"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:34:32.237" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:34:33.870" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:34:33.871" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:34:33.871" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:34:33.871" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:34:33.871" starttime="20190402 11:34:32.236"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:34:33.873" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:34:33.873" starttime="20190402 11:34:33.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:34:33.874" starttime="20190402 11:34:33.873"></status>
</kw>
<msg timestamp="20190402 11:34:33.874" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:34:33.874" starttime="20190402 11:34:32.234"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:34:33.875" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:34:33.875" starttime="20190402 11:34:33.875"></status>
</kw>
<msg timestamp="20190402 11:34:33.876" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:34:33.876" starttime="20190402 11:34:32.230"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:34:33.877" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:34:33.877" starttime="20190402 11:34:33.876"></status>
</kw>
<status status="FAIL" endtime="20190402 11:34:33.877" starttime="20190402 11:34:32.229"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:34:43.879" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:34:43.879" starttime="20190402 11:34:43.879"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:34:43.880" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:34:43.880" starttime="20190402 11:34:43.880"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:34:43.881" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:34:43.881" starttime="20190402 11:34:43.881"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:34:43.882" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:34:45.614" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:34:45.614" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:34:45.615" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:34:45.615" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:34:45.615" starttime="20190402 11:34:43.881"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:34:45.616" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:34:45.616" starttime="20190402 11:34:45.615"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:34:45.617" starttime="20190402 11:34:45.617"></status>
</kw>
<msg timestamp="20190402 11:34:45.618" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:34:45.618" starttime="20190402 11:34:43.880"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:34:45.619" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:34:45.619" starttime="20190402 11:34:45.618"></status>
</kw>
<msg timestamp="20190402 11:34:45.619" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:34:45.619" starttime="20190402 11:34:43.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:34:45.621" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:34:45.621" starttime="20190402 11:34:45.620"></status>
</kw>
<status status="FAIL" endtime="20190402 11:34:45.621" starttime="20190402 11:34:43.878"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:34:55.626" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:34:55.626" starttime="20190402 11:34:55.625"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:34:55.627" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:34:55.627" starttime="20190402 11:34:55.626"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:34:55.630" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:34:55.630" starttime="20190402 11:34:55.629"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:34:55.632" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:34:57.316" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:34:57.316" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:34:57.317" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:34:57.317" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:34:57.317" starttime="20190402 11:34:55.631"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:34:57.318" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:34:57.318" starttime="20190402 11:34:57.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:34:57.319" starttime="20190402 11:34:57.319"></status>
</kw>
<msg timestamp="20190402 11:34:57.320" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:34:57.320" starttime="20190402 11:34:55.627"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:34:57.321" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:34:57.321" starttime="20190402 11:34:57.320"></status>
</kw>
<msg timestamp="20190402 11:34:57.321" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:34:57.321" starttime="20190402 11:34:55.623"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:34:57.322" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:34:57.323" starttime="20190402 11:34:57.322"></status>
</kw>
<status status="FAIL" endtime="20190402 11:34:57.323" starttime="20190402 11:34:55.622"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:35:07.328" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:35:07.328" starttime="20190402 11:35:07.327"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:35:07.329" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:35:07.329" starttime="20190402 11:35:07.328"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:35:07.331" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:35:07.331" starttime="20190402 11:35:07.331"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:35:07.333" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:35:08.919" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:35:08.919" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:35:08.919" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:35:08.919" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:35:08.919" starttime="20190402 11:35:07.332"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:35:08.920" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:35:08.920" starttime="20190402 11:35:08.919"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:35:08.920" starttime="20190402 11:35:08.920"></status>
</kw>
<msg timestamp="20190402 11:35:08.920" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:35:08.920" starttime="20190402 11:35:07.329"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:35:08.921" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:35:08.921" starttime="20190402 11:35:08.920"></status>
</kw>
<msg timestamp="20190402 11:35:08.921" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:35:08.921" starttime="20190402 11:35:07.325"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:35:08.921" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:35:08.921" starttime="20190402 11:35:08.921"></status>
</kw>
<status status="FAIL" endtime="20190402 11:35:08.921" starttime="20190402 11:35:07.324"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:35:18.925" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:35:18.925" starttime="20190402 11:35:18.924"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:35:18.927" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:35:18.927" starttime="20190402 11:35:18.926"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:35:18.929" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:35:18.930" starttime="20190402 11:35:18.929"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:35:18.931" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:35:20.565" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:35:20.566" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:35:20.566" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:35:20.566" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:35:20.566" starttime="20190402 11:35:18.930"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:35:20.568" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:35:20.568" starttime="20190402 11:35:20.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:35:20.569" starttime="20190402 11:35:20.569"></status>
</kw>
<msg timestamp="20190402 11:35:20.570" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:35:20.570" starttime="20190402 11:35:18.928"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:35:20.571" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:35:20.571" starttime="20190402 11:35:20.570"></status>
</kw>
<msg timestamp="20190402 11:35:20.572" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:35:20.572" starttime="20190402 11:35:18.923"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:35:20.573" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:35:20.573" starttime="20190402 11:35:20.572"></status>
</kw>
<status status="FAIL" endtime="20190402 11:35:20.574" starttime="20190402 11:35:18.922"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:35:30.579" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:35:30.579" starttime="20190402 11:35:30.578"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:35:30.580" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:35:30.581" starttime="20190402 11:35:30.579"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:35:30.583" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:35:30.583" starttime="20190402 11:35:30.582"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:35:30.584" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:35:32.218" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:35:32.219" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:35:32.219" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:35:32.219" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:35:32.219" starttime="20190402 11:35:30.583"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:35:32.220" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:35:32.221" starttime="20190402 11:35:32.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:35:32.222" starttime="20190402 11:35:32.221"></status>
</kw>
<msg timestamp="20190402 11:35:32.222" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:35:32.222" starttime="20190402 11:35:30.581"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:35:32.223" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:35:32.223" starttime="20190402 11:35:32.222"></status>
</kw>
<msg timestamp="20190402 11:35:32.224" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:35:32.224" starttime="20190402 11:35:30.577"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:35:32.225" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:35:32.225" starttime="20190402 11:35:32.224"></status>
</kw>
<status status="FAIL" endtime="20190402 11:35:32.225" starttime="20190402 11:35:30.575"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:35:42.229" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:35:42.229" starttime="20190402 11:35:42.228"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:35:42.230" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:35:42.230" starttime="20190402 11:35:42.229"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:35:42.231" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:35:42.231" starttime="20190402 11:35:42.231"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:35:42.232" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:35:43.814" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:35:43.814" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:35:43.814" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:35:43.815" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:35:43.815" starttime="20190402 11:35:42.231"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:35:43.817" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:35:43.817" starttime="20190402 11:35:43.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:35:43.818" starttime="20190402 11:35:43.817"></status>
</kw>
<msg timestamp="20190402 11:35:43.819" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:35:43.819" starttime="20190402 11:35:42.230"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:35:43.820" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:35:43.820" starttime="20190402 11:35:43.819"></status>
</kw>
<msg timestamp="20190402 11:35:43.821" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:35:43.821" starttime="20190402 11:35:42.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:35:43.822" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:35:43.822" starttime="20190402 11:35:43.821"></status>
</kw>
<status status="FAIL" endtime="20190402 11:35:43.823" starttime="20190402 11:35:42.226"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:35:53.827" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:35:53.827" starttime="20190402 11:35:53.826"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:35:53.829" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:35:53.829" starttime="20190402 11:35:53.828"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:35:53.831" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:35:53.831" starttime="20190402 11:35:53.831"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:35:53.832" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:35:55.465" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:35:55.465" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:35:55.465" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:35:55.465" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:35:55.465" starttime="20190402 11:35:53.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:35:55.467" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:35:55.467" starttime="20190402 11:35:55.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:35:55.468" starttime="20190402 11:35:55.467"></status>
</kw>
<msg timestamp="20190402 11:35:55.468" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:35:55.468" starttime="20190402 11:35:53.829"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:35:55.469" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:35:55.469" starttime="20190402 11:35:55.469"></status>
</kw>
<msg timestamp="20190402 11:35:55.470" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:35:55.470" starttime="20190402 11:35:53.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:35:55.471" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:35:55.471" starttime="20190402 11:35:55.470"></status>
</kw>
<status status="FAIL" endtime="20190402 11:35:55.471" starttime="20190402 11:35:53.824"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:36:05.474" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:36:05.474" starttime="20190402 11:36:05.473"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:36:05.474" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:36:05.474" starttime="20190402 11:36:05.474"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:36:05.475" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:36:05.475" starttime="20190402 11:36:05.475"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:36:05.476" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:36:07.509" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:36:07.509" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:36:07.509" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:36:07.510" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:36:07.510" starttime="20190402 11:36:05.476"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:36:07.512" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:07.512" starttime="20190402 11:36:07.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:36:07.513" starttime="20190402 11:36:07.512"></status>
</kw>
<msg timestamp="20190402 11:36:07.513" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:07.513" starttime="20190402 11:36:05.475"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:36:07.514" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:36:07.514" starttime="20190402 11:36:07.514"></status>
</kw>
<msg timestamp="20190402 11:36:07.515" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:36:07.515" starttime="20190402 11:36:05.473"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:36:07.516" starttime="20190402 11:36:07.515"></status>
</kw>
<status status="PASS" endtime="20190402 11:36:07.516" starttime="20190402 11:36:05.472"></status>
</kw>
<status status="PASS" endtime="20190402 11:36:07.516" starttime="20190402 11:33:57.177"></status>
</kw>
<status status="PASS" endtime="20190402 11:36:07.516" starttime="20190402 11:33:53.749"></status>
</kw>
<kw name="Reboot Instance" library="OpenStack">
<doc>Reboot an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server reboot ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:36:07.519" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:36:07.519" starttime="20190402 11:36:07.518"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:36:07.520" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server reboot vm-cirros-2'.</msg>
<msg timestamp="20190402 11:36:09.204" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:36:09.204" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:36:09.204" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:36:09.205" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:36:09.205" starttime="20190402 11:36:07.519"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:36:09.206" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:09.207" starttime="20190402 11:36:09.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:36:09.208" starttime="20190402 11:36:09.207"></status>
</kw>
<status status="PASS" endtime="20190402 11:36:09.208" starttime="20190402 11:36:07.518"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBOOT</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBOOT</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:36:09.212" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:36:09.212" starttime="20190402 11:36:09.211"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:36:09.213" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:36:09.213" starttime="20190402 11:36:09.212"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:36:09.215" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:36:09.215" starttime="20190402 11:36:09.215"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:36:09.216" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:36:10.966" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:36:10.966" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:36:10.967" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:36:10.967" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:36:10.967" starttime="20190402 11:36:09.215"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:36:10.969" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:10.969" starttime="20190402 11:36:10.968"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:36:10.971" starttime="20190402 11:36:10.970"></status>
</kw>
<msg timestamp="20190402 11:36:10.971" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:10.972" starttime="20190402 11:36:09.214"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:36:10.973" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:36:10.973" starttime="20190402 11:36:10.972"></status>
</kw>
<msg timestamp="20190402 11:36:10.974" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:36:10.974" starttime="20190402 11:36:09.210"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:36:10.975" starttime="20190402 11:36:10.974"></status>
</kw>
<status status="PASS" endtime="20190402 11:36:10.976" starttime="20190402 11:36:09.209"></status>
</kw>
<status status="PASS" endtime="20190402 11:36:10.976" starttime="20190402 11:36:09.209"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:36:10.980" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:36:10.980" starttime="20190402 11:36:10.980"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:36:10.982" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:36:10.982" starttime="20190402 11:36:10.981"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:36:10.985" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:36:10.985" starttime="20190402 11:36:10.984"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:36:10.986" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:36:12.569" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:36:12.569" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:36:12.570" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:36:12.570" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:36:12.570" starttime="20190402 11:36:10.985"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:36:12.572" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:12.572" starttime="20190402 11:36:12.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:36:12.574" starttime="20190402 11:36:12.572"></status>
</kw>
<msg timestamp="20190402 11:36:12.574" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:12.575" starttime="20190402 11:36:10.982"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:36:12.576" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:36:12.576" starttime="20190402 11:36:12.575"></status>
</kw>
<msg timestamp="20190402 11:36:12.577" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:36:12.577" starttime="20190402 11:36:10.978"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:36:12.579" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:36:12.580" starttime="20190402 11:36:12.578"></status>
</kw>
<status status="FAIL" endtime="20190402 11:36:12.580" starttime="20190402 11:36:10.977"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:36:22.582" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:36:22.582" starttime="20190402 11:36:22.582"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:36:22.583" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:36:22.583" starttime="20190402 11:36:22.582"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:36:22.584" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:36:22.584" starttime="20190402 11:36:22.584"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:36:22.585" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:36:24.418" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:36:24.418" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:36:24.418" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:36:24.419" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:36:24.419" starttime="20190402 11:36:22.584"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:36:24.420" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:24.421" starttime="20190402 11:36:24.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:36:24.422" starttime="20190402 11:36:24.421"></status>
</kw>
<msg timestamp="20190402 11:36:24.422" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:24.422" starttime="20190402 11:36:22.583"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:36:24.423" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:36:24.424" starttime="20190402 11:36:24.423"></status>
</kw>
<msg timestamp="20190402 11:36:24.424" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:36:24.424" starttime="20190402 11:36:22.581"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:36:24.426" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:36:24.426" starttime="20190402 11:36:24.425"></status>
</kw>
<status status="FAIL" endtime="20190402 11:36:24.427" starttime="20190402 11:36:22.581"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:36:34.430" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:36:34.430" starttime="20190402 11:36:34.430"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:36:34.431" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:36:34.431" starttime="20190402 11:36:34.431"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:36:34.433" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:36:34.434" starttime="20190402 11:36:34.432"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:36:34.435" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:36:36.117" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:36:36.117" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:36:36.118" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:36:36.118" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:36:36.118" starttime="20190402 11:36:34.434"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:36:36.119" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:36.119" starttime="20190402 11:36:36.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:36:36.120" starttime="20190402 11:36:36.120"></status>
</kw>
<msg timestamp="20190402 11:36:36.121" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:36.121" starttime="20190402 11:36:34.432"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:36:36.122" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:36:36.122" starttime="20190402 11:36:36.121"></status>
</kw>
<msg timestamp="20190402 11:36:36.122" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:36:36.122" starttime="20190402 11:36:34.429"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:36:36.123" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:36:36.124" starttime="20190402 11:36:36.123"></status>
</kw>
<status status="FAIL" endtime="20190402 11:36:36.124" starttime="20190402 11:36:34.428"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:36:46.128" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:36:46.128" starttime="20190402 11:36:46.127"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:36:46.129" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:36:46.129" starttime="20190402 11:36:46.128"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:36:46.131" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:36:46.131" starttime="20190402 11:36:46.131"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:36:46.133" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:36:47.869" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:36:47.869" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:36:47.869" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:36:47.869" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:36:47.869" starttime="20190402 11:36:46.132"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:36:47.870" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:47.870" starttime="20190402 11:36:47.869"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:36:47.870" starttime="20190402 11:36:47.870"></status>
</kw>
<msg timestamp="20190402 11:36:47.870" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:47.870" starttime="20190402 11:36:46.129"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:36:47.871" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:36:47.871" starttime="20190402 11:36:47.871"></status>
</kw>
<msg timestamp="20190402 11:36:47.871" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:36:47.871" starttime="20190402 11:36:46.126"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:36:47.872" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:36:47.872" starttime="20190402 11:36:47.871"></status>
</kw>
<status status="FAIL" endtime="20190402 11:36:47.872" starttime="20190402 11:36:46.125"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:36:57.877" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:36:57.878" starttime="20190402 11:36:57.876"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:36:57.879" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:36:57.879" starttime="20190402 11:36:57.878"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:36:57.881" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:36:57.881" starttime="20190402 11:36:57.881"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:36:57.883" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:36:59.718" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:36:59.719" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:36:59.719" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:36:59.719" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:36:59.719" starttime="20190402 11:36:57.882"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:36:59.722" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:59.722" starttime="20190402 11:36:59.719"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:36:59.723" starttime="20190402 11:36:59.722"></status>
</kw>
<msg timestamp="20190402 11:36:59.723" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:36:59.723" starttime="20190402 11:36:57.880"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:36:59.725" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:36:59.725" starttime="20190402 11:36:59.724"></status>
</kw>
<msg timestamp="20190402 11:36:59.726" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:36:59.726" starttime="20190402 11:36:57.874"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:36:59.728" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:36:59.728" starttime="20190402 11:36:59.727"></status>
</kw>
<status status="FAIL" endtime="20190402 11:36:59.729" starttime="20190402 11:36:57.872"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:37:09.732" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:37:09.733" starttime="20190402 11:37:09.732"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:37:09.734" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:37:09.734" starttime="20190402 11:37:09.733"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:37:09.736" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:37:09.736" starttime="20190402 11:37:09.735"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:37:09.737" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:37:11.521" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:37:11.521" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:37:11.522" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:37:11.522" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:37:11.522" starttime="20190402 11:37:09.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:37:11.524" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:37:11.524" starttime="20190402 11:37:11.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:37:11.525" starttime="20190402 11:37:11.524"></status>
</kw>
<msg timestamp="20190402 11:37:11.526" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:37:11.526" starttime="20190402 11:37:09.734"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:37:11.527" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:37:11.527" starttime="20190402 11:37:11.526"></status>
</kw>
<msg timestamp="20190402 11:37:11.528" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:37:11.528" starttime="20190402 11:37:09.731"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:37:11.529" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:37:11.529" starttime="20190402 11:37:11.528"></status>
</kw>
<status status="FAIL" endtime="20190402 11:37:11.530" starttime="20190402 11:37:09.729"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:37:21.533" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:37:21.533" starttime="20190402 11:37:21.532"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:37:21.534" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:37:21.534" starttime="20190402 11:37:21.533"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:37:21.536" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:37:21.536" starttime="20190402 11:37:21.536"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:37:21.537" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:37:23.120" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:37:23.121" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:37:23.121" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:37:23.121" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:37:23.121" starttime="20190402 11:37:21.537"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:37:23.124" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:37:23.124" starttime="20190402 11:37:23.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:37:23.125" starttime="20190402 11:37:23.124"></status>
</kw>
<msg timestamp="20190402 11:37:23.126" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:37:23.126" starttime="20190402 11:37:21.535"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:37:23.127" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:37:23.127" starttime="20190402 11:37:23.126"></status>
</kw>
<msg timestamp="20190402 11:37:23.128" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:37:23.128" starttime="20190402 11:37:21.532"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:37:23.129" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:37:23.129" starttime="20190402 11:37:23.128"></status>
</kw>
<status status="FAIL" endtime="20190402 11:37:23.130" starttime="20190402 11:37:21.530"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:37:33.134" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:37:33.134" starttime="20190402 11:37:33.133"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:37:33.135" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:37:33.135" starttime="20190402 11:37:33.134"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:37:33.137" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:37:33.137" starttime="20190402 11:37:33.136"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:37:33.138" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:37:35.121" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:37:35.122" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:37:35.122" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:37:35.122" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:37:35.122" starttime="20190402 11:37:33.137"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:37:35.124" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:37:35.124" starttime="20190402 11:37:35.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:37:35.125" starttime="20190402 11:37:35.124"></status>
</kw>
<msg timestamp="20190402 11:37:35.126" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:37:35.126" starttime="20190402 11:37:33.135"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:37:35.127" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:37:35.127" starttime="20190402 11:37:35.126"></status>
</kw>
<msg timestamp="20190402 11:37:35.128" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:37:35.128" starttime="20190402 11:37:33.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:37:35.129" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:37:35.129" starttime="20190402 11:37:35.128"></status>
</kw>
<status status="FAIL" endtime="20190402 11:37:35.129" starttime="20190402 11:37:33.130"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:37:45.132" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:37:45.132" starttime="20190402 11:37:45.131"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:37:45.132" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:37:45.132" starttime="20190402 11:37:45.132"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:37:45.133" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:37:45.133" starttime="20190402 11:37:45.133"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:37:45.134" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:37:47.067" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:37:47.068" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:37:47.068" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:37:47.068" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:37:47.068" starttime="20190402 11:37:45.134"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:37:47.070" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:37:47.070" starttime="20190402 11:37:47.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:37:47.071" starttime="20190402 11:37:47.070"></status>
</kw>
<msg timestamp="20190402 11:37:47.071" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:37:47.072" starttime="20190402 11:37:45.133"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:37:47.073" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:37:47.073" starttime="20190402 11:37:47.072"></status>
</kw>
<msg timestamp="20190402 11:37:47.074" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:37:47.074" starttime="20190402 11:37:45.131"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:37:47.075" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:37:47.075" starttime="20190402 11:37:47.074"></status>
</kw>
<status status="FAIL" endtime="20190402 11:37:47.076" starttime="20190402 11:37:45.130"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:37:57.078" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:37:57.078" starttime="20190402 11:37:57.077"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:37:57.078" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:37:57.078" starttime="20190402 11:37:57.078"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:37:57.079" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:37:57.079" starttime="20190402 11:37:57.079"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:37:57.080" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:37:58.711" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:37:58.712" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:37:58.712" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:37:58.712" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:37:58.712" starttime="20190402 11:37:57.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:37:58.713" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:37:58.713" starttime="20190402 11:37:58.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:37:58.714" starttime="20190402 11:37:58.713"></status>
</kw>
<msg timestamp="20190402 11:37:58.714" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:37:58.714" starttime="20190402 11:37:57.078"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:37:58.714" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:37:58.714" starttime="20190402 11:37:58.714"></status>
</kw>
<msg timestamp="20190402 11:37:58.715" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:37:58.715" starttime="20190402 11:37:57.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:37:58.715" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:37:58.716" starttime="20190402 11:37:58.715"></status>
</kw>
<status status="FAIL" endtime="20190402 11:37:58.716" starttime="20190402 11:37:57.076"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:38:08.720" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:38:08.720" starttime="20190402 11:38:08.719"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:38:08.722" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:38:08.722" starttime="20190402 11:38:08.721"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:38:08.724" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:38:08.724" starttime="20190402 11:38:08.723"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:38:08.725" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:38:10.760" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:38:10.760" level="INFO">${stdout} = REBOOT</msg>
<msg timestamp="20190402 11:38:10.761" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:38:10.761" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:38:10.761" starttime="20190402 11:38:08.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:38:10.763" level="INFO">${res} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:38:10.763" starttime="20190402 11:38:10.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:38:10.764" starttime="20190402 11:38:10.763"></status>
</kw>
<msg timestamp="20190402 11:38:10.764" level="INFO">${result} = {u'stdout': u'REBOOT', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:38:10.764" starttime="20190402 11:38:08.722"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:38:10.766" level="INFO">${value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:38:10.766" starttime="20190402 11:38:10.765"></status>
</kw>
<msg timestamp="20190402 11:38:10.766" level="INFO">${current_value} = REBOOT</msg>
<status status="PASS" endtime="20190402 11:38:10.766" starttime="20190402 11:38:08.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:38:10.768" level="FAIL">REBOOT != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:38:10.768" starttime="20190402 11:38:10.767"></status>
</kw>
<status status="FAIL" endtime="20190402 11:38:10.768" starttime="20190402 11:38:08.716"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:38:20.772" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:38:20.772" starttime="20190402 11:38:20.771"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:38:20.773" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:38:20.773" starttime="20190402 11:38:20.772"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:38:20.775" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:38:20.776" starttime="20190402 11:38:20.775"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:38:20.777" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:38:22.468" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:38:22.469" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:38:22.469" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:38:22.469" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:38:22.469" starttime="20190402 11:38:20.776"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:38:22.472" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:38:22.472" starttime="20190402 11:38:22.470"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:38:22.473" starttime="20190402 11:38:22.472"></status>
</kw>
<msg timestamp="20190402 11:38:22.474" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:38:22.474" starttime="20190402 11:38:20.773"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:38:22.475" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:38:22.475" starttime="20190402 11:38:22.474"></status>
</kw>
<msg timestamp="20190402 11:38:22.475" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:38:22.475" starttime="20190402 11:38:20.770"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:38:22.477" starttime="20190402 11:38:22.476"></status>
</kw>
<status status="PASS" endtime="20190402 11:38:22.477" starttime="20190402 11:38:20.769"></status>
</kw>
<status status="PASS" endtime="20190402 11:38:22.477" starttime="20190402 11:36:10.976"></status>
</kw>
<status status="PASS" endtime="20190402 11:38:22.477" starttime="20190402 11:36:07.517"></status>
</kw>
<doc>Reboot Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:38:22.478" critical="yes" starttime="20190402 11:33:53.748"></status>
</test>
<test id="s1-s1-s3-t13" name="Rebuild Instances">
<kw name="Rebuild Instance From Volume" library="OpenStack">
<doc>Rebuild an instance from volume</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server rebuild --image ${image} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:38:22.482" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:38:22.482" starttime="20190402 11:38:22.481"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:38:22.483" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server rebuild --image cirros vm-cirros-1'.</msg>
<msg timestamp="20190402 11:38:24.517" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:38:24.517" level="INFO">${stdout} = +-------------------+----------------------------------------------------------+
| Field             | Value                                                    |
+-------------------+-----------------...</msg>
<msg timestamp="20190402 11:38:24.517" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:38:24.518" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:38:24.518" starttime="20190402 11:38:22.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:38:24.520" level="INFO">${res} = {u'stdout': u'+-------------------+----------------------------------------------------------+\n| Field             | Value                                                    |\n+-------------------+-...</msg>
<status status="PASS" endtime="20190402 11:38:24.520" starttime="20190402 11:38:24.518"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:38:24.521" starttime="20190402 11:38:24.520"></status>
</kw>
<status status="PASS" endtime="20190402 11:38:24.522" starttime="20190402 11:38:22.481"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBUILD</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBUILD</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:38:24.525" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:38:24.526" starttime="20190402 11:38:24.525"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:38:24.527" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:38:24.527" starttime="20190402 11:38:24.526"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:38:24.528" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:38:24.529" starttime="20190402 11:38:24.528"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:38:24.530" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:38:26.164" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:38:26.165" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:38:26.165" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:38:26.165" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:38:26.165" starttime="20190402 11:38:24.529"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:38:26.167" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:38:26.167" starttime="20190402 11:38:26.166"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:38:26.168" starttime="20190402 11:38:26.167"></status>
</kw>
<msg timestamp="20190402 11:38:26.168" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:38:26.169" starttime="20190402 11:38:24.527"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:38:26.170" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:38:26.170" starttime="20190402 11:38:26.169"></status>
</kw>
<msg timestamp="20190402 11:38:26.170" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:38:26.170" starttime="20190402 11:38:24.524"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:38:26.172" starttime="20190402 11:38:26.171"></status>
</kw>
<status status="PASS" endtime="20190402 11:38:26.172" starttime="20190402 11:38:24.523"></status>
</kw>
<status status="PASS" endtime="20190402 11:38:26.172" starttime="20190402 11:38:24.522"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:38:26.176" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:38:26.176" starttime="20190402 11:38:26.175"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:38:26.177" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:38:26.177" starttime="20190402 11:38:26.176"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:38:26.179" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:38:26.179" starttime="20190402 11:38:26.178"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:38:26.180" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:38:27.762" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:38:27.762" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:38:27.763" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:38:27.763" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:38:27.763" starttime="20190402 11:38:26.179"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:38:27.764" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:38:27.764" starttime="20190402 11:38:27.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:38:27.764" starttime="20190402 11:38:27.764"></status>
</kw>
<msg timestamp="20190402 11:38:27.765" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:38:27.765" starttime="20190402 11:38:26.177"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:38:27.765" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:38:27.765" starttime="20190402 11:38:27.765"></status>
</kw>
<msg timestamp="20190402 11:38:27.765" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:38:27.766" starttime="20190402 11:38:26.174"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:38:27.766" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:38:27.766" starttime="20190402 11:38:27.766"></status>
</kw>
<status status="FAIL" endtime="20190402 11:38:27.767" starttime="20190402 11:38:26.173"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:38:37.771" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:38:37.771" starttime="20190402 11:38:37.770"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:38:37.773" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:38:37.773" starttime="20190402 11:38:37.772"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:38:37.775" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:38:37.775" starttime="20190402 11:38:37.774"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:38:37.776" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:38:39.410" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:38:39.411" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:38:39.411" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:38:39.411" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:38:39.411" starttime="20190402 11:38:37.775"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:38:39.413" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:38:39.413" starttime="20190402 11:38:39.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:38:39.414" starttime="20190402 11:38:39.413"></status>
</kw>
<msg timestamp="20190402 11:38:39.415" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:38:39.415" starttime="20190402 11:38:37.773"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:38:39.416" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:38:39.416" starttime="20190402 11:38:39.415"></status>
</kw>
<msg timestamp="20190402 11:38:39.416" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:38:39.417" starttime="20190402 11:38:37.769"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:38:39.418" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:38:39.418" starttime="20190402 11:38:39.417"></status>
</kw>
<status status="FAIL" endtime="20190402 11:38:39.418" starttime="20190402 11:38:37.767"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:38:49.423" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:38:49.423" starttime="20190402 11:38:49.422"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:38:49.425" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:38:49.425" starttime="20190402 11:38:49.424"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:38:49.427" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:38:49.427" starttime="20190402 11:38:49.427"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:38:49.428" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:38:51.061" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:38:51.062" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:38:51.062" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:38:51.062" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:38:51.062" starttime="20190402 11:38:49.427"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:38:51.064" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:38:51.064" starttime="20190402 11:38:51.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:38:51.066" starttime="20190402 11:38:51.065"></status>
</kw>
<msg timestamp="20190402 11:38:51.066" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:38:51.066" starttime="20190402 11:38:49.425"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:38:51.067" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:38:51.068" starttime="20190402 11:38:51.067"></status>
</kw>
<msg timestamp="20190402 11:38:51.068" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:38:51.068" starttime="20190402 11:38:49.421"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:38:51.070" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:38:51.070" starttime="20190402 11:38:51.069"></status>
</kw>
<status status="FAIL" endtime="20190402 11:38:51.070" starttime="20190402 11:38:49.419"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:39:01.074" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:39:01.074" starttime="20190402 11:39:01.073"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:39:01.075" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:39:01.075" starttime="20190402 11:39:01.074"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:39:01.077" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:39:01.077" starttime="20190402 11:39:01.076"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:39:01.078" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:39:02.911" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:39:02.912" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:39:02.912" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:39:02.912" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:39:02.912" starttime="20190402 11:39:01.077"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:39:02.912" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:39:02.912" starttime="20190402 11:39:02.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:39:02.913" starttime="20190402 11:39:02.913"></status>
</kw>
<msg timestamp="20190402 11:39:02.913" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:39:02.913" starttime="20190402 11:39:01.075"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:39:02.913" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:39:02.913" starttime="20190402 11:39:02.913"></status>
</kw>
<msg timestamp="20190402 11:39:02.914" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:39:02.914" starttime="20190402 11:39:01.072"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:39:02.914" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:39:02.914" starttime="20190402 11:39:02.914"></status>
</kw>
<status status="FAIL" endtime="20190402 11:39:02.914" starttime="20190402 11:39:01.071"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:39:12.918" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:39:12.918" starttime="20190402 11:39:12.917"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:39:12.919" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:39:12.919" starttime="20190402 11:39:12.918"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:39:12.922" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:39:12.922" starttime="20190402 11:39:12.921"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:39:12.923" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:39:14.756" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:39:14.757" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:39:14.757" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:39:14.757" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:39:14.757" starttime="20190402 11:39:12.922"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:39:14.759" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:39:14.759" starttime="20190402 11:39:14.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:39:14.760" starttime="20190402 11:39:14.759"></status>
</kw>
<msg timestamp="20190402 11:39:14.760" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:39:14.760" starttime="20190402 11:39:12.920"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:39:14.761" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:39:14.761" starttime="20190402 11:39:14.761"></status>
</kw>
<msg timestamp="20190402 11:39:14.762" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:39:14.762" starttime="20190402 11:39:12.916"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:39:14.763" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:39:14.763" starttime="20190402 11:39:14.762"></status>
</kw>
<status status="FAIL" endtime="20190402 11:39:14.764" starttime="20190402 11:39:12.915"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:39:24.766" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:39:24.766" starttime="20190402 11:39:24.765"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:39:24.766" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:39:24.766" starttime="20190402 11:39:24.766"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:39:24.767" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:39:24.767" starttime="20190402 11:39:24.767"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:39:24.768" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:39:26.449" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:39:26.450" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:39:26.450" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:39:26.450" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:39:26.450" starttime="20190402 11:39:24.768"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:39:26.452" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:39:26.452" starttime="20190402 11:39:26.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:39:26.453" starttime="20190402 11:39:26.452"></status>
</kw>
<msg timestamp="20190402 11:39:26.453" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:39:26.453" starttime="20190402 11:39:24.767"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:39:26.454" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:39:26.454" starttime="20190402 11:39:26.454"></status>
</kw>
<msg timestamp="20190402 11:39:26.455" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:39:26.455" starttime="20190402 11:39:24.765"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:39:26.456" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:39:26.456" starttime="20190402 11:39:26.455"></status>
</kw>
<status status="FAIL" endtime="20190402 11:39:26.457" starttime="20190402 11:39:24.764"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:39:36.461" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:39:36.461" starttime="20190402 11:39:36.460"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:39:36.462" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:39:36.462" starttime="20190402 11:39:36.461"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:39:36.464" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:39:36.464" starttime="20190402 11:39:36.464"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:39:36.466" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:39:38.198" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:39:38.198" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:39:38.198" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:39:38.198" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:39:38.198" starttime="20190402 11:39:36.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:39:38.200" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:39:38.200" starttime="20190402 11:39:38.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:39:38.201" starttime="20190402 11:39:38.200"></status>
</kw>
<msg timestamp="20190402 11:39:38.201" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:39:38.201" starttime="20190402 11:39:36.462"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:39:38.201" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:39:38.201" starttime="20190402 11:39:38.201"></status>
</kw>
<msg timestamp="20190402 11:39:38.202" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:39:38.202" starttime="20190402 11:39:36.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:39:38.202" starttime="20190402 11:39:38.202"></status>
</kw>
<status status="PASS" endtime="20190402 11:39:38.203" starttime="20190402 11:39:36.457"></status>
</kw>
<status status="PASS" endtime="20190402 11:39:38.203" starttime="20190402 11:38:26.172"></status>
</kw>
<status status="PASS" endtime="20190402 11:39:38.203" starttime="20190402 11:38:22.480"></status>
</kw>
<kw name="Rebuild Instance From Volume" library="OpenStack">
<doc>Rebuild an instance from volume</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server rebuild --image ${image} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:39:38.206" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:39:38.206" starttime="20190402 11:39:38.206"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:39:38.207" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server rebuild --image cirros vm-cirros-2'.</msg>
<msg timestamp="20190402 11:39:40.540" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:39:40.540" level="INFO">${stdout} = +-------------------+----------------------------------------------------------+
| Field             | Value                                                    |
+-------------------+-----------------...</msg>
<msg timestamp="20190402 11:39:40.540" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:39:40.540" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:39:40.541" starttime="20190402 11:39:38.206"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:39:40.542" level="INFO">${res} = {u'stdout': u'+-------------------+----------------------------------------------------------+\n| Field             | Value                                                    |\n+-------------------+-...</msg>
<status status="PASS" endtime="20190402 11:39:40.542" starttime="20190402 11:39:40.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:39:40.543" starttime="20190402 11:39:40.542"></status>
</kw>
<status status="PASS" endtime="20190402 11:39:40.543" starttime="20190402 11:39:38.205"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBUILD</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>REBUILD</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:39:40.547" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:39:40.547" starttime="20190402 11:39:40.546"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:39:40.548" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:39:40.548" starttime="20190402 11:39:40.547"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:39:40.550" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:39:40.550" starttime="20190402 11:39:40.550"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:39:40.551" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:39:42.184" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:39:42.185" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:39:42.185" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:39:42.185" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:39:42.185" starttime="20190402 11:39:40.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:39:42.187" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:39:42.187" starttime="20190402 11:39:42.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:39:42.188" starttime="20190402 11:39:42.187"></status>
</kw>
<msg timestamp="20190402 11:39:42.188" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:39:42.189" starttime="20190402 11:39:40.548"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:39:42.189" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:39:42.190" starttime="20190402 11:39:42.189"></status>
</kw>
<msg timestamp="20190402 11:39:42.190" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:39:42.190" starttime="20190402 11:39:40.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:39:42.191" starttime="20190402 11:39:42.191"></status>
</kw>
<status status="PASS" endtime="20190402 11:39:42.191" starttime="20190402 11:39:40.544"></status>
</kw>
<status status="PASS" endtime="20190402 11:39:42.192" starttime="20190402 11:39:40.544"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:39:42.195" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:39:42.195" starttime="20190402 11:39:42.194"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:39:42.196" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:39:42.196" starttime="20190402 11:39:42.195"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:39:42.198" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:39:42.198" starttime="20190402 11:39:42.198"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:39:42.200" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:39:43.782" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:39:43.782" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:39:43.783" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:39:43.783" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:39:43.783" starttime="20190402 11:39:42.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:39:43.785" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:39:43.786" starttime="20190402 11:39:43.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:39:43.787" starttime="20190402 11:39:43.786"></status>
</kw>
<msg timestamp="20190402 11:39:43.787" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:39:43.787" starttime="20190402 11:39:42.196"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:39:43.789" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:39:43.789" starttime="20190402 11:39:43.788"></status>
</kw>
<msg timestamp="20190402 11:39:43.790" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:39:43.790" starttime="20190402 11:39:42.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:39:43.791" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:39:43.791" starttime="20190402 11:39:43.790"></status>
</kw>
<status status="FAIL" endtime="20190402 11:39:43.792" starttime="20190402 11:39:42.193"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:39:53.794" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:39:53.794" starttime="20190402 11:39:53.794"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:39:53.794" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:39:53.795" starttime="20190402 11:39:53.794"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:39:53.795" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:39:53.795" starttime="20190402 11:39:53.795"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:39:53.796" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:39:55.577" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:39:55.577" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:39:55.578" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:39:55.578" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:39:55.578" starttime="20190402 11:39:53.796"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:39:55.578" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:39:55.578" starttime="20190402 11:39:55.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:39:55.579" starttime="20190402 11:39:55.579"></status>
</kw>
<msg timestamp="20190402 11:39:55.579" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:39:55.579" starttime="20190402 11:39:53.795"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:39:55.580" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:39:55.580" starttime="20190402 11:39:55.579"></status>
</kw>
<msg timestamp="20190402 11:39:55.580" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:39:55.580" starttime="20190402 11:39:53.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:39:55.580" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:39:55.580" starttime="20190402 11:39:55.580"></status>
</kw>
<status status="FAIL" endtime="20190402 11:39:55.581" starttime="20190402 11:39:53.792"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:40:05.584" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:40:05.585" starttime="20190402 11:40:05.584"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:40:05.586" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:40:05.586" starttime="20190402 11:40:05.585"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:40:05.589" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:40:05.589" starttime="20190402 11:40:05.587"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:40:05.590" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:40:07.323" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:40:07.323" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:40:07.323" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:40:07.323" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:40:07.323" starttime="20190402 11:40:05.589"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:40:07.324" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:40:07.324" starttime="20190402 11:40:07.323"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:40:07.324" starttime="20190402 11:40:07.324"></status>
</kw>
<msg timestamp="20190402 11:40:07.324" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:40:07.325" starttime="20190402 11:40:05.586"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:40:07.325" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:40:07.325" starttime="20190402 11:40:07.325"></status>
</kw>
<msg timestamp="20190402 11:40:07.325" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:40:07.325" starttime="20190402 11:40:05.582"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:40:07.326" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:40:07.326" starttime="20190402 11:40:07.325"></status>
</kw>
<status status="FAIL" endtime="20190402 11:40:07.326" starttime="20190402 11:40:05.581"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:40:17.329" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:40:17.329" starttime="20190402 11:40:17.328"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:40:17.330" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:40:17.330" starttime="20190402 11:40:17.330"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:40:17.333" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:40:17.333" starttime="20190402 11:40:17.332"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:40:17.334" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:40:19.117" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:40:19.117" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:40:19.117" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:40:19.118" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:40:19.118" starttime="20190402 11:40:17.333"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:40:19.119" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:40:19.119" starttime="20190402 11:40:19.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:40:19.121" starttime="20190402 11:40:19.120"></status>
</kw>
<msg timestamp="20190402 11:40:19.121" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:40:19.121" starttime="20190402 11:40:17.331"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:40:19.122" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:40:19.122" starttime="20190402 11:40:19.122"></status>
</kw>
<msg timestamp="20190402 11:40:19.123" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:40:19.123" starttime="20190402 11:40:17.327"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:40:19.124" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:40:19.124" starttime="20190402 11:40:19.123"></status>
</kw>
<status status="FAIL" endtime="20190402 11:40:19.125" starttime="20190402 11:40:17.326"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:40:29.127" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:40:29.127" starttime="20190402 11:40:29.127"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:40:29.128" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:40:29.128" starttime="20190402 11:40:29.127"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:40:29.129" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:40:29.129" starttime="20190402 11:40:29.128"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:40:29.129" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:40:30.812" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:40:30.813" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:40:30.813" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:40:30.813" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:40:30.813" starttime="20190402 11:40:29.129"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:40:30.816" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:40:30.816" starttime="20190402 11:40:30.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:40:30.817" starttime="20190402 11:40:30.817"></status>
</kw>
<msg timestamp="20190402 11:40:30.818" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:40:30.818" starttime="20190402 11:40:29.128"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:40:30.819" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:40:30.819" starttime="20190402 11:40:30.818"></status>
</kw>
<msg timestamp="20190402 11:40:30.820" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:40:30.820" starttime="20190402 11:40:29.126"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:40:30.821" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:40:30.821" starttime="20190402 11:40:30.820"></status>
</kw>
<status status="FAIL" endtime="20190402 11:40:30.822" starttime="20190402 11:40:29.125"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:40:40.826" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:40:40.826" starttime="20190402 11:40:40.825"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:40:40.827" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:40:40.827" starttime="20190402 11:40:40.826"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:40:40.829" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:40:40.829" starttime="20190402 11:40:40.829"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:40:40.831" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:40:42.514" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:40:42.514" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:40:42.515" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:40:42.515" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:40:42.515" starttime="20190402 11:40:40.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:40:42.517" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:40:42.517" starttime="20190402 11:40:42.515"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:40:42.518" starttime="20190402 11:40:42.517"></status>
</kw>
<msg timestamp="20190402 11:40:42.518" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:40:42.519" starttime="20190402 11:40:40.827"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:40:42.520" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:40:42.520" starttime="20190402 11:40:42.519"></status>
</kw>
<msg timestamp="20190402 11:40:42.520" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:40:42.520" starttime="20190402 11:40:40.824"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:40:42.522" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:40:42.522" starttime="20190402 11:40:42.521"></status>
</kw>
<status status="FAIL" endtime="20190402 11:40:42.522" starttime="20190402 11:40:40.823"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:40:52.524" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:40:52.524" starttime="20190402 11:40:52.524"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:40:52.525" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:40:52.525" starttime="20190402 11:40:52.524"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:40:52.526" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:40:52.526" starttime="20190402 11:40:52.526"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:40:52.527" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:40:54.157" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:40:54.157" level="INFO">${stdout} = REBUILD</msg>
<msg timestamp="20190402 11:40:54.158" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:40:54.158" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:40:54.158" starttime="20190402 11:40:52.526"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:40:54.158" level="INFO">${res} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:40:54.158" starttime="20190402 11:40:54.158"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:40:54.159" starttime="20190402 11:40:54.158"></status>
</kw>
<msg timestamp="20190402 11:40:54.159" level="INFO">${result} = {u'stdout': u'REBUILD', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:40:54.159" starttime="20190402 11:40:52.525"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:40:54.159" level="INFO">${value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:40:54.159" starttime="20190402 11:40:54.159"></status>
</kw>
<msg timestamp="20190402 11:40:54.160" level="INFO">${current_value} = REBUILD</msg>
<status status="PASS" endtime="20190402 11:40:54.160" starttime="20190402 11:40:52.523"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:40:54.160" level="FAIL">REBUILD != ACTIVE</msg>
<status status="FAIL" endtime="20190402 11:40:54.160" starttime="20190402 11:40:54.160"></status>
</kw>
<status status="FAIL" endtime="20190402 11:40:54.160" starttime="20190402 11:40:52.523"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:41:04.163" level="INFO">${openstack_cmd} = openstack server show vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:41:04.163" starttime="20190402 11:41:04.162"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:41:04.163" level="INFO">${cmd} = openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:41:04.163" starttime="20190402 11:41:04.163"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:41:04.164" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:41:04.164" starttime="20190402 11:41:04.164"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:41:04.165" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-2|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:41:05.846" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:41:05.846" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:41:05.846" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:41:05.846" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:41:05.846" starttime="20190402 11:41:04.165"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:41:05.848" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:41:05.848" starttime="20190402 11:41:05.847"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:41:05.849" starttime="20190402 11:41:05.848"></status>
</kw>
<msg timestamp="20190402 11:41:05.849" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:41:05.849" starttime="20190402 11:41:04.164"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:41:05.850" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:41:05.850" starttime="20190402 11:41:05.850"></status>
</kw>
<msg timestamp="20190402 11:41:05.851" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:41:05.851" starttime="20190402 11:41:04.161"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:41:05.852" starttime="20190402 11:41:05.851"></status>
</kw>
<status status="PASS" endtime="20190402 11:41:05.852" starttime="20190402 11:41:04.161"></status>
</kw>
<status status="PASS" endtime="20190402 11:41:05.852" starttime="20190402 11:39:42.192"></status>
</kw>
<status status="PASS" endtime="20190402 11:41:05.853" starttime="20190402 11:39:38.203"></status>
</kw>
<doc>Rebuild Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:41:05.853" critical="yes" starttime="20190402 11:38:22.479"></status>
</test>
<test id="s1-s1-s3-t14" name="Resize Instances">
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${cirros_flavor_ram}</arg>
<arg>${cirros_flavor_vcpus}</arg>
<arg>${cirros_flavor_disk}</arg>
<arg>${cirros_flavor_name_2}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:41:05.856" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190402 11:41:05.856" starttime="20190402 11:41:05.856"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:41:05.857" level="INFO">${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small</msg>
<status status="PASS" endtime="20190402 11:41:05.858" starttime="20190402 11:41:05.857"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:41:05.859" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:41:05.859" starttime="20190402 11:41:05.859"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:41:05.860" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small'.</msg>
<msg timestamp="20190402 11:41:07.292" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:41:07.292" level="INFO">${stdout} = +----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+------------------------------...</msg>
<msg timestamp="20190402 11:41:07.293" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:41:07.293" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:41:07.293" starttime="20190402 11:41:05.860"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:41:07.295" level="INFO">${res} = {u'stdout': u'+----------------------------+--------------------------------------+\n| Field                      | Value                                |\n+----------------------------+--------------...</msg>
<status status="PASS" endtime="20190402 11:41:07.295" starttime="20190402 11:41:07.293"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:41:07.296" starttime="20190402 11:41:07.295"></status>
</kw>
<status status="PASS" endtime="20190402 11:41:07.297" starttime="20190402 11:41:05.858"></status>
</kw>
<status status="PASS" endtime="20190402 11:41:07.297" starttime="20190402 11:41:05.855"></status>
</kw>
<kw name="Resize Instance" library="OpenStack">
<doc>Resize an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_flavor_name_2}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resize --flavor ${flavor} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:41:07.301" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:41:07.301" starttime="20190402 11:41:07.301"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:41:07.302" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resize --flavor f2.small vm-cirros-1'.</msg>
<msg timestamp="20190402 11:41:10.436" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:41:10.436" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:41:10.437" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:41:10.437" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:41:10.437" starttime="20190402 11:41:07.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:41:10.437" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:41:10.437" starttime="20190402 11:41:10.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:41:10.438" starttime="20190402 11:41:10.438"></status>
</kw>
<status status="PASS" endtime="20190402 11:41:10.438" starttime="20190402 11:41:07.300"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>RESIZE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:41:10.440" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:41:10.440" starttime="20190402 11:41:10.440"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:41:10.440" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:41:10.440" starttime="20190402 11:41:10.440"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:41:10.441" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:41:10.441" starttime="20190402 11:41:10.441"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:41:10.442" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:41:12.073" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:41:12.074" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:41:12.074" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:41:12.074" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:41:12.074" starttime="20190402 11:41:10.441"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:41:12.075" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:41:12.076" starttime="20190402 11:41:12.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:41:12.077" starttime="20190402 11:41:12.076"></status>
</kw>
<msg timestamp="20190402 11:41:12.077" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:41:12.077" starttime="20190402 11:41:10.441"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:41:12.078" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:41:12.078" starttime="20190402 11:41:12.077"></status>
</kw>
<msg timestamp="20190402 11:41:12.079" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:41:12.079" starttime="20190402 11:41:10.439"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:41:12.081" starttime="20190402 11:41:12.080"></status>
</kw>
<status status="PASS" endtime="20190402 11:41:12.081" starttime="20190402 11:41:10.439"></status>
</kw>
<status status="PASS" endtime="20190402 11:41:12.082" starttime="20190402 11:41:10.438"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:41:12.086" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:41:12.086" starttime="20190402 11:41:12.085"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:41:12.087" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:41:12.087" starttime="20190402 11:41:12.086"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:41:12.089" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:41:12.089" starttime="20190402 11:41:12.088"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:41:12.090" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:41:13.671" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:41:13.672" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:41:13.672" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:41:13.672" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:41:13.672" starttime="20190402 11:41:12.089"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:41:13.674" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:41:13.674" starttime="20190402 11:41:13.673"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:41:13.675" starttime="20190402 11:41:13.674"></status>
</kw>
<msg timestamp="20190402 11:41:13.675" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:41:13.675" starttime="20190402 11:41:12.087"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:41:13.676" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:41:13.676" starttime="20190402 11:41:13.675"></status>
</kw>
<msg timestamp="20190402 11:41:13.676" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:41:13.676" starttime="20190402 11:41:12.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:41:13.677" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:41:13.677" starttime="20190402 11:41:13.677"></status>
</kw>
<status status="FAIL" endtime="20190402 11:41:13.678" starttime="20190402 11:41:12.084"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:41:23.682" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:41:23.682" starttime="20190402 11:41:23.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:41:23.683" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:41:23.683" starttime="20190402 11:41:23.682"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:41:23.685" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:41:23.685" starttime="20190402 11:41:23.684"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:41:23.686" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:41:25.369" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:41:25.370" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:41:25.370" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:41:25.370" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:41:25.370" starttime="20190402 11:41:23.685"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:41:25.372" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:41:25.372" starttime="20190402 11:41:25.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:41:25.373" starttime="20190402 11:41:25.372"></status>
</kw>
<msg timestamp="20190402 11:41:25.373" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:41:25.373" starttime="20190402 11:41:23.683"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:41:25.374" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:41:25.374" starttime="20190402 11:41:25.374"></status>
</kw>
<msg timestamp="20190402 11:41:25.375" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:41:25.375" starttime="20190402 11:41:23.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:41:25.376" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:41:25.376" starttime="20190402 11:41:25.375"></status>
</kw>
<status status="FAIL" endtime="20190402 11:41:25.377" starttime="20190402 11:41:23.678"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:41:35.380" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:41:35.381" starttime="20190402 11:41:35.380"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:41:35.382" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:41:35.382" starttime="20190402 11:41:35.381"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:41:35.384" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:41:35.384" starttime="20190402 11:41:35.383"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:41:35.385" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:41:37.569" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:41:37.570" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:41:37.570" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:41:37.570" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:41:37.570" starttime="20190402 11:41:35.384"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:41:37.572" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:41:37.573" starttime="20190402 11:41:37.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:41:37.574" starttime="20190402 11:41:37.573"></status>
</kw>
<msg timestamp="20190402 11:41:37.575" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:41:37.575" starttime="20190402 11:41:35.382"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:41:37.576" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:41:37.576" starttime="20190402 11:41:37.575"></status>
</kw>
<msg timestamp="20190402 11:41:37.576" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:41:37.576" starttime="20190402 11:41:35.379"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:41:37.578" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:41:37.578" starttime="20190402 11:41:37.577"></status>
</kw>
<status status="FAIL" endtime="20190402 11:41:37.578" starttime="20190402 11:41:35.377"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:41:47.580" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:41:47.580" starttime="20190402 11:41:47.579"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:41:47.580" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:41:47.580" starttime="20190402 11:41:47.580"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:41:47.582" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:41:47.582" starttime="20190402 11:41:47.581"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:41:47.582" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:41:49.216" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:41:49.216" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:41:49.216" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:41:49.217" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:41:49.217" starttime="20190402 11:41:47.582"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:41:49.217" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:41:49.217" starttime="20190402 11:41:49.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:41:49.218" starttime="20190402 11:41:49.217"></status>
</kw>
<msg timestamp="20190402 11:41:49.218" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:41:49.218" starttime="20190402 11:41:47.580"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:41:49.218" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:41:49.218" starttime="20190402 11:41:49.218"></status>
</kw>
<msg timestamp="20190402 11:41:49.218" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:41:49.218" starttime="20190402 11:41:47.579"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:41:49.219" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:41:49.219" starttime="20190402 11:41:49.219"></status>
</kw>
<status status="FAIL" endtime="20190402 11:41:49.219" starttime="20190402 11:41:47.578"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:41:59.220" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:41:59.221" starttime="20190402 11:41:59.220"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:41:59.221" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:41:59.221" starttime="20190402 11:41:59.221"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:41:59.222" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:41:59.222" starttime="20190402 11:41:59.221"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:41:59.222" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:42:01.206" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:42:01.206" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:42:01.206" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:42:01.206" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:42:01.206" starttime="20190402 11:41:59.222"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:42:01.207" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:01.207" starttime="20190402 11:42:01.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:42:01.207" starttime="20190402 11:42:01.207"></status>
</kw>
<msg timestamp="20190402 11:42:01.207" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:01.207" starttime="20190402 11:41:59.221"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:42:01.208" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:42:01.208" starttime="20190402 11:42:01.207"></status>
</kw>
<msg timestamp="20190402 11:42:01.208" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:42:01.208" starttime="20190402 11:41:59.220"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:42:01.208" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:42:01.208" starttime="20190402 11:42:01.208"></status>
</kw>
<status status="FAIL" endtime="20190402 11:42:01.209" starttime="20190402 11:41:59.219"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:42:11.210" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:42:11.210" starttime="20190402 11:42:11.210"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:42:11.211" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:42:11.211" starttime="20190402 11:42:11.211"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:42:11.212" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:42:11.212" starttime="20190402 11:42:11.211"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:42:11.212" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:42:13.446" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:42:13.447" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:42:13.447" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:42:13.447" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:42:13.447" starttime="20190402 11:42:11.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:42:13.448" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:13.448" starttime="20190402 11:42:13.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:42:13.448" starttime="20190402 11:42:13.448"></status>
</kw>
<msg timestamp="20190402 11:42:13.448" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:13.448" starttime="20190402 11:42:11.211"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:42:13.449" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:42:13.449" starttime="20190402 11:42:13.448"></status>
</kw>
<msg timestamp="20190402 11:42:13.449" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:42:13.449" starttime="20190402 11:42:11.210"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:42:13.449" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:42:13.449" starttime="20190402 11:42:13.449"></status>
</kw>
<status status="FAIL" endtime="20190402 11:42:13.449" starttime="20190402 11:42:11.209"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:42:23.452" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:42:23.453" starttime="20190402 11:42:23.452"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:42:23.454" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:42:23.454" starttime="20190402 11:42:23.453"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:42:23.456" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:42:23.456" starttime="20190402 11:42:23.455"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:42:23.457" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:42:25.443" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:42:25.443" level="INFO">${stdout} = VERIFY_RESIZE</msg>
<msg timestamp="20190402 11:42:25.444" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:42:25.444" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:42:25.444" starttime="20190402 11:42:23.456"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:42:25.445" level="INFO">${res} = {u'stdout': u'VERIFY_RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:25.446" starttime="20190402 11:42:25.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:42:25.447" starttime="20190402 11:42:25.446"></status>
</kw>
<msg timestamp="20190402 11:42:25.447" level="INFO">${result} = {u'stdout': u'VERIFY_RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:25.447" starttime="20190402 11:42:23.454"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:42:25.448" level="INFO">${value} = VERIFY_RESIZE</msg>
<status status="PASS" endtime="20190402 11:42:25.448" starttime="20190402 11:42:25.447"></status>
</kw>
<msg timestamp="20190402 11:42:25.448" level="INFO">${current_value} = VERIFY_RESIZE</msg>
<status status="PASS" endtime="20190402 11:42:25.449" starttime="20190402 11:42:23.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:42:25.449" starttime="20190402 11:42:25.449"></status>
</kw>
<status status="PASS" endtime="20190402 11:42:25.450" starttime="20190402 11:42:23.450"></status>
</kw>
<status status="PASS" endtime="20190402 11:42:25.450" starttime="20190402 11:41:12.082"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resize --confirm ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:42:25.452" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:42:25.452" starttime="20190402 11:42:25.451"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:42:25.454" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resize --confirm vm-cirros-1'.</msg>
<msg timestamp="20190402 11:42:27.150" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:42:27.150" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:42:27.150" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:42:27.151" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:42:27.151" starttime="20190402 11:42:25.453"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:42:27.151" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:27.151" starttime="20190402 11:42:27.151"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:42:27.152" starttime="20190402 11:42:27.151"></status>
</kw>
<status status="PASS" endtime="20190402 11:42:27.152" starttime="20190402 11:42:25.450"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:42:27.153" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:42:27.153" starttime="20190402 11:42:27.153"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:42:27.154" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:42:27.154" starttime="20190402 11:42:27.153"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:42:27.155" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:42:27.155" starttime="20190402 11:42:27.154"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:42:27.155" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:42:29.167" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:42:29.168" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:42:29.168" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:42:29.168" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:42:29.168" starttime="20190402 11:42:27.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:42:29.169" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:29.169" starttime="20190402 11:42:29.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:42:29.170" starttime="20190402 11:42:29.170"></status>
</kw>
<msg timestamp="20190402 11:42:29.170" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:29.171" starttime="20190402 11:42:27.154"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:42:29.171" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:42:29.171" starttime="20190402 11:42:29.171"></status>
</kw>
<msg timestamp="20190402 11:42:29.172" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:42:29.172" starttime="20190402 11:42:27.153"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:42:29.173" starttime="20190402 11:42:29.172"></status>
</kw>
<status status="PASS" endtime="20190402 11:42:29.173" starttime="20190402 11:42:27.152"></status>
</kw>
<status status="PASS" endtime="20190402 11:42:29.173" starttime="20190402 11:42:27.152"></status>
</kw>
<status status="PASS" endtime="20190402 11:42:29.173" starttime="20190402 11:41:07.298"></status>
</kw>
<kw name="Resize Instance" library="OpenStack">
<doc>Resize an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resize --flavor ${flavor} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:42:29.176" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:42:29.176" starttime="20190402 11:42:29.176"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:42:29.178" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resize --flavor f1.small vm-cirros-1'.</msg>
<msg timestamp="20190402 11:42:32.262" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:42:32.262" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:42:32.262" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:42:32.262" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:42:32.262" starttime="20190402 11:42:29.177"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:42:32.263" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:32.263" starttime="20190402 11:42:32.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:42:32.264" starttime="20190402 11:42:32.263"></status>
</kw>
<status status="PASS" endtime="20190402 11:42:32.264" starttime="20190402 11:42:29.175"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>RESIZE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:42:32.266" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:42:32.267" starttime="20190402 11:42:32.266"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:42:32.267" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:42:32.267" starttime="20190402 11:42:32.267"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:42:32.269" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:42:32.269" starttime="20190402 11:42:32.268"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:42:32.269" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:42:33.952" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:42:33.952" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:42:33.952" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:42:33.953" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:42:33.953" starttime="20190402 11:42:32.269"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:42:33.954" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:33.954" starttime="20190402 11:42:33.953"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:42:33.955" starttime="20190402 11:42:33.954"></status>
</kw>
<msg timestamp="20190402 11:42:33.955" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:33.956" starttime="20190402 11:42:32.268"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:42:33.956" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:42:33.957" starttime="20190402 11:42:33.956"></status>
</kw>
<msg timestamp="20190402 11:42:33.957" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:42:33.957" starttime="20190402 11:42:32.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:42:33.958" starttime="20190402 11:42:33.957"></status>
</kw>
<status status="PASS" endtime="20190402 11:42:33.958" starttime="20190402 11:42:32.265"></status>
</kw>
<status status="PASS" endtime="20190402 11:42:33.958" starttime="20190402 11:42:32.264"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:42:33.963" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:42:33.963" starttime="20190402 11:42:33.962"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:42:33.964" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:42:33.964" starttime="20190402 11:42:33.963"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:42:33.965" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:42:33.965" starttime="20190402 11:42:33.965"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:42:33.967" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:42:35.650" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:42:35.650" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:42:35.650" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:42:35.650" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:42:35.650" starttime="20190402 11:42:33.966"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:42:35.652" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:35.652" starttime="20190402 11:42:35.651"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:42:35.653" starttime="20190402 11:42:35.652"></status>
</kw>
<msg timestamp="20190402 11:42:35.653" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:35.653" starttime="20190402 11:42:33.964"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:42:35.654" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:42:35.654" starttime="20190402 11:42:35.654"></status>
</kw>
<msg timestamp="20190402 11:42:35.655" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:42:35.655" starttime="20190402 11:42:33.960"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:42:35.656" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:42:35.656" starttime="20190402 11:42:35.655"></status>
</kw>
<status status="FAIL" endtime="20190402 11:42:35.657" starttime="20190402 11:42:33.960"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:42:45.658" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:42:45.658" starttime="20190402 11:42:45.658"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:42:45.659" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:42:45.659" starttime="20190402 11:42:45.658"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:42:45.660" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:42:45.660" starttime="20190402 11:42:45.659"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:42:45.660" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:42:47.491" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:42:47.492" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:42:47.492" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:42:47.492" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:42:47.492" starttime="20190402 11:42:45.660"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:42:47.492" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:47.492" starttime="20190402 11:42:47.492"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:42:47.493" starttime="20190402 11:42:47.493"></status>
</kw>
<msg timestamp="20190402 11:42:47.493" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:47.493" starttime="20190402 11:42:45.659"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:42:47.493" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:42:47.493" starttime="20190402 11:42:47.493"></status>
</kw>
<msg timestamp="20190402 11:42:47.494" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:42:47.494" starttime="20190402 11:42:45.658"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:42:47.494" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:42:47.494" starttime="20190402 11:42:47.494"></status>
</kw>
<status status="FAIL" endtime="20190402 11:42:47.494" starttime="20190402 11:42:45.657"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:42:57.498" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:42:57.498" starttime="20190402 11:42:57.497"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:42:57.499" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:42:57.499" starttime="20190402 11:42:57.498"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:42:57.502" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:42:57.502" starttime="20190402 11:42:57.501"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:42:57.503" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:42:59.136" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:42:59.136" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:42:59.136" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:42:59.136" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:42:59.136" starttime="20190402 11:42:57.502"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:42:59.137" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:59.137" starttime="20190402 11:42:59.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:42:59.137" starttime="20190402 11:42:59.137"></status>
</kw>
<msg timestamp="20190402 11:42:59.138" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:42:59.138" starttime="20190402 11:42:57.500"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:42:59.138" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:42:59.138" starttime="20190402 11:42:59.138"></status>
</kw>
<msg timestamp="20190402 11:42:59.138" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:42:59.138" starttime="20190402 11:42:57.496"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:42:59.139" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:42:59.139" starttime="20190402 11:42:59.138"></status>
</kw>
<status status="FAIL" endtime="20190402 11:42:59.139" starttime="20190402 11:42:57.495"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:43:09.142" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:43:09.142" starttime="20190402 11:43:09.141"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:43:09.143" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:43:09.143" starttime="20190402 11:43:09.143"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:43:09.145" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:43:09.145" starttime="20190402 11:43:09.145"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:43:09.146" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:43:10.828" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:43:10.828" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:43:10.829" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:43:10.829" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:43:10.829" starttime="20190402 11:43:09.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:43:10.830" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:10.830" starttime="20190402 11:43:10.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:43:10.830" starttime="20190402 11:43:10.830"></status>
</kw>
<msg timestamp="20190402 11:43:10.831" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:10.831" starttime="20190402 11:43:09.144"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:43:10.831" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:43:10.831" starttime="20190402 11:43:10.831"></status>
</kw>
<msg timestamp="20190402 11:43:10.832" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:43:10.832" starttime="20190402 11:43:09.140"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:43:10.832" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:43:10.833" starttime="20190402 11:43:10.832"></status>
</kw>
<status status="FAIL" endtime="20190402 11:43:10.833" starttime="20190402 11:43:09.139"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:43:20.836" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:43:20.836" starttime="20190402 11:43:20.836"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:43:20.837" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:43:20.837" starttime="20190402 11:43:20.837"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:43:20.839" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:43:20.840" starttime="20190402 11:43:20.839"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:43:20.842" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:43:22.879" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:43:22.879" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:43:22.879" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:43:22.879" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:43:22.879" starttime="20190402 11:43:20.840"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:43:22.881" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:22.881" starttime="20190402 11:43:22.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:43:22.882" starttime="20190402 11:43:22.881"></status>
</kw>
<msg timestamp="20190402 11:43:22.882" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:22.882" starttime="20190402 11:43:20.838"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:43:22.883" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:43:22.883" starttime="20190402 11:43:22.883"></status>
</kw>
<msg timestamp="20190402 11:43:22.884" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:43:22.884" starttime="20190402 11:43:20.835"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:43:22.885" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:43:22.885" starttime="20190402 11:43:22.884"></status>
</kw>
<status status="FAIL" endtime="20190402 11:43:22.886" starttime="20190402 11:43:20.833"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:43:32.889" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:43:32.889" starttime="20190402 11:43:32.888"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:43:32.890" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:43:32.890" starttime="20190402 11:43:32.889"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:43:32.892" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:43:32.892" starttime="20190402 11:43:32.891"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:43:32.893" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:43:34.577" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:43:34.578" level="INFO">${stdout} = RESIZE</msg>
<msg timestamp="20190402 11:43:34.578" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:43:34.578" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:43:34.578" starttime="20190402 11:43:32.892"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:43:34.580" level="INFO">${res} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:34.580" starttime="20190402 11:43:34.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:43:34.581" starttime="20190402 11:43:34.580"></status>
</kw>
<msg timestamp="20190402 11:43:34.581" level="INFO">${result} = {u'stdout': u'RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:34.581" starttime="20190402 11:43:32.890"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:43:34.582" level="INFO">${value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:43:34.582" starttime="20190402 11:43:34.582"></status>
</kw>
<msg timestamp="20190402 11:43:34.583" level="INFO">${current_value} = RESIZE</msg>
<status status="PASS" endtime="20190402 11:43:34.583" starttime="20190402 11:43:32.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:43:34.584" level="FAIL">RESIZE != VERIFY_RESIZE</msg>
<status status="FAIL" endtime="20190402 11:43:34.584" starttime="20190402 11:43:34.583"></status>
</kw>
<status status="FAIL" endtime="20190402 11:43:34.584" starttime="20190402 11:43:32.886"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>VERIFY_RESIZE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:43:44.586" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:43:44.586" starttime="20190402 11:43:44.586"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:43:44.587" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:43:44.587" starttime="20190402 11:43:44.586"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:43:44.587" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:43:44.587" starttime="20190402 11:43:44.587"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:43:44.588" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:43:46.370" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:43:46.370" level="INFO">${stdout} = VERIFY_RESIZE</msg>
<msg timestamp="20190402 11:43:46.370" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:43:46.370" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:43:46.371" starttime="20190402 11:43:44.588"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:43:46.373" level="INFO">${res} = {u'stdout': u'VERIFY_RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:46.373" starttime="20190402 11:43:46.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:43:46.374" starttime="20190402 11:43:46.373"></status>
</kw>
<msg timestamp="20190402 11:43:46.374" level="INFO">${result} = {u'stdout': u'VERIFY_RESIZE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:46.374" starttime="20190402 11:43:44.587"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:43:46.376" level="INFO">${value} = VERIFY_RESIZE</msg>
<status status="PASS" endtime="20190402 11:43:46.376" starttime="20190402 11:43:46.375"></status>
</kw>
<msg timestamp="20190402 11:43:46.377" level="INFO">${current_value} = VERIFY_RESIZE</msg>
<status status="PASS" endtime="20190402 11:43:46.377" starttime="20190402 11:43:44.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:43:46.378" starttime="20190402 11:43:46.377"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:46.378" starttime="20190402 11:43:44.585"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:46.378" starttime="20190402 11:42:33.959"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server resize --confirm ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:43:46.380" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:43:46.380" starttime="20190402 11:43:46.379"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:43:46.381" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server resize --confirm vm-cirros-1'.</msg>
<msg timestamp="20190402 11:43:48.264" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:43:48.265" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:43:48.265" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:43:48.265" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:43:48.265" starttime="20190402 11:43:46.380"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:43:48.267" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:48.267" starttime="20190402 11:43:48.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:43:48.268" starttime="20190402 11:43:48.267"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:48.268" starttime="20190402 11:43:46.379"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm_name}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:43:48.272" level="INFO">${openstack_cmd} = openstack server show vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:43:48.272" starttime="20190402 11:43:48.271"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:43:48.273" level="INFO">${cmd} = openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:43:48.273" starttime="20190402 11:43:48.272"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:43:48.275" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:43:48.275" starttime="20190402 11:43:48.275"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:43:48.276" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show vm-cirros-1|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:43:49.910" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:43:49.910" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:43:49.910" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:43:49.910" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:43:49.910" starttime="20190402 11:43:48.276"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:43:49.912" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:49.912" starttime="20190402 11:43:49.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:43:49.913" starttime="20190402 11:43:49.913"></status>
</kw>
<msg timestamp="20190402 11:43:49.914" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:49.914" starttime="20190402 11:43:48.273"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:43:49.915" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:43:49.915" starttime="20190402 11:43:49.914"></status>
</kw>
<msg timestamp="20190402 11:43:49.916" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:43:49.916" starttime="20190402 11:43:48.270"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:43:49.917" starttime="20190402 11:43:49.916"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:49.917" starttime="20190402 11:43:48.269"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:49.917" starttime="20190402 11:43:48.268"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:49.917" starttime="20190402 11:42:29.174"></status>
</kw>
<doc>Resize Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:43:49.918" critical="yes" starttime="20190402 11:41:05.854"></status>
</test>
<test id="s1-s1-s3-t15" name="Set Unset Properties Instances">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${instance_property_1}='true'</arg>
<arg>${instance_property_2}='500'</arg>
<arg>${instance_property_3}='180'</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190402 11:43:49.920" level="INFO">${properties} = --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180'</msg>
<status status="PASS" endtime="20190402 11:43:49.920" starttime="20190402 11:43:49.919"></status>
</kw>
<kw name="Set Instance Property" library="OpenStack">
<doc>Set properties of an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:43:49.923" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:43:49.923" starttime="20190402 11:43:49.922"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:43:49.924" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-cirros-1'.</msg>
<msg timestamp="20190402 11:43:51.620" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:43:51.621" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:43:51.621" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:43:51.621" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:43:51.622" starttime="20190402 11:43:49.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:43:51.624" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:51.624" starttime="20190402 11:43:51.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:43:51.625" starttime="20190402 11:43:51.625"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:51.626" starttime="20190402 11:43:49.922"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:51.626" starttime="20190402 11:43:49.921"></status>
</kw>
<kw name="Set Instance Property" library="OpenStack">
<doc>Set properties of an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:43:51.629" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:43:51.629" starttime="20190402 11:43:51.628"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:43:51.630" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-cirros-2'.</msg>
<msg timestamp="20190402 11:43:53.393" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:43:53.394" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:43:53.394" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:43:53.394" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:43:53.394" starttime="20190402 11:43:51.629"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:43:53.396" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:53.396" starttime="20190402 11:43:53.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:43:53.397" starttime="20190402 11:43:53.396"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:53.397" starttime="20190402 11:43:51.627"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:53.397" starttime="20190402 11:43:51.626"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${instance_property_1}</arg>
<arg>${instance_property_2}</arg>
<arg>${instance_property_3}</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190402 11:43:53.399" level="INFO">${properties} = --property sw:wrs:auto_recovery --property hw:wrs:live_migration_max_downtime --property hw:wrs:live_migration_timeout</msg>
<status status="PASS" endtime="20190402 11:43:53.399" starttime="20190402 11:43:53.398"></status>
</kw>
<kw name="Unset Instance Property" library="OpenStack">
<doc>Unset properties of an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unset ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:43:53.401" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:43:53.401" starttime="20190402 11:43:53.401"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:43:53.403" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unset --property sw:wrs:auto_recovery --property hw:wrs:live_migration_max_downtime --property hw:wrs:live_migration_timeout vm-cirros-1'.</msg>
<msg timestamp="20190402 11:43:55.335" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:43:55.336" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:43:55.336" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:43:55.336" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:43:55.336" starttime="20190402 11:43:53.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:43:55.338" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:55.338" starttime="20190402 11:43:55.336"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:43:55.340" starttime="20190402 11:43:55.339"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:55.340" starttime="20190402 11:43:53.400"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:55.341" starttime="20190402 11:43:53.399"></status>
</kw>
<kw name="Unset Instance Property" library="OpenStack">
<doc>Unset properties of an instance.</doc>
<arguments>
<arg>${cirros_instance_name_2}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server unset ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:43:55.343" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:43:55.343" starttime="20190402 11:43:55.343"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:43:55.345" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server unset --property sw:wrs:auto_recovery --property hw:wrs:live_migration_max_downtime --property hw:wrs:live_migration_timeout vm-cirros-2'.</msg>
<msg timestamp="20190402 11:43:57.492" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:43:57.492" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:43:57.492" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:43:57.492" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:43:57.492" starttime="20190402 11:43:55.344"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:43:57.493" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:57.493" starttime="20190402 11:43:57.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:43:57.493" starttime="20190402 11:43:57.493"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:57.494" starttime="20190402 11:43:55.342"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:57.494" starttime="20190402 11:43:55.341"></status>
</kw>
<doc>Set Unset properties of Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:43:57.494" critical="yes" starttime="20190402 11:43:49.918"></status>
</test>
<test id="s1-s1-s3-t16" name="Evacuate Instances From Hosts">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CONFIGURATION_TYPE}' == 'Duplex'</arg>
<arg>Run Keywords</arg>
<arg>Evacuate Instances</arg>
<arg>controller-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>controller-1</arg>
<arg>ELSE IF</arg>
<arg>'${CONFIGURATION_TYPE}' == 'MN-Local' or '${CONFIGURATION_TYPE}' == 'MN-External'</arg>
<arg>Run Keywords</arg>
<arg>Evacuate Instances</arg>
<arg>compute-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>compute-1</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Evacuate Instances</arg>
<arg>controller-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>controller-1</arg>
</arguments>
<kw name="Evacuate Instances" library="OpenStack">
<doc>Evacuate all VMs from computes or from controllers.</doc>
<arguments>
<arg>controller-0</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:43:57.496" level="INFO">${openstack_cmd} = openstack compute service set</msg>
<status status="PASS" endtime="20190402 11:43:57.496" starttime="20190402 11:43:57.496"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--disable</arg>
<arg>--disable-reason test-evacuate</arg>
<arg>${host}</arg>
<arg>nova-compute</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:43:57.496" level="INFO">${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute</msg>
<status status="PASS" endtime="20190402 11:43:57.496" starttime="20190402 11:43:57.496"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:43:57.497" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:43:57.497" starttime="20190402 11:43:57.497"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:43:57.497" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute'.</msg>
<msg timestamp="20190402 11:43:58.994" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:43:58.994" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:43:58.994" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:43:58.995" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:43:58.995" starttime="20190402 11:43:57.497"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:43:58.997" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:43:58.998" starttime="20190402 11:43:58.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:43:58.999" starttime="20190402 11:43:58.998"></status>
</kw>
<status status="PASS" endtime="20190402 11:43:58.999" starttime="20190402 11:43:57.497"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Compute Service Property</arg>
<arg>${host}</arg>
<arg>disabled</arg>
</arguments>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>disabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:43:59.002" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:43:59.002" starttime="20190402 11:43:59.001"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:43:59.003" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:43:59.003" starttime="20190402 11:43:59.002"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:43:59.005" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:43:59.005" starttime="20190402 11:43:59.004"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:43:59.006" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:44:00.337" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:44:00.338" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:44:00.338" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:44:00.339" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:44:00.339" starttime="20190402 11:43:59.005"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:44:00.341" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:44:00.341" starttime="20190402 11:44:00.339"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:44:00.342" starttime="20190402 11:44:00.341"></status>
</kw>
<msg timestamp="20190402 11:44:00.343" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:44:00.343" starttime="20190402 11:43:59.003"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:44:00.344" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:44:00.344" starttime="20190402 11:44:00.343"></status>
</kw>
<msg timestamp="20190402 11:44:00.345" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:44:00.345" starttime="20190402 11:43:59.001"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:44:00.346" starttime="20190402 11:44:00.345"></status>
</kw>
<status status="PASS" endtime="20190402 11:44:00.346" starttime="20190402 11:43:59.000"></status>
</kw>
<status status="PASS" endtime="20190402 11:44:00.346" starttime="20190402 11:43:58.999"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Compute Service Property</arg>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:44:00.350" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:44:00.350" starttime="20190402 11:44:00.349"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:44:00.351" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:44:00.351" starttime="20190402 11:44:00.350"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:44:00.354" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:44:00.354" starttime="20190402 11:44:00.353"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:44:00.356" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:44:01.795" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:44:01.795" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:44:01.795" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:44:01.795" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:44:01.795" starttime="20190402 11:44:00.355"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:44:01.796" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:44:01.796" starttime="20190402 11:44:01.795"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:44:01.796" starttime="20190402 11:44:01.796"></status>
</kw>
<msg timestamp="20190402 11:44:01.796" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:44:01.796" starttime="20190402 11:44:00.351"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:44:01.797" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:44:01.797" starttime="20190402 11:44:01.796"></status>
</kw>
<msg timestamp="20190402 11:44:01.797" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:44:01.797" starttime="20190402 11:44:00.348"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:44:01.797" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:44:01.797" starttime="20190402 11:44:01.797"></status>
</kw>
<status status="FAIL" endtime="20190402 11:44:01.798" starttime="20190402 11:44:00.348"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:44:11.801" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:44:11.801" starttime="20190402 11:44:11.800"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:44:11.802" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:44:11.802" starttime="20190402 11:44:11.801"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:44:11.804" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:44:11.804" starttime="20190402 11:44:11.804"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:44:11.806" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:44:13.138" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:44:13.138" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:44:13.138" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:44:13.138" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:44:13.139" starttime="20190402 11:44:11.805"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:44:13.141" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:44:13.141" starttime="20190402 11:44:13.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:44:13.142" starttime="20190402 11:44:13.141"></status>
</kw>
<msg timestamp="20190402 11:44:13.142" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:44:13.142" starttime="20190402 11:44:11.802"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:44:13.143" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:44:13.144" starttime="20190402 11:44:13.143"></status>
</kw>
<msg timestamp="20190402 11:44:13.144" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:44:13.144" starttime="20190402 11:44:11.799"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:44:13.145" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:44:13.146" starttime="20190402 11:44:13.145"></status>
</kw>
<status status="FAIL" endtime="20190402 11:44:13.146" starttime="20190402 11:44:11.798"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:44:23.149" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:44:23.149" starttime="20190402 11:44:23.148"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:44:23.150" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:44:23.150" starttime="20190402 11:44:23.149"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:44:23.152" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:44:23.152" starttime="20190402 11:44:23.151"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:44:23.153" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:44:24.484" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:44:24.484" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:44:24.484" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:44:24.484" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:44:24.485" starttime="20190402 11:44:23.152"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:44:24.485" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:44:24.485" starttime="20190402 11:44:24.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:44:24.486" starttime="20190402 11:44:24.485"></status>
</kw>
<msg timestamp="20190402 11:44:24.486" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:44:24.486" starttime="20190402 11:44:23.150"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:44:24.486" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:44:24.486" starttime="20190402 11:44:24.486"></status>
</kw>
<msg timestamp="20190402 11:44:24.486" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:44:24.486" starttime="20190402 11:44:23.148"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:44:24.487" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:44:24.487" starttime="20190402 11:44:24.486"></status>
</kw>
<status status="FAIL" endtime="20190402 11:44:24.487" starttime="20190402 11:44:23.147"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:44:34.488" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:44:34.488" starttime="20190402 11:44:34.488"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:44:34.489" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:44:34.489" starttime="20190402 11:44:34.488"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:44:34.489" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:44:34.490" starttime="20190402 11:44:34.489"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:44:34.490" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:44:35.820" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:44:35.821" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:44:35.821" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:44:35.821" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:44:35.821" starttime="20190402 11:44:34.490"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:44:35.824" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:44:35.824" starttime="20190402 11:44:35.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:44:35.826" starttime="20190402 11:44:35.825"></status>
</kw>
<msg timestamp="20190402 11:44:35.827" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:44:35.827" starttime="20190402 11:44:34.489"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:44:35.828" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:44:35.828" starttime="20190402 11:44:35.827"></status>
</kw>
<msg timestamp="20190402 11:44:35.829" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:44:35.829" starttime="20190402 11:44:34.488"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:44:35.830" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:44:35.830" starttime="20190402 11:44:35.829"></status>
</kw>
<status status="FAIL" endtime="20190402 11:44:35.831" starttime="20190402 11:44:34.487"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:44:45.832" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:44:45.832" starttime="20190402 11:44:45.832"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:44:45.833" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:44:45.833" starttime="20190402 11:44:45.833"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:44:45.834" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:44:45.834" starttime="20190402 11:44:45.833"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:44:45.834" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:44:47.366" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:44:47.366" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:44:47.366" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:44:47.366" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:44:47.367" starttime="20190402 11:44:45.834"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:44:47.368" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:44:47.368" starttime="20190402 11:44:47.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:44:47.369" starttime="20190402 11:44:47.369"></status>
</kw>
<msg timestamp="20190402 11:44:47.370" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:44:47.370" starttime="20190402 11:44:45.833"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:44:47.371" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:44:47.371" starttime="20190402 11:44:47.370"></status>
</kw>
<msg timestamp="20190402 11:44:47.371" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:44:47.371" starttime="20190402 11:44:45.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:44:47.373" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:44:47.374" starttime="20190402 11:44:47.372"></status>
</kw>
<status status="FAIL" endtime="20190402 11:44:47.374" starttime="20190402 11:44:45.831"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:44:57.377" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:44:57.377" starttime="20190402 11:44:57.377"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:44:57.378" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:44:57.378" starttime="20190402 11:44:57.378"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:44:57.380" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:44:57.380" starttime="20190402 11:44:57.380"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:44:57.382" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:44:58.713" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:44:58.714" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:44:58.714" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:44:58.714" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:44:58.714" starttime="20190402 11:44:57.381"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:44:58.715" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:44:58.715" starttime="20190402 11:44:58.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:44:58.715" starttime="20190402 11:44:58.715"></status>
</kw>
<msg timestamp="20190402 11:44:58.716" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:44:58.716" starttime="20190402 11:44:57.379"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:44:58.716" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:44:58.716" starttime="20190402 11:44:58.716"></status>
</kw>
<msg timestamp="20190402 11:44:58.716" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:44:58.716" starttime="20190402 11:44:57.376"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:44:58.717" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:44:58.717" starttime="20190402 11:44:58.717"></status>
</kw>
<status status="FAIL" endtime="20190402 11:44:58.717" starttime="20190402 11:44:57.375"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:45:08.720" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:45:08.720" starttime="20190402 11:45:08.720"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:45:08.721" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:45:08.721" starttime="20190402 11:45:08.720"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:45:08.723" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:45:08.723" starttime="20190402 11:45:08.723"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:45:08.724" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:45:10.207" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:45:10.207" level="INFO">${stdout} = enabled</msg>
<msg timestamp="20190402 11:45:10.207" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:45:10.207" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:45:10.207" starttime="20190402 11:45:08.724"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:45:10.208" level="INFO">${res} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:45:10.208" starttime="20190402 11:45:10.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:45:10.208" starttime="20190402 11:45:10.208"></status>
</kw>
<msg timestamp="20190402 11:45:10.209" level="INFO">${result} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:45:10.209" starttime="20190402 11:45:08.722"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:45:10.209" level="INFO">${value} = enabled</msg>
<status status="PASS" endtime="20190402 11:45:10.209" starttime="20190402 11:45:10.209"></status>
</kw>
<msg timestamp="20190402 11:45:10.209" level="INFO">${current_value} = enabled</msg>
<status status="PASS" endtime="20190402 11:45:10.209" starttime="20190402 11:45:08.719"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:45:10.210" starttime="20190402 11:45:10.209"></status>
</kw>
<status status="PASS" endtime="20190402 11:45:10.210" starttime="20190402 11:45:08.718"></status>
</kw>
<status status="PASS" endtime="20190402 11:45:10.210" starttime="20190402 11:44:00.347"></status>
</kw>
<status status="PASS" endtime="20190402 11:45:10.210" starttime="20190402 11:43:57.495"></status>
</kw>
<kw name="Evacuate Instances" library="OpenStack">
<doc>Evacuate all VMs from computes or from controllers.</doc>
<arguments>
<arg>controller-1</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:45:10.210" level="INFO">${openstack_cmd} = openstack compute service set</msg>
<status status="PASS" endtime="20190402 11:45:10.210" starttime="20190402 11:45:10.210"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--disable</arg>
<arg>--disable-reason test-evacuate</arg>
<arg>${host}</arg>
<arg>nova-compute</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:45:10.211" level="INFO">${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-1 nova-compute</msg>
<status status="PASS" endtime="20190402 11:45:10.211" starttime="20190402 11:45:10.211"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:45:10.212" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:45:10.212" starttime="20190402 11:45:10.211"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:45:10.212" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service set --disable --disable-reason test-evacuate controller-1 nova-compute'.</msg>
<msg timestamp="20190402 11:45:11.694" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:45:11.694" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:45:11.695" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:45:11.695" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:45:11.695" starttime="20190402 11:45:10.212"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:45:11.695" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:45:11.695" starttime="20190402 11:45:11.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:45:11.696" starttime="20190402 11:45:11.695"></status>
</kw>
<status status="PASS" endtime="20190402 11:45:11.696" starttime="20190402 11:45:10.211"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Compute Service Property</arg>
<arg>${host}</arg>
<arg>disabled</arg>
</arguments>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>disabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:45:11.697" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:45:11.697" starttime="20190402 11:45:11.697"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:45:11.697" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:45:11.697" starttime="20190402 11:45:11.697"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:45:11.698" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:45:11.698" starttime="20190402 11:45:11.698"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:45:11.698" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:45:13.111" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:45:13.111" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:45:13.112" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:45:13.112" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:45:13.112" starttime="20190402 11:45:11.698"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:45:13.114" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:45:13.114" starttime="20190402 11:45:13.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:45:13.115" starttime="20190402 11:45:13.114"></status>
</kw>
<msg timestamp="20190402 11:45:13.115" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:45:13.115" starttime="20190402 11:45:11.697"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:45:13.116" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:45:13.116" starttime="20190402 11:45:13.116"></status>
</kw>
<msg timestamp="20190402 11:45:13.117" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:45:13.117" starttime="20190402 11:45:11.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:45:13.118" starttime="20190402 11:45:13.117"></status>
</kw>
<status status="PASS" endtime="20190402 11:45:13.118" starttime="20190402 11:45:11.696"></status>
</kw>
<status status="PASS" endtime="20190402 11:45:13.119" starttime="20190402 11:45:11.696"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Compute Service Property</arg>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:45:13.122" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:45:13.122" starttime="20190402 11:45:13.121"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:45:13.123" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:45:13.123" starttime="20190402 11:45:13.122"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:45:13.124" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:45:13.125" starttime="20190402 11:45:13.124"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:45:13.126" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:45:14.458" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:45:14.458" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:45:14.458" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:45:14.458" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:45:14.458" starttime="20190402 11:45:13.125"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:45:14.459" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:45:14.460" starttime="20190402 11:45:14.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:45:14.461" starttime="20190402 11:45:14.460"></status>
</kw>
<msg timestamp="20190402 11:45:14.461" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:45:14.461" starttime="20190402 11:45:13.123"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:45:14.462" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:45:14.462" starttime="20190402 11:45:14.461"></status>
</kw>
<msg timestamp="20190402 11:45:14.462" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:45:14.462" starttime="20190402 11:45:13.120"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:45:14.463" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:45:14.463" starttime="20190402 11:45:14.463"></status>
</kw>
<status status="FAIL" endtime="20190402 11:45:14.464" starttime="20190402 11:45:13.120"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:45:24.467" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:45:24.467" starttime="20190402 11:45:24.466"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:45:24.468" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:45:24.468" starttime="20190402 11:45:24.467"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:45:24.470" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:45:24.470" starttime="20190402 11:45:24.469"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:45:24.471" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:45:25.802" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:45:25.802" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:45:25.802" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:45:25.802" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:45:25.803" starttime="20190402 11:45:24.470"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:45:25.803" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:45:25.803" starttime="20190402 11:45:25.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:45:25.804" starttime="20190402 11:45:25.803"></status>
</kw>
<msg timestamp="20190402 11:45:25.804" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:45:25.804" starttime="20190402 11:45:24.468"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:45:25.804" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:45:25.804" starttime="20190402 11:45:25.804"></status>
</kw>
<msg timestamp="20190402 11:45:25.804" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:45:25.804" starttime="20190402 11:45:24.465"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:45:25.805" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:45:25.805" starttime="20190402 11:45:25.805"></status>
</kw>
<status status="FAIL" endtime="20190402 11:45:25.805" starttime="20190402 11:45:24.464"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:45:35.807" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:45:35.807" starttime="20190402 11:45:35.806"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:45:35.807" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:45:35.807" starttime="20190402 11:45:35.807"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:45:35.808" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:45:35.808" starttime="20190402 11:45:35.808"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:45:35.809" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:45:37.393" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:45:37.393" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:45:37.393" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:45:37.393" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:45:37.394" starttime="20190402 11:45:35.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:45:37.395" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:45:37.395" starttime="20190402 11:45:37.394"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:45:37.396" starttime="20190402 11:45:37.396"></status>
</kw>
<msg timestamp="20190402 11:45:37.397" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:45:37.397" starttime="20190402 11:45:35.808"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:45:37.398" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:45:37.398" starttime="20190402 11:45:37.398"></status>
</kw>
<msg timestamp="20190402 11:45:37.399" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:45:37.399" starttime="20190402 11:45:35.806"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:45:37.400" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:45:37.400" starttime="20190402 11:45:37.399"></status>
</kw>
<status status="FAIL" endtime="20190402 11:45:37.401" starttime="20190402 11:45:35.805"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:45:47.404" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:45:47.405" starttime="20190402 11:45:47.404"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:45:47.406" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:45:47.406" starttime="20190402 11:45:47.405"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:45:47.407" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:45:47.407" starttime="20190402 11:45:47.407"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:45:47.408" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:45:49.141" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:45:49.142" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:45:49.142" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:45:49.142" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:45:49.142" starttime="20190402 11:45:47.408"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:45:49.144" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:45:49.144" starttime="20190402 11:45:49.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:45:49.145" starttime="20190402 11:45:49.144"></status>
</kw>
<msg timestamp="20190402 11:45:49.145" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:45:49.145" starttime="20190402 11:45:47.406"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:45:49.146" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:45:49.146" starttime="20190402 11:45:49.146"></status>
</kw>
<msg timestamp="20190402 11:45:49.147" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:45:49.147" starttime="20190402 11:45:47.402"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:45:49.148" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:45:49.148" starttime="20190402 11:45:49.147"></status>
</kw>
<status status="FAIL" endtime="20190402 11:45:49.148" starttime="20190402 11:45:47.401"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:45:59.152" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:45:59.152" starttime="20190402 11:45:59.151"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:45:59.153" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:45:59.153" starttime="20190402 11:45:59.152"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:45:59.155" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:45:59.156" starttime="20190402 11:45:59.155"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:45:59.157" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:46:00.489" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:46:00.489" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:46:00.489" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:46:00.489" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:46:00.489" starttime="20190402 11:45:59.156"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:46:00.491" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:46:00.491" starttime="20190402 11:46:00.490"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:46:00.492" starttime="20190402 11:46:00.491"></status>
</kw>
<msg timestamp="20190402 11:46:00.492" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:46:00.492" starttime="20190402 11:45:59.153"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:46:00.493" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:46:00.493" starttime="20190402 11:46:00.493"></status>
</kw>
<msg timestamp="20190402 11:46:00.494" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:46:00.494" starttime="20190402 11:45:59.150"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:46:00.495" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:46:00.495" starttime="20190402 11:46:00.494"></status>
</kw>
<status status="FAIL" endtime="20190402 11:46:00.495" starttime="20190402 11:45:59.149"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:46:10.498" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:46:10.498" starttime="20190402 11:46:10.498"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:46:10.499" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:46:10.499" starttime="20190402 11:46:10.499"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:46:10.502" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:46:10.502" starttime="20190402 11:46:10.501"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:46:10.503" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:46:12.136" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:46:12.136" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:46:12.136" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:46:12.137" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:46:12.137" starttime="20190402 11:46:10.503"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:46:12.138" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:46:12.139" starttime="20190402 11:46:12.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:46:12.140" starttime="20190402 11:46:12.139"></status>
</kw>
<msg timestamp="20190402 11:46:12.140" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:46:12.140" starttime="20190402 11:46:10.500"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:46:12.141" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:46:12.141" starttime="20190402 11:46:12.141"></status>
</kw>
<msg timestamp="20190402 11:46:12.142" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:46:12.142" starttime="20190402 11:46:10.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:46:12.144" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:46:12.144" starttime="20190402 11:46:12.143"></status>
</kw>
<status status="FAIL" endtime="20190402 11:46:12.144" starttime="20190402 11:46:10.496"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:46:22.147" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:46:22.147" starttime="20190402 11:46:22.147"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:46:22.149" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:46:22.149" starttime="20190402 11:46:22.148"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:46:22.151" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:46:22.151" starttime="20190402 11:46:22.150"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:46:22.152" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:46:23.938" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:46:23.939" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:46:23.939" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:46:23.939" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:46:23.939" starttime="20190402 11:46:22.151"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:46:23.941" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:46:23.941" starttime="20190402 11:46:23.940"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:46:23.942" starttime="20190402 11:46:23.942"></status>
</kw>
<msg timestamp="20190402 11:46:23.943" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:46:23.943" starttime="20190402 11:46:22.149"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:46:23.944" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:46:23.944" starttime="20190402 11:46:23.943"></status>
</kw>
<msg timestamp="20190402 11:46:23.944" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:46:23.945" starttime="20190402 11:46:22.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:46:23.946" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:46:23.946" starttime="20190402 11:46:23.945"></status>
</kw>
<status status="FAIL" endtime="20190402 11:46:23.946" starttime="20190402 11:46:22.145"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:46:33.950" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:46:33.950" starttime="20190402 11:46:33.949"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:46:33.951" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:46:33.951" starttime="20190402 11:46:33.950"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:46:33.953" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:46:33.953" starttime="20190402 11:46:33.952"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:46:33.954" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:46:35.691" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:46:35.691" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:46:35.692" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:46:35.692" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:46:35.692" starttime="20190402 11:46:33.953"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:46:35.694" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:46:35.694" starttime="20190402 11:46:35.692"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:46:35.695" starttime="20190402 11:46:35.694"></status>
</kw>
<msg timestamp="20190402 11:46:35.695" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:46:35.695" starttime="20190402 11:46:33.951"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:46:35.697" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:46:35.697" starttime="20190402 11:46:35.696"></status>
</kw>
<msg timestamp="20190402 11:46:35.697" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:46:35.697" starttime="20190402 11:46:33.948"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:46:35.699" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:46:35.699" starttime="20190402 11:46:35.698"></status>
</kw>
<status status="FAIL" endtime="20190402 11:46:35.699" starttime="20190402 11:46:33.947"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:46:45.703" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:46:45.703" starttime="20190402 11:46:45.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:46:45.704" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:46:45.704" starttime="20190402 11:46:45.703"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:46:45.706" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:46:45.706" starttime="20190402 11:46:45.705"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:46:45.707" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:46:47.739" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:46:47.740" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:46:47.740" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:46:47.740" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:46:47.740" starttime="20190402 11:46:45.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:46:47.740" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:46:47.740" starttime="20190402 11:46:47.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:46:47.741" starttime="20190402 11:46:47.741"></status>
</kw>
<msg timestamp="20190402 11:46:47.741" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:46:47.741" starttime="20190402 11:46:45.704"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:46:47.741" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:46:47.741" starttime="20190402 11:46:47.741"></status>
</kw>
<msg timestamp="20190402 11:46:47.742" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:46:47.742" starttime="20190402 11:46:45.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:46:47.742" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:46:47.742" starttime="20190402 11:46:47.742"></status>
</kw>
<status status="FAIL" endtime="20190402 11:46:47.742" starttime="20190402 11:46:45.700"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:46:57.745" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:46:57.745" starttime="20190402 11:46:57.744"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:46:57.746" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:46:57.746" starttime="20190402 11:46:57.745"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:46:57.748" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:46:57.748" starttime="20190402 11:46:57.747"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:46:57.749" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:46:59.534" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:46:59.535" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:46:59.535" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:46:59.535" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:46:59.535" starttime="20190402 11:46:57.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:46:59.537" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:46:59.537" starttime="20190402 11:46:59.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:46:59.538" starttime="20190402 11:46:59.537"></status>
</kw>
<msg timestamp="20190402 11:46:59.538" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:46:59.538" starttime="20190402 11:46:57.746"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:46:59.539" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:46:59.539" starttime="20190402 11:46:59.539"></status>
</kw>
<msg timestamp="20190402 11:46:59.540" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:46:59.540" starttime="20190402 11:46:57.744"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:46:59.541" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:46:59.541" starttime="20190402 11:46:59.540"></status>
</kw>
<status status="FAIL" endtime="20190402 11:46:59.542" starttime="20190402 11:46:57.743"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:09.546" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:47:09.546" starttime="20190402 11:47:09.544"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:09.547" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:47:09.547" starttime="20190402 11:47:09.546"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:09.550" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:09.550" starttime="20190402 11:47:09.549"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:09.552" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:47:11.287" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:11.288" level="INFO">${stdout} = disabled</msg>
<msg timestamp="20190402 11:47:11.288" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:11.288" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:11.288" starttime="20190402 11:47:09.550"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:11.290" level="INFO">${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:11.290" starttime="20190402 11:47:11.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:11.291" starttime="20190402 11:47:11.290"></status>
</kw>
<msg timestamp="20190402 11:47:11.291" level="INFO">${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:11.291" starttime="20190402 11:47:09.548"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:47:11.292" level="INFO">${value} = disabled</msg>
<status status="PASS" endtime="20190402 11:47:11.292" starttime="20190402 11:47:11.291"></status>
</kw>
<msg timestamp="20190402 11:47:11.293" level="INFO">${current_value} = disabled</msg>
<status status="PASS" endtime="20190402 11:47:11.293" starttime="20190402 11:47:09.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:47:11.294" level="FAIL">disabled != enabled</msg>
<status status="FAIL" endtime="20190402 11:47:11.294" starttime="20190402 11:47:11.293"></status>
</kw>
<status status="FAIL" endtime="20190402 11:47:11.294" starttime="20190402 11:47:09.542"></status>
</kw>
<kw name="Check Compute Service Property" library="OpenStack">
<doc>Check status instance.</doc>
<arguments>
<arg>${host}</arg>
<arg>enabled</arg>
</arguments>
<kw name="Retrieve Field Property Compute" library="OpenStack">
<arguments>
<arg>${compute}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service list --service nova-compute</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:21.297" level="INFO">${openstack_cmd} = openstack compute service list --service nova-compute</msg>
<status status="PASS" endtime="20190402 11:47:21.297" starttime="20190402 11:47:21.297"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep ${compute}</arg>
<arg>awk '{print$10}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:21.298" level="INFO">${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'</msg>
<status status="PASS" endtime="20190402 11:47:21.298" starttime="20190402 11:47:21.298"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:21.300" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:21.300" starttime="20190402 11:47:21.300"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:21.302" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.</msg>
<msg timestamp="20190402 11:47:23.037" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:23.037" level="INFO">${stdout} = enabled</msg>
<msg timestamp="20190402 11:47:23.037" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:23.037" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:23.038" starttime="20190402 11:47:21.301"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:23.039" level="INFO">${res} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:23.039" starttime="20190402 11:47:23.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:23.040" starttime="20190402 11:47:23.039"></status>
</kw>
<msg timestamp="20190402 11:47:23.040" level="INFO">${result} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:23.041" starttime="20190402 11:47:21.299"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:47:23.041" level="INFO">${value} = enabled</msg>
<status status="PASS" endtime="20190402 11:47:23.041" starttime="20190402 11:47:23.041"></status>
</kw>
<msg timestamp="20190402 11:47:23.042" level="INFO">${current_value} = enabled</msg>
<status status="PASS" endtime="20190402 11:47:23.042" starttime="20190402 11:47:21.296"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:23.043" starttime="20190402 11:47:23.042"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:23.043" starttime="20190402 11:47:21.295"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:23.043" starttime="20190402 11:45:13.119"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:23.044" starttime="20190402 11:45:10.210"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:23.044" starttime="20190402 11:43:57.495"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:23.044" starttime="20190402 11:43:57.495"></status>
</kw>
<doc>Evacuate all instances from computes or
controllers.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
</tags>
<status status="PASS" endtime="20190402 11:47:23.044" critical="yes" starttime="20190402 11:43:57.494"></status>
</test>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>OpenStack.Openstack Cleanup All</arg>
<arg>Utils.Stx Suite TearDown</arg>
</arguments>
<kw name="Openstack Cleanup All" library="OpenStack">
<doc>Delete all instances, images, flavors, networks and
keypairs generated during tests.</doc>
<kw name="Delete All Instances" library="OpenStack">
<doc>Get a list of all existing instances to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:23.051" level="INFO">${openstack_cmd} = openstack server list</msg>
<status status="PASS" endtime="20190402 11:47:23.051" starttime="20190402 11:47:23.050"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:23.052" level="INFO">${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:47:23.052" starttime="20190402 11:47:23.051"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:23.053" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:23.053" starttime="20190402 11:47:23.053"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:23.055" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:47:24.996" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:24.997" level="INFO">${stdout} = 

vm-cirros-2
vm-cirros-1</msg>
<msg timestamp="20190402 11:47:24.998" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:24.998" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:24.998" starttime="20190402 11:47:23.054"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:25.000" level="INFO">${res} = {u'stdout': u'\n\nvm-cirros-2\nvm-cirros-1', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:25.000" starttime="20190402 11:47:24.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:25.003" starttime="20190402 11:47:25.001"></status>
</kw>
<msg timestamp="20190402 11:47:25.004" level="INFO">&amp;{result} = { stdout=

vm-cirros-2
vm-cirros-1 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:47:25.004" starttime="20190402 11:47:23.052"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{vm_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:47:25.006" level="INFO">${response} = 

vm-cirros-2
vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:47:25.007" starttime="20190402 11:47:25.006"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:47:25.008" level="INFO">@{res_in_list} = [ vm-cirros-2 | vm-cirros-1 ]</msg>
<status status="PASS" endtime="20190402 11:47:25.008" starttime="20190402 11:47:25.007"></status>
</kw>
<msg timestamp="20190402 11:47:25.008" level="INFO">@{vm_list} = [ vm-cirros-2 | vm-cirros-1 ]</msg>
<status status="PASS" endtime="20190402 11:47:25.008" starttime="20190402 11:47:25.004"></status>
</kw>
<kw type="for" name="${vm} IN [ @{vm_list} ]">
<kw type="foritem" name="${vm} = vm-cirros-2">
<kw name="Delete Instance" library="OpenStack">
<doc>Delete an specific instance.</doc>
<arguments>
<arg>${vm}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:25.010" level="INFO">${openstack_cmd} = openstack server delete</msg>
<status status="PASS" endtime="20190402 11:47:25.010" starttime="20190402 11:47:25.010"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${vm}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:25.011" level="INFO">${cmd} = openstack server delete vm-cirros-2</msg>
<status status="PASS" endtime="20190402 11:47:25.011" starttime="20190402 11:47:25.010"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:25.013" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:25.014" starttime="20190402 11:47:25.013"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:25.015" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server delete vm-cirros-2'.</msg>
<msg timestamp="20190402 11:47:26.798" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:26.798" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:47:26.798" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:26.799" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:26.799" starttime="20190402 11:47:25.014"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:26.801" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:26.801" starttime="20190402 11:47:26.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:26.802" starttime="20190402 11:47:26.801"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:26.803" starttime="20190402 11:47:25.011"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:26.803" starttime="20190402 11:47:25.009"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:26.803" starttime="20190402 11:47:25.009"></status>
</kw>
<kw type="foritem" name="${vm} = vm-cirros-1">
<kw name="Delete Instance" library="OpenStack">
<doc>Delete an specific instance.</doc>
<arguments>
<arg>${vm}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:26.805" level="INFO">${openstack_cmd} = openstack server delete</msg>
<status status="PASS" endtime="20190402 11:47:26.805" starttime="20190402 11:47:26.804"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${vm}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:26.806" level="INFO">${cmd} = openstack server delete vm-cirros-1</msg>
<status status="PASS" endtime="20190402 11:47:26.806" starttime="20190402 11:47:26.805"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:26.807" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:26.807" starttime="20190402 11:47:26.807"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:26.808" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server delete vm-cirros-1'.</msg>
<msg timestamp="20190402 11:47:28.994" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:28.994" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:47:28.994" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:28.995" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:28.995" starttime="20190402 11:47:26.808"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:28.996" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:28.996" starttime="20190402 11:47:28.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:28.996" starttime="20190402 11:47:28.996"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:28.997" starttime="20190402 11:47:26.806"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:28.997" starttime="20190402 11:47:26.804"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:28.997" starttime="20190402 11:47:26.803"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:28.997" starttime="20190402 11:47:25.008"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:28.997" starttime="20190402 11:47:23.049"></status>
</kw>
<kw name="Delete All Images" library="OpenStack">
<doc>Get a list of all existing images to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:28.998" level="INFO">${openstack_cmd} = openstack image list</msg>
<status status="PASS" endtime="20190402 11:47:28.998" starttime="20190402 11:47:28.998"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "Cirros"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:28.999" level="INFO">${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"</msg>
<status status="PASS" endtime="20190402 11:47:28.999" starttime="20190402 11:47:28.998"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:29.000" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:29.000" starttime="20190402 11:47:28.999"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:29.001" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.</msg>
<msg timestamp="20190402 11:47:30.445" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:30.446" level="INFO">${stdout} = 

cirros</msg>
<msg timestamp="20190402 11:47:30.446" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:30.446" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:30.446" starttime="20190402 11:47:29.000"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:30.449" level="INFO">${res} = {u'stdout': u'\n\ncirros', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:30.449" starttime="20190402 11:47:30.447"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:30.451" starttime="20190402 11:47:30.450"></status>
</kw>
<msg timestamp="20190402 11:47:30.451" level="INFO">&amp;{result} = { stdout=

cirros | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:47:30.451" starttime="20190402 11:47:28.999"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{image_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:47:30.453" level="INFO">${response} = 

cirros</msg>
<status status="PASS" endtime="20190402 11:47:30.453" starttime="20190402 11:47:30.453"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:47:30.454" level="INFO">@{res_in_list} = [ cirros ]</msg>
<status status="PASS" endtime="20190402 11:47:30.454" starttime="20190402 11:47:30.453"></status>
</kw>
<msg timestamp="20190402 11:47:30.454" level="INFO">@{image_list} = [ cirros ]</msg>
<status status="PASS" endtime="20190402 11:47:30.455" starttime="20190402 11:47:30.452"></status>
</kw>
<kw type="for" name="${image} IN [ @{image_list} ]">
<kw type="foritem" name="${image} = cirros">
<kw name="Delete Image" library="OpenStack">
<doc>Delete an specific image.</doc>
<arguments>
<arg>${image}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:30.456" level="INFO">${openstack_cmd} = openstack image delete</msg>
<status status="PASS" endtime="20190402 11:47:30.456" starttime="20190402 11:47:30.456"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${image}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:30.457" level="INFO">${cmd} = openstack image delete cirros</msg>
<status status="PASS" endtime="20190402 11:47:30.457" starttime="20190402 11:47:30.457"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:30.459" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:30.459" starttime="20190402 11:47:30.458"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:30.460" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image delete cirros'.</msg>
<msg timestamp="20190402 11:47:32.092" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:32.092" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:47:32.093" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:32.093" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:32.093" starttime="20190402 11:47:30.459"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:32.095" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:32.095" starttime="20190402 11:47:32.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:32.096" starttime="20190402 11:47:32.095"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:32.096" starttime="20190402 11:47:30.457"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:32.097" starttime="20190402 11:47:30.455"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:32.097" starttime="20190402 11:47:30.455"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:32.097" starttime="20190402 11:47:30.455"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:32.097" starttime="20190402 11:47:28.997"></status>
</kw>
<kw name="Delete All Flavors" library="OpenStack">
<doc>Get a list of all existing flavors to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:32.099" level="INFO">${openstack_cmd} = openstack flavor list</msg>
<status status="PASS" endtime="20190402 11:47:32.099" starttime="20190402 11:47:32.098"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "m1"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:32.101" level="INFO">${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"</msg>
<status status="PASS" endtime="20190402 11:47:32.101" starttime="20190402 11:47:32.100"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:32.103" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:32.103" starttime="20190402 11:47:32.102"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:32.104" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.</msg>
<msg timestamp="20190402 11:47:33.436" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:33.436" level="INFO">${stdout} = 

f2.small
f1.small</msg>
<msg timestamp="20190402 11:47:33.436" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:33.436" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:33.436" starttime="20190402 11:47:32.103"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:33.438" level="INFO">${res} = {u'stdout': u'\n\nf2.small\nf1.small', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:33.438" starttime="20190402 11:47:33.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:33.439" starttime="20190402 11:47:33.438"></status>
</kw>
<msg timestamp="20190402 11:47:33.440" level="INFO">&amp;{result} = { stdout=

f2.small
f1.small | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:47:33.440" starttime="20190402 11:47:32.101"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{flavor_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:47:33.441" level="INFO">${response} = 

f2.small
f1.small</msg>
<status status="PASS" endtime="20190402 11:47:33.441" starttime="20190402 11:47:33.441"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:47:33.442" level="INFO">@{res_in_list} = [ f2.small | f1.small ]</msg>
<status status="PASS" endtime="20190402 11:47:33.442" starttime="20190402 11:47:33.442"></status>
</kw>
<msg timestamp="20190402 11:47:33.443" level="INFO">@{flavor_list} = [ f2.small | f1.small ]</msg>
<status status="PASS" endtime="20190402 11:47:33.443" starttime="20190402 11:47:33.440"></status>
</kw>
<kw type="for" name="${flavor} IN [ @{flavor_list} ]">
<kw type="foritem" name="${flavor} = f2.small">
<kw name="Delete Flavor" library="OpenStack">
<doc>Delete an specific flavor.</doc>
<arguments>
<arg>${flavor}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:33.445" level="INFO">${openstack_cmd} = openstack flavor delete</msg>
<status status="PASS" endtime="20190402 11:47:33.445" starttime="20190402 11:47:33.444"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${flavor}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:33.446" level="INFO">${cmd} = openstack flavor delete f2.small</msg>
<status status="PASS" endtime="20190402 11:47:33.446" starttime="20190402 11:47:33.445"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:33.448" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:33.448" starttime="20190402 11:47:33.447"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:33.449" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor delete f2.small'.</msg>
<msg timestamp="20190402 11:47:34.881" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:34.881" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:47:34.882" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:34.882" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:34.882" starttime="20190402 11:47:33.448"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:34.884" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:34.884" starttime="20190402 11:47:34.882"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:34.885" starttime="20190402 11:47:34.884"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:34.885" starttime="20190402 11:47:33.446"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:34.886" starttime="20190402 11:47:33.443"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:34.886" starttime="20190402 11:47:33.443"></status>
</kw>
<kw type="foritem" name="${flavor} = f1.small">
<kw name="Delete Flavor" library="OpenStack">
<doc>Delete an specific flavor.</doc>
<arguments>
<arg>${flavor}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:34.888" level="INFO">${openstack_cmd} = openstack flavor delete</msg>
<status status="PASS" endtime="20190402 11:47:34.888" starttime="20190402 11:47:34.887"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${flavor}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:34.889" level="INFO">${cmd} = openstack flavor delete f1.small</msg>
<status status="PASS" endtime="20190402 11:47:34.889" starttime="20190402 11:47:34.888"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:34.890" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:34.891" starttime="20190402 11:47:34.890"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:34.892" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor delete f1.small'.</msg>
<msg timestamp="20190402 11:47:36.439" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:36.439" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:47:36.439" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:36.439" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:36.439" starttime="20190402 11:47:34.891"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:36.441" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:36.441" starttime="20190402 11:47:36.440"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:36.442" starttime="20190402 11:47:36.441"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:36.442" starttime="20190402 11:47:34.889"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:36.443" starttime="20190402 11:47:34.886"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:36.443" starttime="20190402 11:47:34.886"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:36.443" starttime="20190402 11:47:33.443"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:36.443" starttime="20190402 11:47:32.098"></status>
</kw>
<kw name="Delete All Networks" library="OpenStack">
<doc>Get a list of all existing networks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:36.445" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190402 11:47:36.445" starttime="20190402 11:47:36.444"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "private"</arg>
<arg>grep -v "public"</arg>
<arg>grep -v "external"</arg>
<arg>grep -v "internal"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:36.446" level="INFO">${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"</msg>
<status status="PASS" endtime="20190402 11:47:36.446" starttime="20190402 11:47:36.445"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:36.447" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:36.447" starttime="20190402 11:47:36.447"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:36.449" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.</msg>
<msg timestamp="20190402 11:47:38.232" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:38.232" level="INFO">${stdout} = 

network-1</msg>
<msg timestamp="20190402 11:47:38.232" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:38.233" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:38.233" starttime="20190402 11:47:36.448"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:38.234" level="INFO">${res} = {u'stdout': u'\n\nnetwork-1', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:38.234" starttime="20190402 11:47:38.233"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:38.235" starttime="20190402 11:47:38.235"></status>
</kw>
<msg timestamp="20190402 11:47:38.236" level="INFO">&amp;{result} = { stdout=

network-1 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:47:38.236" starttime="20190402 11:47:36.446"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{network_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:47:38.238" level="INFO">${response} = 

network-1</msg>
<status status="PASS" endtime="20190402 11:47:38.238" starttime="20190402 11:47:38.237"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:47:38.239" level="INFO">@{res_in_list} = [ network-1 ]</msg>
<status status="PASS" endtime="20190402 11:47:38.239" starttime="20190402 11:47:38.238"></status>
</kw>
<msg timestamp="20190402 11:47:38.239" level="INFO">@{network_list} = [ network-1 ]</msg>
<status status="PASS" endtime="20190402 11:47:38.239" starttime="20190402 11:47:38.237"></status>
</kw>
<kw type="for" name="${network} IN [ @{network_list} ]">
<kw type="foritem" name="${network} = network-1">
<kw name="Delete Network" library="OpenStack">
<doc>Delete an specific network.</doc>
<arguments>
<arg>${network}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:38.242" level="INFO">${openstack_cmd} = openstack network delete</msg>
<status status="PASS" endtime="20190402 11:47:38.242" starttime="20190402 11:47:38.241"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${network}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:38.243" level="INFO">${cmd} = openstack network delete network-1</msg>
<status status="PASS" endtime="20190402 11:47:38.243" starttime="20190402 11:47:38.242"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:38.245" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:38.245" starttime="20190402 11:47:38.244"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:38.246" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network delete network-1'.</msg>
<msg timestamp="20190402 11:47:41.182" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:41.182" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:47:41.183" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:41.183" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:41.183" starttime="20190402 11:47:38.245"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:41.185" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:41.185" starttime="20190402 11:47:41.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:41.186" starttime="20190402 11:47:41.185"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:41.186" starttime="20190402 11:47:38.243"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:41.186" starttime="20190402 11:47:38.240"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:41.187" starttime="20190402 11:47:38.240"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:41.187" starttime="20190402 11:47:38.240"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:41.187" starttime="20190402 11:47:36.444"></status>
</kw>
<kw name="Delete All KeyPairs" library="OpenStack">
<doc>Get a list of all existing keypais to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack keypair list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:41.188" level="INFO">${openstack_cmd} = openstack keypair list</msg>
<status status="PASS" endtime="20190402 11:47:41.189" starttime="20190402 11:47:41.188"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:41.189" level="INFO">${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:47:41.190" starttime="20190402 11:47:41.189"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:41.191" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:41.191" starttime="20190402 11:47:41.191"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:41.192" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack keypair list|awk '{print$2}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:47:42.580" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:42.580" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:47:42.580" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:42.580" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:42.581" starttime="20190402 11:47:41.192"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:42.582" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:42.582" starttime="20190402 11:47:42.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:42.582" starttime="20190402 11:47:42.582"></status>
</kw>
<msg timestamp="20190402 11:47:42.583" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:47:42.583" starttime="20190402 11:47:41.190"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{key_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:47:42.584" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:47:42.584" starttime="20190402 11:47:42.583"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:47:42.584" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:47:42.584" starttime="20190402 11:47:42.584"></status>
</kw>
<msg timestamp="20190402 11:47:42.585" level="INFO">@{key_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:47:42.585" starttime="20190402 11:47:42.583"></status>
</kw>
<kw type="for" name="${key} IN [ @{key_list} ]">
<status status="PASS" endtime="20190402 11:47:42.585" starttime="20190402 11:47:42.585"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:42.585" starttime="20190402 11:47:41.187"></status>
</kw>
<kw name="Delete All Snapshots" library="OpenStack">
<doc>Get a list of all existing snapshots to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:42.586" level="INFO">${openstack_cmd} = openstack volume snapshot list</msg>
<status status="PASS" endtime="20190402 11:47:42.586" starttime="20190402 11:47:42.586"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:42.586" level="INFO">${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:47:42.586" starttime="20190402 11:47:42.586"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:42.587" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:42.587" starttime="20190402 11:47:42.587"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:42.588" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:47:43.925" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:43.926" level="INFO">${stdout} = 

snap-cirros-2
snap-cirros-1</msg>
<msg timestamp="20190402 11:47:43.926" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:43.926" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:43.926" starttime="20190402 11:47:42.588"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:43.928" level="INFO">${res} = {u'stdout': u'\n\nsnap-cirros-2\nsnap-cirros-1', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:43.928" starttime="20190402 11:47:43.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:43.929" starttime="20190402 11:47:43.929"></status>
</kw>
<msg timestamp="20190402 11:47:43.931" level="INFO">&amp;{result} = { stdout=

snap-cirros-2
snap-cirros-1 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:47:43.931" starttime="20190402 11:47:42.587"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{snapshot_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:47:43.933" level="INFO">${response} = 

snap-cirros-2
snap-cirros-1</msg>
<status status="PASS" endtime="20190402 11:47:43.933" starttime="20190402 11:47:43.932"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:47:43.934" level="INFO">@{res_in_list} = [ snap-cirros-2 | snap-cirros-1 ]</msg>
<status status="PASS" endtime="20190402 11:47:43.934" starttime="20190402 11:47:43.933"></status>
</kw>
<msg timestamp="20190402 11:47:43.935" level="INFO">@{snapshot_list} = [ snap-cirros-2 | snap-cirros-1 ]</msg>
<status status="PASS" endtime="20190402 11:47:43.935" starttime="20190402 11:47:43.932"></status>
</kw>
<kw type="for" name="${snapshot} IN [ @{snapshot_list} ]">
<kw type="foritem" name="${snapshot} = snap-cirros-2">
<kw name="Delete Snapshot" library="OpenStack">
<doc>Delete an specific snapshot.</doc>
<arguments>
<arg>${snapshot}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:43.937" level="INFO">${openstack_cmd} = openstack volume snapshot delete</msg>
<status status="PASS" endtime="20190402 11:47:43.937" starttime="20190402 11:47:43.936"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${snapshot}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:43.937" level="INFO">${cmd} = openstack volume snapshot delete snap-cirros-2</msg>
<status status="PASS" endtime="20190402 11:47:43.938" starttime="20190402 11:47:43.937"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:43.939" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:43.939" starttime="20190402 11:47:43.939"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:43.940" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot delete snap-cirros-2'.</msg>
<msg timestamp="20190402 11:47:45.272" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:45.273" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:47:45.273" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:45.273" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:45.273" starttime="20190402 11:47:43.940"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:45.275" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:45.275" starttime="20190402 11:47:45.273"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:45.276" starttime="20190402 11:47:45.275"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:45.276" starttime="20190402 11:47:43.938"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:45.276" starttime="20190402 11:47:43.935"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:45.276" starttime="20190402 11:47:43.935"></status>
</kw>
<kw type="foritem" name="${snapshot} = snap-cirros-1">
<kw name="Delete Snapshot" library="OpenStack">
<doc>Delete an specific snapshot.</doc>
<arguments>
<arg>${snapshot}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:45.278" level="INFO">${openstack_cmd} = openstack volume snapshot delete</msg>
<status status="PASS" endtime="20190402 11:47:45.278" starttime="20190402 11:47:45.277"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${snapshot}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:45.279" level="INFO">${cmd} = openstack volume snapshot delete snap-cirros-1</msg>
<status status="PASS" endtime="20190402 11:47:45.279" starttime="20190402 11:47:45.278"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:45.280" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:45.280" starttime="20190402 11:47:45.280"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:45.282" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot delete snap-cirros-1'.</msg>
<msg timestamp="20190402 11:47:46.797" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:46.797" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:47:46.798" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:46.798" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:46.798" starttime="20190402 11:47:45.281"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:46.798" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:46.798" starttime="20190402 11:47:46.798"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:46.799" starttime="20190402 11:47:46.799"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:46.799" starttime="20190402 11:47:45.279"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:46.799" starttime="20190402 11:47:45.277"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:46.799" starttime="20190402 11:47:45.276"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:46.799" starttime="20190402 11:47:43.935"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:46.799" starttime="20190402 11:47:42.585"></status>
</kw>
<kw name="Delete All Volumes" library="OpenStack">
<doc>Get a list of all existing volumes to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:46.800" level="INFO">${openstack_cmd} = openstack volume list</msg>
<status status="PASS" endtime="20190402 11:47:46.800" starttime="20190402 11:47:46.800"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "ID"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:46.800" level="INFO">${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"</msg>
<status status="PASS" endtime="20190402 11:47:46.800" starttime="20190402 11:47:46.800"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:46.801" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:46.801" starttime="20190402 11:47:46.801"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:46.802" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume list|awk '{print$2}'|grep -v "ID"'.</msg>
<msg timestamp="20190402 11:47:49.050" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:49.050" level="INFO">${stdout} = 

12f23d23-4049-4706-aca1-80783ee83ff2
65be29df-2ffc-4bcc-85f5-4fb95188b95b
5936d333-91af-4afe-babf-bd2a6b209783</msg>
<msg timestamp="20190402 11:47:49.050" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:49.050" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:49.050" starttime="20190402 11:47:46.801"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:49.051" level="INFO">${res} = {u'stdout': u'\n\n12f23d23-4049-4706-aca1-80783ee83ff2\n65be29df-2ffc-4bcc-85f5-4fb95188b95b\n5936d333-91af-4afe-babf-bd2a6b209783', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:49.051" starttime="20190402 11:47:49.050"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:49.051" starttime="20190402 11:47:49.051"></status>
</kw>
<msg timestamp="20190402 11:47:49.051" level="INFO">&amp;{result} = { stdout=

12f23d23-4049-4706-aca1-80783ee83ff2
65be29df-2ffc-4bcc-85f5-4fb95188b95b
5936d333-91af-4afe-babf-bd2a6b209783 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:47:49.051" starttime="20190402 11:47:46.800"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{volume_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:47:49.052" level="INFO">${response} = 

12f23d23-4049-4706-aca1-80783ee83ff2
65be29df-2ffc-4bcc-85f5-4fb95188b95b
5936d333-91af-4afe-babf-bd2a6b209783</msg>
<status status="PASS" endtime="20190402 11:47:49.052" starttime="20190402 11:47:49.052"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:47:49.052" level="INFO">@{res_in_list} = [ 12f23d23-4049-4706-aca1-80783ee83ff2 | 65be29df-2ffc-4bcc-85f5-4fb95188b95b | 5936d333-91af-4afe-babf-bd2a6b209783 ]</msg>
<status status="PASS" endtime="20190402 11:47:49.052" starttime="20190402 11:47:49.052"></status>
</kw>
<msg timestamp="20190402 11:47:49.052" level="INFO">@{volume_list} = [ 12f23d23-4049-4706-aca1-80783ee83ff2 | 65be29df-2ffc-4bcc-85f5-4fb95188b95b | 5936d333-91af-4afe-babf-bd2a6b209783 ]</msg>
<status status="PASS" endtime="20190402 11:47:49.053" starttime="20190402 11:47:49.051"></status>
</kw>
<kw type="for" name="${volume} IN [ @{volume_list} ]">
<kw type="foritem" name="${volume} = 12f23d23-4049-4706-aca1-80783ee83ff2">
<kw name="Delete Volume" library="OpenStack">
<doc>Delete an specific volume.</doc>
<arguments>
<arg>${volume}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:49.053" level="INFO">${openstack_cmd} = openstack volume delete</msg>
<status status="PASS" endtime="20190402 11:47:49.053" starttime="20190402 11:47:49.053"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${volume}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:49.054" level="INFO">${cmd} = openstack volume delete 12f23d23-4049-4706-aca1-80783ee83ff2</msg>
<status status="PASS" endtime="20190402 11:47:49.054" starttime="20190402 11:47:49.053"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:49.054" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:49.054" starttime="20190402 11:47:49.054"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:49.055" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume delete 12f23d23-4049-4706-aca1-80783ee83ff2'.</msg>
<msg timestamp="20190402 11:47:50.843" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:50.843" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:47:50.844" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:50.844" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:50.844" starttime="20190402 11:47:49.054"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:50.844" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:50.844" starttime="20190402 11:47:50.844"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:50.845" starttime="20190402 11:47:50.845"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:50.845" starttime="20190402 11:47:49.054"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:50.845" starttime="20190402 11:47:49.053"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:50.846" starttime="20190402 11:47:49.053"></status>
</kw>
<kw type="foritem" name="${volume} = 65be29df-2ffc-4bcc-85f5-4fb95188b95b">
<kw name="Delete Volume" library="OpenStack">
<doc>Delete an specific volume.</doc>
<arguments>
<arg>${volume}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:50.846" level="INFO">${openstack_cmd} = openstack volume delete</msg>
<status status="PASS" endtime="20190402 11:47:50.846" starttime="20190402 11:47:50.846"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${volume}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:50.847" level="INFO">${cmd} = openstack volume delete 65be29df-2ffc-4bcc-85f5-4fb95188b95b</msg>
<status status="PASS" endtime="20190402 11:47:50.847" starttime="20190402 11:47:50.846"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:50.847" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:50.847" starttime="20190402 11:47:50.847"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:50.848" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume delete 65be29df-2ffc-4bcc-85f5-4fb95188b95b'.</msg>
<msg timestamp="20190402 11:47:52.179" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:52.179" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:47:52.180" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:52.180" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:52.180" starttime="20190402 11:47:50.848"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:52.182" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:52.182" starttime="20190402 11:47:52.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:52.183" starttime="20190402 11:47:52.182"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:52.183" starttime="20190402 11:47:50.847"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:52.184" starttime="20190402 11:47:50.846"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:52.184" starttime="20190402 11:47:50.846"></status>
</kw>
<kw type="foritem" name="${volume} = 5936d333-91af-4afe-babf-bd2a6b209783">
<kw name="Delete Volume" library="OpenStack">
<doc>Delete an specific volume.</doc>
<arguments>
<arg>${volume}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:52.186" level="INFO">${openstack_cmd} = openstack volume delete</msg>
<status status="PASS" endtime="20190402 11:47:52.186" starttime="20190402 11:47:52.185"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${volume}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:52.187" level="INFO">${cmd} = openstack volume delete 5936d333-91af-4afe-babf-bd2a6b209783</msg>
<status status="PASS" endtime="20190402 11:47:52.187" starttime="20190402 11:47:52.186"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:52.190" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:52.190" starttime="20190402 11:47:52.190"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:52.191" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume delete 5936d333-91af-4afe-babf-bd2a6b209783'.</msg>
<msg timestamp="20190402 11:47:53.538" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190402 11:47:53.538" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:47:53.538" level="INFO">${stderr} = Failed to delete volume with name or ID '5936d333-91af-4afe-babf-bd2a6b209783': Invalid volume: Volume status must be available or error or error_restoring or error_extending or error_managing and mus...</msg>
<msg timestamp="20190402 11:47:53.539" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190402 11:47:53.539" starttime="20190402 11:47:52.190"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:53.541" level="INFO">${res} = {u'stdout': u'', u'stderr': u"Failed to delete volume with name or ID '5936d333-91af-4afe-babf-bd2a6b209783': Invalid volume: Volume status must be available or error or error_restoring or error_exten...</msg>
<status status="PASS" endtime="20190402 11:47:53.541" starttime="20190402 11:47:53.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:53.542" starttime="20190402 11:47:53.541"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:53.542" starttime="20190402 11:47:52.187"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:53.543" starttime="20190402 11:47:52.185"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:53.543" starttime="20190402 11:47:52.184"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:53.543" starttime="20190402 11:47:49.053"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:53.544" starttime="20190402 11:47:46.799"></status>
</kw>
<kw name="Delete All Stacks" library="OpenStack">
<doc>Get a list of all existing stacks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:53.545" level="INFO">${openstack_cmd} = openstack stack list</msg>
<status status="PASS" endtime="20190402 11:47:53.545" starttime="20190402 11:47:53.545"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:53.546" level="INFO">${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:47:53.547" starttime="20190402 11:47:53.546"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:53.549" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:53.549" starttime="20190402 11:47:53.548"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:53.550" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:47:54.882" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:54.883" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:47:54.883" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:54.883" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:54.883" starttime="20190402 11:47:53.549"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:54.883" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:47:54.883" starttime="20190402 11:47:54.883"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:54.884" starttime="20190402 11:47:54.884"></status>
</kw>
<msg timestamp="20190402 11:47:54.884" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:47:54.884" starttime="20190402 11:47:53.547"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{stack_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:47:54.885" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:47:54.885" starttime="20190402 11:47:54.884"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:47:54.885" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:47:54.885" starttime="20190402 11:47:54.885"></status>
</kw>
<msg timestamp="20190402 11:47:54.885" level="INFO">@{stack_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:47:54.885" starttime="20190402 11:47:54.884"></status>
</kw>
<kw type="for" name="${stack} IN [ @{stack_list} ]">
<status status="PASS" endtime="20190402 11:47:54.885" starttime="20190402 11:47:54.885"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:54.885" starttime="20190402 11:47:53.544"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:54.886" starttime="20190402 11:47:23.049"></status>
</kw>
<kw name="Stx Suite TearDown" library="Utils">
<doc>Wrapper to clean up activities on the suite.</doc>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20190402 11:47:54.918" starttime="20190402 11:47:54.886"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:54.918" starttime="20190402 11:47:54.886"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:54.918" starttime="20190402 11:47:23.048"></status>
</kw>
<doc>Tests to create instances from a volume, perform different
power status and set properties, using Cirros OS.
Author(s):
- Juan Carlos Alonso &lt;juan.carlos.alonso@intel.com&gt;</doc>
<status status="PASS" endtime="20190402 11:47:54.918" starttime="20190402 11:28:00.585"></status>
</suite>
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-OpenStack/04-Instance-From-Heat-Template.robot" id="s1-s1-s4" name="04-Instance-From-Heat-Template">
<kw type="setup" name="Stx Suite Setup" library="Utils">
<doc>Wrapper to setup the environment needed for exercise
StarlingX features</doc>
<kw name="Open Master Controller Connection" library="Utils">
<doc>Establish a SSH connection with the master controller
to start executing the the suite.</doc>
<kw name="Connect to Controller Node" library="Utils">
<doc>Stablish a SSH connection to the controller and return
the connection id</doc>
<arguments>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_NAME}</arg>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_PSWD}</arg>
<arg>${CONFIG.general.IP_UNIT_0_ADDRESS}</arg>
</arguments>
<assign>
<var>${master_controller_connection}</var>
</assign>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${ip_address} prompt=${prompt}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${controller_connection}</var>
</assign>
<msg timestamp="20190402 11:47:54.936" level="INFO">${controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:47:54.936" starttime="20190402 11:47:54.935"></status>
</kw>
<kw name="Flexible_SSH_Login" library="Utils">
<doc>On active SSH session: if given non-empty password,
do Login, else do Login With Public Key.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${password}</arg>
</arguments>
<assign>
<var>${pwd_length}</var>
</assign>
<msg timestamp="20190402 11:47:54.936" level="INFO">Length is 10</msg>
<msg timestamp="20190402 11:47:54.936" level="INFO">${pwd_length} = 10</msg>
<status status="PASS" endtime="20190402 11:47:54.936" starttime="20190402 11:47:54.936"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${pwd_length} &gt; 0</arg>
<arg>SSHLibrary.Login</arg>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<msg timestamp="20190402 11:47:54.937" level="INFO">Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.</msg>
<msg timestamp="20190402 11:47:56.061" level="INFO">Read output: Last login: Tue Apr  2 17:16:43 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$</msg>
<status status="PASS" endtime="20190402 11:47:56.061" starttime="20190402 11:47:54.937"></status>
</kw>
<msg timestamp="20190402 11:47:56.062" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190402 11:47:56.062" starttime="20190402 11:47:54.936"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:56.062" starttime="20190402 11:47:54.936"></status>
</kw>
<msg timestamp="20190402 11:47:56.062" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:47:56.062" starttime="20190402 11:47:54.935"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190402 11:47:56.063" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:47:56.063" starttime="20190402 11:47:56.063"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190402 11:47:56.064" level="INFO">1</msg>
<status status="PASS" endtime="20190402 11:47:56.064" starttime="20190402 11:47:56.063"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:56.064" starttime="20190402 11:47:54.935"></status>
</kw>
<kw name="Set Env Vars From Openrc" library="Utils">
<doc>Sources the openrc form /etc/nova/ to have the admin
variables exported on the controller.</doc>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>source /etc/platform/openrc</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:56.065" starttime="20190402 11:47:56.065"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:47:56.066" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:47:56.066" starttime="20190402 11:47:56.066"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:56.067" starttime="20190402 11:47:56.066"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:56.067" starttime="20190402 11:47:56.067"></status>
</kw>
<msg timestamp="20190402 11:47:56.068" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:47:56.068" starttime="20190402 11:47:56.065"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20190402 11:47:56.068" starttime="20190402 11:47:56.068"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:47:56.071" level="INFO">source /etc/platform/openrc</msg>
<status status="PASS" endtime="20190402 11:47:56.071" starttime="20190402 11:47:56.068"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:47:56.685" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:47:56.685" level="INFO">${output} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:47:56.685" starttime="20190402 11:47:56.071"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:47:56.686" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:47:56.686" starttime="20190402 11:47:56.686"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:47:56.686" level="INFO">${clean_out} = </msg>
<status status="PASS" endtime="20190402 11:47:56.686" starttime="20190402 11:47:56.686"></status>
</kw>
<msg timestamp="20190402 11:47:56.687" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190402 11:47:56.687" starttime="20190402 11:47:56.685"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:47:56.689" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:47:56.689" starttime="20190402 11:47:56.687"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:56.691" level="INFO">0</msg>
<msg timestamp="20190402 11:47:56.691" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:56.691" starttime="20190402 11:47:56.689"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:47:56.691" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:47:56.691" starttime="20190402 11:47:56.691"></status>
</kw>
<msg timestamp="20190402 11:47:56.692" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:56.692" starttime="20190402 11:47:56.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:56.692" starttime="20190402 11:47:56.692"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:56.692" starttime="20190402 11:47:56.692"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:56.693" starttime="20190402 11:47:56.693"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:47:56.693" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: </msg>
<status status="PASS" endtime="20190402 11:47:56.693" starttime="20190402 11:47:56.693"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:56.693" starttime="20190402 11:47:56.064"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:56.693" starttime="20190402 11:47:56.064"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:56.693" starttime="20190402 11:47:54.934"></status>
</kw>
<test id="s1-s1-s4-t1" name="Create Flavors for Instance">
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${cirros_flavor_ram}</arg>
<arg>${cirros_flavor_vcpus}</arg>
<arg>${cirros_flavor_disk}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:56.695" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190402 11:47:56.695" starttime="20190402 11:47:56.694"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:56.695" level="INFO">${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small</msg>
<status status="PASS" endtime="20190402 11:47:56.695" starttime="20190402 11:47:56.695"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:56.696" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:56.696" starttime="20190402 11:47:56.696"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:56.697" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.</msg>
<msg timestamp="20190402 11:47:58.378" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:47:58.379" level="INFO">${stdout} = +----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+------------------------------...</msg>
<msg timestamp="20190402 11:47:58.379" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:47:58.379" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:47:58.379" starttime="20190402 11:47:56.696"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:47:58.381" level="INFO">${res} = {u'stdout': u'+----------------------------+--------------------------------------+\n| Field                      | Value                                |\n+----------------------------+--------------...</msg>
<status status="PASS" endtime="20190402 11:47:58.381" starttime="20190402 11:47:58.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:58.383" starttime="20190402 11:47:58.382"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:58.383" starttime="20190402 11:47:56.695"></status>
</kw>
<status status="PASS" endtime="20190402 11:47:58.384" starttime="20190402 11:47:56.694"></status>
</kw>
<doc>Create flavors with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:47:58.384" critical="yes" starttime="20190402 11:47:56.693"></status>
</test>
<test id="s1-s1-s4-t2" name="Create Images for Instances">
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/${cirros_image}</arg>
<arg>${host_image_path}/${cirros_image}</arg>
</arguments>
<msg timestamp="20190402 11:47:58.397" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190402 11:47:58.405" level="INFO">[chan 3] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190402 11:47:58.888" level="INFO">'/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2' -&gt; '/home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2'</msg>
<status status="PASS" endtime="20190402 11:47:58.889" starttime="20190402 11:47:58.386"></status>
</kw>
<kw name="Create Image" library="OpenStack">
<doc>Create image from a given .img file.</doc>
<arguments>
<arg>${host_image_path}/${cirros_image}</arg>
<arg>${disk_format}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<kw name="File Should Exist" library="SSHLibrary">
<doc>Fails if the given ``path`` does NOT point to an existing file.</doc>
<arguments>
<arg>${file_path}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:47:58.890" starttime="20190402 11:47:58.889"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:47:58.890" level="INFO">${openstack_cmd} = openstack image create</msg>
<status status="PASS" endtime="20190402 11:47:58.890" starttime="20190402 11:47:58.890"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--file ${file_path}</arg>
<arg>--disk-format ${disk_format}</arg>
<arg>--public</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:47:58.891" level="INFO">${cmd} = openstack image create --file /home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2 --disk-format qcow2 --public cirros</msg>
<status status="PASS" endtime="20190402 11:47:58.891" starttime="20190402 11:47:58.890"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>3 min</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:47:58.892" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:47:58.892" starttime="20190402 11:47:58.891"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:47:58.892" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image create --file /home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2 --disk-format qcow2 --public cirros'.</msg>
<msg timestamp="20190402 11:48:01.061" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:01.062" level="INFO">${stdout} = +------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<msg timestamp="20190402 11:48:01.062" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:01.062" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:01.062" starttime="20190402 11:47:58.892"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:01.065" level="INFO">${res} = {u'stdout': u"+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20190402 11:48:01.065" starttime="20190402 11:48:01.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:01.067" starttime="20190402 11:48:01.066"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:01.067" starttime="20190402 11:47:58.891"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>image</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>active</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>image</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>active</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:01.071" level="INFO">${openstack_cmd} = openstack image show cirros</msg>
<status status="PASS" endtime="20190402 11:48:01.071" starttime="20190402 11:48:01.071"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:01.072" level="INFO">${cmd} = openstack image show cirros|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:48:01.072" starttime="20190402 11:48:01.072"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:01.074" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:01.074" starttime="20190402 11:48:01.074"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:01.075" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image show cirros|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:48:02.457" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:02.457" level="INFO">${stdout} = active</msg>
<msg timestamp="20190402 11:48:02.457" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:02.458" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:02.458" starttime="20190402 11:48:01.074"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:02.459" level="INFO">${res} = {u'stdout': u'active', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:02.459" starttime="20190402 11:48:02.458"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:02.460" starttime="20190402 11:48:02.460"></status>
</kw>
<msg timestamp="20190402 11:48:02.461" level="INFO">${result} = {u'stdout': u'active', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:02.461" starttime="20190402 11:48:01.073"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:48:02.462" level="INFO">${value} = active</msg>
<status status="PASS" endtime="20190402 11:48:02.462" starttime="20190402 11:48:02.461"></status>
</kw>
<msg timestamp="20190402 11:48:02.462" level="INFO">${current_value} = active</msg>
<status status="PASS" endtime="20190402 11:48:02.462" starttime="20190402 11:48:01.070"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:02.464" starttime="20190402 11:48:02.463"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:02.464" starttime="20190402 11:48:01.069"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:02.464" starttime="20190402 11:48:01.068"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:02.465" starttime="20190402 11:47:58.889"></status>
</kw>
<doc>Create images with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:48:02.465" critical="yes" starttime="20190402 11:47:58.385"></status>
</test>
<test id="s1-s1-s4-t3" name="Create Networks for Instance">
<kw name="Create Network" library="OpenStack">
<doc>Create Network with openstack request.</doc>
<arguments>
<arg>${network_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:02.468" level="INFO">${openstack_cmd} = openstack network create</msg>
<status status="PASS" endtime="20190402 11:48:02.468" starttime="20190402 11:48:02.467"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${network_name}</arg>
<arg>${additional_args}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:02.469" level="INFO">${cmd} = openstack network create network-1 </msg>
<status status="PASS" endtime="20190402 11:48:02.469" starttime="20190402 11:48:02.468"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:02.471" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:02.471" starttime="20190402 11:48:02.470"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:02.472" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network create network-1 '.</msg>
<msg timestamp="20190402 11:48:03.853" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:03.854" level="INFO">${stdout} = +---------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<msg timestamp="20190402 11:48:03.854" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:03.854" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:03.854" starttime="20190402 11:48:02.471"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:03.856" level="INFO">${res} = {u'stdout': u"+---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20190402 11:48:03.856" starttime="20190402 11:48:03.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:03.857" starttime="20190402 11:48:03.856"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:03.857" starttime="20190402 11:48:02.469"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:03.858" starttime="20190402 11:48:02.467"></status>
</kw>
<kw name="Create Subnet" library="OpenStack">
<doc>Create SubNet for the Network with neutron request.</doc>
<arguments>
<arg>${network_name}</arg>
<arg>${subnet_range}</arg>
<arg>${subnet_extras}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack subnet create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:03.859" level="INFO">${openstack_cmd} = openstack subnet create</msg>
<status status="PASS" endtime="20190402 11:48:03.859" starttime="20190402 11:48:03.859"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--network ${network_name}</arg>
<arg>--subnet-range ${range_ip} ${additional_args}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:03.860" level="INFO">${cmd} = openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1</msg>
<status status="PASS" endtime="20190402 11:48:03.860" starttime="20190402 11:48:03.859"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:03.862" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:03.862" starttime="20190402 11:48:03.861"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:03.863" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1'.</msg>
<msg timestamp="20190402 11:48:05.775" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:05.775" level="INFO">${stdout} = +-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<msg timestamp="20190402 11:48:05.776" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:05.776" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:05.776" starttime="20190402 11:48:03.862"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:05.778" level="INFO">${res} = {u'stdout': u"+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20190402 11:48:05.778" starttime="20190402 11:48:05.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:05.779" starttime="20190402 11:48:05.778"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:05.779" starttime="20190402 11:48:03.860"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:05.780" starttime="20190402 11:48:03.858"></status>
</kw>
<doc>Create networks to be used to launch Cirros
instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:48:05.780" critical="yes" starttime="20190402 11:48:02.466"></status>
</test>
<test id="s1-s1-s4-t4" name="Create Instance Trough Stack">
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/${stack_template}</arg>
<arg>${host_image_path}/${stack_template}</arg>
</arguments>
<msg timestamp="20190402 11:48:05.795" level="INFO">'/home/mgperezi/duplex/stx-test-suite/Utils/stack_template.yml' -&gt; '/home/wrsroot//Utils/stack_template.yml'</msg>
<status status="PASS" endtime="20190402 11:48:05.795" starttime="20190402 11:48:05.782"></status>
</kw>
<kw name="Get Net Id" library="OpenStack">
<doc>Retrieve the net id for the given network name</doc>
<arguments>
<arg>${network_name}</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:05.797" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190402 11:48:05.797" starttime="20190402 11:48:05.796"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "${network_name}"</arg>
<arg>awk '{print$2}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:05.798" level="INFO">${cmd} = openstack network list|grep "network-1"|awk '{print$2}'</msg>
<status status="PASS" endtime="20190402 11:48:05.798" starttime="20190402 11:48:05.797"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:05.800" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:05.800" starttime="20190402 11:48:05.799"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:05.801" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|grep "network-1"|awk '{print$2}''.</msg>
<msg timestamp="20190402 11:48:07.483" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:07.484" level="INFO">${stdout} = 56b50706-e978-4c9a-b1aa-69dc49e8f48c</msg>
<msg timestamp="20190402 11:48:07.484" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:07.484" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:07.484" starttime="20190402 11:48:05.800"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:07.486" level="INFO">${res} = {u'stdout': u'56b50706-e978-4c9a-b1aa-69dc49e8f48c', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:07.486" starttime="20190402 11:48:07.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:07.488" starttime="20190402 11:48:07.487"></status>
</kw>
<msg timestamp="20190402 11:48:07.489" level="INFO">&amp;{result} = { stdout=56b50706-e978-4c9a-b1aa-69dc49e8f48c | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:48:07.489" starttime="20190402 11:48:05.798"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:48:07.491" level="INFO">${output} = 56b50706-e978-4c9a-b1aa-69dc49e8f48c</msg>
<status status="PASS" endtime="20190402 11:48:07.491" starttime="20190402 11:48:07.490"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${splitted_output}</var>
</assign>
<msg timestamp="20190402 11:48:07.493" level="INFO">${splitted_output} = [u'56b50706-e978-4c9a-b1aa-69dc49e8f48c']</msg>
<status status="PASS" endtime="20190402 11:48:07.493" starttime="20190402 11:48:07.492"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${splitted_output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<msg timestamp="20190402 11:48:07.494" level="INFO">${net_id} = 56b50706-e978-4c9a-b1aa-69dc49e8f48c</msg>
<status status="PASS" endtime="20190402 11:48:07.494" starttime="20190402 11:48:07.493"></status>
</kw>
<msg timestamp="20190402 11:48:07.494" level="INFO">${net_id} = 56b50706-e978-4c9a-b1aa-69dc49e8f48c</msg>
<status status="PASS" endtime="20190402 11:48:07.495" starttime="20190402 11:48:05.795"></status>
</kw>
<kw name="Create Stack" library="OpenStack">
<doc>Create Stack</doc>
<arguments>
<arg>${stack_name_1}</arg>
<arg>${stack_template}</arg>
<arg>${net_id}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack create --template</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:07.497" level="INFO">${openstack_cmd} = openstack stack create --template</msg>
<status status="PASS" endtime="20190402 11:48:07.497" starttime="20190402 11:48:07.496"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${stack_template}</arg>
<arg>${stack_name}</arg>
<arg>--parameter "NetID=${net_id}"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:07.499" level="INFO">${cmd} = openstack stack create --template Utils/stack_template.yml stack-cirros-1 --parameter "NetID=56b50706-e978-4c9a-b1aa-69dc49e8f48c"</msg>
<status status="PASS" endtime="20190402 11:48:07.499" starttime="20190402 11:48:07.497"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:07.501" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:07.501" starttime="20190402 11:48:07.500"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:07.502" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack create --template Utils/stack_template.yml stack-cirros-1 --parameter "NetID=56b50706-e978-4c9a-b1aa-69dc49e8f48c"'.</msg>
<msg timestamp="20190402 11:48:10.588" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:10.588" level="INFO">${stdout} = +---------------------+---------------------------------------+
| Field               | Value                                 |
+---------------------+---------------------------------------+
| id    ...</msg>
<msg timestamp="20190402 11:48:10.588" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:10.588" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:10.588" starttime="20190402 11:48:07.501"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:10.589" level="INFO">${res} = {u'stdout': u'+---------------------+---------------------------------------+\n| Field               | Value                                 |\n+---------------------+---------------------------------...</msg>
<status status="PASS" endtime="20190402 11:48:10.589" starttime="20190402 11:48:10.588"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:10.590" starttime="20190402 11:48:10.589"></status>
</kw>
<msg timestamp="20190402 11:48:10.590" level="INFO">${output} = {u'stdout': u'+---------------------+---------------------------------------+\n| Field               | Value                                 |\n+---------------------+---------------------------------...</msg>
<status status="PASS" endtime="20190402 11:48:10.590" starttime="20190402 11:48:07.499"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>stack</arg>
<arg>${stack_name}</arg>
<arg>stack_status</arg>
<arg>CREATE_COMPLETE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>stack</arg>
<arg>${stack_name}</arg>
<arg>stack_status</arg>
<arg>CREATE_COMPLETE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:10.592" level="INFO">${openstack_cmd} = openstack stack show stack-cirros-1</msg>
<status status="PASS" endtime="20190402 11:48:10.592" starttime="20190402 11:48:10.591"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:10.592" level="INFO">${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:48:10.592" starttime="20190402 11:48:10.592"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:10.593" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:10.593" starttime="20190402 11:48:10.593"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:10.594" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:48:12.591" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:12.591" level="INFO">${stdout} = CREATE_IN_PROGRESS</msg>
<msg timestamp="20190402 11:48:12.591" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:12.591" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:12.591" starttime="20190402 11:48:10.594"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:12.593" level="INFO">${res} = {u'stdout': u'CREATE_IN_PROGRESS', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:12.593" starttime="20190402 11:48:12.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:12.594" starttime="20190402 11:48:12.593"></status>
</kw>
<msg timestamp="20190402 11:48:12.594" level="INFO">${result} = {u'stdout': u'CREATE_IN_PROGRESS', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:12.595" starttime="20190402 11:48:10.593"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:48:12.595" level="INFO">${value} = CREATE_IN_PROGRESS</msg>
<status status="PASS" endtime="20190402 11:48:12.596" starttime="20190402 11:48:12.595"></status>
</kw>
<msg timestamp="20190402 11:48:12.596" level="INFO">${current_value} = CREATE_IN_PROGRESS</msg>
<status status="PASS" endtime="20190402 11:48:12.596" starttime="20190402 11:48:10.591"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:48:12.598" level="FAIL">CREATE_IN_PROGRESS != CREATE_COMPLETE</msg>
<status status="FAIL" endtime="20190402 11:48:12.598" starttime="20190402 11:48:12.597"></status>
</kw>
<status status="FAIL" endtime="20190402 11:48:12.598" starttime="20190402 11:48:10.590"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>stack</arg>
<arg>${stack_name}</arg>
<arg>stack_status</arg>
<arg>CREATE_COMPLETE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:22.602" level="INFO">${openstack_cmd} = openstack stack show stack-cirros-1</msg>
<status status="PASS" endtime="20190402 11:48:22.602" starttime="20190402 11:48:22.601"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:22.603" level="INFO">${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:48:22.603" starttime="20190402 11:48:22.602"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:22.605" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:22.606" starttime="20190402 11:48:22.605"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:22.607" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:48:24.391" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:24.391" level="INFO">${stdout} = CREATE_COMPLETE</msg>
<msg timestamp="20190402 11:48:24.391" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:24.391" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:24.391" starttime="20190402 11:48:22.606"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:24.393" level="INFO">${res} = {u'stdout': u'CREATE_COMPLETE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:24.393" starttime="20190402 11:48:24.392"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:24.394" starttime="20190402 11:48:24.393"></status>
</kw>
<msg timestamp="20190402 11:48:24.394" level="INFO">${result} = {u'stdout': u'CREATE_COMPLETE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:24.394" starttime="20190402 11:48:22.603"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:48:24.395" level="INFO">${value} = CREATE_COMPLETE</msg>
<status status="PASS" endtime="20190402 11:48:24.395" starttime="20190402 11:48:24.395"></status>
</kw>
<msg timestamp="20190402 11:48:24.396" level="INFO">${current_value} = CREATE_COMPLETE</msg>
<status status="PASS" endtime="20190402 11:48:24.396" starttime="20190402 11:48:22.600"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:24.398" starttime="20190402 11:48:24.397"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:24.398" starttime="20190402 11:48:22.599"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:24.398" starttime="20190402 11:48:10.590"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:24.399" level="INFO">${openstack_cmd} = openstack server list</msg>
<status status="PASS" endtime="20190402 11:48:24.399" starttime="20190402 11:48:24.398"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:24.400" level="INFO">${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:48:24.400" starttime="20190402 11:48:24.399"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:24.401" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:24.402" starttime="20190402 11:48:24.401"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:24.403" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:48:26.136" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:26.136" level="INFO">${stdout} = 

stack-cirros-1-server-rwcc5eiike2x</msg>
<msg timestamp="20190402 11:48:26.136" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:26.136" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:26.137" starttime="20190402 11:48:24.402"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:26.138" level="INFO">${res} = {u'stdout': u'\n\nstack-cirros-1-server-rwcc5eiike2x', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:26.138" starttime="20190402 11:48:26.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:26.139" starttime="20190402 11:48:26.139"></status>
</kw>
<msg timestamp="20190402 11:48:26.140" level="INFO">&amp;{result} = { stdout=

stack-cirros-1-server-rwcc5eiike2x | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:48:26.140" starttime="20190402 11:48:24.400"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{vm_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:48:26.142" level="INFO">${response} = 

stack-cirros-1-server-rwcc5eiike2x</msg>
<status status="PASS" endtime="20190402 11:48:26.142" starttime="20190402 11:48:26.141"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:48:26.142" level="INFO">@{res_in_list} = [ stack-cirros-1-server-rwcc5eiike2x ]</msg>
<status status="PASS" endtime="20190402 11:48:26.143" starttime="20190402 11:48:26.142"></status>
</kw>
<msg timestamp="20190402 11:48:26.143" level="INFO">@{vm_list} = [ stack-cirros-1-server-rwcc5eiike2x ]</msg>
<status status="PASS" endtime="20190402 11:48:26.143" starttime="20190402 11:48:26.140"></status>
</kw>
<kw type="for" name="${vm} IN [ @{vm_list} ]">
<kw type="foritem" name="${vm} = stack-cirros-1-server-rwcc5eiike2x">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:26.147" level="INFO">${openstack_cmd} = openstack server show stack-cirros-1-server-rwcc5eiike2x</msg>
<status status="PASS" endtime="20190402 11:48:26.148" starttime="20190402 11:48:26.147"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:26.149" level="INFO">${cmd} = openstack server show stack-cirros-1-server-rwcc5eiike2x|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:48:26.149" starttime="20190402 11:48:26.148"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:26.150" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:26.150" starttime="20190402 11:48:26.150"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:26.152" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show stack-cirros-1-server-rwcc5eiike2x|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:48:27.785" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:27.785" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:48:27.785" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:27.785" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:27.785" starttime="20190402 11:48:26.151"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:27.788" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:27.788" starttime="20190402 11:48:27.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:27.789" starttime="20190402 11:48:27.788"></status>
</kw>
<msg timestamp="20190402 11:48:27.789" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:27.789" starttime="20190402 11:48:26.149"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:48:27.790" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:48:27.790" starttime="20190402 11:48:27.789"></status>
</kw>
<msg timestamp="20190402 11:48:27.791" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:48:27.791" starttime="20190402 11:48:26.146"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:27.792" starttime="20190402 11:48:27.791"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:27.792" starttime="20190402 11:48:26.145"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:27.792" starttime="20190402 11:48:26.144"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:27.796" level="INFO">${openstack_cmd} = openstack server show stack-cirros-1-server-rwcc5eiike2x</msg>
<status status="PASS" endtime="20190402 11:48:27.796" starttime="20190402 11:48:27.795"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:27.797" level="INFO">${cmd} = openstack server show stack-cirros-1-server-rwcc5eiike2x|grep -w power_state|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:48:27.797" starttime="20190402 11:48:27.796"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:27.799" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:27.799" starttime="20190402 11:48:27.798"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:27.800" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show stack-cirros-1-server-rwcc5eiike2x|grep -w power_state|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:48:29.433" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:29.433" level="INFO">${stdout} = Running</msg>
<msg timestamp="20190402 11:48:29.433" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:29.433" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:29.433" starttime="20190402 11:48:27.799"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:29.435" level="INFO">${res} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:29.435" starttime="20190402 11:48:29.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:29.436" starttime="20190402 11:48:29.435"></status>
</kw>
<msg timestamp="20190402 11:48:29.436" level="INFO">${result} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:29.437" starttime="20190402 11:48:27.797"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:48:29.438" level="INFO">${value} = Running</msg>
<status status="PASS" endtime="20190402 11:48:29.438" starttime="20190402 11:48:29.437"></status>
</kw>
<msg timestamp="20190402 11:48:29.438" level="INFO">${current_value} = Running</msg>
<status status="PASS" endtime="20190402 11:48:29.438" starttime="20190402 11:48:27.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:29.439" starttime="20190402 11:48:29.439"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:29.439" starttime="20190402 11:48:27.793"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:29.440" starttime="20190402 11:48:27.792"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:29.440" starttime="20190402 11:48:26.144"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:29.440" starttime="20190402 11:48:26.143"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:29.440" starttime="20190402 11:48:07.495"></status>
</kw>
<kw name="Create Stack" library="OpenStack">
<doc>Create Stack</doc>
<arguments>
<arg>${stack_name_2}</arg>
<arg>${stack_template}</arg>
<arg>${net_id}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack create --template</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:29.442" level="INFO">${openstack_cmd} = openstack stack create --template</msg>
<status status="PASS" endtime="20190402 11:48:29.442" starttime="20190402 11:48:29.441"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${stack_template}</arg>
<arg>${stack_name}</arg>
<arg>--parameter "NetID=${net_id}"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:29.443" level="INFO">${cmd} = openstack stack create --template Utils/stack_template.yml stack-cirros-2 --parameter "NetID=56b50706-e978-4c9a-b1aa-69dc49e8f48c"</msg>
<status status="PASS" endtime="20190402 11:48:29.443" starttime="20190402 11:48:29.442"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:29.445" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:29.445" starttime="20190402 11:48:29.444"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:29.447" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack create --template Utils/stack_template.yml stack-cirros-2 --parameter "NetID=56b50706-e978-4c9a-b1aa-69dc49e8f48c"'.</msg>
<msg timestamp="20190402 11:48:32.181" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:32.182" level="INFO">${stdout} = +---------------------+---------------------------------------+
| Field               | Value                                 |
+---------------------+---------------------------------------+
| id    ...</msg>
<msg timestamp="20190402 11:48:32.182" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:32.182" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:32.182" starttime="20190402 11:48:29.445"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:32.184" level="INFO">${res} = {u'stdout': u'+---------------------+---------------------------------------+\n| Field               | Value                                 |\n+---------------------+---------------------------------...</msg>
<status status="PASS" endtime="20190402 11:48:32.184" starttime="20190402 11:48:32.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:32.185" starttime="20190402 11:48:32.184"></status>
</kw>
<msg timestamp="20190402 11:48:32.186" level="INFO">${output} = {u'stdout': u'+---------------------+---------------------------------------+\n| Field               | Value                                 |\n+---------------------+---------------------------------...</msg>
<status status="PASS" endtime="20190402 11:48:32.186" starttime="20190402 11:48:29.443"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>stack</arg>
<arg>${stack_name}</arg>
<arg>stack_status</arg>
<arg>CREATE_COMPLETE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>stack</arg>
<arg>${stack_name}</arg>
<arg>stack_status</arg>
<arg>CREATE_COMPLETE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:32.190" level="INFO">${openstack_cmd} = openstack stack show stack-cirros-2</msg>
<status status="PASS" endtime="20190402 11:48:32.190" starttime="20190402 11:48:32.189"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:32.191" level="INFO">${cmd} = openstack stack show stack-cirros-2|grep -w stack_status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:48:32.191" starttime="20190402 11:48:32.191"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:32.193" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:32.193" starttime="20190402 11:48:32.193"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:32.194" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack show stack-cirros-2|grep -w stack_status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:48:33.576" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:33.577" level="INFO">${stdout} = CREATE_IN_PROGRESS</msg>
<msg timestamp="20190402 11:48:33.577" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:33.577" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:33.577" starttime="20190402 11:48:32.194"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:33.579" level="INFO">${res} = {u'stdout': u'CREATE_IN_PROGRESS', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:33.579" starttime="20190402 11:48:33.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:33.580" starttime="20190402 11:48:33.579"></status>
</kw>
<msg timestamp="20190402 11:48:33.580" level="INFO">${result} = {u'stdout': u'CREATE_IN_PROGRESS', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:33.581" starttime="20190402 11:48:32.192"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:48:33.581" level="INFO">${value} = CREATE_IN_PROGRESS</msg>
<status status="PASS" endtime="20190402 11:48:33.582" starttime="20190402 11:48:33.581"></status>
</kw>
<msg timestamp="20190402 11:48:33.582" level="INFO">${current_value} = CREATE_IN_PROGRESS</msg>
<status status="PASS" endtime="20190402 11:48:33.582" starttime="20190402 11:48:32.188"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:48:33.584" level="FAIL">CREATE_IN_PROGRESS != CREATE_COMPLETE</msg>
<status status="FAIL" endtime="20190402 11:48:33.584" starttime="20190402 11:48:33.583"></status>
</kw>
<status status="FAIL" endtime="20190402 11:48:33.584" starttime="20190402 11:48:32.187"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>stack</arg>
<arg>${stack_name}</arg>
<arg>stack_status</arg>
<arg>CREATE_COMPLETE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:43.588" level="INFO">${openstack_cmd} = openstack stack show stack-cirros-2</msg>
<status status="PASS" endtime="20190402 11:48:43.588" starttime="20190402 11:48:43.587"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:43.589" level="INFO">${cmd} = openstack stack show stack-cirros-2|grep -w stack_status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:48:43.589" starttime="20190402 11:48:43.588"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:43.591" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:43.591" starttime="20190402 11:48:43.590"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:43.592" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack show stack-cirros-2|grep -w stack_status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:48:45.276" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:45.277" level="INFO">${stdout} = CREATE_IN_PROGRESS</msg>
<msg timestamp="20190402 11:48:45.277" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:45.277" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:45.277" starttime="20190402 11:48:43.591"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:45.279" level="INFO">${res} = {u'stdout': u'CREATE_IN_PROGRESS', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:45.280" starttime="20190402 11:48:45.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:45.281" starttime="20190402 11:48:45.280"></status>
</kw>
<msg timestamp="20190402 11:48:45.281" level="INFO">${result} = {u'stdout': u'CREATE_IN_PROGRESS', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:45.281" starttime="20190402 11:48:43.589"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:48:45.282" level="INFO">${value} = CREATE_IN_PROGRESS</msg>
<status status="PASS" endtime="20190402 11:48:45.282" starttime="20190402 11:48:45.282"></status>
</kw>
<msg timestamp="20190402 11:48:45.283" level="INFO">${current_value} = CREATE_IN_PROGRESS</msg>
<status status="PASS" endtime="20190402 11:48:45.283" starttime="20190402 11:48:43.586"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<msg timestamp="20190402 11:48:45.284" level="FAIL">CREATE_IN_PROGRESS != CREATE_COMPLETE</msg>
<status status="FAIL" endtime="20190402 11:48:45.285" starttime="20190402 11:48:45.283"></status>
</kw>
<status status="FAIL" endtime="20190402 11:48:45.285" starttime="20190402 11:48:43.585"></status>
</kw>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>stack</arg>
<arg>${stack_name}</arg>
<arg>stack_status</arg>
<arg>CREATE_COMPLETE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:55.289" level="INFO">${openstack_cmd} = openstack stack show stack-cirros-2</msg>
<status status="PASS" endtime="20190402 11:48:55.289" starttime="20190402 11:48:55.288"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:55.290" level="INFO">${cmd} = openstack stack show stack-cirros-2|grep -w stack_status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:48:55.290" starttime="20190402 11:48:55.289"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:55.292" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:55.293" starttime="20190402 11:48:55.292"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:55.294" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack show stack-cirros-2|grep -w stack_status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:48:56.828" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:56.828" level="INFO">${stdout} = CREATE_COMPLETE</msg>
<msg timestamp="20190402 11:48:56.829" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:56.829" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:56.829" starttime="20190402 11:48:55.293"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:56.829" level="INFO">${res} = {u'stdout': u'CREATE_COMPLETE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:56.829" starttime="20190402 11:48:56.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:56.830" starttime="20190402 11:48:56.829"></status>
</kw>
<msg timestamp="20190402 11:48:56.830" level="INFO">${result} = {u'stdout': u'CREATE_COMPLETE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:56.830" starttime="20190402 11:48:55.290"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:48:56.830" level="INFO">${value} = CREATE_COMPLETE</msg>
<status status="PASS" endtime="20190402 11:48:56.830" starttime="20190402 11:48:56.830"></status>
</kw>
<msg timestamp="20190402 11:48:56.830" level="INFO">${current_value} = CREATE_COMPLETE</msg>
<status status="PASS" endtime="20190402 11:48:56.830" starttime="20190402 11:48:55.287"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:56.831" starttime="20190402 11:48:56.831"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:56.831" starttime="20190402 11:48:55.286"></status>
</kw>
<status status="PASS" endtime="20190402 11:48:56.831" starttime="20190402 11:48:32.186"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:56.831" level="INFO">${openstack_cmd} = openstack server list</msg>
<status status="PASS" endtime="20190402 11:48:56.831" starttime="20190402 11:48:56.831"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:56.832" level="INFO">${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:48:56.832" starttime="20190402 11:48:56.831"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:56.832" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:56.832" starttime="20190402 11:48:56.832"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:56.833" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:48:58.765" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:48:58.765" level="INFO">${stdout} = 

stack-cirros-2-server-s2ufxj2rnjhh
stack-cirros-1-server-rwcc5eiike2x</msg>
<msg timestamp="20190402 11:48:58.765" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:48:58.766" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:48:58.766" starttime="20190402 11:48:56.832"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:48:58.767" level="INFO">${res} = {u'stdout': u'\n\nstack-cirros-2-server-s2ufxj2rnjhh\nstack-cirros-1-server-rwcc5eiike2x', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:48:58.768" starttime="20190402 11:48:58.766"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:48:58.768" starttime="20190402 11:48:58.768"></status>
</kw>
<msg timestamp="20190402 11:48:58.769" level="INFO">&amp;{result} = { stdout=

stack-cirros-2-server-s2ufxj2rnjhh
stack-cirros-1-server-rwcc5eiike2x | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:48:58.769" starttime="20190402 11:48:56.832"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{vm_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:48:58.771" level="INFO">${response} = 

stack-cirros-2-server-s2ufxj2rnjhh
stack-cirros-1-server-rwcc5eiike2x</msg>
<status status="PASS" endtime="20190402 11:48:58.771" starttime="20190402 11:48:58.770"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:48:58.772" level="INFO">@{res_in_list} = [ stack-cirros-2-server-s2ufxj2rnjhh | stack-cirros-1-server-rwcc5eiike2x ]</msg>
<status status="PASS" endtime="20190402 11:48:58.772" starttime="20190402 11:48:58.771"></status>
</kw>
<msg timestamp="20190402 11:48:58.772" level="INFO">@{vm_list} = [ stack-cirros-2-server-s2ufxj2rnjhh | stack-cirros-1-server-rwcc5eiike2x ]</msg>
<status status="PASS" endtime="20190402 11:48:58.772" starttime="20190402 11:48:58.770"></status>
</kw>
<kw type="for" name="${vm} IN [ @{vm_list} ]">
<kw type="foritem" name="${vm} = stack-cirros-2-server-s2ufxj2rnjhh">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:48:58.776" level="INFO">${openstack_cmd} = openstack server show stack-cirros-2-server-s2ufxj2rnjhh</msg>
<status status="PASS" endtime="20190402 11:48:58.776" starttime="20190402 11:48:58.775"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:48:58.777" level="INFO">${cmd} = openstack server show stack-cirros-2-server-s2ufxj2rnjhh|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:48:58.777" starttime="20190402 11:48:58.776"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:48:58.779" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:48:58.779" starttime="20190402 11:48:58.779"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:48:58.780" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show stack-cirros-2-server-s2ufxj2rnjhh|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:49:00.413" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:00.414" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:49:00.414" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:00.414" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:00.414" starttime="20190402 11:48:58.779"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:00.418" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:00.419" starttime="20190402 11:49:00.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:00.420" starttime="20190402 11:49:00.419"></status>
</kw>
<msg timestamp="20190402 11:49:00.420" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:00.420" starttime="20190402 11:48:58.778"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:49:00.421" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:49:00.421" starttime="20190402 11:49:00.421"></status>
</kw>
<msg timestamp="20190402 11:49:00.422" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:49:00.422" starttime="20190402 11:48:58.775"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:00.423" starttime="20190402 11:49:00.422"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:00.423" starttime="20190402 11:48:58.774"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:00.424" starttime="20190402 11:48:58.773"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:00.428" level="INFO">${openstack_cmd} = openstack server show stack-cirros-2-server-s2ufxj2rnjhh</msg>
<status status="PASS" endtime="20190402 11:49:00.428" starttime="20190402 11:49:00.427"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:00.429" level="INFO">${cmd} = openstack server show stack-cirros-2-server-s2ufxj2rnjhh|grep -w power_state|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:49:00.429" starttime="20190402 11:49:00.428"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:00.431" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:00.431" starttime="20190402 11:49:00.430"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:00.432" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show stack-cirros-2-server-s2ufxj2rnjhh|grep -w power_state|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:49:02.065" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:02.065" level="INFO">${stdout} = Running</msg>
<msg timestamp="20190402 11:49:02.065" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:02.065" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:02.065" starttime="20190402 11:49:00.431"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:02.067" level="INFO">${res} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:02.067" starttime="20190402 11:49:02.066"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:02.068" starttime="20190402 11:49:02.067"></status>
</kw>
<msg timestamp="20190402 11:49:02.069" level="INFO">${result} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:02.069" starttime="20190402 11:49:00.429"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:49:02.070" level="INFO">${value} = Running</msg>
<status status="PASS" endtime="20190402 11:49:02.070" starttime="20190402 11:49:02.069"></status>
</kw>
<msg timestamp="20190402 11:49:02.070" level="INFO">${current_value} = Running</msg>
<status status="PASS" endtime="20190402 11:49:02.070" starttime="20190402 11:49:00.426"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:02.071" starttime="20190402 11:49:02.071"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:02.072" starttime="20190402 11:49:00.425"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:02.072" starttime="20190402 11:49:00.424"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:02.072" starttime="20190402 11:48:58.773"></status>
</kw>
<kw type="foritem" name="${vm} = stack-cirros-1-server-rwcc5eiike2x">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm}</arg>
<arg>status</arg>
<arg>ACTIVE</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:02.075" level="INFO">${openstack_cmd} = openstack server show stack-cirros-1-server-rwcc5eiike2x</msg>
<status status="PASS" endtime="20190402 11:49:02.075" starttime="20190402 11:49:02.075"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:02.076" level="INFO">${cmd} = openstack server show stack-cirros-1-server-rwcc5eiike2x|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:49:02.076" starttime="20190402 11:49:02.076"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:02.078" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:02.078" starttime="20190402 11:49:02.078"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:02.079" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show stack-cirros-1-server-rwcc5eiike2x|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:49:03.863" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:03.864" level="INFO">${stdout} = ACTIVE</msg>
<msg timestamp="20190402 11:49:03.864" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:03.864" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:03.864" starttime="20190402 11:49:02.079"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:03.866" level="INFO">${res} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:03.866" starttime="20190402 11:49:03.864"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:03.867" starttime="20190402 11:49:03.866"></status>
</kw>
<msg timestamp="20190402 11:49:03.868" level="INFO">${result} = {u'stdout': u'ACTIVE', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:03.868" starttime="20190402 11:49:02.077"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:49:03.869" level="INFO">${value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:49:03.870" starttime="20190402 11:49:03.868"></status>
</kw>
<msg timestamp="20190402 11:49:03.870" level="INFO">${current_value} = ACTIVE</msg>
<status status="PASS" endtime="20190402 11:49:03.870" starttime="20190402 11:49:02.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:03.872" starttime="20190402 11:49:03.871"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:03.872" starttime="20190402 11:49:02.073"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:03.872" starttime="20190402 11:49:02.072"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>server</arg>
<arg>${vm}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>server</arg>
<arg>${vm}</arg>
<arg>power_state</arg>
<arg>Running</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:03.876" level="INFO">${openstack_cmd} = openstack server show stack-cirros-1-server-rwcc5eiike2x</msg>
<status status="PASS" endtime="20190402 11:49:03.876" starttime="20190402 11:49:03.876"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:03.878" level="INFO">${cmd} = openstack server show stack-cirros-1-server-rwcc5eiike2x|grep -w power_state|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:49:03.878" starttime="20190402 11:49:03.877"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:03.880" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:03.880" starttime="20190402 11:49:03.879"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:03.881" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server show stack-cirros-1-server-rwcc5eiike2x|grep -w power_state|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:49:05.516" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:05.516" level="INFO">${stdout} = Running</msg>
<msg timestamp="20190402 11:49:05.517" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:05.517" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:05.517" starttime="20190402 11:49:03.880"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:05.518" level="INFO">${res} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:05.518" starttime="20190402 11:49:05.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:05.518" starttime="20190402 11:49:05.518"></status>
</kw>
<msg timestamp="20190402 11:49:05.518" level="INFO">${result} = {u'stdout': u'Running', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:05.519" starttime="20190402 11:49:03.878"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:49:05.519" level="INFO">${value} = Running</msg>
<status status="PASS" endtime="20190402 11:49:05.519" starttime="20190402 11:49:05.519"></status>
</kw>
<msg timestamp="20190402 11:49:05.519" level="INFO">${current_value} = Running</msg>
<status status="PASS" endtime="20190402 11:49:05.519" starttime="20190402 11:49:03.874"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:05.520" starttime="20190402 11:49:05.520"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:05.520" starttime="20190402 11:49:03.873"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:05.520" starttime="20190402 11:49:03.873"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:05.520" starttime="20190402 11:49:02.072"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:05.520" starttime="20190402 11:48:58.773"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:05.521" starttime="20190402 11:48:29.440"></status>
</kw>
<doc>Create a Cirros instance using a heat template</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:49:05.521" critical="yes" starttime="20190402 11:48:05.781"></status>
</test>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>OpenStack.Openstack Cleanup All</arg>
<arg>Utils.Stx Suite TearDown</arg>
</arguments>
<kw name="Openstack Cleanup All" library="OpenStack">
<doc>Delete all instances, images, flavors, networks and
keypairs generated during tests.</doc>
<kw name="Delete All Instances" library="OpenStack">
<doc>Get a list of all existing instances to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:05.523" level="INFO">${openstack_cmd} = openstack server list</msg>
<status status="PASS" endtime="20190402 11:49:05.523" starttime="20190402 11:49:05.523"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:05.524" level="INFO">${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:49:05.524" starttime="20190402 11:49:05.523"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:05.525" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:05.525" starttime="20190402 11:49:05.524"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:05.525" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:49:07.111" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:07.112" level="INFO">${stdout} = 

stack-cirros-2-server-s2ufxj2rnjhh
stack-cirros-1-server-rwcc5eiike2x</msg>
<msg timestamp="20190402 11:49:07.112" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:07.112" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:07.112" starttime="20190402 11:49:05.525"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:07.112" level="INFO">${res} = {u'stdout': u'\n\nstack-cirros-2-server-s2ufxj2rnjhh\nstack-cirros-1-server-rwcc5eiike2x', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:07.112" starttime="20190402 11:49:07.112"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:07.113" starttime="20190402 11:49:07.112"></status>
</kw>
<msg timestamp="20190402 11:49:07.113" level="INFO">&amp;{result} = { stdout=

stack-cirros-2-server-s2ufxj2rnjhh
stack-cirros-1-server-rwcc5eiike2x | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:07.113" starttime="20190402 11:49:05.524"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{vm_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:49:07.114" level="INFO">${response} = 

stack-cirros-2-server-s2ufxj2rnjhh
stack-cirros-1-server-rwcc5eiike2x</msg>
<status status="PASS" endtime="20190402 11:49:07.114" starttime="20190402 11:49:07.113"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:49:07.114" level="INFO">@{res_in_list} = [ stack-cirros-2-server-s2ufxj2rnjhh | stack-cirros-1-server-rwcc5eiike2x ]</msg>
<status status="PASS" endtime="20190402 11:49:07.114" starttime="20190402 11:49:07.114"></status>
</kw>
<msg timestamp="20190402 11:49:07.114" level="INFO">@{vm_list} = [ stack-cirros-2-server-s2ufxj2rnjhh | stack-cirros-1-server-rwcc5eiike2x ]</msg>
<status status="PASS" endtime="20190402 11:49:07.114" starttime="20190402 11:49:07.113"></status>
</kw>
<kw type="for" name="${vm} IN [ @{vm_list} ]">
<kw type="foritem" name="${vm} = stack-cirros-2-server-s2ufxj2rnjhh">
<kw name="Delete Instance" library="OpenStack">
<doc>Delete an specific instance.</doc>
<arguments>
<arg>${vm}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:07.115" level="INFO">${openstack_cmd} = openstack server delete</msg>
<status status="PASS" endtime="20190402 11:49:07.115" starttime="20190402 11:49:07.115"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${vm}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:07.115" level="INFO">${cmd} = openstack server delete stack-cirros-2-server-s2ufxj2rnjhh</msg>
<status status="PASS" endtime="20190402 11:49:07.115" starttime="20190402 11:49:07.115"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:07.116" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:07.116" starttime="20190402 11:49:07.116"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:07.117" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server delete stack-cirros-2-server-s2ufxj2rnjhh'.</msg>
<msg timestamp="20190402 11:49:08.863" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:08.864" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:08.864" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:08.864" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:08.864" starttime="20190402 11:49:07.116"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:08.866" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:08.866" starttime="20190402 11:49:08.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:08.867" starttime="20190402 11:49:08.867"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:08.868" starttime="20190402 11:49:07.116"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:08.868" starttime="20190402 11:49:07.114"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:08.868" starttime="20190402 11:49:07.114"></status>
</kw>
<kw type="foritem" name="${vm} = stack-cirros-1-server-rwcc5eiike2x">
<kw name="Delete Instance" library="OpenStack">
<doc>Delete an specific instance.</doc>
<arguments>
<arg>${vm}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:08.870" level="INFO">${openstack_cmd} = openstack server delete</msg>
<status status="PASS" endtime="20190402 11:49:08.870" starttime="20190402 11:49:08.870"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${vm}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:08.871" level="INFO">${cmd} = openstack server delete stack-cirros-1-server-rwcc5eiike2x</msg>
<status status="PASS" endtime="20190402 11:49:08.871" starttime="20190402 11:49:08.870"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:08.873" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:08.873" starttime="20190402 11:49:08.872"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:08.875" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server delete stack-cirros-1-server-rwcc5eiike2x'.</msg>
<msg timestamp="20190402 11:49:10.658" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:10.659" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:10.659" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:10.659" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:10.659" starttime="20190402 11:49:08.873"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:10.662" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:10.662" starttime="20190402 11:49:10.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:10.663" starttime="20190402 11:49:10.662"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:10.663" starttime="20190402 11:49:08.871"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:10.664" starttime="20190402 11:49:08.869"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:10.664" starttime="20190402 11:49:08.868"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:10.664" starttime="20190402 11:49:07.114"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:10.664" starttime="20190402 11:49:05.522"></status>
</kw>
<kw name="Delete All Images" library="OpenStack">
<doc>Get a list of all existing images to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:10.666" level="INFO">${openstack_cmd} = openstack image list</msg>
<status status="PASS" endtime="20190402 11:49:10.666" starttime="20190402 11:49:10.665"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "Cirros"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:10.667" level="INFO">${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"</msg>
<status status="PASS" endtime="20190402 11:49:10.667" starttime="20190402 11:49:10.666"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:10.669" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:10.669" starttime="20190402 11:49:10.669"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:10.670" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.</msg>
<msg timestamp="20190402 11:49:12.010" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:12.010" level="INFO">${stdout} = 

cirros</msg>
<msg timestamp="20190402 11:49:12.011" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:12.011" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:12.011" starttime="20190402 11:49:10.670"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:12.013" level="INFO">${res} = {u'stdout': u'\n\ncirros', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:12.013" starttime="20190402 11:49:12.011"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:12.014" starttime="20190402 11:49:12.013"></status>
</kw>
<msg timestamp="20190402 11:49:12.015" level="INFO">&amp;{result} = { stdout=

cirros | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:12.015" starttime="20190402 11:49:10.668"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{image_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:49:12.016" level="INFO">${response} = 

cirros</msg>
<status status="PASS" endtime="20190402 11:49:12.016" starttime="20190402 11:49:12.016"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:49:12.018" level="INFO">@{res_in_list} = [ cirros ]</msg>
<status status="PASS" endtime="20190402 11:49:12.018" starttime="20190402 11:49:12.017"></status>
</kw>
<msg timestamp="20190402 11:49:12.018" level="INFO">@{image_list} = [ cirros ]</msg>
<status status="PASS" endtime="20190402 11:49:12.018" starttime="20190402 11:49:12.015"></status>
</kw>
<kw type="for" name="${image} IN [ @{image_list} ]">
<kw type="foritem" name="${image} = cirros">
<kw name="Delete Image" library="OpenStack">
<doc>Delete an specific image.</doc>
<arguments>
<arg>${image}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:12.020" level="INFO">${openstack_cmd} = openstack image delete</msg>
<status status="PASS" endtime="20190402 11:49:12.020" starttime="20190402 11:49:12.020"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${image}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:12.021" level="INFO">${cmd} = openstack image delete cirros</msg>
<status status="PASS" endtime="20190402 11:49:12.021" starttime="20190402 11:49:12.020"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:12.023" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:12.023" starttime="20190402 11:49:12.022"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:12.024" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image delete cirros'.</msg>
<msg timestamp="20190402 11:49:14.114" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:14.114" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:14.114" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:14.114" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:14.115" starttime="20190402 11:49:12.023"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:14.116" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:14.116" starttime="20190402 11:49:14.115"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:14.118" starttime="20190402 11:49:14.117"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:14.118" starttime="20190402 11:49:12.021"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:14.118" starttime="20190402 11:49:12.019"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:14.118" starttime="20190402 11:49:12.019"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:14.119" starttime="20190402 11:49:12.019"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:14.119" starttime="20190402 11:49:10.665"></status>
</kw>
<kw name="Delete All Flavors" library="OpenStack">
<doc>Get a list of all existing flavors to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:14.120" level="INFO">${openstack_cmd} = openstack flavor list</msg>
<status status="PASS" endtime="20190402 11:49:14.120" starttime="20190402 11:49:14.120"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "m1"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:14.121" level="INFO">${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"</msg>
<status status="PASS" endtime="20190402 11:49:14.121" starttime="20190402 11:49:14.121"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:14.123" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:14.123" starttime="20190402 11:49:14.123"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:14.125" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.</msg>
<msg timestamp="20190402 11:49:15.556" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:15.556" level="INFO">${stdout} = 

f1.small</msg>
<msg timestamp="20190402 11:49:15.557" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:15.557" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:15.557" starttime="20190402 11:49:14.124"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:15.559" level="INFO">${res} = {u'stdout': u'\n\nf1.small', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:15.559" starttime="20190402 11:49:15.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:15.560" starttime="20190402 11:49:15.559"></status>
</kw>
<msg timestamp="20190402 11:49:15.560" level="INFO">&amp;{result} = { stdout=

f1.small | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:15.561" starttime="20190402 11:49:14.122"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{flavor_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:49:15.562" level="INFO">${response} = 

f1.small</msg>
<status status="PASS" endtime="20190402 11:49:15.562" starttime="20190402 11:49:15.562"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:49:15.563" level="INFO">@{res_in_list} = [ f1.small ]</msg>
<status status="PASS" endtime="20190402 11:49:15.564" starttime="20190402 11:49:15.563"></status>
</kw>
<msg timestamp="20190402 11:49:15.564" level="INFO">@{flavor_list} = [ f1.small ]</msg>
<status status="PASS" endtime="20190402 11:49:15.564" starttime="20190402 11:49:15.561"></status>
</kw>
<kw type="for" name="${flavor} IN [ @{flavor_list} ]">
<kw type="foritem" name="${flavor} = f1.small">
<kw name="Delete Flavor" library="OpenStack">
<doc>Delete an specific flavor.</doc>
<arguments>
<arg>${flavor}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:15.566" level="INFO">${openstack_cmd} = openstack flavor delete</msg>
<status status="PASS" endtime="20190402 11:49:15.566" starttime="20190402 11:49:15.565"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${flavor}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:15.567" level="INFO">${cmd} = openstack flavor delete f1.small</msg>
<status status="PASS" endtime="20190402 11:49:15.567" starttime="20190402 11:49:15.566"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:15.569" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:15.569" starttime="20190402 11:49:15.569"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:15.570" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor delete f1.small'.</msg>
<msg timestamp="20190402 11:49:17.053" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:17.053" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:17.054" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:17.054" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:17.054" starttime="20190402 11:49:15.570"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:17.055" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:17.055" starttime="20190402 11:49:17.054"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:17.056" starttime="20190402 11:49:17.056"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:17.057" starttime="20190402 11:49:15.567"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:17.057" starttime="20190402 11:49:15.565"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:17.057" starttime="20190402 11:49:15.565"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:17.057" starttime="20190402 11:49:15.564"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:17.058" starttime="20190402 11:49:14.119"></status>
</kw>
<kw name="Delete All Networks" library="OpenStack">
<doc>Get a list of all existing networks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:17.059" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190402 11:49:17.059" starttime="20190402 11:49:17.059"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "private"</arg>
<arg>grep -v "public"</arg>
<arg>grep -v "external"</arg>
<arg>grep -v "internal"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:17.060" level="INFO">${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"</msg>
<status status="PASS" endtime="20190402 11:49:17.060" starttime="20190402 11:49:17.059"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:17.062" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:17.062" starttime="20190402 11:49:17.062"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:17.063" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.</msg>
<msg timestamp="20190402 11:49:18.445" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:18.445" level="INFO">${stdout} = 

network-1</msg>
<msg timestamp="20190402 11:49:18.445" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:18.445" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:18.445" starttime="20190402 11:49:17.063"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:18.446" level="INFO">${res} = {u'stdout': u'\n\nnetwork-1', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:18.446" starttime="20190402 11:49:18.446"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:18.447" starttime="20190402 11:49:18.447"></status>
</kw>
<msg timestamp="20190402 11:49:18.447" level="INFO">&amp;{result} = { stdout=

network-1 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:18.447" starttime="20190402 11:49:17.061"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{network_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:49:18.448" level="INFO">${response} = 

network-1</msg>
<status status="PASS" endtime="20190402 11:49:18.448" starttime="20190402 11:49:18.448"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:49:18.449" level="INFO">@{res_in_list} = [ network-1 ]</msg>
<status status="PASS" endtime="20190402 11:49:18.449" starttime="20190402 11:49:18.449"></status>
</kw>
<msg timestamp="20190402 11:49:18.449" level="INFO">@{network_list} = [ network-1 ]</msg>
<status status="PASS" endtime="20190402 11:49:18.449" starttime="20190402 11:49:18.448"></status>
</kw>
<kw type="for" name="${network} IN [ @{network_list} ]">
<kw type="foritem" name="${network} = network-1">
<kw name="Delete Network" library="OpenStack">
<doc>Delete an specific network.</doc>
<arguments>
<arg>${network}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:18.450" level="INFO">${openstack_cmd} = openstack network delete</msg>
<status status="PASS" endtime="20190402 11:49:18.450" starttime="20190402 11:49:18.450"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${network}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:18.451" level="INFO">${cmd} = openstack network delete network-1</msg>
<status status="PASS" endtime="20190402 11:49:18.451" starttime="20190402 11:49:18.450"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:18.452" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:18.452" starttime="20190402 11:49:18.452"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:18.453" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network delete network-1'.</msg>
<msg timestamp="20190402 11:49:21.486" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:21.487" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:21.487" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:21.487" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:21.487" starttime="20190402 11:49:18.452"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:21.489" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:21.489" starttime="20190402 11:49:21.488"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:21.490" starttime="20190402 11:49:21.489"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:21.490" starttime="20190402 11:49:18.451"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:21.490" starttime="20190402 11:49:18.450"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:21.491" starttime="20190402 11:49:18.449"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:21.491" starttime="20190402 11:49:18.449"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:21.491" starttime="20190402 11:49:17.058"></status>
</kw>
<kw name="Delete All KeyPairs" library="OpenStack">
<doc>Get a list of all existing keypais to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack keypair list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:21.493" level="INFO">${openstack_cmd} = openstack keypair list</msg>
<status status="PASS" endtime="20190402 11:49:21.493" starttime="20190402 11:49:21.492"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:21.494" level="INFO">${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:49:21.494" starttime="20190402 11:49:21.493"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:21.496" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:21.496" starttime="20190402 11:49:21.495"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:21.497" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack keypair list|awk '{print$2}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:49:22.829" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:22.829" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:22.830" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:22.830" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:22.830" starttime="20190402 11:49:21.496"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:22.831" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:22.831" starttime="20190402 11:49:22.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:22.832" starttime="20190402 11:49:22.832"></status>
</kw>
<msg timestamp="20190402 11:49:22.833" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:22.833" starttime="20190402 11:49:21.494"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{key_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:49:22.834" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:49:22.835" starttime="20190402 11:49:22.834"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:49:22.835" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:49:22.835" starttime="20190402 11:49:22.835"></status>
</kw>
<msg timestamp="20190402 11:49:22.836" level="INFO">@{key_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:49:22.836" starttime="20190402 11:49:22.833"></status>
</kw>
<kw type="for" name="${key} IN [ @{key_list} ]">
<status status="PASS" endtime="20190402 11:49:22.836" starttime="20190402 11:49:22.836"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:22.836" starttime="20190402 11:49:21.491"></status>
</kw>
<kw name="Delete All Snapshots" library="OpenStack">
<doc>Get a list of all existing snapshots to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:22.838" level="INFO">${openstack_cmd} = openstack volume snapshot list</msg>
<status status="PASS" endtime="20190402 11:49:22.838" starttime="20190402 11:49:22.837"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:22.839" level="INFO">${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:49:22.839" starttime="20190402 11:49:22.838"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:22.840" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:22.840" starttime="20190402 11:49:22.840"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:22.841" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:49:24.180" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:24.180" level="INFO">${stdout} = 

snap-cirros-2
snap-cirros-1</msg>
<msg timestamp="20190402 11:49:24.180" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:24.180" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:24.180" starttime="20190402 11:49:22.841"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:24.182" level="INFO">${res} = {u'stdout': u'\n\nsnap-cirros-2\nsnap-cirros-1', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:24.182" starttime="20190402 11:49:24.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:24.183" starttime="20190402 11:49:24.182"></status>
</kw>
<msg timestamp="20190402 11:49:24.184" level="INFO">&amp;{result} = { stdout=

snap-cirros-2
snap-cirros-1 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:24.184" starttime="20190402 11:49:22.839"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{snapshot_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:49:24.187" level="INFO">${response} = 

snap-cirros-2
snap-cirros-1</msg>
<status status="PASS" endtime="20190402 11:49:24.187" starttime="20190402 11:49:24.186"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:49:24.188" level="INFO">@{res_in_list} = [ snap-cirros-2 | snap-cirros-1 ]</msg>
<status status="PASS" endtime="20190402 11:49:24.188" starttime="20190402 11:49:24.187"></status>
</kw>
<msg timestamp="20190402 11:49:24.188" level="INFO">@{snapshot_list} = [ snap-cirros-2 | snap-cirros-1 ]</msg>
<status status="PASS" endtime="20190402 11:49:24.189" starttime="20190402 11:49:24.185"></status>
</kw>
<kw type="for" name="${snapshot} IN [ @{snapshot_list} ]">
<kw type="foritem" name="${snapshot} = snap-cirros-2">
<kw name="Delete Snapshot" library="OpenStack">
<doc>Delete an specific snapshot.</doc>
<arguments>
<arg>${snapshot}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:24.190" level="INFO">${openstack_cmd} = openstack volume snapshot delete</msg>
<status status="PASS" endtime="20190402 11:49:24.190" starttime="20190402 11:49:24.190"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${snapshot}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:24.191" level="INFO">${cmd} = openstack volume snapshot delete snap-cirros-2</msg>
<status status="PASS" endtime="20190402 11:49:24.191" starttime="20190402 11:49:24.191"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:24.193" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:24.193" starttime="20190402 11:49:24.193"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:24.195" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot delete snap-cirros-2'.</msg>
<msg timestamp="20190402 11:49:25.678" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:25.678" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:25.678" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:25.678" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:25.678" starttime="20190402 11:49:24.194"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:25.679" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:25.679" starttime="20190402 11:49:25.678"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:25.680" starttime="20190402 11:49:25.679"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:25.680" starttime="20190402 11:49:24.192"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:25.680" starttime="20190402 11:49:24.189"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:25.680" starttime="20190402 11:49:24.189"></status>
</kw>
<kw type="foritem" name="${snapshot} = snap-cirros-1">
<kw name="Delete Snapshot" library="OpenStack">
<doc>Delete an specific snapshot.</doc>
<arguments>
<arg>${snapshot}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:25.682" level="INFO">${openstack_cmd} = openstack volume snapshot delete</msg>
<status status="PASS" endtime="20190402 11:49:25.682" starttime="20190402 11:49:25.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${snapshot}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:25.682" level="INFO">${cmd} = openstack volume snapshot delete snap-cirros-1</msg>
<status status="PASS" endtime="20190402 11:49:25.682" starttime="20190402 11:49:25.682"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:25.684" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:25.684" starttime="20190402 11:49:25.683"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:25.685" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot delete snap-cirros-1'.</msg>
<msg timestamp="20190402 11:49:27.096" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:27.097" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:27.097" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:27.097" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:27.097" starttime="20190402 11:49:25.684"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:27.099" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:27.099" starttime="20190402 11:49:27.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:27.100" starttime="20190402 11:49:27.099"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:27.100" starttime="20190402 11:49:25.683"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:27.100" starttime="20190402 11:49:25.681"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:27.101" starttime="20190402 11:49:25.681"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:27.101" starttime="20190402 11:49:24.189"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:27.101" starttime="20190402 11:49:22.837"></status>
</kw>
<kw name="Delete All Volumes" library="OpenStack">
<doc>Get a list of all existing volumes to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:27.102" level="INFO">${openstack_cmd} = openstack volume list</msg>
<status status="PASS" endtime="20190402 11:49:27.103" starttime="20190402 11:49:27.102"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "ID"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:27.103" level="INFO">${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"</msg>
<status status="PASS" endtime="20190402 11:49:27.104" starttime="20190402 11:49:27.103"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:27.105" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:27.105" starttime="20190402 11:49:27.105"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:27.107" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume list|awk '{print$2}'|grep -v "ID"'.</msg>
<msg timestamp="20190402 11:49:28.538" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:28.538" level="INFO">${stdout} = 

5936d333-91af-4afe-babf-bd2a6b209783</msg>
<msg timestamp="20190402 11:49:28.538" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:28.539" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:28.539" starttime="20190402 11:49:27.106"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:28.540" level="INFO">${res} = {u'stdout': u'\n\n5936d333-91af-4afe-babf-bd2a6b209783', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:28.541" starttime="20190402 11:49:28.539"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:28.542" starttime="20190402 11:49:28.541"></status>
</kw>
<msg timestamp="20190402 11:49:28.542" level="INFO">&amp;{result} = { stdout=

5936d333-91af-4afe-babf-bd2a6b209783 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:28.542" starttime="20190402 11:49:27.104"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{volume_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:49:28.544" level="INFO">${response} = 

5936d333-91af-4afe-babf-bd2a6b209783</msg>
<status status="PASS" endtime="20190402 11:49:28.544" starttime="20190402 11:49:28.544"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:49:28.545" level="INFO">@{res_in_list} = [ 5936d333-91af-4afe-babf-bd2a6b209783 ]</msg>
<status status="PASS" endtime="20190402 11:49:28.545" starttime="20190402 11:49:28.545"></status>
</kw>
<msg timestamp="20190402 11:49:28.546" level="INFO">@{volume_list} = [ 5936d333-91af-4afe-babf-bd2a6b209783 ]</msg>
<status status="PASS" endtime="20190402 11:49:28.546" starttime="20190402 11:49:28.543"></status>
</kw>
<kw type="for" name="${volume} IN [ @{volume_list} ]">
<kw type="foritem" name="${volume} = 5936d333-91af-4afe-babf-bd2a6b209783">
<kw name="Delete Volume" library="OpenStack">
<doc>Delete an specific volume.</doc>
<arguments>
<arg>${volume}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:28.548" level="INFO">${openstack_cmd} = openstack volume delete</msg>
<status status="PASS" endtime="20190402 11:49:28.548" starttime="20190402 11:49:28.548"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${volume}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:28.549" level="INFO">${cmd} = openstack volume delete 5936d333-91af-4afe-babf-bd2a6b209783</msg>
<status status="PASS" endtime="20190402 11:49:28.549" starttime="20190402 11:49:28.548"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:28.552" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:28.552" starttime="20190402 11:49:28.551"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:28.553" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume delete 5936d333-91af-4afe-babf-bd2a6b209783'.</msg>
<msg timestamp="20190402 11:49:29.935" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190402 11:49:29.936" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:29.936" level="INFO">${stderr} = Failed to delete volume with name or ID '5936d333-91af-4afe-babf-bd2a6b209783': Invalid volume: Volume status must be available or error or error_restoring or error_extending or error_managing and mus...</msg>
<msg timestamp="20190402 11:49:29.936" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190402 11:49:29.936" starttime="20190402 11:49:28.552"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:29.938" level="INFO">${res} = {u'stdout': u'', u'stderr': u"Failed to delete volume with name or ID '5936d333-91af-4afe-babf-bd2a6b209783': Invalid volume: Volume status must be available or error or error_restoring or error_exten...</msg>
<status status="PASS" endtime="20190402 11:49:29.938" starttime="20190402 11:49:29.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:29.939" starttime="20190402 11:49:29.939"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:29.940" starttime="20190402 11:49:28.550"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:29.940" starttime="20190402 11:49:28.547"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:29.940" starttime="20190402 11:49:28.547"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:29.941" starttime="20190402 11:49:28.546"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:29.941" starttime="20190402 11:49:27.101"></status>
</kw>
<kw name="Delete All Stacks" library="OpenStack">
<doc>Get a list of all existing stacks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:29.942" level="INFO">${openstack_cmd} = openstack stack list</msg>
<status status="PASS" endtime="20190402 11:49:29.943" starttime="20190402 11:49:29.942"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:29.944" level="INFO">${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:49:29.944" starttime="20190402 11:49:29.943"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:29.946" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:29.946" starttime="20190402 11:49:29.945"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:29.947" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:49:31.279" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:31.280" level="INFO">${stdout} = 
Stack

stack-cirros-2
stack-cirros-1</msg>
<msg timestamp="20190402 11:49:31.280" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:31.280" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:31.280" starttime="20190402 11:49:29.946"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:31.282" level="INFO">${res} = {u'stdout': u'\nStack\n\nstack-cirros-2\nstack-cirros-1', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:31.282" starttime="20190402 11:49:31.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:31.283" starttime="20190402 11:49:31.282"></status>
</kw>
<msg timestamp="20190402 11:49:31.283" level="INFO">&amp;{result} = { stdout=
Stack

stack-cirros-2
stack-cirros-1 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:31.283" starttime="20190402 11:49:29.944"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{stack_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:49:31.285" level="INFO">${response} = 
Stack

stack-cirros-2
stack-cirros-1</msg>
<status status="PASS" endtime="20190402 11:49:31.285" starttime="20190402 11:49:31.284"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:49:31.286" level="INFO">@{res_in_list} = [ Stack | stack-cirros-2 | stack-cirros-1 ]</msg>
<status status="PASS" endtime="20190402 11:49:31.286" starttime="20190402 11:49:31.285"></status>
</kw>
<msg timestamp="20190402 11:49:31.286" level="INFO">@{stack_list} = [ Stack | stack-cirros-2 | stack-cirros-1 ]</msg>
<status status="PASS" endtime="20190402 11:49:31.287" starttime="20190402 11:49:31.284"></status>
</kw>
<kw type="for" name="${stack} IN [ @{stack_list} ]">
<kw type="foritem" name="${stack} = Stack">
<kw name="Delete Stack" library="OpenStack">
<doc>Delete an specific stack.</doc>
<arguments>
<arg>${stack}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:31.288" level="INFO">${openstack_cmd} = openstack stack delete</msg>
<status status="PASS" endtime="20190402 11:49:31.288" starttime="20190402 11:49:31.288"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${stack}</arg>
<arg>-y</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:31.289" level="INFO">${cmd} = openstack stack delete Stack -y</msg>
<status status="PASS" endtime="20190402 11:49:31.289" starttime="20190402 11:49:31.289"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:31.291" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:31.291" starttime="20190402 11:49:31.290"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:31.292" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack delete Stack -y'.</msg>
<msg timestamp="20190402 11:49:32.576" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190402 11:49:32.576" level="INFO">${stdout} = Stack not found: Stack</msg>
<msg timestamp="20190402 11:49:32.576" level="INFO">${stderr} = Unable to delete 1 of the 1 stacks.</msg>
<msg timestamp="20190402 11:49:32.576" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190402 11:49:32.576" starttime="20190402 11:49:31.291"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:32.577" level="INFO">${res} = {u'stdout': u'Stack not found: Stack', u'stderr': u'Unable to delete 1 of the 1 stacks.', u'rc': 1}</msg>
<status status="PASS" endtime="20190402 11:49:32.578" starttime="20190402 11:49:32.577"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:32.578" starttime="20190402 11:49:32.578"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:32.578" starttime="20190402 11:49:31.289"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:32.579" starttime="20190402 11:49:31.287"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:32.579" starttime="20190402 11:49:31.287"></status>
</kw>
<kw type="foritem" name="${stack} = stack-cirros-2">
<kw name="Delete Stack" library="OpenStack">
<doc>Delete an specific stack.</doc>
<arguments>
<arg>${stack}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:32.580" level="INFO">${openstack_cmd} = openstack stack delete</msg>
<status status="PASS" endtime="20190402 11:49:32.580" starttime="20190402 11:49:32.579"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${stack}</arg>
<arg>-y</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:32.580" level="INFO">${cmd} = openstack stack delete stack-cirros-2 -y</msg>
<status status="PASS" endtime="20190402 11:49:32.580" starttime="20190402 11:49:32.580"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:32.582" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:32.582" starttime="20190402 11:49:32.581"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:32.582" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack delete stack-cirros-2 -y'.</msg>
<msg timestamp="20190402 11:49:34.021" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:34.022" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:34.022" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:34.022" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:34.022" starttime="20190402 11:49:32.582"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:34.023" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:34.024" starttime="20190402 11:49:34.022"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:34.025" starttime="20190402 11:49:34.024"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:34.025" starttime="20190402 11:49:32.580"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:34.025" starttime="20190402 11:49:32.579"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:34.025" starttime="20190402 11:49:32.579"></status>
</kw>
<kw type="foritem" name="${stack} = stack-cirros-1">
<kw name="Delete Stack" library="OpenStack">
<doc>Delete an specific stack.</doc>
<arguments>
<arg>${stack}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:34.027" level="INFO">${openstack_cmd} = openstack stack delete</msg>
<status status="PASS" endtime="20190402 11:49:34.027" starttime="20190402 11:49:34.027"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${stack}</arg>
<arg>-y</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:34.028" level="INFO">${cmd} = openstack stack delete stack-cirros-1 -y</msg>
<status status="PASS" endtime="20190402 11:49:34.028" starttime="20190402 11:49:34.027"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:34.030" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:34.030" starttime="20190402 11:49:34.029"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:34.031" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack delete stack-cirros-1 -y'.</msg>
<msg timestamp="20190402 11:49:35.563" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:35.564" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:35.564" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:35.564" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:35.564" starttime="20190402 11:49:34.030"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:35.566" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:35.566" starttime="20190402 11:49:35.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:35.567" starttime="20190402 11:49:35.566"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:35.567" starttime="20190402 11:49:34.028"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:35.567" starttime="20190402 11:49:34.026"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:35.568" starttime="20190402 11:49:34.026"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:35.568" starttime="20190402 11:49:31.287"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:35.568" starttime="20190402 11:49:29.941"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:35.568" starttime="20190402 11:49:05.522"></status>
</kw>
<kw name="Stx Suite TearDown" library="Utils">
<doc>Wrapper to clean up activities on the suite.</doc>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20190402 11:49:35.578" starttime="20190402 11:49:35.569"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:35.578" starttime="20190402 11:49:35.569"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:35.578" starttime="20190402 11:49:05.522"></status>
</kw>
<doc>Test to launch instance through a heat template.
Author(s):
- Hector Ivan Ramos Escobar &lt;ramos.escobarx.hector.ivan@intel.com&gt;
- Juan Carlos Alonso Sanchez &lt;juan.carlos.alonso@intel.com&gt;</doc>
<status status="PASS" endtime="20190402 11:49:35.578" starttime="20190402 11:47:54.922"></status>
</suite>
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-OpenStack/05-Measurements-For-Metric.robot" id="s1-s1-s5" name="05-Measurements-For-Metric">
<kw type="setup" name="Stx Suite Setup" library="Utils">
<doc>Wrapper to setup the environment needed for exercise
StarlingX features</doc>
<kw name="Open Master Controller Connection" library="Utils">
<doc>Establish a SSH connection with the master controller
to start executing the the suite.</doc>
<kw name="Connect to Controller Node" library="Utils">
<doc>Stablish a SSH connection to the controller and return
the connection id</doc>
<arguments>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_NAME}</arg>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_PSWD}</arg>
<arg>${CONFIG.general.IP_UNIT_0_ADDRESS}</arg>
</arguments>
<assign>
<var>${master_controller_connection}</var>
</assign>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${ip_address} prompt=${prompt}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${controller_connection}</var>
</assign>
<msg timestamp="20190402 11:49:35.612" level="INFO">${controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:49:35.612" starttime="20190402 11:49:35.611"></status>
</kw>
<kw name="Flexible_SSH_Login" library="Utils">
<doc>On active SSH session: if given non-empty password,
do Login, else do Login With Public Key.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${password}</arg>
</arguments>
<assign>
<var>${pwd_length}</var>
</assign>
<msg timestamp="20190402 11:49:35.613" level="INFO">Length is 10</msg>
<msg timestamp="20190402 11:49:35.613" level="INFO">${pwd_length} = 10</msg>
<status status="PASS" endtime="20190402 11:49:35.613" starttime="20190402 11:49:35.612"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${pwd_length} &gt; 0</arg>
<arg>SSHLibrary.Login</arg>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<msg timestamp="20190402 11:49:35.613" level="INFO">Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.</msg>
<msg timestamp="20190402 11:49:36.763" level="INFO">Read output: Last login: Tue Apr  2 17:36:37 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$</msg>
<status status="PASS" endtime="20190402 11:49:36.764" starttime="20190402 11:49:35.613"></status>
</kw>
<msg timestamp="20190402 11:49:36.764" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190402 11:49:36.764" starttime="20190402 11:49:35.613"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:36.764" starttime="20190402 11:49:35.612"></status>
</kw>
<msg timestamp="20190402 11:49:36.765" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:49:36.765" starttime="20190402 11:49:35.610"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190402 11:49:36.765" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:49:36.766" starttime="20190402 11:49:36.765"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190402 11:49:36.766" level="INFO">1</msg>
<status status="PASS" endtime="20190402 11:49:36.766" starttime="20190402 11:49:36.766"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:36.766" starttime="20190402 11:49:35.610"></status>
</kw>
<kw name="Set Env Vars From Openrc" library="Utils">
<doc>Sources the openrc form /etc/nova/ to have the admin
variables exported on the controller.</doc>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>source /etc/platform/openrc</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:36.768" starttime="20190402 11:49:36.768"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:49:36.770" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:49:36.770" starttime="20190402 11:49:36.769"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:36.771" starttime="20190402 11:49:36.770"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:36.771" starttime="20190402 11:49:36.771"></status>
</kw>
<msg timestamp="20190402 11:49:36.772" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:49:36.772" starttime="20190402 11:49:36.768"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20190402 11:49:36.772" starttime="20190402 11:49:36.772"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:49:36.783" level="INFO">source /etc/platform/openrc</msg>
<status status="PASS" endtime="20190402 11:49:36.783" starttime="20190402 11:49:36.773"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:49:37.386" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:49:37.387" level="INFO">${output} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:49:37.387" starttime="20190402 11:49:36.784"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:49:37.388" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:49:37.388" starttime="20190402 11:49:37.388"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:49:37.389" level="INFO">${clean_out} = </msg>
<status status="PASS" endtime="20190402 11:49:37.389" starttime="20190402 11:49:37.388"></status>
</kw>
<msg timestamp="20190402 11:49:37.389" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190402 11:49:37.389" starttime="20190402 11:49:37.387"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:49:37.391" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:49:37.391" starttime="20190402 11:49:37.389"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:37.392" level="INFO">0</msg>
<msg timestamp="20190402 11:49:37.392" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:37.392" starttime="20190402 11:49:37.392"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:49:37.392" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:49:37.392" starttime="20190402 11:49:37.392"></status>
</kw>
<msg timestamp="20190402 11:49:37.392" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:37.392" starttime="20190402 11:49:37.389"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:37.393" starttime="20190402 11:49:37.393"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:37.393" starttime="20190402 11:49:37.393"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:37.394" starttime="20190402 11:49:37.393"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:49:37.394" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: </msg>
<status status="PASS" endtime="20190402 11:49:37.394" starttime="20190402 11:49:37.394"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:37.394" starttime="20190402 11:49:36.767"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:37.394" starttime="20190402 11:49:36.767"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:37.394" starttime="20190402 11:49:35.610"></status>
</kw>
<test id="s1-s1-s5-t1" name="Create Image For Metrics">
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/${cirros_image}</arg>
<arg>${host_image_path}/${cirros_image}</arg>
</arguments>
<msg timestamp="20190402 11:49:37.403" level="INFO">[chan 1] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190402 11:49:37.410" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190402 11:49:37.898" level="INFO">'/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2' -&gt; '/home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2'</msg>
<status status="PASS" endtime="20190402 11:49:37.898" starttime="20190402 11:49:37.395"></status>
</kw>
<kw name="Create Image" library="OpenStack">
<doc>Create image from a given .img file.</doc>
<arguments>
<arg>${host_image_path}/${cirros_image}</arg>
<arg>${disk_format}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<kw name="File Should Exist" library="SSHLibrary">
<doc>Fails if the given ``path`` does NOT point to an existing file.</doc>
<arguments>
<arg>${file_path}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:37.899" starttime="20190402 11:49:37.899"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:37.900" level="INFO">${openstack_cmd} = openstack image create</msg>
<status status="PASS" endtime="20190402 11:49:37.900" starttime="20190402 11:49:37.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--file ${file_path}</arg>
<arg>--disk-format ${disk_format}</arg>
<arg>--public</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:37.900" level="INFO">${cmd} = openstack image create --file /home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2 --disk-format qcow2 --public cirros</msg>
<status status="PASS" endtime="20190402 11:49:37.900" starttime="20190402 11:49:37.900"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>3 min</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:37.901" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:37.901" starttime="20190402 11:49:37.900"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:37.901" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image create --file /home/wrsroot//cirros-0.4.0-x86_64-disk.qcow2 --disk-format qcow2 --public cirros'.</msg>
<msg timestamp="20190402 11:49:40.135" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:40.136" level="INFO">${stdout} = +------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<msg timestamp="20190402 11:49:40.136" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:40.136" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:40.136" starttime="20190402 11:49:37.901"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:40.138" level="INFO">${res} = {u'stdout': u"+------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------...</msg>
<status status="PASS" endtime="20190402 11:49:40.138" starttime="20190402 11:49:40.137"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:40.140" starttime="20190402 11:49:40.139"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:40.140" starttime="20190402 11:49:37.900"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5 min</arg>
<arg>10 sec</arg>
<arg>Check Field Value</arg>
<arg>image</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>active</arg>
</arguments>
<kw name="Check Field Value" library="OpenStack">
<doc>Validates that property is set correctly to the
expected value.</doc>
<arguments>
<arg>image</arg>
<arg>${name}</arg>
<arg>status</arg>
<arg>active</arg>
</arguments>
<kw name="Retrieve Field Property" library="OpenStack">
<doc>Returns the spceified value of the property.</doc>
<arguments>
<arg>${component}</arg>
<arg>${component_name}</arg>
<arg>${property}</arg>
</arguments>
<assign>
<var>${current_value}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack ${component} show ${component_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:40.146" level="INFO">${openstack_cmd} = openstack image show cirros</msg>
<status status="PASS" endtime="20190402 11:49:40.146" starttime="20190402 11:49:40.145"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep -w ${property}</arg>
<arg>tail -1</arg>
<arg>awk '{print$4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:40.147" level="INFO">${cmd} = openstack image show cirros|grep -w status|tail -1|awk '{print$4}'</msg>
<status status="PASS" endtime="20190402 11:49:40.147" starttime="20190402 11:49:40.146"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:40.149" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:40.149" starttime="20190402 11:49:40.149"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:40.150" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image show cirros|grep -w status|tail -1|awk '{print$4}''.</msg>
<msg timestamp="20190402 11:49:41.433" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:41.433" level="INFO">${stdout} = active</msg>
<msg timestamp="20190402 11:49:41.434" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:41.434" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:41.434" starttime="20190402 11:49:40.149"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:41.436" level="INFO">${res} = {u'stdout': u'active', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:41.436" starttime="20190402 11:49:41.435"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:41.437" starttime="20190402 11:49:41.436"></status>
</kw>
<msg timestamp="20190402 11:49:41.437" level="INFO">${result} = {u'stdout': u'active', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:41.437" starttime="20190402 11:49:40.147"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:49:41.438" level="INFO">${value} = active</msg>
<status status="PASS" endtime="20190402 11:49:41.438" starttime="20190402 11:49:41.438"></status>
</kw>
<msg timestamp="20190402 11:49:41.439" level="INFO">${current_value} = active</msg>
<status status="PASS" endtime="20190402 11:49:41.439" starttime="20190402 11:49:40.143"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${current_value}</arg>
<arg>${expected_value}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:41.440" starttime="20190402 11:49:41.439"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:41.441" starttime="20190402 11:49:40.142"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:41.441" starttime="20190402 11:49:40.140"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:41.442" starttime="20190402 11:49:37.898"></status>
</kw>
<doc>Create images with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:49:41.442" critical="yes" starttime="20190402 11:49:37.394"></status>
</test>
<test id="s1-s1-s5-t2" name="Update Image Name">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>openstack image show</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:41.445" level="INFO">${openstack_cmd} = openstack image show cirros</msg>
<status status="PASS" endtime="20190402 11:49:41.445" starttime="20190402 11:49:41.444"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "created_at"</arg>
<arg>awk '{print $4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:41.446" level="INFO">${cmd} = openstack image show cirros|grep "created_at"|awk '{print $4}'</msg>
<status status="PASS" endtime="20190402 11:49:41.446" starttime="20190402 11:49:41.445"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:41.448" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:41.448" starttime="20190402 11:49:41.448"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:41.449" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image show cirros|grep "created_at"|awk '{print $4}''.</msg>
<msg timestamp="20190402 11:49:42.737" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:42.737" level="INFO">${stdout} = 2019-04-02T17:38:21Z</msg>
<msg timestamp="20190402 11:49:42.737" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:42.737" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:42.737" starttime="20190402 11:49:41.449"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:42.739" level="INFO">${res} = {u'stdout': u'2019-04-02T17:38:21Z', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:42.739" starttime="20190402 11:49:42.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:42.740" starttime="20190402 11:49:42.739"></status>
</kw>
<msg timestamp="20190402 11:49:42.741" level="INFO">&amp;{result} = { stdout=2019-04-02T17:38:21Z | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:42.741" starttime="20190402 11:49:41.447"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${created_at}</var>
</assign>
<msg timestamp="20190402 11:49:42.742" level="INFO">${created_at} = 2019-04-02T17:38:21Z</msg>
<status status="PASS" endtime="20190402 11:49:42.742" starttime="20190402 11:49:42.741"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:42.743" level="INFO">${openstack_cmd} = openstack image set</msg>
<status status="PASS" endtime="20190402 11:49:42.743" starttime="20190402 11:49:42.743"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--name ${cirros_image_name_tmp}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:42.745" level="INFO">${cmd} = openstack image set --name cirros-tmp cirros</msg>
<status status="PASS" endtime="20190402 11:49:42.745" starttime="20190402 11:49:42.744"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:42.747" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:42.748" starttime="20190402 11:49:42.747"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:42.749" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image set --name cirros-tmp cirros'.</msg>
<msg timestamp="20190402 11:49:44.211" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:44.211" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:44.212" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:44.212" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:44.212" starttime="20190402 11:49:42.748"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:44.213" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:44.214" starttime="20190402 11:49:44.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:44.215" starttime="20190402 11:49:44.214"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:44.215" starttime="20190402 11:49:42.746"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>openstack image show</arg>
<arg>${cirros_image_name_tmp}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:44.216" level="INFO">${openstack_cmd} = openstack image show cirros-tmp</msg>
<status status="PASS" endtime="20190402 11:49:44.216" starttime="20190402 11:49:44.216"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "updated_at"</arg>
<arg>awk '{print $4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:44.217" level="INFO">${cmd} = openstack image show cirros-tmp|grep "updated_at"|awk '{print $4}'</msg>
<status status="PASS" endtime="20190402 11:49:44.217" starttime="20190402 11:49:44.217"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:44.220" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:44.220" starttime="20190402 11:49:44.220"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:44.221" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image show cirros-tmp|grep "updated_at"|awk '{print $4}''.</msg>
<msg timestamp="20190402 11:49:45.503" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:45.503" level="INFO">${stdout} = 2019-04-02T17:38:26Z</msg>
<msg timestamp="20190402 11:49:45.503" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:45.503" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:45.503" starttime="20190402 11:49:44.220"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:45.504" level="INFO">${res} = {u'stdout': u'2019-04-02T17:38:26Z', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:45.504" starttime="20190402 11:49:45.503"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:45.505" starttime="20190402 11:49:45.504"></status>
</kw>
<msg timestamp="20190402 11:49:45.505" level="INFO">&amp;{result} = { stdout=2019-04-02T17:38:26Z | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:45.505" starttime="20190402 11:49:44.218"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${first_update}</var>
</assign>
<msg timestamp="20190402 11:49:45.506" level="INFO">${first_update} = 2019-04-02T17:38:26Z</msg>
<status status="PASS" endtime="20190402 11:49:45.506" starttime="20190402 11:49:45.505"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${created_at}</arg>
<arg>${first_update}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:45.507" starttime="20190402 11:49:45.506"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:45.507" level="INFO">${openstack_cmd} = openstack image set</msg>
<status status="PASS" endtime="20190402 11:49:45.507" starttime="20190402 11:49:45.507"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--name ${cirros_image_name}</arg>
<arg>${cirros_image_name_tmp}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:45.508" level="INFO">${cmd} = openstack image set --name cirros cirros-tmp</msg>
<status status="PASS" endtime="20190402 11:49:45.508" starttime="20190402 11:49:45.507"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:45.509" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:45.509" starttime="20190402 11:49:45.509"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:45.510" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image set --name cirros cirros-tmp'.</msg>
<msg timestamp="20190402 11:49:47.047" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:47.048" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:47.048" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:47.048" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:47.048" starttime="20190402 11:49:45.509"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:47.049" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:47.049" starttime="20190402 11:49:47.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:47.050" starttime="20190402 11:49:47.050"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:47.051" starttime="20190402 11:49:45.508"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>openstack image show</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:47.052" level="INFO">${openstack_cmd} = openstack image show cirros</msg>
<status status="PASS" endtime="20190402 11:49:47.052" starttime="20190402 11:49:47.051"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "updated_at"</arg>
<arg>awk '{print $4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:47.053" level="INFO">${cmd} = openstack image show cirros|grep "updated_at"|awk '{print $4}'</msg>
<status status="PASS" endtime="20190402 11:49:47.053" starttime="20190402 11:49:47.052"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:47.054" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:47.055" starttime="20190402 11:49:47.054"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:47.056" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image show cirros|grep "updated_at"|awk '{print $4}''.</msg>
<msg timestamp="20190402 11:49:48.402" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:48.402" level="INFO">${stdout} = 2019-04-02T17:38:29Z</msg>
<msg timestamp="20190402 11:49:48.403" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:48.403" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:48.403" starttime="20190402 11:49:47.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:48.405" level="INFO">${res} = {u'stdout': u'2019-04-02T17:38:29Z', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:48.405" starttime="20190402 11:49:48.404"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:48.406" starttime="20190402 11:49:48.405"></status>
</kw>
<msg timestamp="20190402 11:49:48.407" level="INFO">&amp;{result} = { stdout=2019-04-02T17:38:29Z | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:48.407" starttime="20190402 11:49:47.053"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${second_update}</var>
</assign>
<msg timestamp="20190402 11:49:48.408" level="INFO">${second_update} = 2019-04-02T17:38:29Z</msg>
<status status="PASS" endtime="20190402 11:49:48.408" starttime="20190402 11:49:48.407"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${first_update}</arg>
<arg>${second_update}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:48.410" starttime="20190402 11:49:48.409"></status>
</kw>
<doc>Update image name.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:49:48.410" critical="yes" starttime="20190402 11:49:41.443"></status>
</test>
<test id="s1-s1-s5-t3" name="Update Image Disk Ram Size">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>openstack image show</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:48.412" level="INFO">${openstack_cmd} = openstack image show cirros</msg>
<status status="PASS" endtime="20190402 11:49:48.413" starttime="20190402 11:49:48.412"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "updated_at"</arg>
<arg>awk '{print $4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:48.414" level="INFO">${cmd} = openstack image show cirros|grep "updated_at"|awk '{print $4}'</msg>
<status status="PASS" endtime="20190402 11:49:48.414" starttime="20190402 11:49:48.413"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:48.416" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:48.416" starttime="20190402 11:49:48.415"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:48.417" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image show cirros|grep "updated_at"|awk '{print $4}''.</msg>
<msg timestamp="20190402 11:49:49.750" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:49.750" level="INFO">${stdout} = 2019-04-02T17:38:29Z</msg>
<msg timestamp="20190402 11:49:49.750" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:49.750" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:49.750" starttime="20190402 11:49:48.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:49.752" level="INFO">${res} = {u'stdout': u'2019-04-02T17:38:29Z', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:49.752" starttime="20190402 11:49:49.751"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:49.753" starttime="20190402 11:49:49.752"></status>
</kw>
<msg timestamp="20190402 11:49:49.754" level="INFO">&amp;{result} = { stdout=2019-04-02T17:38:29Z | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:49.754" starttime="20190402 11:49:48.414"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${updated_at}</var>
</assign>
<msg timestamp="20190402 11:49:49.755" level="INFO">${updated_at} = 2019-04-02T17:38:29Z</msg>
<status status="PASS" endtime="20190402 11:49:49.755" starttime="20190402 11:49:49.754"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:49.756" level="INFO">${openstack_cmd} = openstack image set</msg>
<status status="PASS" endtime="20190402 11:49:49.756" starttime="20190402 11:49:49.755"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--min-disk ${image_disk_size}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:49.757" level="INFO">${cmd} = openstack image set --min-disk 10 cirros</msg>
<status status="PASS" endtime="20190402 11:49:49.757" starttime="20190402 11:49:49.756"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:49.759" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:49.759" starttime="20190402 11:49:49.759"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:49.761" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image set --min-disk 10 cirros'.</msg>
<msg timestamp="20190402 11:49:51.143" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:51.143" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:51.143" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:51.143" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:51.144" starttime="20190402 11:49:49.760"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:51.146" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:51.146" starttime="20190402 11:49:51.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:51.147" starttime="20190402 11:49:51.147"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:51.148" starttime="20190402 11:49:49.758"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>openstack image show</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:51.149" level="INFO">${openstack_cmd} = openstack image show cirros</msg>
<status status="PASS" endtime="20190402 11:49:51.149" starttime="20190402 11:49:51.148"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "updated_at"</arg>
<arg>awk '{print $4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:51.150" level="INFO">${cmd} = openstack image show cirros|grep "updated_at"|awk '{print $4}'</msg>
<status status="PASS" endtime="20190402 11:49:51.150" starttime="20190402 11:49:51.150"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:51.152" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:51.153" starttime="20190402 11:49:51.152"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:51.154" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image show cirros|grep "updated_at"|awk '{print $4}''.</msg>
<msg timestamp="20190402 11:49:52.435" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:52.436" level="INFO">${stdout} = 2019-04-02T17:38:33Z</msg>
<msg timestamp="20190402 11:49:52.436" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:52.437" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:52.437" starttime="20190402 11:49:51.153"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:52.438" level="INFO">${res} = {u'stdout': u'2019-04-02T17:38:33Z', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:52.439" starttime="20190402 11:49:52.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:52.439" starttime="20190402 11:49:52.439"></status>
</kw>
<msg timestamp="20190402 11:49:52.440" level="INFO">&amp;{result} = { stdout=2019-04-02T17:38:33Z | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:52.440" starttime="20190402 11:49:51.151"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${first_update}</var>
</assign>
<msg timestamp="20190402 11:49:52.441" level="INFO">${first_update} = 2019-04-02T17:38:33Z</msg>
<status status="PASS" endtime="20190402 11:49:52.441" starttime="20190402 11:49:52.441"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${updated_at}</arg>
<arg>${first_update}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:52.442" starttime="20190402 11:49:52.442"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:52.443" level="INFO">${openstack_cmd} = openstack image set</msg>
<status status="PASS" endtime="20190402 11:49:52.444" starttime="20190402 11:49:52.443"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--min-ram ${image_ram_size}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:52.445" level="INFO">${cmd} = openstack image set --min-ram 20 cirros</msg>
<status status="PASS" endtime="20190402 11:49:52.445" starttime="20190402 11:49:52.444"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:52.447" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:52.447" starttime="20190402 11:49:52.446"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:52.448" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image set --min-ram 20 cirros'.</msg>
<msg timestamp="20190402 11:49:53.911" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:53.912" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:53.912" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:53.912" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:53.913" starttime="20190402 11:49:52.447"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:53.915" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:53.915" starttime="20190402 11:49:53.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:53.917" starttime="20190402 11:49:53.916"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:53.918" starttime="20190402 11:49:52.445"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>openstack image show</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:53.919" level="INFO">${openstack_cmd} = openstack image show cirros</msg>
<status status="PASS" endtime="20190402 11:49:53.919" starttime="20190402 11:49:53.919"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "updated_at"</arg>
<arg>awk '{print $4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:53.921" level="INFO">${cmd} = openstack image show cirros|grep "updated_at"|awk '{print $4}'</msg>
<status status="PASS" endtime="20190402 11:49:53.921" starttime="20190402 11:49:53.920"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:53.923" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:53.923" starttime="20190402 11:49:53.922"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:53.924" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image show cirros|grep "updated_at"|awk '{print $4}''.</msg>
<msg timestamp="20190402 11:49:55.206" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:55.206" level="INFO">${stdout} = 2019-04-02T17:38:36Z</msg>
<msg timestamp="20190402 11:49:55.206" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:55.207" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:55.207" starttime="20190402 11:49:53.923"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:55.209" level="INFO">${res} = {u'stdout': u'2019-04-02T17:38:36Z', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:55.209" starttime="20190402 11:49:55.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:55.210" starttime="20190402 11:49:55.209"></status>
</kw>
<msg timestamp="20190402 11:49:55.211" level="INFO">&amp;{result} = { stdout=2019-04-02T17:38:36Z | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:55.212" starttime="20190402 11:49:53.921"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${second_update}</var>
</assign>
<msg timestamp="20190402 11:49:55.213" level="INFO">${second_update} = 2019-04-02T17:38:36Z</msg>
<status status="PASS" endtime="20190402 11:49:55.213" starttime="20190402 11:49:55.212"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${first_update}</arg>
<arg>${second_update}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:55.214" starttime="20190402 11:49:55.214"></status>
</kw>
<doc>Update image disk size and ram size.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:49:55.215" critical="yes" starttime="20190402 11:49:48.411"></status>
</test>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>OpenStack.Openstack Cleanup All</arg>
<arg>Utils.Stx Suite TearDown</arg>
</arguments>
<kw name="Openstack Cleanup All" library="OpenStack">
<doc>Delete all instances, images, flavors, networks and
keypairs generated during tests.</doc>
<kw name="Delete All Instances" library="OpenStack">
<doc>Get a list of all existing instances to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:55.219" level="INFO">${openstack_cmd} = openstack server list</msg>
<status status="PASS" endtime="20190402 11:49:55.219" starttime="20190402 11:49:55.218"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:55.220" level="INFO">${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:49:55.220" starttime="20190402 11:49:55.219"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:55.222" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:55.222" starttime="20190402 11:49:55.221"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:55.223" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:49:56.820" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:56.821" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:49:56.821" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:56.821" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:56.821" starttime="20190402 11:49:55.222"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:56.823" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:56.823" starttime="20190402 11:49:56.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:56.824" starttime="20190402 11:49:56.823"></status>
</kw>
<msg timestamp="20190402 11:49:56.825" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:56.825" starttime="20190402 11:49:55.220"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{vm_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:49:56.827" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:49:56.827" starttime="20190402 11:49:56.826"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:49:56.829" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:49:56.829" starttime="20190402 11:49:56.827"></status>
</kw>
<msg timestamp="20190402 11:49:56.829" level="INFO">@{vm_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:49:56.830" starttime="20190402 11:49:56.825"></status>
</kw>
<kw type="for" name="${vm} IN [ @{vm_list} ]">
<status status="PASS" endtime="20190402 11:49:56.830" starttime="20190402 11:49:56.830"></status>
</kw>
<status status="PASS" endtime="20190402 11:49:56.830" starttime="20190402 11:49:55.218"></status>
</kw>
<kw name="Delete All Images" library="OpenStack">
<doc>Get a list of all existing images to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:56.832" level="INFO">${openstack_cmd} = openstack image list</msg>
<status status="PASS" endtime="20190402 11:49:56.832" starttime="20190402 11:49:56.831"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "Cirros"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:56.833" level="INFO">${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"</msg>
<status status="PASS" endtime="20190402 11:49:56.833" starttime="20190402 11:49:56.832"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:56.835" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:56.835" starttime="20190402 11:49:56.834"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:56.836" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.</msg>
<msg timestamp="20190402 11:49:58.534" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:49:58.534" level="INFO">${stdout} = 

cirros</msg>
<msg timestamp="20190402 11:49:58.535" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:49:58.535" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:49:58.535" starttime="20190402 11:49:56.835"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:49:58.537" level="INFO">${res} = {u'stdout': u'\n\ncirros', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:49:58.537" starttime="20190402 11:49:58.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:49:58.538" starttime="20190402 11:49:58.537"></status>
</kw>
<msg timestamp="20190402 11:49:58.539" level="INFO">&amp;{result} = { stdout=

cirros | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:49:58.539" starttime="20190402 11:49:56.833"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{image_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:49:58.541" level="INFO">${response} = 

cirros</msg>
<status status="PASS" endtime="20190402 11:49:58.541" starttime="20190402 11:49:58.540"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:49:58.542" level="INFO">@{res_in_list} = [ cirros ]</msg>
<status status="PASS" endtime="20190402 11:49:58.542" starttime="20190402 11:49:58.541"></status>
</kw>
<msg timestamp="20190402 11:49:58.543" level="INFO">@{image_list} = [ cirros ]</msg>
<status status="PASS" endtime="20190402 11:49:58.543" starttime="20190402 11:49:58.539"></status>
</kw>
<kw type="for" name="${image} IN [ @{image_list} ]">
<kw type="foritem" name="${image} = cirros">
<kw name="Delete Image" library="OpenStack">
<doc>Delete an specific image.</doc>
<arguments>
<arg>${image}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:49:58.545" level="INFO">${openstack_cmd} = openstack image delete</msg>
<status status="PASS" endtime="20190402 11:49:58.545" starttime="20190402 11:49:58.544"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${image}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:49:58.546" level="INFO">${cmd} = openstack image delete cirros</msg>
<status status="PASS" endtime="20190402 11:49:58.546" starttime="20190402 11:49:58.545"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:49:58.548" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:49:58.548" starttime="20190402 11:49:58.547"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:49:58.549" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image delete cirros'.</msg>
<msg timestamp="20190402 11:50:10.104" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:50:10.104" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:50:10.104" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:50:10.104" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:10.105" starttime="20190402 11:49:58.548"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:50:10.106" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:50:10.107" starttime="20190402 11:50:10.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:10.108" starttime="20190402 11:50:10.107"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:10.108" starttime="20190402 11:49:58.546"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:10.109" starttime="20190402 11:49:58.544"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:10.109" starttime="20190402 11:49:58.543"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:10.109" starttime="20190402 11:49:58.543"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:10.110" starttime="20190402 11:49:56.831"></status>
</kw>
<kw name="Delete All Flavors" library="OpenStack">
<doc>Get a list of all existing flavors to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:50:10.112" level="INFO">${openstack_cmd} = openstack flavor list</msg>
<status status="PASS" endtime="20190402 11:50:10.112" starttime="20190402 11:50:10.111"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "m1"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:10.113" level="INFO">${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"</msg>
<status status="PASS" endtime="20190402 11:50:10.113" starttime="20190402 11:50:10.112"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:50:10.115" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:50:10.115" starttime="20190402 11:50:10.114"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:10.117" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.</msg>
<msg timestamp="20190402 11:50:11.499" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:50:11.499" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:50:11.499" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:50:11.500" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:11.500" starttime="20190402 11:50:10.115"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:50:11.501" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:50:11.501" starttime="20190402 11:50:11.500"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:11.502" starttime="20190402 11:50:11.502"></status>
</kw>
<msg timestamp="20190402 11:50:11.503" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:50:11.503" starttime="20190402 11:50:10.113"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{flavor_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:50:11.505" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:50:11.505" starttime="20190402 11:50:11.504"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:50:11.506" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:50:11.506" starttime="20190402 11:50:11.505"></status>
</kw>
<msg timestamp="20190402 11:50:11.507" level="INFO">@{flavor_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:50:11.507" starttime="20190402 11:50:11.504"></status>
</kw>
<kw type="for" name="${flavor} IN [ @{flavor_list} ]">
<status status="PASS" endtime="20190402 11:50:11.507" starttime="20190402 11:50:11.507"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:11.507" starttime="20190402 11:50:10.110"></status>
</kw>
<kw name="Delete All Networks" library="OpenStack">
<doc>Get a list of all existing networks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:50:11.509" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190402 11:50:11.509" starttime="20190402 11:50:11.508"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "private"</arg>
<arg>grep -v "public"</arg>
<arg>grep -v "external"</arg>
<arg>grep -v "internal"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:11.510" level="INFO">${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"</msg>
<status status="PASS" endtime="20190402 11:50:11.510" starttime="20190402 11:50:11.509"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:50:11.512" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:50:11.512" starttime="20190402 11:50:11.512"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:11.514" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.</msg>
<msg timestamp="20190402 11:50:12.904" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:50:12.904" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:50:12.904" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:50:12.904" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:12.904" starttime="20190402 11:50:11.513"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:50:12.905" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:50:12.905" starttime="20190402 11:50:12.905"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:12.905" starttime="20190402 11:50:12.905"></status>
</kw>
<msg timestamp="20190402 11:50:12.906" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:50:12.906" starttime="20190402 11:50:11.511"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{network_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:50:12.907" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:50:12.907" starttime="20190402 11:50:12.906"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:50:12.907" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:50:12.907" starttime="20190402 11:50:12.907"></status>
</kw>
<msg timestamp="20190402 11:50:12.907" level="INFO">@{network_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:50:12.907" starttime="20190402 11:50:12.906"></status>
</kw>
<kw type="for" name="${network} IN [ @{network_list} ]">
<status status="PASS" endtime="20190402 11:50:12.908" starttime="20190402 11:50:12.907"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:12.908" starttime="20190402 11:50:11.508"></status>
</kw>
<kw name="Delete All KeyPairs" library="OpenStack">
<doc>Get a list of all existing keypais to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack keypair list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:50:12.908" level="INFO">${openstack_cmd} = openstack keypair list</msg>
<status status="PASS" endtime="20190402 11:50:12.908" starttime="20190402 11:50:12.908"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:12.908" level="INFO">${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:50:12.908" starttime="20190402 11:50:12.908"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:50:12.909" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:50:12.909" starttime="20190402 11:50:12.909"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:12.910" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack keypair list|awk '{print$2}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:50:14.253" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:50:14.254" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:50:14.254" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:50:14.254" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:14.254" starttime="20190402 11:50:12.909"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:50:14.255" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:50:14.255" starttime="20190402 11:50:14.254"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:14.256" starttime="20190402 11:50:14.255"></status>
</kw>
<msg timestamp="20190402 11:50:14.256" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:50:14.256" starttime="20190402 11:50:12.909"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{key_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:50:14.258" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:50:14.258" starttime="20190402 11:50:14.258"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:50:14.259" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:50:14.259" starttime="20190402 11:50:14.259"></status>
</kw>
<msg timestamp="20190402 11:50:14.260" level="INFO">@{key_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:50:14.260" starttime="20190402 11:50:14.257"></status>
</kw>
<kw type="for" name="${key} IN [ @{key_list} ]">
<status status="PASS" endtime="20190402 11:50:14.260" starttime="20190402 11:50:14.260"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:14.260" starttime="20190402 11:50:12.908"></status>
</kw>
<kw name="Delete All Snapshots" library="OpenStack">
<doc>Get a list of all existing snapshots to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:50:14.261" level="INFO">${openstack_cmd} = openstack volume snapshot list</msg>
<status status="PASS" endtime="20190402 11:50:14.261" starttime="20190402 11:50:14.261"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:14.262" level="INFO">${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:50:14.262" starttime="20190402 11:50:14.262"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:50:14.263" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:50:14.263" starttime="20190402 11:50:14.263"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:14.264" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:50:15.646" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:50:15.646" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:50:15.646" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:50:15.647" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:15.647" starttime="20190402 11:50:14.264"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:50:15.648" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:50:15.648" starttime="20190402 11:50:15.647"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:15.649" starttime="20190402 11:50:15.649"></status>
</kw>
<msg timestamp="20190402 11:50:15.650" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:50:15.650" starttime="20190402 11:50:14.262"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{snapshot_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:50:15.651" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:50:15.652" starttime="20190402 11:50:15.651"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:50:15.652" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:50:15.652" starttime="20190402 11:50:15.652"></status>
</kw>
<msg timestamp="20190402 11:50:15.653" level="INFO">@{snapshot_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:50:15.653" starttime="20190402 11:50:15.650"></status>
</kw>
<kw type="for" name="${snapshot} IN [ @{snapshot_list} ]">
<status status="PASS" endtime="20190402 11:50:15.653" starttime="20190402 11:50:15.653"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:15.653" starttime="20190402 11:50:14.261"></status>
</kw>
<kw name="Delete All Volumes" library="OpenStack">
<doc>Get a list of all existing volumes to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:50:15.655" level="INFO">${openstack_cmd} = openstack volume list</msg>
<status status="PASS" endtime="20190402 11:50:15.655" starttime="20190402 11:50:15.654"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "ID"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:15.656" level="INFO">${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"</msg>
<status status="PASS" endtime="20190402 11:50:15.656" starttime="20190402 11:50:15.655"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:50:15.658" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:50:15.658" starttime="20190402 11:50:15.657"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:15.659" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume list|awk '{print$2}'|grep -v "ID"'.</msg>
<msg timestamp="20190402 11:50:17.141" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:50:17.142" level="INFO">${stdout} = 

5936d333-91af-4afe-babf-bd2a6b209783</msg>
<msg timestamp="20190402 11:50:17.142" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:50:17.142" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:17.142" starttime="20190402 11:50:15.658"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:50:17.144" level="INFO">${res} = {u'stdout': u'\n\n5936d333-91af-4afe-babf-bd2a6b209783', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:50:17.144" starttime="20190402 11:50:17.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:17.145" starttime="20190402 11:50:17.145"></status>
</kw>
<msg timestamp="20190402 11:50:17.146" level="INFO">&amp;{result} = { stdout=

5936d333-91af-4afe-babf-bd2a6b209783 | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:50:17.146" starttime="20190402 11:50:15.656"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{volume_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:50:17.148" level="INFO">${response} = 

5936d333-91af-4afe-babf-bd2a6b209783</msg>
<status status="PASS" endtime="20190402 11:50:17.148" starttime="20190402 11:50:17.147"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:50:17.149" level="INFO">@{res_in_list} = [ 5936d333-91af-4afe-babf-bd2a6b209783 ]</msg>
<status status="PASS" endtime="20190402 11:50:17.149" starttime="20190402 11:50:17.148"></status>
</kw>
<msg timestamp="20190402 11:50:17.149" level="INFO">@{volume_list} = [ 5936d333-91af-4afe-babf-bd2a6b209783 ]</msg>
<status status="PASS" endtime="20190402 11:50:17.149" starttime="20190402 11:50:17.147"></status>
</kw>
<kw type="for" name="${volume} IN [ @{volume_list} ]">
<kw type="foritem" name="${volume} = 5936d333-91af-4afe-babf-bd2a6b209783">
<kw name="Delete Volume" library="OpenStack">
<doc>Delete an specific volume.</doc>
<arguments>
<arg>${volume}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume delete</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:50:17.152" level="INFO">${openstack_cmd} = openstack volume delete</msg>
<status status="PASS" endtime="20190402 11:50:17.152" starttime="20190402 11:50:17.151"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${volume}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:17.153" level="INFO">${cmd} = openstack volume delete 5936d333-91af-4afe-babf-bd2a6b209783</msg>
<status status="PASS" endtime="20190402 11:50:17.153" starttime="20190402 11:50:17.152"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:50:17.154" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:50:17.154" starttime="20190402 11:50:17.154"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:17.155" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume delete 5936d333-91af-4afe-babf-bd2a6b209783'.</msg>
<msg timestamp="20190402 11:50:18.537" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:50:18.538" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:50:18.538" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:50:18.538" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:18.538" starttime="20190402 11:50:17.155"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:50:18.540" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:50:18.540" starttime="20190402 11:50:18.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:18.541" starttime="20190402 11:50:18.540"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:18.541" starttime="20190402 11:50:17.153"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:18.542" starttime="20190402 11:50:17.150"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:18.542" starttime="20190402 11:50:17.150"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:18.542" starttime="20190402 11:50:17.150"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:18.542" starttime="20190402 11:50:15.654"></status>
</kw>
<kw name="Delete All Stacks" library="OpenStack">
<doc>Get a list of all existing stacks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190402 11:50:18.543" level="INFO">${openstack_cmd} = openstack stack list</msg>
<status status="PASS" endtime="20190402 11:50:18.543" starttime="20190402 11:50:18.543"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:18.543" level="INFO">${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190402 11:50:18.543" starttime="20190402 11:50:18.543"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190402 11:50:18.544" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190402 11:50:18.544" starttime="20190402 11:50:18.544"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:18.545" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190402 11:50:19.926" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190402 11:50:19.927" level="INFO">${stdout} = </msg>
<msg timestamp="20190402 11:50:19.927" level="INFO">${stderr} = </msg>
<msg timestamp="20190402 11:50:19.927" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:19.927" starttime="20190402 11:50:18.544"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190402 11:50:19.928" level="INFO">${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}</msg>
<status status="PASS" endtime="20190402 11:50:19.929" starttime="20190402 11:50:19.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:19.929" starttime="20190402 11:50:19.929"></status>
</kw>
<msg timestamp="20190402 11:50:19.930" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:50:19.930" starttime="20190402 11:50:18.544"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{stack_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:50:19.932" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190402 11:50:19.932" starttime="20190402 11:50:19.931"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:50:19.933" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:50:19.933" starttime="20190402 11:50:19.932"></status>
</kw>
<msg timestamp="20190402 11:50:19.933" level="INFO">@{stack_list} = [ ]</msg>
<status status="PASS" endtime="20190402 11:50:19.933" starttime="20190402 11:50:19.931"></status>
</kw>
<kw type="for" name="${stack} IN [ @{stack_list} ]">
<status status="PASS" endtime="20190402 11:50:19.934" starttime="20190402 11:50:19.933"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:19.934" starttime="20190402 11:50:18.543"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:19.934" starttime="20190402 11:49:55.217"></status>
</kw>
<kw name="Stx Suite TearDown" library="Utils">
<doc>Wrapper to clean up activities on the suite.</doc>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20190402 11:50:19.937" starttime="20190402 11:50:19.935"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:19.938" starttime="20190402 11:50:19.935"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:19.938" starttime="20190402 11:49:55.216"></status>
</kw>
<doc>Test to create an instance with Cirros.
Author(s):
- Hector Ivan Ramos Escobar &lt;ramos.escobarx.hector.ivan@intel.com&gt;
- Juan Carlos Alonso &lt;juan.carlos.alonso@intel.com&gt;</doc>
<status status="PASS" endtime="20190402 11:50:19.938" starttime="20190402 11:49:35.582"></status>
</suite>
<status status="PASS" endtime="20190402 11:50:19.948" starttime="20190402 10:49:59.791"></status>
</suite>
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-Platform" id="s1-s2" name="Sanity-Platform">
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-Platform/02-OpenStack-Pod-Healthy.robot" id="s1-s2-s1" name="02-OpenStack-Pod-Healthy">
<kw type="setup" name="Stx Suite Setup" library="Utils">
<doc>Wrapper to setup the environment needed for exercise
StarlingX features</doc>
<kw name="Open Master Controller Connection" library="Utils">
<doc>Establish a SSH connection with the master controller
to start executing the the suite.</doc>
<kw name="Connect to Controller Node" library="Utils">
<doc>Stablish a SSH connection to the controller and return
the connection id</doc>
<arguments>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_NAME}</arg>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_PSWD}</arg>
<arg>${CONFIG.general.IP_UNIT_0_ADDRESS}</arg>
</arguments>
<assign>
<var>${master_controller_connection}</var>
</assign>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${ip_address} prompt=${prompt}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${controller_connection}</var>
</assign>
<msg timestamp="20190402 11:50:19.981" level="INFO">${controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:50:19.981" starttime="20190402 11:50:19.980"></status>
</kw>
<kw name="Flexible_SSH_Login" library="Utils">
<doc>On active SSH session: if given non-empty password,
do Login, else do Login With Public Key.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${password}</arg>
</arguments>
<assign>
<var>${pwd_length}</var>
</assign>
<msg timestamp="20190402 11:50:19.981" level="INFO">Length is 10</msg>
<msg timestamp="20190402 11:50:19.981" level="INFO">${pwd_length} = 10</msg>
<status status="PASS" endtime="20190402 11:50:19.981" starttime="20190402 11:50:19.981"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${pwd_length} &gt; 0</arg>
<arg>SSHLibrary.Login</arg>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<msg timestamp="20190402 11:50:19.982" level="INFO">Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.</msg>
<msg timestamp="20190402 11:50:21.068" level="INFO">Read output: Last login: Tue Apr  2 17:38:18 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$</msg>
<status status="PASS" endtime="20190402 11:50:21.068" starttime="20190402 11:50:19.982"></status>
</kw>
<msg timestamp="20190402 11:50:21.068" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190402 11:50:21.068" starttime="20190402 11:50:19.981"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:21.069" starttime="20190402 11:50:19.981"></status>
</kw>
<msg timestamp="20190402 11:50:21.069" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:50:21.069" starttime="20190402 11:50:19.980"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190402 11:50:21.069" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190402 11:50:21.069" starttime="20190402 11:50:21.069"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190402 11:50:21.070" level="INFO">1</msg>
<status status="PASS" endtime="20190402 11:50:21.070" starttime="20190402 11:50:21.069"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:21.070" starttime="20190402 11:50:19.980"></status>
</kw>
<kw name="Set Env Vars From Openrc" library="Utils">
<doc>Sources the openrc form /etc/nova/ to have the admin
variables exported on the controller.</doc>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>source /etc/platform/openrc</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:21.072" starttime="20190402 11:50:21.070"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:50:21.072" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:50:21.072" starttime="20190402 11:50:21.072"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:21.073" starttime="20190402 11:50:21.073"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:21.073" starttime="20190402 11:50:21.073"></status>
</kw>
<msg timestamp="20190402 11:50:21.074" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:50:21.074" starttime="20190402 11:50:21.072"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20190402 11:50:21.074" starttime="20190402 11:50:21.074"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:50:21.079" level="INFO">source /etc/platform/openrc</msg>
<status status="PASS" endtime="20190402 11:50:21.079" starttime="20190402 11:50:21.074"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:50:21.499" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:50:21.499" level="INFO">${output} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:21.499" starttime="20190402 11:50:21.079"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:50:21.500" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:21.500" starttime="20190402 11:50:21.500"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:50:21.500" level="INFO">${clean_out} = </msg>
<status status="PASS" endtime="20190402 11:50:21.500" starttime="20190402 11:50:21.500"></status>
</kw>
<msg timestamp="20190402 11:50:21.501" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190402 11:50:21.501" starttime="20190402 11:50:21.500"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:50:21.503" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:50:21.503" starttime="20190402 11:50:21.501"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:21.503" level="INFO">0</msg>
<msg timestamp="20190402 11:50:21.504" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:21.504" starttime="20190402 11:50:21.503"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:50:21.504" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:50:21.504" starttime="20190402 11:50:21.504"></status>
</kw>
<msg timestamp="20190402 11:50:21.504" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:21.504" starttime="20190402 11:50:21.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:21.505" starttime="20190402 11:50:21.505"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:21.505" starttime="20190402 11:50:21.504"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:21.505" starttime="20190402 11:50:21.505"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:50:21.505" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: </msg>
<status status="PASS" endtime="20190402 11:50:21.506" starttime="20190402 11:50:21.505"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:21.506" starttime="20190402 11:50:21.070"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:21.506" starttime="20190402 11:50:21.070"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:21.506" starttime="20190402 11:50:19.979"></status>
</kw>
<test id="s1-s2-s1-t1" name="OpenStack PODs Healthy">
<kw name="Check System Application Status" library="Utils">
<doc>Check if openstack applications were applied.</doc>
<arguments>
<arg>stx-openstack</arg>
<arg>applied</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>system application-list</arg>
<arg>grep ${application}</arg>
<arg>awk '{print $8}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:21.507" level="INFO">${cmd} = system application-list|grep stx-openstack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:50:21.507" starttime="20190402 11:50:21.507"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:21.508" starttime="20190402 11:50:21.508"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:50:21.509" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:50:21.509" starttime="20190402 11:50:21.509"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:21.509" starttime="20190402 11:50:21.509"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:21.510" starttime="20190402 11:50:21.509"></status>
</kw>
<msg timestamp="20190402 11:50:21.510" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:50:21.510" starttime="20190402 11:50:21.508"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:50:21.510" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:21.510" starttime="20190402 11:50:21.510"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:50:21.521" level="INFO">system application-list|grep stx-opens tack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:50:21.521" starttime="20190402 11:50:21.511"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:50:22.723" level="INFO">applied
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:50:22.724" level="INFO">${output} = applied
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:22.724" starttime="20190402 11:50:21.521"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:50:22.724" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:22.725" starttime="20190402 11:50:22.724"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:50:22.725" level="INFO">${clean_out} = applied
</msg>
<status status="PASS" endtime="20190402 11:50:22.725" starttime="20190402 11:50:22.725"></status>
</kw>
<msg timestamp="20190402 11:50:22.725" level="INFO">${output} = applied
</msg>
<status status="PASS" endtime="20190402 11:50:22.725" starttime="20190402 11:50:22.724"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:50:22.728" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:50:22.728" starttime="20190402 11:50:22.726"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:22.728" level="INFO">0</msg>
<msg timestamp="20190402 11:50:22.728" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:22.728" starttime="20190402 11:50:22.728"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:50:22.728" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:50:22.728" starttime="20190402 11:50:22.728"></status>
</kw>
<msg timestamp="20190402 11:50:22.729" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:22.729" starttime="20190402 11:50:22.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:22.729" starttime="20190402 11:50:22.729"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:22.729" starttime="20190402 11:50:22.729"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:22.730" starttime="20190402 11:50:22.730"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:50:22.730" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applied</msg>
<status status="PASS" endtime="20190402 11:50:22.730" starttime="20190402 11:50:22.730"></status>
</kw>
<msg timestamp="20190402 11:50:22.730" level="INFO">&amp;{result} = { stdout=applied | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:50:22.731" starttime="20190402 11:50:21.507"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:50:22.731" level="INFO">${value} = applied</msg>
<status status="PASS" endtime="20190402 11:50:22.731" starttime="20190402 11:50:22.731"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${value}' == 'apply-failed'</arg>
<arg>System Application Apply</arg>
<arg>${application}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:22.732" starttime="20190402 11:50:22.731"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:22.732" starttime="20190402 11:50:22.731"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:22.732" starttime="20190402 11:50:21.506"></status>
</kw>
<kw name="Check PODs Health" library="Utils">
<doc>Check all OpenStack pods are healthy</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>kubectl get pods --all-namespaces -o wide</arg>
</arguments>
<assign>
<var>${kubectl_cmd}</var>
</assign>
<msg timestamp="20190402 11:50:22.732" level="INFO">${kubectl_cmd} = kubectl get pods --all-namespaces -o wide</msg>
<status status="PASS" endtime="20190402 11:50:22.733" starttime="20190402 11:50:22.732"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${kubectl_cmd}</arg>
<arg>grep -v NAMESPACE</arg>
<arg>grep -v Running</arg>
<arg>grep -v Completed</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:22.733" level="INFO">${cmd} = kubectl get pods --all-namespaces -o wide|grep -v NAMESPACE|grep -v Running|grep -v Completed</msg>
<status status="PASS" endtime="20190402 11:50:22.733" starttime="20190402 11:50:22.733"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:22.734" starttime="20190402 11:50:22.733"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:50:22.734" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:50:22.734" starttime="20190402 11:50:22.734"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:22.735" starttime="20190402 11:50:22.735"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:22.735" starttime="20190402 11:50:22.735"></status>
</kw>
<msg timestamp="20190402 11:50:22.735" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:50:22.735" starttime="20190402 11:50:22.734"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:50:22.736" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:22.736" starttime="20190402 11:50:22.735"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:50:22.754" level="INFO">kubectl get pods --all-namespaces -o w ide|grep -v NAMESPACE|grep -v Running|grep -v Completed</msg>
<status status="PASS" endtime="20190402 11:50:22.755" starttime="20190402 11:50:22.736"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:50:23.471" level="INFO">default       testpod                                                       0/1     ImagePullBackOff   0          5h31m   172.16.0.6     controller-0   &lt;none&gt;
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:50:23.471" level="INFO">${output} = default       testpod                                                       0/1     ImagePullBackOff   0          5h31m   172.16.0.6     controller-0   &lt;none&gt;
[wrsroot@controller-0 ~(keystone_admin)]...</msg>
<status status="PASS" endtime="20190402 11:50:23.471" starttime="20190402 11:50:22.755"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:50:23.473" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:23.473" starttime="20190402 11:50:23.472"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:50:23.473" level="INFO">${clean_out} = default       testpod                                                       0/1     ImagePullBackOff   0          5h31m   172.16.0.6     controller-0   &lt;none&gt;
</msg>
<status status="PASS" endtime="20190402 11:50:23.473" starttime="20190402 11:50:23.473"></status>
</kw>
<msg timestamp="20190402 11:50:23.473" level="INFO">${output} = default       testpod                                                       0/1     ImagePullBackOff   0          5h31m   172.16.0.6     controller-0   &lt;none&gt;
</msg>
<status status="PASS" endtime="20190402 11:50:23.473" starttime="20190402 11:50:23.471"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:50:23.476" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:50:23.476" starttime="20190402 11:50:23.474"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:23.476" level="INFO">0</msg>
<msg timestamp="20190402 11:50:23.476" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:23.476" starttime="20190402 11:50:23.476"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:50:23.476" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:50:23.476" starttime="20190402 11:50:23.476"></status>
</kw>
<msg timestamp="20190402 11:50:23.477" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:23.477" starttime="20190402 11:50:23.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:23.477" starttime="20190402 11:50:23.477"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:23.477" starttime="20190402 11:50:23.477"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:23.478" starttime="20190402 11:50:23.477"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:50:23.478" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: default       testpod                                                       0/1     ImagePullBackOff   0          5h31m   172.16.0.6     controller-0   &lt;none&gt;</msg>
<status status="PASS" endtime="20190402 11:50:23.478" starttime="20190402 11:50:23.478"></status>
</kw>
<msg timestamp="20190402 11:50:23.478" level="INFO">&amp;{result} = { stdout=default       testpod                                                       0/1     ImagePullBackOff   0          5h31m   172.16.0.6     controller-0   &lt;none&gt; | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:50:23.478" starttime="20190402 11:50:22.733"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:50:23.479" level="INFO">${value} = default       testpod                                                       0/1     ImagePullBackOff   0          5h31m   172.16.0.6     controller-0   &lt;none&gt;</msg>
<status status="PASS" endtime="20190402 11:50:23.479" starttime="20190402 11:50:23.478"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<msg timestamp="20190402 11:50:23.479" level="INFO">Length is 158</msg>
<msg timestamp="20190402 11:50:23.479" level="FAIL">'default       testpod                                                       0/1     ImagePullBackOff   0          5h31m   172.16.0.6     controller-0   &lt;none&gt;' should be empty.</msg>
<status status="FAIL" endtime="20190402 11:50:23.479" starttime="20190402 11:50:23.479"></status>
</kw>
<status status="FAIL" endtime="20190402 11:50:23.479" starttime="20190402 11:50:22.732"></status>
</kw>
<doc>Check all OpenStack pods are healthy, in Running or
Completed state.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190402 11:50:23.480" critical="yes" starttime="20190402 11:50:21.506">'default       testpod                                                       0/1     ImagePullBackOff   0          5h31m   172.16.0.6     controller-0   &lt;none&gt;' should be empty.</status>
</test>
<test id="s1-s2-s1-t2" name="Reapply STX OpenStack">
<kw name="System Application Apply" library="Utils">
<doc>Run the system aplication apply</doc>
<arguments>
<arg>stx-openstack</arg>
</arguments>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>system application-apply ${application}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:23.481" starttime="20190402 11:50:23.481"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:50:23.482" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:50:23.482" starttime="20190402 11:50:23.482"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:23.483" starttime="20190402 11:50:23.482"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:23.483" starttime="20190402 11:50:23.483"></status>
</kw>
<msg timestamp="20190402 11:50:23.483" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:50:23.483" starttime="20190402 11:50:23.481"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:50:23.484" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:23.484" starttime="20190402 11:50:23.484"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:50:23.487" level="INFO">system application-apply stx-openstack [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kk</msg>
<status status="PASS" endtime="20190402 11:50:23.487" starttime="20190402 11:50:23.484"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:50:24.548" level="INFO">+---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00.451151+00:00 |
| manifest_file | manifest.yaml                    |
| manifest_name | armada-manifest                  |
| name          | stx-openstack                    |
| progress      | None                             |
| status        | applying                         |
| updated_at    | 2019-04-02T16:31:02.383659+00:00 |
+---------------+----------------------------------+
Please use 'system application-list' or 'system application-show stx-openstack' to view the current progress.
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:50:24.548" level="INFO">${output} = +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00....</msg>
<status status="PASS" endtime="20190402 11:50:24.548" starttime="20190402 11:50:23.487"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:50:24.549" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:24.549" starttime="20190402 11:50:24.549"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:50:24.549" level="INFO">${clean_out} = +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00....</msg>
<status status="PASS" endtime="20190402 11:50:24.549" starttime="20190402 11:50:24.549"></status>
</kw>
<msg timestamp="20190402 11:50:24.550" level="INFO">${output} = +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00....</msg>
<status status="PASS" endtime="20190402 11:50:24.550" starttime="20190402 11:50:24.548"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:50:24.552" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:50:24.552" starttime="20190402 11:50:24.550"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:24.553" level="INFO">0</msg>
<msg timestamp="20190402 11:50:24.553" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:24.553" starttime="20190402 11:50:24.552"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:50:24.553" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:50:24.554" starttime="20190402 11:50:24.553"></status>
</kw>
<msg timestamp="20190402 11:50:24.554" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:24.554" starttime="20190402 11:50:24.550"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:24.555" starttime="20190402 11:50:24.554"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:24.555" starttime="20190402 11:50:24.554"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:24.555" starttime="20190402 11:50:24.555"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:50:24.555" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00.451151+00:00 |
| manifest_file | manifest.yaml                    |
| manifest_name | armada-manifest                  |
| name          | stx-openstack                    |
| progress      | None                             |
| status        | applying                         |
| updated_at    | 2019-04-02T16:31:02.383659+00:00 |
+---------------+----------------------------------+
Please use 'system application-list' or 'system application-show stx-openstack' to view the current progress.</msg>
<status status="PASS" endtime="20190402 11:50:24.555" starttime="20190402 11:50:24.555"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:24.555" starttime="20190402 11:50:23.481"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>90 min</arg>
<arg>5 sec</arg>
<arg>Check System Application Status</arg>
<arg>${application}</arg>
<arg>applied</arg>
</arguments>
<kw name="Check System Application Status" library="Utils">
<doc>Check if openstack applications were applied.</doc>
<arguments>
<arg>${application}</arg>
<arg>applied</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>system application-list</arg>
<arg>grep ${application}</arg>
<arg>awk '{print $8}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:24.557" level="INFO">${cmd} = system application-list|grep stx-openstack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:50:24.557" starttime="20190402 11:50:24.556"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:24.557" starttime="20190402 11:50:24.557"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:50:24.558" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:50:24.558" starttime="20190402 11:50:24.558"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:24.558" starttime="20190402 11:50:24.558"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:24.559" starttime="20190402 11:50:24.558"></status>
</kw>
<msg timestamp="20190402 11:50:24.559" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:50:24.559" starttime="20190402 11:50:24.557"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:50:24.559" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:24.559" starttime="20190402 11:50:24.559"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:50:24.571" level="INFO">system application-list|grep stx-opens tack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:50:24.571" starttime="20190402 11:50:24.559"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:50:25.769" level="INFO">applying
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:50:25.769" level="INFO">${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:25.770" starttime="20190402 11:50:24.571"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:50:25.770" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:25.770" starttime="20190402 11:50:25.770"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:50:25.771" level="INFO">${clean_out} = applying
</msg>
<status status="PASS" endtime="20190402 11:50:25.771" starttime="20190402 11:50:25.770"></status>
</kw>
<msg timestamp="20190402 11:50:25.771" level="INFO">${output} = applying
</msg>
<status status="PASS" endtime="20190402 11:50:25.771" starttime="20190402 11:50:25.770"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:50:25.774" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:50:25.774" starttime="20190402 11:50:25.771"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:25.774" level="INFO">0</msg>
<msg timestamp="20190402 11:50:25.774" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:25.774" starttime="20190402 11:50:25.774"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:50:25.775" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:50:25.775" starttime="20190402 11:50:25.775"></status>
</kw>
<msg timestamp="20190402 11:50:25.775" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:25.775" starttime="20190402 11:50:25.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:25.776" starttime="20190402 11:50:25.775"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:25.776" starttime="20190402 11:50:25.775"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:25.776" starttime="20190402 11:50:25.776"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:50:25.777" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying</msg>
<status status="PASS" endtime="20190402 11:50:25.777" starttime="20190402 11:50:25.777"></status>
</kw>
<msg timestamp="20190402 11:50:25.777" level="INFO">&amp;{result} = { stdout=applying | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:50:25.777" starttime="20190402 11:50:24.557"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:50:25.777" level="INFO">${value} = applying</msg>
<status status="PASS" endtime="20190402 11:50:25.777" starttime="20190402 11:50:25.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${value}' == 'apply-failed'</arg>
<arg>System Application Apply</arg>
<arg>${application}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<msg timestamp="20190402 11:50:25.778" level="FAIL">applying != applied</msg>
<status status="FAIL" endtime="20190402 11:50:25.778" starttime="20190402 11:50:25.778"></status>
</kw>
<status status="FAIL" endtime="20190402 11:50:25.778" starttime="20190402 11:50:25.778"></status>
</kw>
<status status="FAIL" endtime="20190402 11:50:25.778" starttime="20190402 11:50:24.556"></status>
</kw>
<kw name="Check System Application Status" library="Utils">
<doc>Check if openstack applications were applied.</doc>
<arguments>
<arg>${application}</arg>
<arg>applied</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>system application-list</arg>
<arg>grep ${application}</arg>
<arg>awk '{print $8}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:30.780" level="INFO">${cmd} = system application-list|grep stx-openstack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:50:30.781" starttime="20190402 11:50:30.780"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:30.782" starttime="20190402 11:50:30.782"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:50:30.784" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:50:30.785" starttime="20190402 11:50:30.783"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:30.785" starttime="20190402 11:50:30.785"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:30.786" starttime="20190402 11:50:30.786"></status>
</kw>
<msg timestamp="20190402 11:50:30.787" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:50:30.787" starttime="20190402 11:50:30.783"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:50:30.788" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:30.788" starttime="20190402 11:50:30.787"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:50:30.817" level="INFO">system application-list|grep stx-opens tack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:50:30.817" starttime="20190402 11:50:30.788"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:50:36.315" level="INFO">applying
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:50:36.315" level="INFO">${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:36.315" starttime="20190402 11:50:30.817"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:50:36.316" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:36.316" starttime="20190402 11:50:36.315"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:50:36.316" level="INFO">${clean_out} = applying
</msg>
<status status="PASS" endtime="20190402 11:50:36.316" starttime="20190402 11:50:36.316"></status>
</kw>
<msg timestamp="20190402 11:50:36.316" level="INFO">${output} = applying
</msg>
<status status="PASS" endtime="20190402 11:50:36.316" starttime="20190402 11:50:36.315"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:50:36.318" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:50:36.318" starttime="20190402 11:50:36.316"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:36.326" level="INFO">0</msg>
<msg timestamp="20190402 11:50:36.326" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:36.326" starttime="20190402 11:50:36.318"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:50:36.326" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:50:36.326" starttime="20190402 11:50:36.326"></status>
</kw>
<msg timestamp="20190402 11:50:36.326" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:36.326" starttime="20190402 11:50:36.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:36.327" starttime="20190402 11:50:36.327"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:36.327" starttime="20190402 11:50:36.326"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:36.327" starttime="20190402 11:50:36.327"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:50:36.328" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying</msg>
<status status="PASS" endtime="20190402 11:50:36.328" starttime="20190402 11:50:36.328"></status>
</kw>
<msg timestamp="20190402 11:50:36.328" level="INFO">&amp;{result} = { stdout=applying | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:50:36.328" starttime="20190402 11:50:30.781"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:50:36.329" level="INFO">${value} = applying</msg>
<status status="PASS" endtime="20190402 11:50:36.329" starttime="20190402 11:50:36.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${value}' == 'apply-failed'</arg>
<arg>System Application Apply</arg>
<arg>${application}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<msg timestamp="20190402 11:50:36.330" level="FAIL">applying != applied</msg>
<status status="FAIL" endtime="20190402 11:50:36.330" starttime="20190402 11:50:36.329"></status>
</kw>
<status status="FAIL" endtime="20190402 11:50:36.330" starttime="20190402 11:50:36.329"></status>
</kw>
<status status="FAIL" endtime="20190402 11:50:36.330" starttime="20190402 11:50:30.779"></status>
</kw>
<kw name="Check System Application Status" library="Utils">
<doc>Check if openstack applications were applied.</doc>
<arguments>
<arg>${application}</arg>
<arg>applied</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>system application-list</arg>
<arg>grep ${application}</arg>
<arg>awk '{print $8}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:41.332" level="INFO">${cmd} = system application-list|grep stx-openstack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:50:41.332" starttime="20190402 11:50:41.331"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:41.334" starttime="20190402 11:50:41.333"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:50:41.336" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:50:41.336" starttime="20190402 11:50:41.335"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:41.337" starttime="20190402 11:50:41.336"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:41.338" starttime="20190402 11:50:41.337"></status>
</kw>
<msg timestamp="20190402 11:50:41.339" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:50:41.339" starttime="20190402 11:50:41.334"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:50:41.339" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:41.340" starttime="20190402 11:50:41.339"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:50:41.367" level="INFO">system application-list|grep stx-opens tack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:50:41.367" starttime="20190402 11:50:41.340"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:50:43.192" level="INFO">applying
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:50:43.192" level="INFO">${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:43.192" starttime="20190402 11:50:41.367"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:50:43.193" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:43.193" starttime="20190402 11:50:43.193"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:50:43.193" level="INFO">${clean_out} = applying
</msg>
<status status="PASS" endtime="20190402 11:50:43.193" starttime="20190402 11:50:43.193"></status>
</kw>
<msg timestamp="20190402 11:50:43.193" level="INFO">${output} = applying
</msg>
<status status="PASS" endtime="20190402 11:50:43.193" starttime="20190402 11:50:43.192"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:50:43.196" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:50:43.196" starttime="20190402 11:50:43.194"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:43.200" level="INFO">0</msg>
<msg timestamp="20190402 11:50:43.200" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:43.200" starttime="20190402 11:50:43.196"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:50:43.200" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:50:43.200" starttime="20190402 11:50:43.200"></status>
</kw>
<msg timestamp="20190402 11:50:43.200" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:43.200" starttime="20190402 11:50:43.194"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:43.201" starttime="20190402 11:50:43.201"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:43.201" starttime="20190402 11:50:43.200"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:43.201" starttime="20190402 11:50:43.201"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:50:43.202" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying</msg>
<status status="PASS" endtime="20190402 11:50:43.202" starttime="20190402 11:50:43.201"></status>
</kw>
<msg timestamp="20190402 11:50:43.202" level="INFO">&amp;{result} = { stdout=applying | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:50:43.202" starttime="20190402 11:50:41.332"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:50:43.202" level="INFO">${value} = applying</msg>
<status status="PASS" endtime="20190402 11:50:43.202" starttime="20190402 11:50:43.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${value}' == 'apply-failed'</arg>
<arg>System Application Apply</arg>
<arg>${application}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<msg timestamp="20190402 11:50:43.203" level="FAIL">applying != applied</msg>
<status status="FAIL" endtime="20190402 11:50:43.203" starttime="20190402 11:50:43.203"></status>
</kw>
<status status="FAIL" endtime="20190402 11:50:43.203" starttime="20190402 11:50:43.202"></status>
</kw>
<status status="FAIL" endtime="20190402 11:50:43.203" starttime="20190402 11:50:41.330"></status>
</kw>
<kw name="Check System Application Status" library="Utils">
<doc>Check if openstack applications were applied.</doc>
<arguments>
<arg>${application}</arg>
<arg>applied</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>system application-list</arg>
<arg>grep ${application}</arg>
<arg>awk '{print $8}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:48.206" level="INFO">${cmd} = system application-list|grep stx-openstack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:50:48.206" starttime="20190402 11:50:48.205"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:48.208" starttime="20190402 11:50:48.207"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:50:48.210" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:50:48.210" starttime="20190402 11:50:48.209"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:48.211" starttime="20190402 11:50:48.210"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:48.211" starttime="20190402 11:50:48.211"></status>
</kw>
<msg timestamp="20190402 11:50:48.212" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:50:48.212" starttime="20190402 11:50:48.208"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:50:48.213" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:48.213" starttime="20190402 11:50:48.212"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:50:48.230" level="INFO">system application-list|grep stx-opens tack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:50:48.230" starttime="20190402 11:50:48.213"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:50:49.855" level="INFO">applied
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:50:49.855" level="INFO">${output} = applied
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:49.855" starttime="20190402 11:50:48.230"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:50:49.856" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:49.856" starttime="20190402 11:50:49.856"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:50:49.856" level="INFO">${clean_out} = applied
</msg>
<status status="PASS" endtime="20190402 11:50:49.856" starttime="20190402 11:50:49.856"></status>
</kw>
<msg timestamp="20190402 11:50:49.857" level="INFO">${output} = applied
</msg>
<status status="PASS" endtime="20190402 11:50:49.857" starttime="20190402 11:50:49.855"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:50:49.859" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:50:49.859" starttime="20190402 11:50:49.857"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:49.866" level="INFO">0</msg>
<msg timestamp="20190402 11:50:49.866" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:49.866" starttime="20190402 11:50:49.859"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:50:49.866" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:50:49.866" starttime="20190402 11:50:49.866"></status>
</kw>
<msg timestamp="20190402 11:50:49.866" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:49.866" starttime="20190402 11:50:49.857"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:49.867" starttime="20190402 11:50:49.867"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:49.867" starttime="20190402 11:50:49.866"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:49.867" starttime="20190402 11:50:49.867"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:50:49.868" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applied</msg>
<status status="PASS" endtime="20190402 11:50:49.868" starttime="20190402 11:50:49.868"></status>
</kw>
<msg timestamp="20190402 11:50:49.868" level="INFO">&amp;{result} = { stdout=applied | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:50:49.868" starttime="20190402 11:50:48.206"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:50:49.868" level="INFO">${value} = applied</msg>
<status status="PASS" endtime="20190402 11:50:49.868" starttime="20190402 11:50:49.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${value}' == 'apply-failed'</arg>
<arg>System Application Apply</arg>
<arg>${application}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:49.869" starttime="20190402 11:50:49.869"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:49.869" starttime="20190402 11:50:49.869"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:49.869" starttime="20190402 11:50:48.204"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:49.869" starttime="20190402 11:50:24.556"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:49.869" starttime="20190402 11:50:23.480"></status>
</kw>
<doc>Re apply stx openstack application without any
modification to helm charts.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:50:49.870" critical="yes" starttime="20190402 11:50:23.480"></status>
</test>
<test id="s1-s2-s1-t3" name="STX OpenStack Override Update Reset">
<kw name="Helm Override OpenStack" library="Utils">
<doc>Helm override for OpenStack nova chart and reset.</doc>
<arguments>
<arg>nova</arg>
<arg>openstack</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>system helm-override-update</arg>
</arguments>
<assign>
<var>${kubectl_cmd}</var>
</assign>
<msg timestamp="20190402 11:50:49.871" level="INFO">${kubectl_cmd} = system helm-override-update</msg>
<status status="PASS" endtime="20190402 11:50:49.871" starttime="20190402 11:50:49.871"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${kubectl_cmd}</arg>
<arg>--set conf.nova.DEFAULT.foo=bar</arg>
<arg>${char_name}</arg>
<arg>${namespace}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:49.872" level="INFO">${cmd} = system helm-override-update --set conf.nova.DEFAULT.foo=bar nova openstack</msg>
<status status="PASS" endtime="20190402 11:50:49.872" starttime="20190402 11:50:49.871"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:49.872" starttime="20190402 11:50:49.872"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:50:49.873" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:50:49.873" starttime="20190402 11:50:49.873"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:49.874" starttime="20190402 11:50:49.873"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:49.874" starttime="20190402 11:50:49.874"></status>
</kw>
<msg timestamp="20190402 11:50:49.874" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:50:49.874" starttime="20190402 11:50:49.873"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:50:49.875" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:49.875" starttime="20190402 11:50:49.874"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:50:49.882" level="INFO">system helm-override-update --set conf .nova.DEFAULT.foo=bar nova openstack</msg>
<status status="PASS" endtime="20190402 11:50:49.882" starttime="20190402 11:50:49.875"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:50:51.781" level="INFO">+----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_overrides | conf:          |
|                |   nova:        |
|                |     DEFAULT:   |
|                |       foo: bar |
|                |                |
+----------------+----------------+
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:50:51.782" level="INFO">${output} = +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_override...</msg>
<status status="PASS" endtime="20190402 11:50:51.782" starttime="20190402 11:50:49.882"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:50:51.783" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:51.783" starttime="20190402 11:50:51.782"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:50:51.783" level="INFO">${clean_out} = +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_override...</msg>
<status status="PASS" endtime="20190402 11:50:51.783" starttime="20190402 11:50:51.783"></status>
</kw>
<msg timestamp="20190402 11:50:51.783" level="INFO">${output} = +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_override...</msg>
<status status="PASS" endtime="20190402 11:50:51.783" starttime="20190402 11:50:51.782"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:50:51.785" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:50:51.785" starttime="20190402 11:50:51.783"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:51.786" level="INFO">0</msg>
<msg timestamp="20190402 11:50:51.786" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:51.786" starttime="20190402 11:50:51.785"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:50:51.786" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:50:51.786" starttime="20190402 11:50:51.786"></status>
</kw>
<msg timestamp="20190402 11:50:51.786" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:51.786" starttime="20190402 11:50:51.783"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:51.787" starttime="20190402 11:50:51.787"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:51.787" starttime="20190402 11:50:51.786"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:51.787" starttime="20190402 11:50:51.787"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:50:51.788" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_overrides | conf:          |
|                |   nova:        |
|                |     DEFAULT:   |
|                |       foo: bar |
|                |                |
+----------------+----------------+</msg>
<status status="PASS" endtime="20190402 11:50:51.788" starttime="20190402 11:50:51.787"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:51.788" starttime="20190402 11:50:49.872"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:51.788" starttime="20190402 11:50:49.870"></status>
</kw>
<kw name="System Application Apply" library="Utils">
<doc>Run the system aplication apply</doc>
<arguments>
<arg>stx-openstack</arg>
</arguments>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>system application-apply ${application}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:51.789" starttime="20190402 11:50:51.789"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:50:51.790" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:50:51.790" starttime="20190402 11:50:51.790"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:51.791" starttime="20190402 11:50:51.790"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:51.791" starttime="20190402 11:50:51.791"></status>
</kw>
<msg timestamp="20190402 11:50:51.791" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:50:51.791" starttime="20190402 11:50:51.790"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:50:51.792" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:51.792" starttime="20190402 11:50:51.791"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:50:51.794" level="INFO">system application-apply stx-openstack [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kk</msg>
<status status="PASS" endtime="20190402 11:50:51.794" starttime="20190402 11:50:51.792"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:50:52.993" level="INFO">+---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00.451151+00:00 |
| manifest_file | manifest.yaml                    |
| manifest_name | armada-manifest                  |
| name          | stx-openstack                    |
| progress      | None                             |
| status        | applying                         |
| updated_at    | 2019-04-02T17:39:32.121145+00:00 |
+---------------+----------------------------------+
Please use 'system application-list' or 'system application-show stx-openstack' to view the current progress.
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:50:52.993" level="INFO">${output} = +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00....</msg>
<status status="PASS" endtime="20190402 11:50:52.993" starttime="20190402 11:50:51.795"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:50:52.994" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:52.994" starttime="20190402 11:50:52.994"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:50:52.995" level="INFO">${clean_out} = +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00....</msg>
<status status="PASS" endtime="20190402 11:50:52.995" starttime="20190402 11:50:52.994"></status>
</kw>
<msg timestamp="20190402 11:50:52.995" level="INFO">${output} = +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00....</msg>
<status status="PASS" endtime="20190402 11:50:52.995" starttime="20190402 11:50:52.994"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:50:52.997" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:50:52.997" starttime="20190402 11:50:52.995"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:52.997" level="INFO">0</msg>
<msg timestamp="20190402 11:50:52.998" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:52.998" starttime="20190402 11:50:52.997"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:50:52.998" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:50:52.998" starttime="20190402 11:50:52.998"></status>
</kw>
<msg timestamp="20190402 11:50:52.998" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:52.998" starttime="20190402 11:50:52.995"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:52.999" starttime="20190402 11:50:52.999"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:52.999" starttime="20190402 11:50:52.998"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:52.999" starttime="20190402 11:50:52.999"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:50:52.999" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00.451151+00:00 |
| manifest_file | manifest.yaml                    |
| manifest_name | armada-manifest                  |
| name          | stx-openstack                    |
| progress      | None                             |
| status        | applying                         |
| updated_at    | 2019-04-02T17:39:32.121145+00:00 |
+---------------+----------------------------------+
Please use 'system application-list' or 'system application-show stx-openstack' to view the current progress.</msg>
<status status="PASS" endtime="20190402 11:50:52.999" starttime="20190402 11:50:52.999"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:53.000" starttime="20190402 11:50:51.789"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>90 min</arg>
<arg>5 sec</arg>
<arg>Check System Application Status</arg>
<arg>${application}</arg>
<arg>applied</arg>
</arguments>
<kw name="Check System Application Status" library="Utils">
<doc>Check if openstack applications were applied.</doc>
<arguments>
<arg>${application}</arg>
<arg>applied</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>system application-list</arg>
<arg>grep ${application}</arg>
<arg>awk '{print $8}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:53.001" level="INFO">${cmd} = system application-list|grep stx-openstack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:50:53.001" starttime="20190402 11:50:53.000"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:53.001" starttime="20190402 11:50:53.001"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:50:53.002" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:50:53.002" starttime="20190402 11:50:53.002"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:53.002" starttime="20190402 11:50:53.002"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:53.003" starttime="20190402 11:50:53.002"></status>
</kw>
<msg timestamp="20190402 11:50:53.003" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:50:53.003" starttime="20190402 11:50:53.001"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:50:53.003" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:53.003" starttime="20190402 11:50:53.003"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:50:53.005" level="INFO">system application-list|grep stx-opens tack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:50:53.005" starttime="20190402 11:50:53.003"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:50:54.203" level="INFO">applying
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:50:54.203" level="INFO">${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:54.203" starttime="20190402 11:50:53.006"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:50:54.204" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:54.204" starttime="20190402 11:50:54.204"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:50:54.205" level="INFO">${clean_out} = applying
</msg>
<status status="PASS" endtime="20190402 11:50:54.205" starttime="20190402 11:50:54.204"></status>
</kw>
<msg timestamp="20190402 11:50:54.205" level="INFO">${output} = applying
</msg>
<status status="PASS" endtime="20190402 11:50:54.205" starttime="20190402 11:50:54.203"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:50:54.207" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:50:54.207" starttime="20190402 11:50:54.205"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:50:54.211" level="INFO">0</msg>
<msg timestamp="20190402 11:50:54.211" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:54.211" starttime="20190402 11:50:54.207"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:50:54.211" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:50:54.211" starttime="20190402 11:50:54.211"></status>
</kw>
<msg timestamp="20190402 11:50:54.212" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:50:54.212" starttime="20190402 11:50:54.205"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:54.212" starttime="20190402 11:50:54.212"></status>
</kw>
<status status="PASS" endtime="20190402 11:50:54.212" starttime="20190402 11:50:54.212"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:54.213" starttime="20190402 11:50:54.213"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:50:54.213" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying</msg>
<status status="PASS" endtime="20190402 11:50:54.213" starttime="20190402 11:50:54.213"></status>
</kw>
<msg timestamp="20190402 11:50:54.214" level="INFO">&amp;{result} = { stdout=applying | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:50:54.214" starttime="20190402 11:50:53.001"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:50:54.214" level="INFO">${value} = applying</msg>
<status status="PASS" endtime="20190402 11:50:54.214" starttime="20190402 11:50:54.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${value}' == 'apply-failed'</arg>
<arg>System Application Apply</arg>
<arg>${application}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<msg timestamp="20190402 11:50:54.215" level="FAIL">applying != applied</msg>
<status status="FAIL" endtime="20190402 11:50:54.215" starttime="20190402 11:50:54.214"></status>
</kw>
<status status="FAIL" endtime="20190402 11:50:54.215" starttime="20190402 11:50:54.214"></status>
</kw>
<status status="FAIL" endtime="20190402 11:50:54.215" starttime="20190402 11:50:53.000"></status>
</kw>
<kw name="Check System Application Status" library="Utils">
<doc>Check if openstack applications were applied.</doc>
<arguments>
<arg>${application}</arg>
<arg>applied</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>system application-list</arg>
<arg>grep ${application}</arg>
<arg>awk '{print $8}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:50:59.216" level="INFO">${cmd} = system application-list|grep stx-openstack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:50:59.216" starttime="20190402 11:50:59.216"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:59.217" starttime="20190402 11:50:59.217"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:50:59.218" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:50:59.218" starttime="20190402 11:50:59.218"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:59.218" starttime="20190402 11:50:59.218"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:50:59.219" starttime="20190402 11:50:59.218"></status>
</kw>
<msg timestamp="20190402 11:50:59.219" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:50:59.219" starttime="20190402 11:50:59.217"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:50:59.219" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:50:59.219" starttime="20190402 11:50:59.219"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:50:59.231" level="INFO">system application-list|grep stx-opens tack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:50:59.231" starttime="20190402 11:50:59.219"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:51:01.161" level="INFO">applying
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:51:01.161" level="INFO">${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:01.161" starttime="20190402 11:50:59.232"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:51:01.162" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:01.162" starttime="20190402 11:51:01.162"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:51:01.163" level="INFO">${clean_out} = applying
</msg>
<status status="PASS" endtime="20190402 11:51:01.163" starttime="20190402 11:51:01.162"></status>
</kw>
<msg timestamp="20190402 11:51:01.163" level="INFO">${output} = applying
</msg>
<status status="PASS" endtime="20190402 11:51:01.163" starttime="20190402 11:51:01.162"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:51:01.165" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:51:01.165" starttime="20190402 11:51:01.163"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:51:01.165" level="INFO">0</msg>
<msg timestamp="20190402 11:51:01.165" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:01.165" starttime="20190402 11:51:01.165"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:51:01.166" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:51:01.166" starttime="20190402 11:51:01.165"></status>
</kw>
<msg timestamp="20190402 11:51:01.166" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:01.166" starttime="20190402 11:51:01.163"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:01.167" starttime="20190402 11:51:01.166"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:01.167" starttime="20190402 11:51:01.166"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:01.167" starttime="20190402 11:51:01.167"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:51:01.167" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying</msg>
<status status="PASS" endtime="20190402 11:51:01.167" starttime="20190402 11:51:01.167"></status>
</kw>
<msg timestamp="20190402 11:51:01.167" level="INFO">&amp;{result} = { stdout=applying | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:51:01.168" starttime="20190402 11:50:59.217"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:51:01.168" level="INFO">${value} = applying</msg>
<status status="PASS" endtime="20190402 11:51:01.168" starttime="20190402 11:51:01.168"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${value}' == 'apply-failed'</arg>
<arg>System Application Apply</arg>
<arg>${application}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<msg timestamp="20190402 11:51:01.169" level="FAIL">applying != applied</msg>
<status status="FAIL" endtime="20190402 11:51:01.169" starttime="20190402 11:51:01.168"></status>
</kw>
<status status="FAIL" endtime="20190402 11:51:01.169" starttime="20190402 11:51:01.168"></status>
</kw>
<status status="FAIL" endtime="20190402 11:51:01.169" starttime="20190402 11:50:59.215"></status>
</kw>
<kw name="Check System Application Status" library="Utils">
<doc>Check if openstack applications were applied.</doc>
<arguments>
<arg>${application}</arg>
<arg>applied</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>system application-list</arg>
<arg>grep ${application}</arg>
<arg>awk '{print $8}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:51:06.172" level="INFO">${cmd} = system application-list|grep stx-openstack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:51:06.172" starttime="20190402 11:51:06.171"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:06.174" starttime="20190402 11:51:06.173"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:51:06.176" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:51:06.176" starttime="20190402 11:51:06.175"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:06.177" starttime="20190402 11:51:06.177"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:06.178" starttime="20190402 11:51:06.178"></status>
</kw>
<msg timestamp="20190402 11:51:06.179" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:51:06.179" starttime="20190402 11:51:06.174"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:51:06.179" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:06.180" starttime="20190402 11:51:06.179"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:51:06.209" level="INFO">system application-list|grep stx-opens tack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:51:06.210" starttime="20190402 11:51:06.180"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:51:09.089" level="INFO">applying
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:51:09.089" level="INFO">${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:09.089" starttime="20190402 11:51:06.210"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:51:09.090" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:09.090" starttime="20190402 11:51:09.089"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:51:09.090" level="INFO">${clean_out} = applying
</msg>
<status status="PASS" endtime="20190402 11:51:09.090" starttime="20190402 11:51:09.090"></status>
</kw>
<msg timestamp="20190402 11:51:09.090" level="INFO">${output} = applying
</msg>
<status status="PASS" endtime="20190402 11:51:09.090" starttime="20190402 11:51:09.089"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:51:09.093" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:51:09.093" starttime="20190402 11:51:09.090"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:51:09.096" level="INFO">0</msg>
<msg timestamp="20190402 11:51:09.096" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:09.096" starttime="20190402 11:51:09.093"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:51:09.097" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:51:09.097" starttime="20190402 11:51:09.096"></status>
</kw>
<msg timestamp="20190402 11:51:09.097" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:09.097" starttime="20190402 11:51:09.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:09.098" starttime="20190402 11:51:09.097"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:09.098" starttime="20190402 11:51:09.097"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:09.098" starttime="20190402 11:51:09.098"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:51:09.098" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying</msg>
<status status="PASS" endtime="20190402 11:51:09.098" starttime="20190402 11:51:09.098"></status>
</kw>
<msg timestamp="20190402 11:51:09.099" level="INFO">&amp;{result} = { stdout=applying | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:51:09.099" starttime="20190402 11:51:06.172"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:51:09.099" level="INFO">${value} = applying</msg>
<status status="PASS" endtime="20190402 11:51:09.099" starttime="20190402 11:51:09.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${value}' == 'apply-failed'</arg>
<arg>System Application Apply</arg>
<arg>${application}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<msg timestamp="20190402 11:51:09.100" level="FAIL">applying != applied</msg>
<status status="FAIL" endtime="20190402 11:51:09.100" starttime="20190402 11:51:09.099"></status>
</kw>
<status status="FAIL" endtime="20190402 11:51:09.100" starttime="20190402 11:51:09.099"></status>
</kw>
<status status="FAIL" endtime="20190402 11:51:09.100" starttime="20190402 11:51:06.169"></status>
</kw>
<kw name="Check System Application Status" library="Utils">
<doc>Check if openstack applications were applied.</doc>
<arguments>
<arg>${application}</arg>
<arg>applied</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>system application-list</arg>
<arg>grep ${application}</arg>
<arg>awk '{print $8}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:51:14.103" level="INFO">${cmd} = system application-list|grep stx-openstack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:51:14.103" starttime="20190402 11:51:14.102"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:14.105" starttime="20190402 11:51:14.104"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:51:14.108" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:51:14.108" starttime="20190402 11:51:14.107"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:14.109" starttime="20190402 11:51:14.108"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:14.110" starttime="20190402 11:51:14.109"></status>
</kw>
<msg timestamp="20190402 11:51:14.111" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:51:14.111" starttime="20190402 11:51:14.106"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:51:14.112" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:14.112" starttime="20190402 11:51:14.111"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:51:14.140" level="INFO">system application-list|grep stx-opens tack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:51:14.140" starttime="20190402 11:51:14.112"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:51:15.535" level="INFO">applying
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:51:15.535" level="INFO">${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:15.535" starttime="20190402 11:51:14.141"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:51:15.536" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:15.536" starttime="20190402 11:51:15.536"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:51:15.537" level="INFO">${clean_out} = applying
</msg>
<status status="PASS" endtime="20190402 11:51:15.537" starttime="20190402 11:51:15.536"></status>
</kw>
<msg timestamp="20190402 11:51:15.537" level="INFO">${output} = applying
</msg>
<status status="PASS" endtime="20190402 11:51:15.537" starttime="20190402 11:51:15.536"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:51:15.539" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:51:15.540" starttime="20190402 11:51:15.537"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:51:15.540" level="INFO">0</msg>
<msg timestamp="20190402 11:51:15.540" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:15.540" starttime="20190402 11:51:15.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:51:15.540" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:51:15.540" starttime="20190402 11:51:15.540"></status>
</kw>
<msg timestamp="20190402 11:51:15.540" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:15.541" starttime="20190402 11:51:15.537"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:15.542" starttime="20190402 11:51:15.541"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:15.542" starttime="20190402 11:51:15.541"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:15.542" starttime="20190402 11:51:15.542"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:51:15.542" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying</msg>
<status status="PASS" endtime="20190402 11:51:15.543" starttime="20190402 11:51:15.542"></status>
</kw>
<msg timestamp="20190402 11:51:15.543" level="INFO">&amp;{result} = { stdout=applying | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:51:15.543" starttime="20190402 11:51:14.103"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:51:15.543" level="INFO">${value} = applying</msg>
<status status="PASS" endtime="20190402 11:51:15.543" starttime="20190402 11:51:15.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${value}' == 'apply-failed'</arg>
<arg>System Application Apply</arg>
<arg>${application}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<msg timestamp="20190402 11:51:15.544" level="FAIL">applying != applied</msg>
<status status="FAIL" endtime="20190402 11:51:15.544" starttime="20190402 11:51:15.544"></status>
</kw>
<status status="FAIL" endtime="20190402 11:51:15.544" starttime="20190402 11:51:15.543"></status>
</kw>
<status status="FAIL" endtime="20190402 11:51:15.544" starttime="20190402 11:51:14.100"></status>
</kw>
<kw name="Check System Application Status" library="Utils">
<doc>Check if openstack applications were applied.</doc>
<arguments>
<arg>${application}</arg>
<arg>applied</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>system application-list</arg>
<arg>grep ${application}</arg>
<arg>awk '{print $8}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:51:20.546" level="INFO">${cmd} = system application-list|grep stx-openstack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:51:20.547" starttime="20190402 11:51:20.546"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:20.549" starttime="20190402 11:51:20.548"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:51:20.551" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:51:20.551" starttime="20190402 11:51:20.550"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:20.552" starttime="20190402 11:51:20.552"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:20.553" starttime="20190402 11:51:20.552"></status>
</kw>
<msg timestamp="20190402 11:51:20.554" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:51:20.554" starttime="20190402 11:51:20.549"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:51:20.555" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:20.555" starttime="20190402 11:51:20.555"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:51:20.576" level="INFO">system application-list|grep stx-opens tack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190402 11:51:20.576" starttime="20190402 11:51:20.556"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:51:22.394" level="INFO">applied
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:51:22.395" level="INFO">${output} = applied
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:22.395" starttime="20190402 11:51:20.576"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:51:22.396" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:22.396" starttime="20190402 11:51:22.396"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:51:22.396" level="INFO">${clean_out} = applied
</msg>
<status status="PASS" endtime="20190402 11:51:22.396" starttime="20190402 11:51:22.396"></status>
</kw>
<msg timestamp="20190402 11:51:22.397" level="INFO">${output} = applied
</msg>
<status status="PASS" endtime="20190402 11:51:22.397" starttime="20190402 11:51:22.395"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:51:22.399" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:51:22.399" starttime="20190402 11:51:22.397"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:51:22.408" level="INFO">0</msg>
<msg timestamp="20190402 11:51:22.408" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:22.408" starttime="20190402 11:51:22.399"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:51:22.409" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:51:22.409" starttime="20190402 11:51:22.408"></status>
</kw>
<msg timestamp="20190402 11:51:22.409" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:22.409" starttime="20190402 11:51:22.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:22.410" starttime="20190402 11:51:22.410"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:22.410" starttime="20190402 11:51:22.409"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:22.410" starttime="20190402 11:51:22.410"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:51:22.411" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applied</msg>
<status status="PASS" endtime="20190402 11:51:22.411" starttime="20190402 11:51:22.411"></status>
</kw>
<msg timestamp="20190402 11:51:22.411" level="INFO">&amp;{result} = { stdout=applied | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:51:22.411" starttime="20190402 11:51:20.547"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:51:22.412" level="INFO">${value} = applied</msg>
<status status="PASS" endtime="20190402 11:51:22.412" starttime="20190402 11:51:22.411"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${value}' == 'apply-failed'</arg>
<arg>System Application Apply</arg>
<arg>${application}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:22.413" starttime="20190402 11:51:22.413"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:22.413" starttime="20190402 11:51:22.412"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:22.413" starttime="20190402 11:51:20.545"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:22.413" starttime="20190402 11:50:53.000"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:22.413" starttime="20190402 11:50:51.788"></status>
</kw>
<kw name="Check Helm Override OpenStack" library="Utils">
<doc>Check nova-compute.conf is updated in all nova-compute
containers.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>kubectl get pods --all-namespaces -o wide</arg>
</arguments>
<assign>
<var>${kubectl_cmd}</var>
</assign>
<msg timestamp="20190402 11:51:22.414" level="INFO">${kubectl_cmd} = kubectl get pods --all-namespaces -o wide</msg>
<status status="PASS" endtime="20190402 11:51:22.414" starttime="20190402 11:51:22.414"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${kubectl_cmd}</arg>
<arg>grep nova-compute</arg>
<arg>awk '{print $2}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:51:22.415" level="INFO">${cmd} = kubectl get pods --all-namespaces -o wide|grep nova-compute|awk '{print $2}'</msg>
<status status="PASS" endtime="20190402 11:51:22.415" starttime="20190402 11:51:22.414"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:22.415" starttime="20190402 11:51:22.415"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:51:22.416" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:51:22.417" starttime="20190402 11:51:22.416"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:22.417" starttime="20190402 11:51:22.417"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:22.417" starttime="20190402 11:51:22.417"></status>
</kw>
<msg timestamp="20190402 11:51:22.418" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:51:22.418" starttime="20190402 11:51:22.416"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:51:22.418" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:22.418" starttime="20190402 11:51:22.418"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:51:22.426" level="INFO">kubectl get pods --all-namespaces -o w ide|grep nova-compute|awk '{print $2}'</msg>
<status status="PASS" endtime="20190402 11:51:22.426" starttime="20190402 11:51:22.418"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:51:23.523" level="INFO">nova-compute-controller-0-a762cb46-526sh
nova-compute-controller-1-347ae4cb-m4lxz
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:51:23.524" level="INFO">${output} = nova-compute-controller-0-a762cb46-526sh
nova-compute-controller-1-347ae4cb-m4lxz
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:23.524" starttime="20190402 11:51:22.426"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:51:23.525" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:23.525" starttime="20190402 11:51:23.524"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:51:23.525" level="INFO">${clean_out} = nova-compute-controller-0-a762cb46-526sh
nova-compute-controller-1-347ae4cb-m4lxz
</msg>
<status status="PASS" endtime="20190402 11:51:23.525" starttime="20190402 11:51:23.525"></status>
</kw>
<msg timestamp="20190402 11:51:23.525" level="INFO">${output} = nova-compute-controller-0-a762cb46-526sh
nova-compute-controller-1-347ae4cb-m4lxz
</msg>
<status status="PASS" endtime="20190402 11:51:23.525" starttime="20190402 11:51:23.524"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:51:23.526" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:51:23.527" starttime="20190402 11:51:23.525"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:51:23.528" level="INFO">0</msg>
<msg timestamp="20190402 11:51:23.528" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:23.528" starttime="20190402 11:51:23.527"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:51:23.528" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:51:23.528" starttime="20190402 11:51:23.528"></status>
</kw>
<msg timestamp="20190402 11:51:23.528" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:23.528" starttime="20190402 11:51:23.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:23.529" starttime="20190402 11:51:23.529"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:23.529" starttime="20190402 11:51:23.528"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:23.529" starttime="20190402 11:51:23.529"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:51:23.530" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: nova-compute-controller-0-a762cb46-526sh
nova-compute-controller-1-347ae4cb-m4lxz</msg>
<status status="PASS" endtime="20190402 11:51:23.530" starttime="20190402 11:51:23.529"></status>
</kw>
<msg timestamp="20190402 11:51:23.530" level="INFO">&amp;{result} = { stdout=nova-compute-controller-0-a762cb46-526sh
nova-compute-controller-1-347ae4cb-m4lxz | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190402 11:51:23.530" starttime="20190402 11:51:22.415"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{nova_pod_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190402 11:51:23.531" level="INFO">${response} = nova-compute-controller-0-a762cb46-526sh
nova-compute-controller-1-347ae4cb-m4lxz</msg>
<status status="PASS" endtime="20190402 11:51:23.531" starttime="20190402 11:51:23.530"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190402 11:51:23.531" level="INFO">@{res_in_list} = [ nova-compute-controller-0-a762cb46-526sh | nova-compute-controller-1-347ae4cb-m4lxz ]</msg>
<status status="PASS" endtime="20190402 11:51:23.531" starttime="20190402 11:51:23.531"></status>
</kw>
<msg timestamp="20190402 11:51:23.531" level="INFO">@{nova_pod_list} = [ nova-compute-controller-0-a762cb46-526sh | nova-compute-controller-1-347ae4cb-m4lxz ]</msg>
<status status="PASS" endtime="20190402 11:51:23.531" starttime="20190402 11:51:23.530"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>kubectl exec -n openstack -it</arg>
</arguments>
<assign>
<var>${kubectl_cmd}</var>
</assign>
<msg timestamp="20190402 11:51:23.531" level="INFO">${kubectl_cmd} = kubectl exec -n openstack -it</msg>
<status status="PASS" endtime="20190402 11:51:23.531" starttime="20190402 11:51:23.531"></status>
</kw>
<kw type="for" name="${nova_pod} IN [ @{nova_pod_list} ]">
<kw type="foritem" name="${nova_pod} = nova-compute-controller-0-a762cb46-526sh">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${kubectl_cmd}</arg>
<arg>${nova_pod}</arg>
<arg>-- grep foo /etc/nova/nova.conf</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:51:23.532" level="INFO">${cmd} = kubectl exec -n openstack -it nova-compute-controller-0-a762cb46-526sh -- grep foo /etc/nova/nova.conf</msg>
<status status="PASS" endtime="20190402 11:51:23.532" starttime="20190402 11:51:23.532"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:23.533" starttime="20190402 11:51:23.533"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:51:23.534" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:51:23.534" starttime="20190402 11:51:23.533"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:23.534" starttime="20190402 11:51:23.534"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:23.534" starttime="20190402 11:51:23.534"></status>
</kw>
<msg timestamp="20190402 11:51:23.535" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:51:23.535" starttime="20190402 11:51:23.533"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:51:23.535" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:23.535" starttime="20190402 11:51:23.535"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:51:23.537" level="INFO">kubectl exec -n openstack -it nova-com pute-controller-0-a762cb46-526sh -- grep foo /etc/nova/nova.conf</msg>
<status status="PASS" endtime="20190402 11:51:23.538" starttime="20190402 11:51:23.535"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:51:23.853" level="INFO">Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-0-a762cb46-526sh -n openstack' to see all of the containers in this pod.
foo = bar
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:51:23.853" level="INFO">${output} = Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-0-a762cb46-526sh -n openstack' to see all of the containers in this pod.
foo = bar
[wrsroot@controller-0...</msg>
<status status="PASS" endtime="20190402 11:51:23.854" starttime="20190402 11:51:23.538"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:51:23.854" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:23.854" starttime="20190402 11:51:23.854"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:51:23.855" level="INFO">${clean_out} = Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-0-a762cb46-526sh -n openstack' to see all of the containers in this pod.
foo = bar
</msg>
<status status="PASS" endtime="20190402 11:51:23.855" starttime="20190402 11:51:23.854"></status>
</kw>
<msg timestamp="20190402 11:51:23.855" level="INFO">${output} = Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-0-a762cb46-526sh -n openstack' to see all of the containers in this pod.
foo = bar
</msg>
<status status="PASS" endtime="20190402 11:51:23.855" starttime="20190402 11:51:23.854"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:51:23.857" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:51:23.857" starttime="20190402 11:51:23.855"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:51:23.861" level="INFO">0</msg>
<msg timestamp="20190402 11:51:23.861" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:23.861" starttime="20190402 11:51:23.857"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:51:23.862" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:51:23.862" starttime="20190402 11:51:23.862"></status>
</kw>
<msg timestamp="20190402 11:51:23.862" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:23.862" starttime="20190402 11:51:23.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:23.863" starttime="20190402 11:51:23.862"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:23.863" starttime="20190402 11:51:23.862"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:23.863" starttime="20190402 11:51:23.863"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:51:23.863" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-0-a762cb46-526sh -n openstack' to see all of the containers in this pod.
foo = bar</msg>
<status status="PASS" endtime="20190402 11:51:23.863" starttime="20190402 11:51:23.863"></status>
</kw>
<msg timestamp="20190402 11:51:23.864" level="INFO">&amp;{result} = { stdout=Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-0-a762cb46-526sh -n openstack' to see all of the containers in this pod.
foo = bar | stderr= | r...</msg>
<status status="PASS" endtime="20190402 11:51:23.864" starttime="20190402 11:51:23.532"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>foo = bar</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:23.864" starttime="20190402 11:51:23.864"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:23.864" starttime="20190402 11:51:23.532"></status>
</kw>
<kw type="foritem" name="${nova_pod} = nova-compute-controller-1-347ae4cb-m4lxz">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${kubectl_cmd}</arg>
<arg>${nova_pod}</arg>
<arg>-- grep foo /etc/nova/nova.conf</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:51:23.865" level="INFO">${cmd} = kubectl exec -n openstack -it nova-compute-controller-1-347ae4cb-m4lxz -- grep foo /etc/nova/nova.conf</msg>
<status status="PASS" endtime="20190402 11:51:23.865" starttime="20190402 11:51:23.864"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:23.865" starttime="20190402 11:51:23.865"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:51:23.866" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:51:23.866" starttime="20190402 11:51:23.866"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:23.867" starttime="20190402 11:51:23.866"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:23.867" starttime="20190402 11:51:23.867"></status>
</kw>
<msg timestamp="20190402 11:51:23.867" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:51:23.867" starttime="20190402 11:51:23.866"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:51:23.867" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:23.868" starttime="20190402 11:51:23.867"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:51:23.886" level="INFO">kubectl exec -n openstack -it nova-com pute-controller-1-347ae4cb-m4lxz -- grep foo /etc/nova/nova.conf</msg>
<status status="PASS" endtime="20190402 11:51:23.886" starttime="20190402 11:51:23.868"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:51:24.136" level="INFO">Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-1-347ae4cb-m4lxz -n openstack' to see all of the containers in this pod.
foo = bar
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:51:24.136" level="INFO">${output} = Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-1-347ae4cb-m4lxz -n openstack' to see all of the containers in this pod.
foo = bar
[wrsroot@controller-0...</msg>
<status status="PASS" endtime="20190402 11:51:24.136" starttime="20190402 11:51:23.887"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:51:24.137" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:24.137" starttime="20190402 11:51:24.137"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:51:24.138" level="INFO">${clean_out} = Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-1-347ae4cb-m4lxz -n openstack' to see all of the containers in this pod.
foo = bar
</msg>
<status status="PASS" endtime="20190402 11:51:24.138" starttime="20190402 11:51:24.137"></status>
</kw>
<msg timestamp="20190402 11:51:24.138" level="INFO">${output} = Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-1-347ae4cb-m4lxz -n openstack' to see all of the containers in this pod.
foo = bar
</msg>
<status status="PASS" endtime="20190402 11:51:24.138" starttime="20190402 11:51:24.137"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:51:24.140" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:51:24.140" starttime="20190402 11:51:24.138"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:51:24.140" level="INFO">0</msg>
<msg timestamp="20190402 11:51:24.140" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:24.140" starttime="20190402 11:51:24.140"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:51:24.141" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:51:24.141" starttime="20190402 11:51:24.141"></status>
</kw>
<msg timestamp="20190402 11:51:24.141" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:24.141" starttime="20190402 11:51:24.138"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:24.142" starttime="20190402 11:51:24.141"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:24.142" starttime="20190402 11:51:24.141"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:24.142" starttime="20190402 11:51:24.142"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:51:24.142" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-1-347ae4cb-m4lxz -n openstack' to see all of the containers in this pod.
foo = bar</msg>
<status status="PASS" endtime="20190402 11:51:24.142" starttime="20190402 11:51:24.142"></status>
</kw>
<msg timestamp="20190402 11:51:24.143" level="INFO">&amp;{result} = { stdout=Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-1-347ae4cb-m4lxz -n openstack' to see all of the containers in this pod.
foo = bar | stderr= | r...</msg>
<status status="PASS" endtime="20190402 11:51:24.143" starttime="20190402 11:51:23.865"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${result.stdout}</arg>
<arg>foo = bar</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:24.143" starttime="20190402 11:51:24.143"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:24.143" starttime="20190402 11:51:23.864"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:24.143" starttime="20190402 11:51:23.532"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:24.143" starttime="20190402 11:51:22.414"></status>
</kw>
<doc>Helm override for OpenStack nova chart and reset.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="PASS" endtime="20190402 11:51:24.143" critical="yes" starttime="20190402 11:50:49.870"></status>
</test>
<test id="s1-s2-s1-t4" name="Kube System Services">
<kw name="Check PODs Health" library="Utils">
<doc>Check all OpenStack pods are healthy</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>kubectl get pods --all-namespaces -o wide</arg>
</arguments>
<assign>
<var>${kubectl_cmd}</var>
</assign>
<msg timestamp="20190402 11:51:24.145" level="INFO">${kubectl_cmd} = kubectl get pods --all-namespaces -o wide</msg>
<status status="PASS" endtime="20190402 11:51:24.145" starttime="20190402 11:51:24.144"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${kubectl_cmd}</arg>
<arg>grep -v NAMESPACE</arg>
<arg>grep -v Running</arg>
<arg>grep -v Completed</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190402 11:51:24.145" level="INFO">${cmd} = kubectl get pods --all-namespaces -o wide|grep -v NAMESPACE|grep -v Running|grep -v Completed</msg>
<status status="PASS" endtime="20190402 11:51:24.145" starttime="20190402 11:51:24.145"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:24.146" starttime="20190402 11:51:24.145"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:51:24.146" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:51:24.146" starttime="20190402 11:51:24.146"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:24.147" starttime="20190402 11:51:24.147"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:24.147" starttime="20190402 11:51:24.147"></status>
</kw>
<msg timestamp="20190402 11:51:24.147" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:51:24.148" starttime="20190402 11:51:24.146"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:51:24.148" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:24.148" starttime="20190402 11:51:24.148"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:51:24.150" level="INFO">kubectl get pods --all-namespaces -o w ide|grep -v NAMESPACE|grep -v Running|grep -v Completed</msg>
<status status="PASS" endtime="20190402 11:51:24.150" starttime="20190402 11:51:24.148"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:51:24.377" level="INFO">default       testpod                                                       0/1     ImagePullBackOff    0          5h32m   172.16.0.6     controller-0   &lt;none&gt;
openstack     ceph-pools-audit-1554226800-wqdd2                             0/1     ContainerCreating   0          4s      &lt;none&gt;         controller-0   &lt;none&gt;
openstack     cinder-volume-usage-audit-1554226800-jbgr6                    0/1     PodInitializing     0          4s      172.16.1.112   controller-1   &lt;none&gt;
openstack     heat-engine-cleaner-1554226800-kw9fk                          0/1     Init:0/1            0          4s      172.16.0.227   controller-0   &lt;none&gt;
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:51:24.377" level="INFO">${output} = default       testpod                                                       0/1     ImagePullBackOff    0          5h32m   172.16.0.6     controller-0   &lt;none&gt;
openstack     ceph-pools-audit-15542268...</msg>
<status status="PASS" endtime="20190402 11:51:24.377" starttime="20190402 11:51:24.150"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:51:24.378" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:24.378" starttime="20190402 11:51:24.377"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:51:24.378" level="INFO">${clean_out} = default       testpod                                                       0/1     ImagePullBackOff    0          5h32m   172.16.0.6     controller-0   &lt;none&gt;
openstack     ceph-pools-audit-15542268...</msg>
<status status="PASS" endtime="20190402 11:51:24.378" starttime="20190402 11:51:24.378"></status>
</kw>
<msg timestamp="20190402 11:51:24.378" level="INFO">${output} = default       testpod                                                       0/1     ImagePullBackOff    0          5h32m   172.16.0.6     controller-0   &lt;none&gt;
openstack     ceph-pools-audit-15542268...</msg>
<status status="PASS" endtime="20190402 11:51:24.378" starttime="20190402 11:51:24.377"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:51:24.380" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:51:24.381" starttime="20190402 11:51:24.379"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:51:24.381" level="INFO">0</msg>
<msg timestamp="20190402 11:51:24.381" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:24.381" starttime="20190402 11:51:24.381"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:51:24.381" level="INFO">0</msg>
<status status="PASS" endtime="20190402 11:51:24.381" starttime="20190402 11:51:24.381"></status>
</kw>
<msg timestamp="20190402 11:51:24.382" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190402 11:51:24.382" starttime="20190402 11:51:24.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:24.382" starttime="20190402 11:51:24.382"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:24.382" starttime="20190402 11:51:24.382"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:24.383" starttime="20190402 11:51:24.383"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:51:24.383" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: default       testpod                                                       0/1     ImagePullBackOff    0          5h32m   172.16.0.6     controller-0   &lt;none&gt;
openstack     ceph-pools-audit-1554226800-wqdd2                             0/1     ContainerCreating   0          4s      &lt;none&gt;         controller-0   &lt;none&gt;
openstack     cinder-volume-usage-audit-1554226800-jbgr6                    0/1     PodInitializing     0          4s      172.16.1.112   controller-1   &lt;none&gt;
openstack     heat-engine-cleaner-1554226800-kw9fk                          0/1     Init:0/1            0          4s      172.16.0.227   controller-0   &lt;none&gt;</msg>
<status status="PASS" endtime="20190402 11:51:24.383" starttime="20190402 11:51:24.383"></status>
</kw>
<msg timestamp="20190402 11:51:24.383" level="INFO">&amp;{result} = { stdout=default       testpod                                                       0/1     ImagePullBackOff    0          5h32m   172.16.0.6     controller-0   &lt;none&gt;
openstack     ceph-pools-audit...</msg>
<status status="PASS" endtime="20190402 11:51:24.383" starttime="20190402 11:51:24.145"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:51:24.384" level="INFO">${value} = default       testpod                                                       0/1     ImagePullBackOff    0          5h32m   172.16.0.6     controller-0   &lt;none&gt;
openstack     ceph-pools-audit-15542268...</msg>
<status status="PASS" endtime="20190402 11:51:24.384" starttime="20190402 11:51:24.384"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<msg timestamp="20190402 11:51:24.384" level="INFO">Length is 642</msg>
<msg timestamp="20190402 11:51:24.384" level="FAIL">'default       testpod                                                       0/1     ImagePullBackOff    0          5h32m   172.16.0.6     controller-0   &lt;none&gt;
openstack     ceph-pools-audit-1554226800-wqdd2                             0/1     ContainerCreating   0          4s      &lt;none&gt;         controller-0   &lt;none&gt;
openstack     cinder-volume-usage-audit-1554226800-jbgr6                    0/1     PodInitializing     0          4s      172.16.1.112   controller-1   &lt;none&gt;
openstack     heat-engine-cleaner-1554226800-kw9fk                          0/1     Init:0/1            0          4s      172.16.0.227   controller-0   &lt;none&gt;' should be empty.</msg>
<status status="FAIL" endtime="20190402 11:51:24.384" starttime="20190402 11:51:24.384"></status>
</kw>
<status status="FAIL" endtime="20190402 11:51:24.384" starttime="20190402 11:51:24.144"></status>
</kw>
<doc>Check pods status and kube-system services are
displayed.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190402 11:51:24.385" critical="yes" starttime="20190402 11:51:24.144">'default       testpod                                                       0/1     ImagePullBackOff    0          5h32m   172.16.0.6     controller-0   &lt;none&gt;
openstack     ceph-pools-audit-1554226800-wqdd2                             0/1     ContainerCreating   0          4s      &lt;none&gt;         controller-0   &lt;none&gt;
openstack     cinder-volume-usage-audit-1554226800-jbgr6                    0/1     PodInitializing     0          4s      172.16.1.112   controller-1   &lt;none&gt;
openstack     heat-engine-cleaner-1554226800-kw9fk                          0/1     Init:0/1            0          4s      172.16.0.227   controller-0   &lt;none&gt;' should be empty.</status>
</test>
<test id="s1-s2-s1-t5" name="Create Check Delete POD">
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/Utils/${pod_yml}</arg>
<arg>${host_image_path}/${pod_yml}</arg>
</arguments>
<msg timestamp="20190402 11:51:24.394" level="INFO">[chan 1] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190402 11:51:24.404" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190402 11:51:24.407" level="INFO">'/home/mgperezi/duplex/stx-test-suite/Utils/testpod.yaml' -&gt; '/home/wrsroot//testpod.yaml'</msg>
<status status="PASS" endtime="20190402 11:51:24.407" starttime="20190402 11:51:24.385"></status>
</kw>
<kw name="Create POD" library="Utils">
<doc>Create a POD.</doc>
<arguments>
<arg>${pod_yml}</arg>
<arg>${pod_name}</arg>
</arguments>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>kubectl create -f ${pod_yml}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:24.408" starttime="20190402 11:51:24.408"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190402 11:51:24.409" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190402 11:51:24.409" starttime="20190402 11:51:24.409"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:24.410" starttime="20190402 11:51:24.409"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:24.410" starttime="20190402 11:51:24.410"></status>
</kw>
<msg timestamp="20190402 11:51:24.410" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190402 11:51:24.410" starttime="20190402 11:51:24.409"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190402 11:51:24.411" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:24.411" starttime="20190402 11:51:24.410"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190402 11:51:24.416" level="INFO">kubectl create -f testpod.yaml</msg>
<status status="PASS" endtime="20190402 11:51:24.417" starttime="20190402 11:51:24.411"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190402 11:51:24.653" level="INFO">Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190402 11:51:24.654" level="INFO">${output} = Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:24.654" starttime="20190402 11:51:24.417"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190402 11:51:24.655" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190402 11:51:24.655" starttime="20190402 11:51:24.654"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190402 11:51:24.655" level="INFO">${clean_out} = Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
</msg>
<status status="PASS" endtime="20190402 11:51:24.655" starttime="20190402 11:51:24.655"></status>
</kw>
<msg timestamp="20190402 11:51:24.655" level="INFO">${output} = Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
</msg>
<status status="PASS" endtime="20190402 11:51:24.655" starttime="20190402 11:51:24.654"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190402 11:51:24.657" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190402 11:51:24.657" starttime="20190402 11:51:24.656"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190402 11:51:24.658" level="INFO">1</msg>
<msg timestamp="20190402 11:51:24.658" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190402 11:51:24.658" starttime="20190402 11:51:24.657"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190402 11:51:24.658" level="INFO">1</msg>
<status status="PASS" endtime="20190402 11:51:24.658" starttime="20190402 11:51:24.658"></status>
</kw>
<msg timestamp="20190402 11:51:24.658" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190402 11:51:24.658" starttime="20190402 11:51:24.655"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:24.659" starttime="20190402 11:51:24.659"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:24.659" starttime="20190402 11:51:24.658"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190402 11:51:24.659" starttime="20190402 11:51:24.659"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190402 11:51:24.660" level="INFO">Dictionary size is 3 and it contains following items:
rc: 1
stderr: Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists

stdout: </msg>
<status status="PASS" endtime="20190402 11:51:24.660" starttime="20190402 11:51:24.659"></status>
</kw>
<msg timestamp="20190402 11:51:24.660" level="INFO">&amp;{result} = { stdout= | stderr=Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
 | rc=1 }</msg>
<status status="PASS" endtime="20190402 11:51:24.660" starttime="20190402 11:51:24.408"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190402 11:51:24.660" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190402 11:51:24.660" starttime="20190402 11:51:24.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${value}</arg>
<arg>pod/${pod_name} created</arg>
</arguments>
<msg timestamp="20190402 11:51:24.661" level="FAIL"> != pod/testpod created</msg>
<status status="FAIL" endtime="20190402 11:51:24.661" starttime="20190402 11:51:24.660"></status>
</kw>
<status status="FAIL" endtime="20190402 11:51:24.661" starttime="20190402 11:51:24.407"></status>
</kw>
<doc>Launch a POD via kubectl.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190402 11:51:24.661" critical="yes" starttime="20190402 11:51:24.385"> != pod/testpod created</status>
</test>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Utils.Stx Suite TearDown</arg>
</arguments>
<kw name="Stx Suite TearDown" library="Utils">
<doc>Wrapper to clean up activities on the suite.</doc>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20190402 11:51:24.663" starttime="20190402 11:51:24.662"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:24.664" starttime="20190402 11:51:24.662"></status>
</kw>
<status status="PASS" endtime="20190402 11:51:24.664" starttime="20190402 11:51:24.662"></status>
</kw>
<doc>Check the health of PODs services; update and apply the
helm chart via system application-apply.
Author(s):
- Hector Ivan Ramos Escobar &lt;ramos.escobarx.hector.ivan@intel.com&gt;
- Juan Carlos Alonso &lt;juan.carlos.alonso@intel.com&gt;</doc>
<status status="FAIL" endtime="20190402 11:51:24.664" starttime="20190402 11:50:19.966"></status>
</suite>
<status status="FAIL" endtime="20190402 11:51:24.666" starttime="20190402 11:50:19.964"></status>
</suite>
<metadata>
<item name="ISO">bootimage.iso</item>
<item name="System">duplex</item>
</metadata>
<status status="FAIL" endtime="20190402 11:51:24.670" starttime="20190402 10:49:59.778"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="54">Critical Tests</stat>
<stat fail="3" pass="54">All Tests</stat>
</total>
<tag>
<stat fail="3" pass="54">Duplex</stat>
</tag>
<suite>
<stat fail="3" id="s1" name="Sanity-Test" pass="54">Sanity-Test</stat>
<stat fail="0" id="s1-s1" name="Sanity-OpenStack" pass="52">Sanity-Test.Sanity-OpenStack</stat>
<stat fail="0" id="s1-s1-s1" name="01-Instance-From-Image" pass="14">Sanity-Test.Sanity-OpenStack.01-Instance-From-Image</stat>
<stat fail="0" id="s1-s1-s2" name="02-Instance-From-Volume" pass="15">Sanity-Test.Sanity-OpenStack.02-Instance-From-Volume</stat>
<stat fail="0" id="s1-s1-s3" name="03-Instance-From-Snapshot" pass="16">Sanity-Test.Sanity-OpenStack.03-Instance-From-Snapshot</stat>
<stat fail="0" id="s1-s1-s4" name="04-Instance-From-Heat-Template" pass="4">Sanity-Test.Sanity-OpenStack.04-Instance-From-Heat-Template</stat>
<stat fail="0" id="s1-s1-s5" name="05-Measurements-For-Metric" pass="3">Sanity-Test.Sanity-OpenStack.05-Measurements-For-Metric</stat>
<stat fail="3" id="s1-s2" name="Sanity-Platform" pass="2">Sanity-Test.Sanity-Platform</stat>
<stat fail="3" id="s1-s2-s1" name="02-OpenStack-Pod-Healthy" pass="2">Sanity-Test.Sanity-Platform.02-OpenStack-Pod-Healthy</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
