<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20190401 15:26:04.860" generator="Robot 3.1.1 (Python 2.7.15 on linux2)">
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test" id="s1" name="Sanity-Test">
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-OpenStack" id="s1-s1" name="Sanity-OpenStack">
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-OpenStack/01-Instance-From-Image.robot" id="s1-s1-s1" name="01-Instance-From-Image">
<kw type="setup" name="Stx Suite Setup" library="Utils">
<doc>Wrapper to setup the environment needed for exercise
StarlingX features</doc>
<kw name="Open Master Controller Connection" library="Utils">
<doc>Establish a SSH connection with the master controller
to start executing the the suite.</doc>
<kw name="Connect to Controller Node" library="Utils">
<doc>Stablish a SSH connection to the controller and return
the connection id</doc>
<arguments>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_NAME}</arg>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_PSWD}</arg>
<arg>${CONFIG.general.IP_UNIT_0_ADDRESS}</arg>
</arguments>
<assign>
<var>${master_controller_connection}</var>
</assign>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${ip_address} prompt=${prompt}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${controller_connection}</var>
</assign>
<msg timestamp="20190401 15:26:04.992" level="INFO">${controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:26:04.992" starttime="20190401 15:26:04.992"></status>
</kw>
<kw name="Flexible_SSH_Login" library="Utils">
<doc>On active SSH session: if given non-empty password,
do Login, else do Login With Public Key.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${password}</arg>
</arguments>
<assign>
<var>${pwd_length}</var>
</assign>
<msg timestamp="20190401 15:26:04.993" level="INFO">Length is 10</msg>
<msg timestamp="20190401 15:26:04.993" level="INFO">${pwd_length} = 10</msg>
<status status="PASS" endtime="20190401 15:26:04.993" starttime="20190401 15:26:04.993"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${pwd_length} &gt; 0</arg>
<arg>SSHLibrary.Login</arg>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<msg timestamp="20190401 15:26:04.994" level="INFO">Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.</msg>
<msg timestamp="20190401 15:26:06.128" level="INFO">Read output: Last login: Mon Apr  1 19:01:42 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$</msg>
<status status="PASS" endtime="20190401 15:26:06.128" starttime="20190401 15:26:04.994"></status>
</kw>
<msg timestamp="20190401 15:26:06.129" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190401 15:26:06.129" starttime="20190401 15:26:04.993"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:06.129" starttime="20190401 15:26:04.993"></status>
</kw>
<msg timestamp="20190401 15:26:06.129" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:26:06.129" starttime="20190401 15:26:04.992"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190401 15:26:06.129" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:26:06.130" starttime="20190401 15:26:06.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190401 15:26:06.130" level="INFO">1</msg>
<status status="PASS" endtime="20190401 15:26:06.130" starttime="20190401 15:26:06.130"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:06.130" starttime="20190401 15:26:04.991"></status>
</kw>
<kw name="Set Env Vars From Openrc" library="Utils">
<doc>Sources the openrc form /etc/nova/ to have the admin
variables exported on the controller.</doc>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>source /etc/platform/openrc</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:06.131" starttime="20190401 15:26:06.131"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190401 15:26:06.132" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190401 15:26:06.132" starttime="20190401 15:26:06.131"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:06.132" starttime="20190401 15:26:06.132"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:06.133" starttime="20190401 15:26:06.132"></status>
</kw>
<msg timestamp="20190401 15:26:06.133" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190401 15:26:06.133" starttime="20190401 15:26:06.131"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20190401 15:26:06.133" starttime="20190401 15:26:06.133"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190401 15:26:06.137" level="INFO">source /etc/platform/openrc</msg>
<status status="PASS" endtime="20190401 15:26:06.137" starttime="20190401 15:26:06.133"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:26:06.514" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190401 15:26:06.514" level="INFO">${output} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:26:06.514" starttime="20190401 15:26:06.137"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190401 15:26:06.515" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:26:06.515" starttime="20190401 15:26:06.515"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190401 15:26:06.515" level="INFO">${clean_out} = </msg>
<status status="PASS" endtime="20190401 15:26:06.515" starttime="20190401 15:26:06.515"></status>
</kw>
<msg timestamp="20190401 15:26:06.515" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190401 15:26:06.515" starttime="20190401 15:26:06.514"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190401 15:26:06.517" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190401 15:26:06.518" starttime="20190401 15:26:06.516"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:06.518" level="INFO">0</msg>
<msg timestamp="20190401 15:26:06.518" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:26:06.518" starttime="20190401 15:26:06.518"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190401 15:26:06.518" level="INFO">0</msg>
<status status="PASS" endtime="20190401 15:26:06.518" starttime="20190401 15:26:06.518"></status>
</kw>
<msg timestamp="20190401 15:26:06.519" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:26:06.519" starttime="20190401 15:26:06.516"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:06.519" starttime="20190401 15:26:06.519"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:06.519" starttime="20190401 15:26:06.519"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:06.520" starttime="20190401 15:26:06.520"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190401 15:26:06.520" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: </msg>
<status status="PASS" endtime="20190401 15:26:06.520" starttime="20190401 15:26:06.520"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:06.520" starttime="20190401 15:26:06.130"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:06.520" starttime="20190401 15:26:06.130"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:06.520" starttime="20190401 15:26:04.991"></status>
</kw>
<test id="s1-s1-s1-t1" name="Create Flavors for Instances">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${flavor_property_1}</arg>
<arg>${flavor_property_2}</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190401 15:26:06.521" level="INFO">${properties} = --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared'</msg>
<status status="PASS" endtime="20190401 15:26:06.521" starttime="20190401 15:26:06.521"></status>
</kw>
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${cirros_flavor_ram}</arg>
<arg>${cirros_flavor_vcpus}</arg>
<arg>${cirros_flavor_disk}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:06.522" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190401 15:26:06.522" starttime="20190401 15:26:06.522"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:06.523" level="INFO">${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small</msg>
<status status="PASS" endtime="20190401 15:26:06.523" starttime="20190401 15:26:06.522"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:06.523" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:06.523" starttime="20190401 15:26:06.523"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:06.524" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.</msg>
<msg timestamp="20190401 15:26:07.152" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:07.152" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:07.152" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:07.152" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:07.152" starttime="20190401 15:26:06.523"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:07.153" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:07.153" starttime="20190401 15:26:07.152"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:07.153" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:07.154" starttime="20190401 15:26:07.153"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:07.154" starttime="20190401 15:26:07.153"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:07.154" starttime="20190401 15:26:06.523"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:07.154" starttime="20190401 15:26:06.521"></status>
</kw>
<doc>Create flavors with or without properties to be used
to launch Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:07.154" critical="yes" starttime="20190401 15:26:06.520">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s1-t2" name="Create Images for Instances">
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/${cirros_image}</arg>
<arg>${host_image_path}/${cirros_image}</arg>
</arguments>
<msg timestamp="20190401 15:26:07.162" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190401 15:26:07.169" level="INFO">[chan 3] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190401 15:26:07.170" level="FAIL">There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.</msg>
<status status="FAIL" endtime="20190401 15:26:07.171" starttime="20190401 15:26:07.155"></status>
</kw>
<doc>Create images with or without properties to be used
to launch Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:07.171" critical="yes" starttime="20190401 15:26:07.154">There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.</status>
</test>
<test id="s1-s1-s1-t3" name="Create Networks for Instances">
<kw name="Create Network" library="OpenStack">
<doc>Create Network with openstack request.</doc>
<arguments>
<arg>${network_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:07.172" level="INFO">${openstack_cmd} = openstack network create</msg>
<status status="PASS" endtime="20190401 15:26:07.172" starttime="20190401 15:26:07.172"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${network_name}</arg>
<arg>${additional_args}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:07.172" level="INFO">${cmd} = openstack network create network-1 </msg>
<status status="PASS" endtime="20190401 15:26:07.172" starttime="20190401 15:26:07.172"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:07.173" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:07.173" starttime="20190401 15:26:07.173"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:07.174" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network create network-1 '.</msg>
<msg timestamp="20190401 15:26:07.802" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:07.802" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:07.802" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:07.802" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:07.802" starttime="20190401 15:26:07.173"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:07.803" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:07.803" starttime="20190401 15:26:07.802"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:07.804" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:07.804" starttime="20190401 15:26:07.803"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:07.804" starttime="20190401 15:26:07.803"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:07.804" starttime="20190401 15:26:07.173"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:07.804" starttime="20190401 15:26:07.171"></status>
</kw>
<doc>Create networks to be used to launch Cirros and Centos
instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:07.804" critical="yes" starttime="20190401 15:26:07.171">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s1-t4" name="Launch Instances">
<kw name="Create Instance" library="OpenStack">
<doc>Create a VM Instances with the net id of the Netowrk
flavor and image</doc>
<arguments>
<arg>${network_name}</arg>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_image_name}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Get Net Id" library="OpenStack">
<doc>Retrieve the net id for the given network name</doc>
<arguments>
<arg>${net_name}</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:07.805" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190401 15:26:07.805" starttime="20190401 15:26:07.805"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "${network_name}"</arg>
<arg>awk '{print$2}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:07.806" level="INFO">${cmd} = openstack network list|grep "network-1"|awk '{print$2}'</msg>
<status status="PASS" endtime="20190401 15:26:07.806" starttime="20190401 15:26:07.806"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:07.807" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:07.807" starttime="20190401 15:26:07.806"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:07.807" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|grep "network-1"|awk '{print$2}''.</msg>
<msg timestamp="20190401 15:26:08.450" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190401 15:26:08.450" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:08.450" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:08.450" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:26:08.450" starttime="20190401 15:26:07.807"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:08.451" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 0}</msg>
<status status="PASS" endtime="20190401 15:26:08.451" starttime="20190401 15:26:08.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:08.451" starttime="20190401 15:26:08.451"></status>
</kw>
<msg timestamp="20190401 15:26:08.451" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=0 }</msg>
<status status="PASS" endtime="20190401 15:26:08.451" starttime="20190401 15:26:07.806"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:26:08.452" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190401 15:26:08.452" starttime="20190401 15:26:08.452"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${splitted_output}</var>
</assign>
<msg timestamp="20190401 15:26:08.452" level="INFO">${splitted_output} = []</msg>
<status status="PASS" endtime="20190401 15:26:08.452" starttime="20190401 15:26:08.452"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${splitted_output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<msg timestamp="20190401 15:26:08.452" level="FAIL">IndexError: Given index 0 is out of the range 0--1.</msg>
<status status="FAIL" endtime="20190401 15:26:08.453" starttime="20190401 15:26:08.452"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:08.453" starttime="20190401 15:26:07.805"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:08.453" starttime="20190401 15:26:07.805"></status>
</kw>
<doc>Launch Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:08.453" critical="yes" starttime="20190401 15:26:07.804">IndexError: Given index 0 is out of the range 0--1.</status>
</test>
<test id="s1-s1-s1-t5" name="Suspend Resume Instances">
<kw name="Suspend Instance" library="OpenStack">
<doc>Suspend the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server suspend ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:08.455" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:08.455" starttime="20190401 15:26:08.454"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:08.455" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server suspend vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:09.083" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:09.084" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:09.084" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:09.084" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:09.084" starttime="20190401 15:26:08.455"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:09.084" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:09.084" starttime="20190401 15:26:09.084"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:09.085" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:09.085" starttime="20190401 15:26:09.085"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:09.085" starttime="20190401 15:26:09.084"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:09.085" starttime="20190401 15:26:08.454"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:09.085" starttime="20190401 15:26:08.454"></status>
</kw>
<doc>Suspend and Resume Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:09.086" critical="yes" starttime="20190401 15:26:08.453">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s1-t6" name="Set Error Active Flags Instances">
<kw name="Set Error State Instance" library="OpenStack">
<doc>Set 'Error' value to the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>error</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:09.087" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:09.087" starttime="20190401 15:26:09.087"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:09.088" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state error vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:09.729" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:09.730" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:09.730" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:09.730" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:09.730" starttime="20190401 15:26:09.087"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:09.731" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:09.731" starttime="20190401 15:26:09.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:09.732" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:09.732" starttime="20190401 15:26:09.732"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:09.732" starttime="20190401 15:26:09.731"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:09.732" starttime="20190401 15:26:09.087"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:09.733" starttime="20190401 15:26:09.086"></status>
</kw>
<doc>Set 'Error' and 'Active' flags to Cirros and Centos
instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:09.733" critical="yes" starttime="20190401 15:26:09.086">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s1-t7" name="Pause Unpause Instances">
<kw name="Pause Instance" library="OpenStack">
<doc>Pause an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server pause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:09.736" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:09.736" starttime="20190401 15:26:09.735"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:09.736" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server pause vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:10.365" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:10.365" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:10.365" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:10.365" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:10.365" starttime="20190401 15:26:09.736"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:10.366" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:10.366" starttime="20190401 15:26:10.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:10.367" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:10.367" starttime="20190401 15:26:10.367"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:10.367" starttime="20190401 15:26:10.366"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:10.367" starttime="20190401 15:26:09.735"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:10.367" starttime="20190401 15:26:09.734"></status>
</kw>
<doc>Pause and Unpause Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:10.367" critical="yes" starttime="20190401 15:26:09.733">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s1-t8" name="Stop Start Instances">
<kw name="Stop Instance" library="OpenStack">
<doc>Stop an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server stop ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:10.369" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:10.369" starttime="20190401 15:26:10.369"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:10.369" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server stop vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:10.997" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:10.998" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:10.998" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:10.998" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:10.998" starttime="20190401 15:26:10.369"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:10.998" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:10.998" starttime="20190401 15:26:10.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:10.999" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:10.999" starttime="20190401 15:26:10.999"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:10.999" starttime="20190401 15:26:10.999"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:10.999" starttime="20190401 15:26:10.368"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:10.999" starttime="20190401 15:26:10.368"></status>
</kw>
<doc>Stop and Start Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:11.000" critical="yes" starttime="20190401 15:26:10.368">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s1-t9" name="Lock Unlock Instances">
<kw name="Lock Instance" library="OpenStack">
<doc>Lock an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server lock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:11.001" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:11.001" starttime="20190401 15:26:11.001"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:11.002" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server lock vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:11.630" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:11.630" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:11.630" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:11.630" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:11.630" starttime="20190401 15:26:11.001"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:11.631" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:11.631" starttime="20190401 15:26:11.631"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:11.632" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:11.632" starttime="20190401 15:26:11.631"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:11.632" starttime="20190401 15:26:11.631"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:11.632" starttime="20190401 15:26:11.001"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:11.632" starttime="20190401 15:26:11.000"></status>
</kw>
<doc>Lock and Unlock Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:11.632" critical="yes" starttime="20190401 15:26:11.000">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s1-t10" name="Reboot Instances">
<kw name="Reboot Instance" library="OpenStack">
<doc>Reboot an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server reboot ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:11.634" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:11.634" starttime="20190401 15:26:11.633"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:11.634" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server reboot vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:12.262" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:12.263" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:12.263" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:12.263" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:12.263" starttime="20190401 15:26:11.634"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:12.263" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:12.263" starttime="20190401 15:26:12.263"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:12.264" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:12.264" starttime="20190401 15:26:12.264"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:12.264" starttime="20190401 15:26:12.264"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:12.264" starttime="20190401 15:26:11.633"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:12.264" starttime="20190401 15:26:11.633"></status>
</kw>
<doc>Reboot Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:12.265" critical="yes" starttime="20190401 15:26:11.632">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s1-t11" name="Rebuild Instances">
<kw name="Rebuild Instance" library="OpenStack">
<doc>Rebuild an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server rebuild ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:12.266" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:12.266" starttime="20190401 15:26:12.266"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:12.267" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server rebuild vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:12.895" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:12.895" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:12.896" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:12.896" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:12.896" starttime="20190401 15:26:12.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:12.897" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:12.897" starttime="20190401 15:26:12.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:12.897" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:12.897" starttime="20190401 15:26:12.897"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:12.897" starttime="20190401 15:26:12.897"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:12.898" starttime="20190401 15:26:12.266"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:12.898" starttime="20190401 15:26:12.265"></status>
</kw>
<doc>Rebuild Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:12.898" critical="yes" starttime="20190401 15:26:12.265">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s1-t12" name="Resize Instances">
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${cirros_flavor_ram}</arg>
<arg>${cirros_flavor_vcpus}</arg>
<arg>${cirros_flavor_disk}</arg>
<arg>${cirros_flavor_name_2}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:12.899" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190401 15:26:12.899" starttime="20190401 15:26:12.899"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:12.900" level="INFO">${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small</msg>
<status status="PASS" endtime="20190401 15:26:12.900" starttime="20190401 15:26:12.899"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:12.900" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:12.900" starttime="20190401 15:26:12.900"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:12.901" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small'.</msg>
<msg timestamp="20190401 15:26:13.529" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:13.529" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:13.530" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:13.530" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:13.530" starttime="20190401 15:26:12.900"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:13.530" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:13.530" starttime="20190401 15:26:13.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:13.531" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:13.531" starttime="20190401 15:26:13.531"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:13.531" starttime="20190401 15:26:13.530"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:13.531" starttime="20190401 15:26:12.900"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:13.531" starttime="20190401 15:26:12.899"></status>
</kw>
<doc>Resize Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:13.531" critical="yes" starttime="20190401 15:26:12.898">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s1-t13" name="Set Unset Properties Instances">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${instance_property_1}='true'</arg>
<arg>${instance_property_2}='500'</arg>
<arg>${instance_property_3}='180'</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190401 15:26:13.533" level="INFO">${properties} = --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180'</msg>
<status status="PASS" endtime="20190401 15:26:13.533" starttime="20190401 15:26:13.532"></status>
</kw>
<kw name="Set Instance Property" library="OpenStack">
<doc>Set properties of an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:13.534" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:13.534" starttime="20190401 15:26:13.533"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:13.534" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:14.164" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:14.164" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:14.164" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:14.164" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:14.164" starttime="20190401 15:26:13.534"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:14.165" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:14.165" starttime="20190401 15:26:14.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:14.166" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:14.166" starttime="20190401 15:26:14.166"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:14.166" starttime="20190401 15:26:14.165"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:14.166" starttime="20190401 15:26:13.533"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:14.166" starttime="20190401 15:26:13.533"></status>
</kw>
<doc>Set Unset properties of Cirros and Centos instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:14.166" critical="yes" starttime="20190401 15:26:13.532">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s1-t14" name="Evacuate Instances From Hosts">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CONFIGURATION_TYPE}' == 'Duplex'</arg>
<arg>Run Keywords</arg>
<arg>Evacuate Instances</arg>
<arg>controller-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>controller-1</arg>
<arg>ELSE IF</arg>
<arg>'${CONFIGURATION_TYPE}' == 'MN-Local' or '${CONFIGURATION_TYPE}' == 'MN-External'</arg>
<arg>Run Keywords</arg>
<arg>Evacuate Instances</arg>
<arg>compute-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>compute-1</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Evacuate Instances</arg>
<arg>controller-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>controller-1</arg>
</arguments>
<kw name="Evacuate Instances" library="OpenStack">
<doc>Evacuate all VMs from computes or from controllers.</doc>
<arguments>
<arg>controller-0</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:14.169" level="INFO">${openstack_cmd} = openstack compute service set</msg>
<status status="PASS" endtime="20190401 15:26:14.169" starttime="20190401 15:26:14.169"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--disable</arg>
<arg>--disable-reason test-evacuate</arg>
<arg>${host}</arg>
<arg>nova-compute</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:14.170" level="INFO">${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute</msg>
<status status="PASS" endtime="20190401 15:26:14.170" starttime="20190401 15:26:14.169"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:14.170" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:14.170" starttime="20190401 15:26:14.170"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:14.171" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute'.</msg>
<msg timestamp="20190401 15:26:14.799" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:14.799" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:14.799" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:14.799" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:14.799" starttime="20190401 15:26:14.170"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:14.800" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:14.800" starttime="20190401 15:26:14.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:14.801" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:14.801" starttime="20190401 15:26:14.800"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:14.801" starttime="20190401 15:26:14.800"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:14.801" starttime="20190401 15:26:14.170"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:14.801" starttime="20190401 15:26:14.168"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:14.801" starttime="20190401 15:26:14.168"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:14.801" starttime="20190401 15:26:14.167"></status>
</kw>
<doc>Evacuate all Cirros and Centos instances from computes
or controllers.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:14.801" critical="yes" starttime="20190401 15:26:14.167">Cloud openstack_helm was not found.</status>
</test>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>OpenStack.Openstack Cleanup All</arg>
<arg>Utils.Stx Suite TearDown</arg>
</arguments>
<kw name="Openstack Cleanup All" library="OpenStack">
<doc>Delete all instances, images, flavors, networks and
keypairs generated during tests.</doc>
<kw name="Delete All Instances" library="OpenStack">
<doc>Get a list of all existing instances to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:14.803" level="INFO">${openstack_cmd} = openstack server list</msg>
<status status="PASS" endtime="20190401 15:26:14.803" starttime="20190401 15:26:14.803"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:14.803" level="INFO">${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:14.803" starttime="20190401 15:26:14.803"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:14.804" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:14.804" starttime="20190401 15:26:14.804"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:14.804" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:15.433" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:15.433" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:15.433" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:15.433" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:15.433" starttime="20190401 15:26:14.804"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:15.434" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:15.434" starttime="20190401 15:26:15.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:15.435" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:15.435" starttime="20190401 15:26:15.435"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:15.435" starttime="20190401 15:26:15.434"></status>
</kw>
<msg timestamp="20190401 15:26:15.435" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:15.435" starttime="20190401 15:26:14.803"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{vm_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:15.436" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:15.436" starttime="20190401 15:26:15.436"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:15.436" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:15.436" starttime="20190401 15:26:15.436"></status>
</kw>
<msg timestamp="20190401 15:26:15.436" level="INFO">@{vm_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:15.436" starttime="20190401 15:26:15.435"></status>
</kw>
<kw type="for" name="${vm} IN [ @{vm_list} ]">
<status status="PASS" endtime="20190401 15:26:15.437" starttime="20190401 15:26:15.436"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:15.437" starttime="20190401 15:26:14.803"></status>
</kw>
<kw name="Delete All Images" library="OpenStack">
<doc>Get a list of all existing images to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:15.437" level="INFO">${openstack_cmd} = openstack image list</msg>
<status status="PASS" endtime="20190401 15:26:15.437" starttime="20190401 15:26:15.437"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "Cirros"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:15.438" level="INFO">${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"</msg>
<status status="PASS" endtime="20190401 15:26:15.438" starttime="20190401 15:26:15.437"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:15.438" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:15.438" starttime="20190401 15:26:15.438"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:15.439" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.</msg>
<msg timestamp="20190401 15:26:16.067" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:16.067" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:16.067" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:16.067" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:16.067" starttime="20190401 15:26:15.439"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:16.068" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:16.068" starttime="20190401 15:26:16.067"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:16.069" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:16.069" starttime="20190401 15:26:16.068"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:16.069" starttime="20190401 15:26:16.068"></status>
</kw>
<msg timestamp="20190401 15:26:16.069" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:16.069" starttime="20190401 15:26:15.438"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{image_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:16.070" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:16.070" starttime="20190401 15:26:16.069"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:16.070" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:16.070" starttime="20190401 15:26:16.070"></status>
</kw>
<msg timestamp="20190401 15:26:16.070" level="INFO">@{image_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:16.070" starttime="20190401 15:26:16.069"></status>
</kw>
<kw type="for" name="${image} IN [ @{image_list} ]">
<status status="PASS" endtime="20190401 15:26:16.070" starttime="20190401 15:26:16.070"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:16.070" starttime="20190401 15:26:15.437"></status>
</kw>
<kw name="Delete All Flavors" library="OpenStack">
<doc>Get a list of all existing flavors to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:16.071" level="INFO">${openstack_cmd} = openstack flavor list</msg>
<status status="PASS" endtime="20190401 15:26:16.071" starttime="20190401 15:26:16.071"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "m1"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:16.071" level="INFO">${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"</msg>
<status status="PASS" endtime="20190401 15:26:16.071" starttime="20190401 15:26:16.071"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:16.072" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:16.072" starttime="20190401 15:26:16.072"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:16.072" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.</msg>
<msg timestamp="20190401 15:26:16.701" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:16.701" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:16.701" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:16.701" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:16.701" starttime="20190401 15:26:16.072"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:16.702" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:16.702" starttime="20190401 15:26:16.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:16.703" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:16.703" starttime="20190401 15:26:16.703"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:16.703" starttime="20190401 15:26:16.702"></status>
</kw>
<msg timestamp="20190401 15:26:16.703" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:16.703" starttime="20190401 15:26:16.071"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{flavor_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:16.704" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:16.704" starttime="20190401 15:26:16.704"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:16.704" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:16.704" starttime="20190401 15:26:16.704"></status>
</kw>
<msg timestamp="20190401 15:26:16.704" level="INFO">@{flavor_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:16.704" starttime="20190401 15:26:16.703"></status>
</kw>
<kw type="for" name="${flavor} IN [ @{flavor_list} ]">
<status status="PASS" endtime="20190401 15:26:16.704" starttime="20190401 15:26:16.704"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:16.705" starttime="20190401 15:26:16.071"></status>
</kw>
<kw name="Delete All Networks" library="OpenStack">
<doc>Get a list of all existing networks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:16.705" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190401 15:26:16.705" starttime="20190401 15:26:16.705"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "private"</arg>
<arg>grep -v "public"</arg>
<arg>grep -v "external"</arg>
<arg>grep -v "internal"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:16.705" level="INFO">${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"</msg>
<status status="PASS" endtime="20190401 15:26:16.705" starttime="20190401 15:26:16.705"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:16.706" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:16.706" starttime="20190401 15:26:16.706"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:16.707" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.</msg>
<msg timestamp="20190401 15:26:17.335" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:17.335" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:17.335" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:17.335" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:17.335" starttime="20190401 15:26:16.706"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:17.336" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:17.336" starttime="20190401 15:26:17.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:17.337" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:17.337" starttime="20190401 15:26:17.336"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:17.337" starttime="20190401 15:26:17.336"></status>
</kw>
<msg timestamp="20190401 15:26:17.337" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:17.337" starttime="20190401 15:26:16.706"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{network_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:17.338" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:17.338" starttime="20190401 15:26:17.338"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:17.338" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:17.338" starttime="20190401 15:26:17.338"></status>
</kw>
<msg timestamp="20190401 15:26:17.338" level="INFO">@{network_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:17.338" starttime="20190401 15:26:17.337"></status>
</kw>
<kw type="for" name="${network} IN [ @{network_list} ]">
<status status="PASS" endtime="20190401 15:26:17.338" starttime="20190401 15:26:17.338"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:17.339" starttime="20190401 15:26:16.705"></status>
</kw>
<kw name="Delete All KeyPairs" library="OpenStack">
<doc>Get a list of all existing keypais to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack keypair list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:17.339" level="INFO">${openstack_cmd} = openstack keypair list</msg>
<status status="PASS" endtime="20190401 15:26:17.339" starttime="20190401 15:26:17.339"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:17.339" level="INFO">${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:17.339" starttime="20190401 15:26:17.339"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:17.340" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:17.340" starttime="20190401 15:26:17.340"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:17.340" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack keypair list|awk '{print$2}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:17.969" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:17.969" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:17.969" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:17.969" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:17.969" starttime="20190401 15:26:17.340"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:17.970" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:17.970" starttime="20190401 15:26:17.969"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:17.970" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:17.970" starttime="20190401 15:26:17.970"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:17.970" starttime="20190401 15:26:17.970"></status>
</kw>
<msg timestamp="20190401 15:26:17.971" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:17.971" starttime="20190401 15:26:17.340"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{key_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:17.971" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:17.971" starttime="20190401 15:26:17.971"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:17.972" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:17.972" starttime="20190401 15:26:17.972"></status>
</kw>
<msg timestamp="20190401 15:26:17.972" level="INFO">@{key_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:17.972" starttime="20190401 15:26:17.971"></status>
</kw>
<kw type="for" name="${key} IN [ @{key_list} ]">
<status status="PASS" endtime="20190401 15:26:17.972" starttime="20190401 15:26:17.972"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:17.972" starttime="20190401 15:26:17.339"></status>
</kw>
<kw name="Delete All Snapshots" library="OpenStack">
<doc>Get a list of all existing snapshots to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:17.973" level="INFO">${openstack_cmd} = openstack volume snapshot list</msg>
<status status="PASS" endtime="20190401 15:26:17.973" starttime="20190401 15:26:17.973"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:17.973" level="INFO">${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:17.973" starttime="20190401 15:26:17.973"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:17.974" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:17.974" starttime="20190401 15:26:17.974"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:17.974" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:18.602" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:18.603" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:18.603" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:18.603" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:18.603" starttime="20190401 15:26:17.974"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:18.603" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:18.603" starttime="20190401 15:26:18.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:18.604" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:18.604" starttime="20190401 15:26:18.604"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:18.604" starttime="20190401 15:26:18.604"></status>
</kw>
<msg timestamp="20190401 15:26:18.605" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:18.605" starttime="20190401 15:26:17.973"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{snapshot_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:18.605" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:18.605" starttime="20190401 15:26:18.605"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:18.606" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:18.606" starttime="20190401 15:26:18.605"></status>
</kw>
<msg timestamp="20190401 15:26:18.606" level="INFO">@{snapshot_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:18.606" starttime="20190401 15:26:18.605"></status>
</kw>
<kw type="for" name="${snapshot} IN [ @{snapshot_list} ]">
<status status="PASS" endtime="20190401 15:26:18.606" starttime="20190401 15:26:18.606"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:18.606" starttime="20190401 15:26:17.972"></status>
</kw>
<kw name="Delete All Volumes" library="OpenStack">
<doc>Get a list of all existing volumes to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:18.606" level="INFO">${openstack_cmd} = openstack volume list</msg>
<status status="PASS" endtime="20190401 15:26:18.606" starttime="20190401 15:26:18.606"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "ID"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:18.607" level="INFO">${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"</msg>
<status status="PASS" endtime="20190401 15:26:18.607" starttime="20190401 15:26:18.607"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:18.608" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:18.608" starttime="20190401 15:26:18.607"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:18.608" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume list|awk '{print$2}'|grep -v "ID"'.</msg>
<msg timestamp="20190401 15:26:19.236" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:19.236" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:19.236" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:19.236" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:19.236" starttime="20190401 15:26:18.608"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:19.237" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:19.237" starttime="20190401 15:26:19.236"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:19.238" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:19.238" starttime="20190401 15:26:19.237"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:19.238" starttime="20190401 15:26:19.237"></status>
</kw>
<msg timestamp="20190401 15:26:19.238" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:19.238" starttime="20190401 15:26:18.607"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{volume_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:19.239" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:19.239" starttime="20190401 15:26:19.238"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:19.239" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:19.239" starttime="20190401 15:26:19.239"></status>
</kw>
<msg timestamp="20190401 15:26:19.239" level="INFO">@{volume_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:19.239" starttime="20190401 15:26:19.238"></status>
</kw>
<kw type="for" name="${volume} IN [ @{volume_list} ]">
<status status="PASS" endtime="20190401 15:26:19.239" starttime="20190401 15:26:19.239"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:19.239" starttime="20190401 15:26:18.606"></status>
</kw>
<kw name="Delete All Stacks" library="OpenStack">
<doc>Get a list of all existing stacks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:19.240" level="INFO">${openstack_cmd} = openstack stack list</msg>
<status status="PASS" endtime="20190401 15:26:19.240" starttime="20190401 15:26:19.240"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:19.240" level="INFO">${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:19.240" starttime="20190401 15:26:19.240"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:19.241" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:19.241" starttime="20190401 15:26:19.241"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:19.242" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:19.869" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:19.870" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:19.870" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:19.870" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:19.870" starttime="20190401 15:26:19.241"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:19.870" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:19.870" starttime="20190401 15:26:19.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:19.871" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:19.871" starttime="20190401 15:26:19.871"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:19.871" starttime="20190401 15:26:19.871"></status>
</kw>
<msg timestamp="20190401 15:26:19.872" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:19.872" starttime="20190401 15:26:19.240"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{stack_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:19.872" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:19.872" starttime="20190401 15:26:19.872"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:19.872" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:19.873" starttime="20190401 15:26:19.872"></status>
</kw>
<msg timestamp="20190401 15:26:19.873" level="INFO">@{stack_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:19.873" starttime="20190401 15:26:19.872"></status>
</kw>
<kw type="for" name="${stack} IN [ @{stack_list} ]">
<status status="PASS" endtime="20190401 15:26:19.873" starttime="20190401 15:26:19.873"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:19.873" starttime="20190401 15:26:19.240"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:19.873" starttime="20190401 15:26:14.802"></status>
</kw>
<kw name="Stx Suite TearDown" library="Utils">
<doc>Wrapper to clean up activities on the suite.</doc>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20190401 15:26:19.875" starttime="20190401 15:26:19.873"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:19.875" starttime="20190401 15:26:19.873"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:19.875" starttime="20190401 15:26:14.802">Several failures occurred:

1) Cloud openstack_helm was not found.

2) Cloud openstack_helm was not found.

3) Cloud openstack_helm was not found.

4) Cloud openstack_helm was not found.

5) Cloud openstack_helm was not found.

6) Cloud openstack_helm was not found.

7) Cloud openstack_helm was not found.

8) Cloud openstack_helm was not found.</status>
</kw>
<doc>Tests to create instances from an image, perform different
power status and set properties, using Cirros and Centos OS.
Author(s):
- Juan Carlos Alonso juan.carlos.alonso@intel.com</doc>
<status status="FAIL" endtime="20190401 15:26:19.876" starttime="20190401 15:26:04.873">Suite teardown failed:
Several failures occurred:

1) Cloud openstack_helm was not found.

2) Cloud openstack_helm was not found.

3) Cloud openstack_helm was not found.

4) Cloud openstack_helm was not found.

5) Cloud openstack_helm was not found.

6) Cloud openstack_helm was not found.

7) Cloud openstack_helm was not found.

8) Cloud openstack_helm was not found.</status>
</suite>
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-OpenStack/02-Instance-From-Volume.robot" id="s1-s1-s2" name="02-Instance-From-Volume">
<kw type="setup" name="Stx Suite Setup" library="Utils">
<doc>Wrapper to setup the environment needed for exercise
StarlingX features</doc>
<kw name="Open Master Controller Connection" library="Utils">
<doc>Establish a SSH connection with the master controller
to start executing the the suite.</doc>
<kw name="Connect to Controller Node" library="Utils">
<doc>Stablish a SSH connection to the controller and return
the connection id</doc>
<arguments>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_NAME}</arg>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_PSWD}</arg>
<arg>${CONFIG.general.IP_UNIT_0_ADDRESS}</arg>
</arguments>
<assign>
<var>${master_controller_connection}</var>
</assign>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${ip_address} prompt=${prompt}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${controller_connection}</var>
</assign>
<msg timestamp="20190401 15:26:19.891" level="INFO">${controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:26:19.891" starttime="20190401 15:26:19.891"></status>
</kw>
<kw name="Flexible_SSH_Login" library="Utils">
<doc>On active SSH session: if given non-empty password,
do Login, else do Login With Public Key.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${password}</arg>
</arguments>
<assign>
<var>${pwd_length}</var>
</assign>
<msg timestamp="20190401 15:26:19.892" level="INFO">Length is 10</msg>
<msg timestamp="20190401 15:26:19.892" level="INFO">${pwd_length} = 10</msg>
<status status="PASS" endtime="20190401 15:26:19.892" starttime="20190401 15:26:19.891"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${pwd_length} &gt; 0</arg>
<arg>SSHLibrary.Login</arg>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<msg timestamp="20190401 15:26:19.892" level="INFO">Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.</msg>
<msg timestamp="20190401 15:26:20.977" level="INFO">Read output: Last login: Mon Apr  1 21:14:50 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$</msg>
<status status="PASS" endtime="20190401 15:26:20.978" starttime="20190401 15:26:19.892"></status>
</kw>
<msg timestamp="20190401 15:26:20.978" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190401 15:26:20.978" starttime="20190401 15:26:19.892"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:20.978" starttime="20190401 15:26:19.891"></status>
</kw>
<msg timestamp="20190401 15:26:20.978" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:26:20.978" starttime="20190401 15:26:19.890"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190401 15:26:20.978" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:26:20.979" starttime="20190401 15:26:20.978"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190401 15:26:20.979" level="INFO">1</msg>
<status status="PASS" endtime="20190401 15:26:20.979" starttime="20190401 15:26:20.979"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:20.979" starttime="20190401 15:26:19.890"></status>
</kw>
<kw name="Set Env Vars From Openrc" library="Utils">
<doc>Sources the openrc form /etc/nova/ to have the admin
variables exported on the controller.</doc>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>source /etc/platform/openrc</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:20.980" starttime="20190401 15:26:20.980"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190401 15:26:20.981" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190401 15:26:20.981" starttime="20190401 15:26:20.980"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:20.981" starttime="20190401 15:26:20.981"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:20.981" starttime="20190401 15:26:20.981"></status>
</kw>
<msg timestamp="20190401 15:26:20.982" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190401 15:26:20.982" starttime="20190401 15:26:20.980"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20190401 15:26:20.982" starttime="20190401 15:26:20.982"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190401 15:26:20.985" level="INFO">source /etc/platform/openrc</msg>
<status status="PASS" endtime="20190401 15:26:20.986" starttime="20190401 15:26:20.982"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:26:21.353" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190401 15:26:21.354" level="INFO">${output} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:26:21.354" starttime="20190401 15:26:20.986"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190401 15:26:21.354" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:26:21.354" starttime="20190401 15:26:21.354"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190401 15:26:21.355" level="INFO">${clean_out} = </msg>
<status status="PASS" endtime="20190401 15:26:21.355" starttime="20190401 15:26:21.355"></status>
</kw>
<msg timestamp="20190401 15:26:21.355" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190401 15:26:21.355" starttime="20190401 15:26:21.354"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190401 15:26:21.357" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190401 15:26:21.357" starttime="20190401 15:26:21.355"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:21.358" level="INFO">0</msg>
<msg timestamp="20190401 15:26:21.358" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:26:21.358" starttime="20190401 15:26:21.358"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190401 15:26:21.358" level="INFO">0</msg>
<status status="PASS" endtime="20190401 15:26:21.358" starttime="20190401 15:26:21.358"></status>
</kw>
<msg timestamp="20190401 15:26:21.358" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:26:21.358" starttime="20190401 15:26:21.355"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:21.359" starttime="20190401 15:26:21.359"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:21.359" starttime="20190401 15:26:21.359"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:21.360" starttime="20190401 15:26:21.359"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190401 15:26:21.360" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: </msg>
<status status="PASS" endtime="20190401 15:26:21.360" starttime="20190401 15:26:21.360"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:21.360" starttime="20190401 15:26:20.980"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:21.360" starttime="20190401 15:26:20.979"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:21.360" starttime="20190401 15:26:19.890"></status>
</kw>
<test id="s1-s1-s2-t1" name="Create Flavors for Instances">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${flavor_property_1}</arg>
<arg>${flavor_property_2}</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190401 15:26:21.361" level="INFO">${properties} = --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared'</msg>
<status status="PASS" endtime="20190401 15:26:21.361" starttime="20190401 15:26:21.361"></status>
</kw>
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${cirros_flavor_ram}</arg>
<arg>${cirros_flavor_vcpus}</arg>
<arg>${cirros_flavor_disk}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:21.362" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190401 15:26:21.362" starttime="20190401 15:26:21.362"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:21.362" level="INFO">${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small</msg>
<status status="PASS" endtime="20190401 15:26:21.362" starttime="20190401 15:26:21.362"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:21.363" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:21.363" starttime="20190401 15:26:21.363"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:21.364" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.</msg>
<msg timestamp="20190401 15:26:21.942" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:21.942" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:21.942" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:21.942" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:21.942" starttime="20190401 15:26:21.363"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:21.943" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:21.943" starttime="20190401 15:26:21.943"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:21.944" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:21.944" starttime="20190401 15:26:21.943"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:21.944" starttime="20190401 15:26:21.943"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:21.944" starttime="20190401 15:26:21.362"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:21.944" starttime="20190401 15:26:21.361"></status>
</kw>
<doc>Create flavors with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:21.944" critical="yes" starttime="20190401 15:26:21.360">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s2-t2" name="Create Images for Instances">
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/${cirros_image}</arg>
<arg>${host_image_path}/${cirros_image}</arg>
</arguments>
<msg timestamp="20190401 15:26:21.983" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190401 15:26:21.990" level="INFO">[chan 3] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190401 15:26:21.991" level="FAIL">There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.</msg>
<status status="FAIL" endtime="20190401 15:26:21.991" starttime="20190401 15:26:21.945"></status>
</kw>
<doc>Create images with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:21.991" critical="yes" starttime="20190401 15:26:21.944">There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.</status>
</test>
<test id="s1-s1-s2-t3" name="Create Networks for Instance">
<kw name="Create Network" library="OpenStack">
<doc>Create Network with openstack request.</doc>
<arguments>
<arg>${network_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:21.992" level="INFO">${openstack_cmd} = openstack network create</msg>
<status status="PASS" endtime="20190401 15:26:21.992" starttime="20190401 15:26:21.992"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${network_name}</arg>
<arg>${additional_args}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:21.993" level="INFO">${cmd} = openstack network create network-1 </msg>
<status status="PASS" endtime="20190401 15:26:21.993" starttime="20190401 15:26:21.992"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:21.993" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:21.993" starttime="20190401 15:26:21.993"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:21.994" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network create network-1 '.</msg>
<msg timestamp="20190401 15:26:22.622" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:22.622" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:22.622" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:22.622" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:22.622" starttime="20190401 15:26:21.994"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:22.623" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:22.623" starttime="20190401 15:26:22.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:22.624" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:22.624" starttime="20190401 15:26:22.623"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:22.624" starttime="20190401 15:26:22.623"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:22.624" starttime="20190401 15:26:21.993"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:22.624" starttime="20190401 15:26:21.992"></status>
</kw>
<doc>Create networks to be used to launch Cirros
instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:22.624" critical="yes" starttime="20190401 15:26:21.991">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s2-t4" name="Create Volume for Instances">
<kw name="Create Volume" library="OpenStack">
<doc>Create Volume.</doc>
<arguments>
<arg>${cirros_volume_size}</arg>
<arg>${cirros_image_name}</arg>
<arg>--bootable</arg>
<arg>${cirros_volume_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:22.635" level="INFO">${openstack_cmd} = openstack volume create</msg>
<status status="PASS" endtime="20190401 15:26:22.635" starttime="20190401 15:26:22.635"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--size ${size}</arg>
<arg>--image ${image}</arg>
<arg>${bootable}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:22.636" level="INFO">${cmd} = openstack volume create --size 20 --image cirros --bootable vol-cirros-1</msg>
<status status="PASS" endtime="20190401 15:26:22.636" starttime="20190401 15:26:22.635"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:22.636" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:22.636" starttime="20190401 15:26:22.636"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:22.637" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume create --size 20 --image cirros --bootable vol-cirros-1'.</msg>
<msg timestamp="20190401 15:26:23.366" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:23.366" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:23.366" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:23.366" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:23.366" starttime="20190401 15:26:22.637"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:23.367" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:23.367" starttime="20190401 15:26:23.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:23.368" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:23.368" starttime="20190401 15:26:23.367"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:23.368" starttime="20190401 15:26:23.367"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:23.368" starttime="20190401 15:26:22.636"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:23.368" starttime="20190401 15:26:22.634"></status>
</kw>
<doc>Create volumes with or without properties to be used to
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:23.368" critical="yes" starttime="20190401 15:26:22.633">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s2-t5" name="Launch Instances">
<kw name="Create Instance From Volume" library="OpenStack">
<doc>Create a VM Instances with the net id of the Netowrk
flavor and volume</doc>
<arguments>
<arg>${network_name}</arg>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_volume_name}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Get Net Id" library="OpenStack">
<doc>Retrieve the net id for the given network name</doc>
<arguments>
<arg>${net_name}</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:23.370" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190401 15:26:23.370" starttime="20190401 15:26:23.370"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "${network_name}"</arg>
<arg>awk '{print$2}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:23.370" level="INFO">${cmd} = openstack network list|grep "network-1"|awk '{print$2}'</msg>
<status status="PASS" endtime="20190401 15:26:23.370" starttime="20190401 15:26:23.370"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:23.371" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:23.371" starttime="20190401 15:26:23.371"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:23.371" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|grep "network-1"|awk '{print$2}''.</msg>
<msg timestamp="20190401 15:26:24.050" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190401 15:26:24.050" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:24.050" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:24.050" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:26:24.050" starttime="20190401 15:26:23.371"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:24.051" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 0}</msg>
<status status="PASS" endtime="20190401 15:26:24.051" starttime="20190401 15:26:24.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:24.051" starttime="20190401 15:26:24.051"></status>
</kw>
<msg timestamp="20190401 15:26:24.052" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=0 }</msg>
<status status="PASS" endtime="20190401 15:26:24.052" starttime="20190401 15:26:23.370"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:26:24.052" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190401 15:26:24.052" starttime="20190401 15:26:24.052"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${splitted_output}</var>
</assign>
<msg timestamp="20190401 15:26:24.052" level="INFO">${splitted_output} = []</msg>
<status status="PASS" endtime="20190401 15:26:24.052" starttime="20190401 15:26:24.052"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${splitted_output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<msg timestamp="20190401 15:26:24.053" level="FAIL">IndexError: Given index 0 is out of the range 0--1.</msg>
<status status="FAIL" endtime="20190401 15:26:24.053" starttime="20190401 15:26:24.053"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:24.053" starttime="20190401 15:26:23.369"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:24.053" starttime="20190401 15:26:23.369"></status>
</kw>
<doc>Launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:24.053" critical="yes" starttime="20190401 15:26:23.368">IndexError: Given index 0 is out of the range 0--1.</status>
</test>
<test id="s1-s1-s2-t6" name="Suspend Resume Instance">
<kw name="Suspend Instance" library="OpenStack">
<doc>Suspend the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server suspend ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:24.055" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:24.055" starttime="20190401 15:26:24.055"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:24.055" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server suspend vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:24.684" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:24.684" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:24.684" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:24.684" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:24.684" starttime="20190401 15:26:24.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:24.685" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:24.685" starttime="20190401 15:26:24.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:24.686" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:24.686" starttime="20190401 15:26:24.685"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:24.686" starttime="20190401 15:26:24.685"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:24.686" starttime="20190401 15:26:24.054"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:24.686" starttime="20190401 15:26:24.054"></status>
</kw>
<doc>Suspend and Resume Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:24.686" critical="yes" starttime="20190401 15:26:24.054">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s2-t7" name="Set Error Active Flags Instance">
<kw name="Set Error State Instance" library="OpenStack">
<doc>Set 'Error' value to the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>error</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:24.688" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:24.688" starttime="20190401 15:26:24.688"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:24.688" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state error vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:25.316" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:25.317" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:25.317" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:25.317" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:25.317" starttime="20190401 15:26:24.688"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:25.317" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:25.317" starttime="20190401 15:26:25.317"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:25.318" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:25.318" starttime="20190401 15:26:25.318"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:25.318" starttime="20190401 15:26:25.318"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:25.318" starttime="20190401 15:26:24.687"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:25.318" starttime="20190401 15:26:24.687"></status>
</kw>
<doc>Set 'Error' and 'Active' flags to Cirros
instance.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:25.319" critical="yes" starttime="20190401 15:26:24.687">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s2-t8" name="Pause Unpause Instances">
<kw name="Pause Instance" library="OpenStack">
<doc>Pause an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server pause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:25.320" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:25.320" starttime="20190401 15:26:25.320"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:25.321" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server pause vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:25.899" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:25.899" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:25.899" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:25.899" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:25.899" starttime="20190401 15:26:25.320"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:25.900" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:25.900" starttime="20190401 15:26:25.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:25.900" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:25.900" starttime="20190401 15:26:25.900"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:25.900" starttime="20190401 15:26:25.900"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:25.901" starttime="20190401 15:26:25.320"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:25.901" starttime="20190401 15:26:25.319"></status>
</kw>
<doc>Pause and Unpause Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:25.901" critical="yes" starttime="20190401 15:26:25.319">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s2-t9" name="Stop Start Instances">
<kw name="Stop Instance" library="OpenStack">
<doc>Stop an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server stop ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:25.902" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:25.902" starttime="20190401 15:26:25.902"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:25.903" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server stop vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:26.561" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:26.561" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:26.561" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:26.561" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:26.562" starttime="20190401 15:26:25.902"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:26.562" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:26.562" starttime="20190401 15:26:26.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:26.564" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:26.564" starttime="20190401 15:26:26.563"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:26.564" starttime="20190401 15:26:26.562"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:26.564" starttime="20190401 15:26:25.902"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:26.564" starttime="20190401 15:26:25.902"></status>
</kw>
<doc>Stop and Start Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:26.564" critical="yes" starttime="20190401 15:26:25.901">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s2-t10" name="Lock Unlock Instances">
<kw name="Lock Instance" library="OpenStack">
<doc>Lock an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server lock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:26.566" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:26.566" starttime="20190401 15:26:26.565"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:26.566" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server lock vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:27.195" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:27.195" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:27.195" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:27.195" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:27.195" starttime="20190401 15:26:26.566"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:27.196" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:27.196" starttime="20190401 15:26:27.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:27.197" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:27.197" starttime="20190401 15:26:27.197"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:27.197" starttime="20190401 15:26:27.196"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:27.197" starttime="20190401 15:26:26.565"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:27.197" starttime="20190401 15:26:26.565"></status>
</kw>
<doc>Lock and Unlock Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:27.198" critical="yes" starttime="20190401 15:26:26.565">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s2-t11" name="Reboot Instances">
<kw name="Reboot Instance" library="OpenStack">
<doc>Reboot an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server reboot ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:27.199" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:27.199" starttime="20190401 15:26:27.199"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:27.199" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server reboot vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:27.827" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:27.828" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:27.828" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:27.828" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:27.828" starttime="20190401 15:26:27.199"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:27.828" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:27.828" starttime="20190401 15:26:27.828"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:27.829" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:27.829" starttime="20190401 15:26:27.829"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:27.829" starttime="20190401 15:26:27.828"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:27.829" starttime="20190401 15:26:27.199"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:27.829" starttime="20190401 15:26:27.198"></status>
</kw>
<doc>Reboot Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:27.830" critical="yes" starttime="20190401 15:26:27.198">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s2-t12" name="Rebuild Instances">
<kw name="Rebuild Instance From Volume" library="OpenStack">
<doc>Rebuild an instance from volume</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server rebuild --image ${image} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:27.831" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:27.831" starttime="20190401 15:26:27.831"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:27.832" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server rebuild --image cirros vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:28.460" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:28.460" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:28.460" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:28.460" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:28.460" starttime="20190401 15:26:27.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:28.461" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:28.461" starttime="20190401 15:26:28.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:28.462" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:28.462" starttime="20190401 15:26:28.462"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:28.462" starttime="20190401 15:26:28.461"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:28.462" starttime="20190401 15:26:27.831"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:28.462" starttime="20190401 15:26:27.830"></status>
</kw>
<doc>Rebuild Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:28.463" critical="yes" starttime="20190401 15:26:27.830">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s2-t13" name="Resize Instances">
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${cirros_flavor_ram}</arg>
<arg>${cirros_flavor_vcpus}</arg>
<arg>${cirros_flavor_disk}</arg>
<arg>${cirros_flavor_name_2}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:28.464" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190401 15:26:28.464" starttime="20190401 15:26:28.464"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:28.464" level="INFO">${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small</msg>
<status status="PASS" endtime="20190401 15:26:28.464" starttime="20190401 15:26:28.464"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:28.465" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:28.465" starttime="20190401 15:26:28.465"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:28.466" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small'.</msg>
<msg timestamp="20190401 15:26:29.050" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:29.050" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:29.050" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:29.050" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:29.050" starttime="20190401 15:26:28.465"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:29.051" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:29.051" starttime="20190401 15:26:29.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:29.052" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:29.052" starttime="20190401 15:26:29.052"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:29.052" starttime="20190401 15:26:29.051"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:29.052" starttime="20190401 15:26:28.465"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:29.052" starttime="20190401 15:26:28.463"></status>
</kw>
<doc>Resize Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:29.052" critical="yes" starttime="20190401 15:26:28.463">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s2-t14" name="Set Unset Properties Instances">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${instance_property_1}='true'</arg>
<arg>${instance_property_2}='500'</arg>
<arg>${instance_property_3}='180'</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190401 15:26:29.054" level="INFO">${properties} = --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180'</msg>
<status status="PASS" endtime="20190401 15:26:29.054" starttime="20190401 15:26:29.053"></status>
</kw>
<kw name="Set Instance Property" library="OpenStack">
<doc>Set properties of an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:29.055" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:29.055" starttime="20190401 15:26:29.055"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:29.056" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:29.714" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:29.714" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:29.714" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:29.714" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:29.714" starttime="20190401 15:26:29.055"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:29.715" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:29.715" starttime="20190401 15:26:29.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:29.716" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:29.716" starttime="20190401 15:26:29.716"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:29.716" starttime="20190401 15:26:29.715"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:29.716" starttime="20190401 15:26:29.055"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:29.716" starttime="20190401 15:26:29.054"></status>
</kw>
<doc>Set Unset properties of Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:29.716" critical="yes" starttime="20190401 15:26:29.053">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s2-t15" name="Evacuate Instances From Hosts">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CONFIGURATION_TYPE}' == 'Duplex'</arg>
<arg>Run Keywords</arg>
<arg>Evacuate Instances</arg>
<arg>controller-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>controller-1</arg>
<arg>ELSE IF</arg>
<arg>'${CONFIGURATION_TYPE}' == 'MN-Local' or '${CONFIGURATION_TYPE}' == 'MN-External'</arg>
<arg>Run Keywords</arg>
<arg>Evacuate Instances</arg>
<arg>compute-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>compute-1</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Evacuate Instances</arg>
<arg>controller-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>controller-1</arg>
</arguments>
<kw name="Evacuate Instances" library="OpenStack">
<doc>Evacuate all VMs from computes or from controllers.</doc>
<arguments>
<arg>controller-0</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:29.718" level="INFO">${openstack_cmd} = openstack compute service set</msg>
<status status="PASS" endtime="20190401 15:26:29.718" starttime="20190401 15:26:29.718"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--disable</arg>
<arg>--disable-reason test-evacuate</arg>
<arg>${host}</arg>
<arg>nova-compute</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:29.719" level="INFO">${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute</msg>
<status status="PASS" endtime="20190401 15:26:29.719" starttime="20190401 15:26:29.718"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:29.719" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:29.719" starttime="20190401 15:26:29.719"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:29.720" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute'.</msg>
<msg timestamp="20190401 15:26:30.348" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:30.348" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:30.348" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:30.348" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:30.348" starttime="20190401 15:26:29.719"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:30.349" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:30.349" starttime="20190401 15:26:30.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:30.350" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:30.350" starttime="20190401 15:26:30.349"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:30.350" starttime="20190401 15:26:30.349"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:30.350" starttime="20190401 15:26:29.719"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:30.350" starttime="20190401 15:26:29.718"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:30.350" starttime="20190401 15:26:29.717"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:30.350" starttime="20190401 15:26:29.717"></status>
</kw>
<doc>Evacuate all Cirros instances from computes
or controllers.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:30.350" critical="yes" starttime="20190401 15:26:29.717">Cloud openstack_helm was not found.</status>
</test>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>OpenStack.Openstack Cleanup All</arg>
<arg>Utils.Stx Suite TearDown</arg>
</arguments>
<kw name="Openstack Cleanup All" library="OpenStack">
<doc>Delete all instances, images, flavors, networks and
keypairs generated during tests.</doc>
<kw name="Delete All Instances" library="OpenStack">
<doc>Get a list of all existing instances to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:30.352" level="INFO">${openstack_cmd} = openstack server list</msg>
<status status="PASS" endtime="20190401 15:26:30.352" starttime="20190401 15:26:30.352"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:30.352" level="INFO">${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:30.352" starttime="20190401 15:26:30.352"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:30.353" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:30.353" starttime="20190401 15:26:30.353"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:30.354" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:30.932" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:30.932" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:30.932" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:30.932" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:30.932" starttime="20190401 15:26:30.353"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:30.933" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:30.933" starttime="20190401 15:26:30.932"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:30.934" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:30.934" starttime="20190401 15:26:30.933"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:30.934" starttime="20190401 15:26:30.933"></status>
</kw>
<msg timestamp="20190401 15:26:30.934" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:30.934" starttime="20190401 15:26:30.353"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{vm_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:30.935" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:30.935" starttime="20190401 15:26:30.934"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:30.935" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:30.935" starttime="20190401 15:26:30.935"></status>
</kw>
<msg timestamp="20190401 15:26:30.935" level="INFO">@{vm_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:30.935" starttime="20190401 15:26:30.934"></status>
</kw>
<kw type="for" name="${vm} IN [ @{vm_list} ]">
<status status="PASS" endtime="20190401 15:26:30.935" starttime="20190401 15:26:30.935"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:30.935" starttime="20190401 15:26:30.352"></status>
</kw>
<kw name="Delete All Images" library="OpenStack">
<doc>Get a list of all existing images to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:30.936" level="INFO">${openstack_cmd} = openstack image list</msg>
<status status="PASS" endtime="20190401 15:26:30.936" starttime="20190401 15:26:30.936"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "Cirros"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:30.936" level="INFO">${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"</msg>
<status status="PASS" endtime="20190401 15:26:30.936" starttime="20190401 15:26:30.936"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:30.937" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:30.937" starttime="20190401 15:26:30.937"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:30.938" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.</msg>
<msg timestamp="20190401 15:26:31.546" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:31.546" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:31.546" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:31.546" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:31.546" starttime="20190401 15:26:30.937"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:31.547" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:31.547" starttime="20190401 15:26:31.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:31.548" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:31.548" starttime="20190401 15:26:31.547"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:31.548" starttime="20190401 15:26:31.547"></status>
</kw>
<msg timestamp="20190401 15:26:31.548" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:31.548" starttime="20190401 15:26:30.936"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{image_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:31.549" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:31.549" starttime="20190401 15:26:31.549"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:31.549" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:31.549" starttime="20190401 15:26:31.549"></status>
</kw>
<msg timestamp="20190401 15:26:31.549" level="INFO">@{image_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:31.549" starttime="20190401 15:26:31.548"></status>
</kw>
<kw type="for" name="${image} IN [ @{image_list} ]">
<status status="PASS" endtime="20190401 15:26:31.550" starttime="20190401 15:26:31.550"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:31.550" starttime="20190401 15:26:30.936"></status>
</kw>
<kw name="Delete All Flavors" library="OpenStack">
<doc>Get a list of all existing flavors to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:31.550" level="INFO">${openstack_cmd} = openstack flavor list</msg>
<status status="PASS" endtime="20190401 15:26:31.550" starttime="20190401 15:26:31.550"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "m1"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:31.551" level="INFO">${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"</msg>
<status status="PASS" endtime="20190401 15:26:31.551" starttime="20190401 15:26:31.550"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:31.551" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:31.551" starttime="20190401 15:26:31.551"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:31.552" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.</msg>
<msg timestamp="20190401 15:26:32.260" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:32.260" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:32.260" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:32.261" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:32.261" starttime="20190401 15:26:31.551"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:32.261" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:32.261" starttime="20190401 15:26:32.261"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:32.262" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:32.262" starttime="20190401 15:26:32.262"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:32.262" starttime="20190401 15:26:32.261"></status>
</kw>
<msg timestamp="20190401 15:26:32.262" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:32.262" starttime="20190401 15:26:31.551"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{flavor_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:32.263" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:32.263" starttime="20190401 15:26:32.263"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:32.263" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:32.263" starttime="20190401 15:26:32.263"></status>
</kw>
<msg timestamp="20190401 15:26:32.263" level="INFO">@{flavor_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:32.263" starttime="20190401 15:26:32.262"></status>
</kw>
<kw type="for" name="${flavor} IN [ @{flavor_list} ]">
<status status="PASS" endtime="20190401 15:26:32.264" starttime="20190401 15:26:32.264"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:32.264" starttime="20190401 15:26:31.550"></status>
</kw>
<kw name="Delete All Networks" library="OpenStack">
<doc>Get a list of all existing networks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:32.264" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190401 15:26:32.264" starttime="20190401 15:26:32.264"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "private"</arg>
<arg>grep -v "public"</arg>
<arg>grep -v "external"</arg>
<arg>grep -v "internal"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:32.265" level="INFO">${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"</msg>
<status status="PASS" endtime="20190401 15:26:32.265" starttime="20190401 15:26:32.264"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:32.265" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:32.265" starttime="20190401 15:26:32.265"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:32.266" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.</msg>
<msg timestamp="20190401 15:26:33.095" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:33.095" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:33.095" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:33.095" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:33.095" starttime="20190401 15:26:32.266"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:33.096" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:33.096" starttime="20190401 15:26:33.095"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:33.096" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:33.096" starttime="20190401 15:26:33.096"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:33.096" starttime="20190401 15:26:33.096"></status>
</kw>
<msg timestamp="20190401 15:26:33.097" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:33.097" starttime="20190401 15:26:32.265"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{network_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:33.097" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:33.097" starttime="20190401 15:26:33.097"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:33.098" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:33.098" starttime="20190401 15:26:33.098"></status>
</kw>
<msg timestamp="20190401 15:26:33.098" level="INFO">@{network_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:33.098" starttime="20190401 15:26:33.097"></status>
</kw>
<kw type="for" name="${network} IN [ @{network_list} ]">
<status status="PASS" endtime="20190401 15:26:33.098" starttime="20190401 15:26:33.098"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:33.098" starttime="20190401 15:26:32.264"></status>
</kw>
<kw name="Delete All KeyPairs" library="OpenStack">
<doc>Get a list of all existing keypais to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack keypair list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:33.099" level="INFO">${openstack_cmd} = openstack keypair list</msg>
<status status="PASS" endtime="20190401 15:26:33.099" starttime="20190401 15:26:33.099"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:33.099" level="INFO">${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:33.099" starttime="20190401 15:26:33.099"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:33.100" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:33.100" starttime="20190401 15:26:33.099"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:33.100" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack keypair list|awk '{print$2}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:33.759" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:33.759" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:33.759" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:33.759" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:33.759" starttime="20190401 15:26:33.100"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:33.760" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:33.760" starttime="20190401 15:26:33.760"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:33.761" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:33.761" starttime="20190401 15:26:33.761"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:33.761" starttime="20190401 15:26:33.760"></status>
</kw>
<msg timestamp="20190401 15:26:33.761" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:33.761" starttime="20190401 15:26:33.099"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{key_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:33.762" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:33.762" starttime="20190401 15:26:33.762"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:33.762" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:33.762" starttime="20190401 15:26:33.762"></status>
</kw>
<msg timestamp="20190401 15:26:33.762" level="INFO">@{key_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:33.762" starttime="20190401 15:26:33.761"></status>
</kw>
<kw type="for" name="${key} IN [ @{key_list} ]">
<status status="PASS" endtime="20190401 15:26:33.763" starttime="20190401 15:26:33.763"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:33.763" starttime="20190401 15:26:33.098"></status>
</kw>
<kw name="Delete All Snapshots" library="OpenStack">
<doc>Get a list of all existing snapshots to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:33.763" level="INFO">${openstack_cmd} = openstack volume snapshot list</msg>
<status status="PASS" endtime="20190401 15:26:33.763" starttime="20190401 15:26:33.763"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:33.763" level="INFO">${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:33.764" starttime="20190401 15:26:33.763"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:33.764" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:33.764" starttime="20190401 15:26:33.764"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:33.765" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:34.408" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:34.408" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:34.408" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:34.408" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:34.408" starttime="20190401 15:26:33.764"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:34.409" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:34.409" starttime="20190401 15:26:34.408"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:34.409" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:34.409" starttime="20190401 15:26:34.409"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:34.409" starttime="20190401 15:26:34.409"></status>
</kw>
<msg timestamp="20190401 15:26:34.410" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:34.410" starttime="20190401 15:26:33.764"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{snapshot_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:34.410" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:34.410" starttime="20190401 15:26:34.410"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:34.411" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:34.411" starttime="20190401 15:26:34.410"></status>
</kw>
<msg timestamp="20190401 15:26:34.411" level="INFO">@{snapshot_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:34.411" starttime="20190401 15:26:34.410"></status>
</kw>
<kw type="for" name="${snapshot} IN [ @{snapshot_list} ]">
<status status="PASS" endtime="20190401 15:26:34.411" starttime="20190401 15:26:34.411"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:34.411" starttime="20190401 15:26:33.763"></status>
</kw>
<kw name="Delete All Volumes" library="OpenStack">
<doc>Get a list of all existing volumes to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:34.412" level="INFO">${openstack_cmd} = openstack volume list</msg>
<status status="PASS" endtime="20190401 15:26:34.412" starttime="20190401 15:26:34.411"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "ID"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:34.412" level="INFO">${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"</msg>
<status status="PASS" endtime="20190401 15:26:34.412" starttime="20190401 15:26:34.412"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:34.413" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:34.413" starttime="20190401 15:26:34.412"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:34.413" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume list|awk '{print$2}'|grep -v "ID"'.</msg>
<msg timestamp="20190401 15:26:35.041" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:35.041" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:35.041" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:35.041" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:35.042" starttime="20190401 15:26:34.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:35.042" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:35.042" starttime="20190401 15:26:35.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:35.043" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:35.043" starttime="20190401 15:26:35.043"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:35.043" starttime="20190401 15:26:35.042"></status>
</kw>
<msg timestamp="20190401 15:26:35.043" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:35.043" starttime="20190401 15:26:34.412"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{volume_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:35.044" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:35.044" starttime="20190401 15:26:35.044"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:35.044" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:35.044" starttime="20190401 15:26:35.044"></status>
</kw>
<msg timestamp="20190401 15:26:35.044" level="INFO">@{volume_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:35.044" starttime="20190401 15:26:35.043"></status>
</kw>
<kw type="for" name="${volume} IN [ @{volume_list} ]">
<status status="PASS" endtime="20190401 15:26:35.045" starttime="20190401 15:26:35.045"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:35.045" starttime="20190401 15:26:34.411"></status>
</kw>
<kw name="Delete All Stacks" library="OpenStack">
<doc>Get a list of all existing stacks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:35.045" level="INFO">${openstack_cmd} = openstack stack list</msg>
<status status="PASS" endtime="20190401 15:26:35.045" starttime="20190401 15:26:35.045"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:35.046" level="INFO">${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:35.046" starttime="20190401 15:26:35.045"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:35.046" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:35.046" starttime="20190401 15:26:35.046"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:35.047" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:35.675" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:35.675" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:35.675" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:35.675" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:35.675" starttime="20190401 15:26:35.046"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:35.676" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:35.676" starttime="20190401 15:26:35.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:35.676" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:35.676" starttime="20190401 15:26:35.676"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:35.677" starttime="20190401 15:26:35.676"></status>
</kw>
<msg timestamp="20190401 15:26:35.677" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:35.677" starttime="20190401 15:26:35.046"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{stack_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:35.677" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:35.677" starttime="20190401 15:26:35.677"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:35.678" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:35.678" starttime="20190401 15:26:35.678"></status>
</kw>
<msg timestamp="20190401 15:26:35.678" level="INFO">@{stack_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:35.678" starttime="20190401 15:26:35.677"></status>
</kw>
<kw type="for" name="${stack} IN [ @{stack_list} ]">
<status status="PASS" endtime="20190401 15:26:35.678" starttime="20190401 15:26:35.678"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:35.678" starttime="20190401 15:26:35.045"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:35.678" starttime="20190401 15:26:30.352"></status>
</kw>
<kw name="Stx Suite TearDown" library="Utils">
<doc>Wrapper to clean up activities on the suite.</doc>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20190401 15:26:35.680" starttime="20190401 15:26:35.679"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:35.680" starttime="20190401 15:26:35.679"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:35.680" starttime="20190401 15:26:30.351">Several failures occurred:

1) Cloud openstack_helm was not found.

2) Cloud openstack_helm was not found.

3) Cloud openstack_helm was not found.

4) Cloud openstack_helm was not found.

5) Cloud openstack_helm was not found.

6) Cloud openstack_helm was not found.

7) Cloud openstack_helm was not found.

8) Cloud openstack_helm was not found.</status>
</kw>
<doc>Tests to create instances from volume, perform different
power status and set properties, using Cirros OS.
Author(s):
- Juan Carlos Alonso juan.carlos.alonso@intel.com</doc>
<status status="FAIL" endtime="20190401 15:26:35.681" starttime="20190401 15:26:19.878">Suite teardown failed:
Several failures occurred:

1) Cloud openstack_helm was not found.

2) Cloud openstack_helm was not found.

3) Cloud openstack_helm was not found.

4) Cloud openstack_helm was not found.

5) Cloud openstack_helm was not found.

6) Cloud openstack_helm was not found.

7) Cloud openstack_helm was not found.

8) Cloud openstack_helm was not found.</status>
</suite>
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-OpenStack/03-Instance-From-Snapshot.robot" id="s1-s1-s3" name="03-Instance-From-Snapshot">
<kw type="setup" name="Stx Suite Setup" library="Utils">
<doc>Wrapper to setup the environment needed for exercise
StarlingX features</doc>
<kw name="Open Master Controller Connection" library="Utils">
<doc>Establish a SSH connection with the master controller
to start executing the the suite.</doc>
<kw name="Connect to Controller Node" library="Utils">
<doc>Stablish a SSH connection to the controller and return
the connection id</doc>
<arguments>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_NAME}</arg>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_PSWD}</arg>
<arg>${CONFIG.general.IP_UNIT_0_ADDRESS}</arg>
</arguments>
<assign>
<var>${master_controller_connection}</var>
</assign>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${ip_address} prompt=${prompt}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${controller_connection}</var>
</assign>
<msg timestamp="20190401 15:26:35.697" level="INFO">${controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:26:35.697" starttime="20190401 15:26:35.697"></status>
</kw>
<kw name="Flexible_SSH_Login" library="Utils">
<doc>On active SSH session: if given non-empty password,
do Login, else do Login With Public Key.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${password}</arg>
</arguments>
<assign>
<var>${pwd_length}</var>
</assign>
<msg timestamp="20190401 15:26:35.698" level="INFO">Length is 10</msg>
<msg timestamp="20190401 15:26:35.698" level="INFO">${pwd_length} = 10</msg>
<status status="PASS" endtime="20190401 15:26:35.698" starttime="20190401 15:26:35.698"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${pwd_length} &gt; 0</arg>
<arg>SSHLibrary.Login</arg>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<msg timestamp="20190401 15:26:35.699" level="INFO">Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.</msg>
<msg timestamp="20190401 15:26:36.784" level="INFO">Read output: Last login: Mon Apr  1 21:15:05 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$</msg>
<status status="PASS" endtime="20190401 15:26:36.784" starttime="20190401 15:26:35.698"></status>
</kw>
<msg timestamp="20190401 15:26:36.785" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190401 15:26:36.785" starttime="20190401 15:26:35.698"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:36.785" starttime="20190401 15:26:35.697"></status>
</kw>
<msg timestamp="20190401 15:26:36.785" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:26:36.785" starttime="20190401 15:26:35.697"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190401 15:26:36.786" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:26:36.786" starttime="20190401 15:26:36.785"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190401 15:26:36.786" level="INFO">1</msg>
<status status="PASS" endtime="20190401 15:26:36.786" starttime="20190401 15:26:36.786"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:36.787" starttime="20190401 15:26:35.696"></status>
</kw>
<kw name="Set Env Vars From Openrc" library="Utils">
<doc>Sources the openrc form /etc/nova/ to have the admin
variables exported on the controller.</doc>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>source /etc/platform/openrc</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:36.788" starttime="20190401 15:26:36.788"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190401 15:26:36.789" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190401 15:26:36.789" starttime="20190401 15:26:36.788"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:36.790" starttime="20190401 15:26:36.789"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:36.790" starttime="20190401 15:26:36.790"></status>
</kw>
<msg timestamp="20190401 15:26:36.790" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190401 15:26:36.790" starttime="20190401 15:26:36.788"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20190401 15:26:36.791" starttime="20190401 15:26:36.791"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190401 15:26:36.797" level="INFO">source /etc/platform/openrc</msg>
<status status="PASS" endtime="20190401 15:26:36.797" starttime="20190401 15:26:36.791"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:26:37.289" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190401 15:26:37.289" level="INFO">${output} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:26:37.289" starttime="20190401 15:26:36.798"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190401 15:26:37.290" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:26:37.290" starttime="20190401 15:26:37.290"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190401 15:26:37.290" level="INFO">${clean_out} = </msg>
<status status="PASS" endtime="20190401 15:26:37.291" starttime="20190401 15:26:37.290"></status>
</kw>
<msg timestamp="20190401 15:26:37.291" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190401 15:26:37.291" starttime="20190401 15:26:37.290"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190401 15:26:37.293" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190401 15:26:37.293" starttime="20190401 15:26:37.291"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:37.295" level="INFO">0</msg>
<msg timestamp="20190401 15:26:37.295" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:26:37.295" starttime="20190401 15:26:37.293"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190401 15:26:37.295" level="INFO">0</msg>
<status status="PASS" endtime="20190401 15:26:37.295" starttime="20190401 15:26:37.295"></status>
</kw>
<msg timestamp="20190401 15:26:37.295" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:26:37.295" starttime="20190401 15:26:37.291"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:37.296" starttime="20190401 15:26:37.296"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:37.296" starttime="20190401 15:26:37.295"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:37.296" starttime="20190401 15:26:37.296"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190401 15:26:37.296" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: </msg>
<status status="PASS" endtime="20190401 15:26:37.297" starttime="20190401 15:26:37.296"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:37.297" starttime="20190401 15:26:36.787"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:37.297" starttime="20190401 15:26:36.787"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:37.297" starttime="20190401 15:26:35.696"></status>
</kw>
<test id="s1-s1-s3-t1" name="Create Flavors for Instances">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${flavor_property_1}</arg>
<arg>${flavor_property_2}</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190401 15:26:37.298" level="INFO">${properties} = --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared'</msg>
<status status="PASS" endtime="20190401 15:26:37.298" starttime="20190401 15:26:37.297"></status>
</kw>
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${cirros_flavor_ram}</arg>
<arg>${cirros_flavor_vcpus}</arg>
<arg>${cirros_flavor_disk}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:37.298" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190401 15:26:37.299" starttime="20190401 15:26:37.298"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:37.299" level="INFO">${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small</msg>
<status status="PASS" endtime="20190401 15:26:37.299" starttime="20190401 15:26:37.299"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:37.300" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:37.300" starttime="20190401 15:26:37.299"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:37.300" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.</msg>
<msg timestamp="20190401 15:26:37.933" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:37.933" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:37.933" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:37.933" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:37.933" starttime="20190401 15:26:37.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:37.934" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:37.934" starttime="20190401 15:26:37.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:37.934" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:37.934" starttime="20190401 15:26:37.934"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:37.934" starttime="20190401 15:26:37.934"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:37.935" starttime="20190401 15:26:37.299"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:37.935" starttime="20190401 15:26:37.298"></status>
</kw>
<doc>Create flavors with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:37.935" critical="yes" starttime="20190401 15:26:37.297">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s3-t2" name="Create Images for Instances">
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/${cirros_image}</arg>
<arg>${host_image_path}/${cirros_image}</arg>
</arguments>
<msg timestamp="20190401 15:26:37.946" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190401 15:26:37.952" level="INFO">[chan 3] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190401 15:26:37.953" level="FAIL">There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.</msg>
<status status="FAIL" endtime="20190401 15:26:37.953" starttime="20190401 15:26:37.936"></status>
</kw>
<doc>Create images with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:37.954" critical="yes" starttime="20190401 15:26:37.935">There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.</status>
</test>
<test id="s1-s1-s3-t3" name="Create Networks for Instance">
<kw name="Create Network" library="OpenStack">
<doc>Create Network with openstack request.</doc>
<arguments>
<arg>${network_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:37.955" level="INFO">${openstack_cmd} = openstack network create</msg>
<status status="PASS" endtime="20190401 15:26:37.955" starttime="20190401 15:26:37.955"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${network_name}</arg>
<arg>${additional_args}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:37.955" level="INFO">${cmd} = openstack network create network-1 </msg>
<status status="PASS" endtime="20190401 15:26:37.955" starttime="20190401 15:26:37.955"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:37.956" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:37.956" starttime="20190401 15:26:37.956"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:37.956" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network create network-1 '.</msg>
<msg timestamp="20190401 15:26:38.584" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:38.584" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:38.584" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:38.585" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:38.585" starttime="20190401 15:26:37.956"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:38.585" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:38.585" starttime="20190401 15:26:38.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:38.586" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:38.586" starttime="20190401 15:26:38.586"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:38.586" starttime="20190401 15:26:38.585"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:38.586" starttime="20190401 15:26:37.955"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:38.586" starttime="20190401 15:26:37.954"></status>
</kw>
<doc>Create networks to be used to launch Cirros and Centos
instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:38.586" critical="yes" starttime="20190401 15:26:37.954">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s3-t4" name="Create Volume for Instances">
<kw name="Create Volume" library="OpenStack">
<doc>Create Volume.</doc>
<arguments>
<arg>${cirros_volume_size}</arg>
<arg>${cirros_image_name}</arg>
<arg>--bootable</arg>
<arg>${cirros_volume_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:38.588" level="INFO">${openstack_cmd} = openstack volume create</msg>
<status status="PASS" endtime="20190401 15:26:38.588" starttime="20190401 15:26:38.588"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--size ${size}</arg>
<arg>--image ${image}</arg>
<arg>${bootable}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:38.588" level="INFO">${cmd} = openstack volume create --size 20 --image cirros --bootable vol-cirros-1</msg>
<status status="PASS" endtime="20190401 15:26:38.588" starttime="20190401 15:26:38.588"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:38.589" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:38.589" starttime="20190401 15:26:38.589"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:38.589" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume create --size 20 --image cirros --bootable vol-cirros-1'.</msg>
<msg timestamp="20190401 15:26:39.217" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:39.217" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:39.217" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:39.218" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:39.218" starttime="20190401 15:26:38.589"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:39.218" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:39.218" starttime="20190401 15:26:39.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:39.219" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:39.219" starttime="20190401 15:26:39.219"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:39.219" starttime="20190401 15:26:39.218"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:39.219" starttime="20190401 15:26:38.588"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:39.219" starttime="20190401 15:26:38.587"></status>
</kw>
<doc>Create volumes with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:39.219" critical="yes" starttime="20190401 15:26:38.587">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s3-t5" name="Create Snapshot for Instance">
<kw name="Create Snapshot" library="OpenStack">
<doc>Create Snapshot.</doc>
<arguments>
<arg>${cirros_volume_name}</arg>
<arg>${cirros_snapshot_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack volume snapshot create --volume ${volume} ${name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:39.222" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:39.222" starttime="20190401 15:26:39.222"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:39.222" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot create --volume vol-cirros-1 snap-cirros-1'.</msg>
<msg timestamp="20190401 15:26:39.850" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:39.850" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:39.851" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:39.851" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:39.851" starttime="20190401 15:26:39.222"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:39.851" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:39.851" starttime="20190401 15:26:39.851"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:39.852" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:39.852" starttime="20190401 15:26:39.852"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:39.852" starttime="20190401 15:26:39.851"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:39.852" starttime="20190401 15:26:39.220"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:39.852" starttime="20190401 15:26:39.220"></status>
</kw>
<doc>Create snapshots with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:39.852" critical="yes" starttime="20190401 15:26:39.220">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s3-t6" name="Launch Instances">
<kw name="Create Instance From Snapshot" library="OpenStack">
<doc>Create a VM Instances with the net id of the Netowrk
flavor and snapshot</doc>
<arguments>
<arg>${network_name}</arg>
<arg>${cirros_image_name}</arg>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_snapshot_name}</arg>
<arg>${cirros_snapshot_size}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Get Net Id" library="OpenStack">
<doc>Retrieve the net id for the given network name</doc>
<arguments>
<arg>${net_name}</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:39.854" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190401 15:26:39.854" starttime="20190401 15:26:39.854"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "${network_name}"</arg>
<arg>awk '{print$2}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:39.854" level="INFO">${cmd} = openstack network list|grep "network-1"|awk '{print$2}'</msg>
<status status="PASS" endtime="20190401 15:26:39.854" starttime="20190401 15:26:39.854"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:39.855" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:39.855" starttime="20190401 15:26:39.855"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:39.855" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|grep "network-1"|awk '{print$2}''.</msg>
<msg timestamp="20190401 15:26:40.433" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190401 15:26:40.434" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:40.434" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:40.434" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:26:40.434" starttime="20190401 15:26:39.855"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:40.434" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 0}</msg>
<status status="PASS" endtime="20190401 15:26:40.434" starttime="20190401 15:26:40.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:40.435" starttime="20190401 15:26:40.434"></status>
</kw>
<msg timestamp="20190401 15:26:40.435" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=0 }</msg>
<status status="PASS" endtime="20190401 15:26:40.435" starttime="20190401 15:26:39.854"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:26:40.435" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190401 15:26:40.435" starttime="20190401 15:26:40.435"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${splitted_output}</var>
</assign>
<msg timestamp="20190401 15:26:40.436" level="INFO">${splitted_output} = []</msg>
<status status="PASS" endtime="20190401 15:26:40.436" starttime="20190401 15:26:40.435"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${splitted_output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<msg timestamp="20190401 15:26:40.436" level="FAIL">IndexError: Given index 0 is out of the range 0--1.</msg>
<status status="FAIL" endtime="20190401 15:26:40.436" starttime="20190401 15:26:40.436"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:40.436" starttime="20190401 15:26:39.853"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:40.436" starttime="20190401 15:26:39.853"></status>
</kw>
<doc>Launch Cirros instances from snapshot.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:40.437" critical="yes" starttime="20190401 15:26:39.853">IndexError: Given index 0 is out of the range 0--1.</status>
</test>
<test id="s1-s1-s3-t7" name="Suspend Resume Instances">
<kw name="Suspend Instance" library="OpenStack">
<doc>Suspend the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server suspend ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:40.438" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:40.438" starttime="20190401 15:26:40.438"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:40.439" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server suspend vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:41.097" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:41.097" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:41.097" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:41.097" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:41.097" starttime="20190401 15:26:40.438"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:41.098" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:41.098" starttime="20190401 15:26:41.098"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:41.099" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:41.099" starttime="20190401 15:26:41.099"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:41.099" starttime="20190401 15:26:41.098"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:41.099" starttime="20190401 15:26:40.438"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:41.099" starttime="20190401 15:26:40.437"></status>
</kw>
<doc>Suspend and Resume Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:41.099" critical="yes" starttime="20190401 15:26:40.437">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s3-t8" name="Set Error Active Flags Instances">
<kw name="Set Error State Instance" library="OpenStack">
<doc>Set 'Error' value to the corresponding VM</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>error</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set --state ${value} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:41.101" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:41.101" starttime="20190401 15:26:41.101"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:41.101" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --state error vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:41.730" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:41.730" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:41.730" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:41.730" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:41.730" starttime="20190401 15:26:41.101"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:41.731" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:41.731" starttime="20190401 15:26:41.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:41.731" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:41.731" starttime="20190401 15:26:41.731"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:41.731" starttime="20190401 15:26:41.731"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:41.731" starttime="20190401 15:26:41.100"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:41.732" starttime="20190401 15:26:41.100"></status>
</kw>
<doc>Set 'Error' and 'Active' flags to Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:41.732" critical="yes" starttime="20190401 15:26:41.100">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s3-t9" name="Pause Unpause Instances">
<kw name="Pause Instance" library="OpenStack">
<doc>Pause an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server pause ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:41.733" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:41.733" starttime="20190401 15:26:41.733"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:41.734" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server pause vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:42.362" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:42.362" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:42.362" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:42.362" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:42.363" starttime="20190401 15:26:41.733"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:42.363" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:42.363" starttime="20190401 15:26:42.363"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:42.364" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:42.364" starttime="20190401 15:26:42.364"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:42.364" starttime="20190401 15:26:42.363"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:42.364" starttime="20190401 15:26:41.733"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:42.364" starttime="20190401 15:26:41.732"></status>
</kw>
<doc>Pause and Unpause Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:42.364" critical="yes" starttime="20190401 15:26:41.732">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s3-t10" name="Stop Start Instances">
<kw name="Stop Instance" library="OpenStack">
<doc>Stop an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server stop ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:42.366" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:42.366" starttime="20190401 15:26:42.366"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:42.366" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server stop vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:43.045" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:43.045" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:43.045" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:43.045" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:43.045" starttime="20190401 15:26:42.366"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:43.046" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:43.046" starttime="20190401 15:26:43.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:43.047" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:43.047" starttime="20190401 15:26:43.046"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:43.047" starttime="20190401 15:26:43.046"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:43.047" starttime="20190401 15:26:42.365"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:43.047" starttime="20190401 15:26:42.365"></status>
</kw>
<doc>Stop and Start Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:43.047" critical="yes" starttime="20190401 15:26:42.365">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s3-t11" name="Lock Unlock Instances">
<kw name="Lock Instance" library="OpenStack">
<doc>Lock an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server lock ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:43.049" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:43.049" starttime="20190401 15:26:43.049"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:43.049" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server lock vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:43.678" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:43.678" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:43.679" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:43.679" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:43.679" starttime="20190401 15:26:43.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:43.679" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:43.679" starttime="20190401 15:26:43.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:43.680" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:43.680" starttime="20190401 15:26:43.680"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:43.680" starttime="20190401 15:26:43.679"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:43.680" starttime="20190401 15:26:43.048"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:43.680" starttime="20190401 15:26:43.048"></status>
</kw>
<doc>Lock and Unlock Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:43.680" critical="yes" starttime="20190401 15:26:43.048">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s3-t12" name="Reboot Instances">
<kw name="Reboot Instance" library="OpenStack">
<doc>Reboot an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server reboot ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:43.682" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:43.682" starttime="20190401 15:26:43.682"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:43.682" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server reboot vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:44.312" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:44.313" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:44.313" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:44.313" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:44.313" starttime="20190401 15:26:43.682"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:44.313" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:44.313" starttime="20190401 15:26:44.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:44.314" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:44.314" starttime="20190401 15:26:44.314"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:44.314" starttime="20190401 15:26:44.314"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:44.314" starttime="20190401 15:26:43.681"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:44.314" starttime="20190401 15:26:43.681"></status>
</kw>
<doc>Reboot Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:44.315" critical="yes" starttime="20190401 15:26:43.681">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s3-t13" name="Rebuild Instances">
<kw name="Rebuild Instance From Volume" library="OpenStack">
<doc>Rebuild an instance from volume</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server rebuild --image ${image} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:44.316" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:44.316" starttime="20190401 15:26:44.316"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:44.317" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server rebuild --image cirros vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:44.945" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:44.945" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:44.945" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:44.945" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:44.945" starttime="20190401 15:26:44.316"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:44.946" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:44.946" starttime="20190401 15:26:44.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:44.947" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:44.947" starttime="20190401 15:26:44.946"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:44.947" starttime="20190401 15:26:44.946"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:44.947" starttime="20190401 15:26:44.316"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:44.947" starttime="20190401 15:26:44.315"></status>
</kw>
<doc>Rebuild Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:44.947" critical="yes" starttime="20190401 15:26:44.315">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s3-t14" name="Resize Instances">
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${cirros_flavor_ram}</arg>
<arg>${cirros_flavor_vcpus}</arg>
<arg>${cirros_flavor_disk}</arg>
<arg>${cirros_flavor_name_2}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:44.948" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190401 15:26:44.948" starttime="20190401 15:26:44.948"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:44.949" level="INFO">${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small</msg>
<status status="PASS" endtime="20190401 15:26:44.949" starttime="20190401 15:26:44.948"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:44.949" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:44.949" starttime="20190401 15:26:44.949"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:44.950" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small'.</msg>
<msg timestamp="20190401 15:26:45.528" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:45.528" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:45.528" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:45.528" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:45.528" starttime="20190401 15:26:44.950"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:45.529" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:45.529" starttime="20190401 15:26:45.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:45.529" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:45.529" starttime="20190401 15:26:45.529"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:45.529" starttime="20190401 15:26:45.529"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:45.529" starttime="20190401 15:26:44.949"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:45.530" starttime="20190401 15:26:44.948"></status>
</kw>
<doc>Resize Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:45.530" critical="yes" starttime="20190401 15:26:44.947">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s3-t15" name="Set Unset Properties Instances">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${instance_property_1}='true'</arg>
<arg>${instance_property_2}='500'</arg>
<arg>${instance_property_3}='180'</arg>
</arguments>
<assign>
<var>${properties}</var>
</assign>
<msg timestamp="20190401 15:26:45.531" level="INFO">${properties} = --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180'</msg>
<status status="PASS" endtime="20190401 15:26:45.531" starttime="20190401 15:26:45.530"></status>
</kw>
<kw name="Set Instance Property" library="OpenStack">
<doc>Set properties of an instance.</doc>
<arguments>
<arg>${cirros_instance_name}</arg>
<arg>${properties}</arg>
</arguments>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>openstack server set ${key} ${vm_name}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:45.532" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:45.532" starttime="20190401 15:26:45.532"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:45.532" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-cirros-1'.</msg>
<msg timestamp="20190401 15:26:46.191" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:46.191" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:46.191" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:46.191" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:46.191" starttime="20190401 15:26:45.532"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:46.192" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:46.192" starttime="20190401 15:26:46.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:46.192" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:46.192" starttime="20190401 15:26:46.192"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:46.192" starttime="20190401 15:26:46.192"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:46.193" starttime="20190401 15:26:45.531"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:46.193" starttime="20190401 15:26:45.531"></status>
</kw>
<doc>Set Unset properties of Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:46.193" critical="yes" starttime="20190401 15:26:45.530">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s3-t16" name="Evacuate Instances From Hosts">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CONFIGURATION_TYPE}' == 'Duplex'</arg>
<arg>Run Keywords</arg>
<arg>Evacuate Instances</arg>
<arg>controller-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>controller-1</arg>
<arg>ELSE IF</arg>
<arg>'${CONFIGURATION_TYPE}' == 'MN-Local' or '${CONFIGURATION_TYPE}' == 'MN-External'</arg>
<arg>Run Keywords</arg>
<arg>Evacuate Instances</arg>
<arg>compute-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>compute-1</arg>
</arguments>
<kw name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Evacuate Instances</arg>
<arg>controller-0</arg>
<arg>AND</arg>
<arg>Evacuate Instances</arg>
<arg>controller-1</arg>
</arguments>
<kw name="Evacuate Instances" library="OpenStack">
<doc>Evacuate all VMs from computes or from controllers.</doc>
<arguments>
<arg>controller-0</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack compute service set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:46.195" level="INFO">${openstack_cmd} = openstack compute service set</msg>
<status status="PASS" endtime="20190401 15:26:46.195" starttime="20190401 15:26:46.195"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--disable</arg>
<arg>--disable-reason test-evacuate</arg>
<arg>${host}</arg>
<arg>nova-compute</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:46.195" level="INFO">${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute</msg>
<status status="PASS" endtime="20190401 15:26:46.195" starttime="20190401 15:26:46.195"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
<arg>30 sec</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:46.196" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:46.196" starttime="20190401 15:26:46.196"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:46.196" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute'.</msg>
<msg timestamp="20190401 15:26:46.825" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:46.825" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:46.825" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:46.825" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:46.825" starttime="20190401 15:26:46.196"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:46.826" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:46.826" starttime="20190401 15:26:46.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:46.826" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:46.826" starttime="20190401 15:26:46.826"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:46.827" starttime="20190401 15:26:46.826"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:46.827" starttime="20190401 15:26:46.195"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:46.827" starttime="20190401 15:26:46.194"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:46.827" starttime="20190401 15:26:46.194"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:46.827" starttime="20190401 15:26:46.193"></status>
</kw>
<doc>Evacuate all instances from computes or
controllers.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:46.827" critical="yes" starttime="20190401 15:26:46.193">Cloud openstack_helm was not found.</status>
</test>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>OpenStack.Openstack Cleanup All</arg>
<arg>Utils.Stx Suite TearDown</arg>
</arguments>
<kw name="Openstack Cleanup All" library="OpenStack">
<doc>Delete all instances, images, flavors, networks and
keypairs generated during tests.</doc>
<kw name="Delete All Instances" library="OpenStack">
<doc>Get a list of all existing instances to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:46.829" level="INFO">${openstack_cmd} = openstack server list</msg>
<status status="PASS" endtime="20190401 15:26:46.829" starttime="20190401 15:26:46.829"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:46.829" level="INFO">${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:46.829" starttime="20190401 15:26:46.829"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:46.830" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:46.830" starttime="20190401 15:26:46.830"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:46.830" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:47.458" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:47.459" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:47.459" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:47.459" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:47.459" starttime="20190401 15:26:46.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:47.459" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:47.459" starttime="20190401 15:26:47.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:47.460" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:47.460" starttime="20190401 15:26:47.460"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:47.460" starttime="20190401 15:26:47.460"></status>
</kw>
<msg timestamp="20190401 15:26:47.460" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:47.461" starttime="20190401 15:26:46.829"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{vm_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:47.461" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:47.461" starttime="20190401 15:26:47.461"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:47.461" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:47.461" starttime="20190401 15:26:47.461"></status>
</kw>
<msg timestamp="20190401 15:26:47.462" level="INFO">@{vm_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:47.462" starttime="20190401 15:26:47.461"></status>
</kw>
<kw type="for" name="${vm} IN [ @{vm_list} ]">
<status status="PASS" endtime="20190401 15:26:47.462" starttime="20190401 15:26:47.462"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:47.462" starttime="20190401 15:26:46.828"></status>
</kw>
<kw name="Delete All Images" library="OpenStack">
<doc>Get a list of all existing images to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:47.462" level="INFO">${openstack_cmd} = openstack image list</msg>
<status status="PASS" endtime="20190401 15:26:47.462" starttime="20190401 15:26:47.462"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "Cirros"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:47.463" level="INFO">${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"</msg>
<status status="PASS" endtime="20190401 15:26:47.463" starttime="20190401 15:26:47.463"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:47.464" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:47.464" starttime="20190401 15:26:47.463"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:47.464" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.</msg>
<msg timestamp="20190401 15:26:48.044" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:48.044" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:48.044" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:48.044" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:48.044" starttime="20190401 15:26:47.464"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:48.045" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:48.045" starttime="20190401 15:26:48.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:48.046" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:48.046" starttime="20190401 15:26:48.046"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:48.046" starttime="20190401 15:26:48.045"></status>
</kw>
<msg timestamp="20190401 15:26:48.046" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:48.046" starttime="20190401 15:26:47.463"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{image_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:48.047" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:48.047" starttime="20190401 15:26:48.047"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:48.047" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:48.047" starttime="20190401 15:26:48.047"></status>
</kw>
<msg timestamp="20190401 15:26:48.047" level="INFO">@{image_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:48.047" starttime="20190401 15:26:48.046"></status>
</kw>
<kw type="for" name="${image} IN [ @{image_list} ]">
<status status="PASS" endtime="20190401 15:26:48.048" starttime="20190401 15:26:48.047"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:48.048" starttime="20190401 15:26:47.462"></status>
</kw>
<kw name="Delete All Flavors" library="OpenStack">
<doc>Get a list of all existing flavors to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:48.048" level="INFO">${openstack_cmd} = openstack flavor list</msg>
<status status="PASS" endtime="20190401 15:26:48.048" starttime="20190401 15:26:48.048"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "m1"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:48.048" level="INFO">${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"</msg>
<status status="PASS" endtime="20190401 15:26:48.048" starttime="20190401 15:26:48.048"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:48.049" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:48.049" starttime="20190401 15:26:48.049"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:48.050" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.</msg>
<msg timestamp="20190401 15:26:48.708" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:48.708" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:48.708" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:48.708" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:48.708" starttime="20190401 15:26:48.049"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:48.709" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:48.709" starttime="20190401 15:26:48.709"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:48.710" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:48.710" starttime="20190401 15:26:48.709"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:48.710" starttime="20190401 15:26:48.709"></status>
</kw>
<msg timestamp="20190401 15:26:48.710" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:48.710" starttime="20190401 15:26:48.049"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{flavor_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:48.711" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:48.711" starttime="20190401 15:26:48.711"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:48.711" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:48.711" starttime="20190401 15:26:48.711"></status>
</kw>
<msg timestamp="20190401 15:26:48.711" level="INFO">@{flavor_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:48.711" starttime="20190401 15:26:48.710"></status>
</kw>
<kw type="for" name="${flavor} IN [ @{flavor_list} ]">
<status status="PASS" endtime="20190401 15:26:48.711" starttime="20190401 15:26:48.711"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:48.712" starttime="20190401 15:26:48.048"></status>
</kw>
<kw name="Delete All Networks" library="OpenStack">
<doc>Get a list of all existing networks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:48.712" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190401 15:26:48.712" starttime="20190401 15:26:48.712"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "private"</arg>
<arg>grep -v "public"</arg>
<arg>grep -v "external"</arg>
<arg>grep -v "internal"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:48.712" level="INFO">${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"</msg>
<status status="PASS" endtime="20190401 15:26:48.712" starttime="20190401 15:26:48.712"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:48.713" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:48.713" starttime="20190401 15:26:48.713"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:48.714" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.</msg>
<msg timestamp="20190401 15:26:49.292" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:49.292" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:49.292" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:49.292" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:49.292" starttime="20190401 15:26:48.713"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:49.293" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:49.293" starttime="20190401 15:26:49.292"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:49.294" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:49.294" starttime="20190401 15:26:49.293"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:49.294" starttime="20190401 15:26:49.293"></status>
</kw>
<msg timestamp="20190401 15:26:49.294" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:49.294" starttime="20190401 15:26:48.713"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{network_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:49.295" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:49.295" starttime="20190401 15:26:49.295"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:49.295" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:49.295" starttime="20190401 15:26:49.295"></status>
</kw>
<msg timestamp="20190401 15:26:49.295" level="INFO">@{network_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:49.295" starttime="20190401 15:26:49.294"></status>
</kw>
<kw type="for" name="${network} IN [ @{network_list} ]">
<status status="PASS" endtime="20190401 15:26:49.295" starttime="20190401 15:26:49.295"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:49.296" starttime="20190401 15:26:48.712"></status>
</kw>
<kw name="Delete All KeyPairs" library="OpenStack">
<doc>Get a list of all existing keypais to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack keypair list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:49.296" level="INFO">${openstack_cmd} = openstack keypair list</msg>
<status status="PASS" endtime="20190401 15:26:49.296" starttime="20190401 15:26:49.296"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:49.296" level="INFO">${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:49.296" starttime="20190401 15:26:49.296"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:49.297" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:49.297" starttime="20190401 15:26:49.297"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:49.297" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack keypair list|awk '{print$2}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:49.957" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:49.957" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:49.957" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:49.957" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:49.957" starttime="20190401 15:26:49.297"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:49.957" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:49.957" starttime="20190401 15:26:49.957"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:49.958" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:49.958" starttime="20190401 15:26:49.958"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:49.958" starttime="20190401 15:26:49.958"></status>
</kw>
<msg timestamp="20190401 15:26:49.959" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:49.959" starttime="20190401 15:26:49.296"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{key_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:49.959" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:49.959" starttime="20190401 15:26:49.959"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:49.960" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:49.960" starttime="20190401 15:26:49.959"></status>
</kw>
<msg timestamp="20190401 15:26:49.960" level="INFO">@{key_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:49.960" starttime="20190401 15:26:49.959"></status>
</kw>
<kw type="for" name="${key} IN [ @{key_list} ]">
<status status="PASS" endtime="20190401 15:26:49.960" starttime="20190401 15:26:49.960"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:49.960" starttime="20190401 15:26:49.296"></status>
</kw>
<kw name="Delete All Snapshots" library="OpenStack">
<doc>Get a list of all existing snapshots to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:49.960" level="INFO">${openstack_cmd} = openstack volume snapshot list</msg>
<status status="PASS" endtime="20190401 15:26:49.961" starttime="20190401 15:26:49.960"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:49.961" level="INFO">${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:49.961" starttime="20190401 15:26:49.961"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:49.961" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:49.962" starttime="20190401 15:26:49.961"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:49.962" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:50.590" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:50.590" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:50.590" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:50.590" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:50.590" starttime="20190401 15:26:49.962"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:50.591" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:50.591" starttime="20190401 15:26:50.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:50.592" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:50.592" starttime="20190401 15:26:50.592"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:50.592" starttime="20190401 15:26:50.591"></status>
</kw>
<msg timestamp="20190401 15:26:50.592" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:50.592" starttime="20190401 15:26:49.961"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{snapshot_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:50.593" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:50.593" starttime="20190401 15:26:50.593"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:50.593" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:50.593" starttime="20190401 15:26:50.593"></status>
</kw>
<msg timestamp="20190401 15:26:50.593" level="INFO">@{snapshot_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:50.593" starttime="20190401 15:26:50.592"></status>
</kw>
<kw type="for" name="${snapshot} IN [ @{snapshot_list} ]">
<status status="PASS" endtime="20190401 15:26:50.594" starttime="20190401 15:26:50.593"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:50.594" starttime="20190401 15:26:49.960"></status>
</kw>
<kw name="Delete All Volumes" library="OpenStack">
<doc>Get a list of all existing volumes to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:50.594" level="INFO">${openstack_cmd} = openstack volume list</msg>
<status status="PASS" endtime="20190401 15:26:50.594" starttime="20190401 15:26:50.594"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "ID"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:50.594" level="INFO">${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"</msg>
<status status="PASS" endtime="20190401 15:26:50.594" starttime="20190401 15:26:50.594"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:50.595" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:50.595" starttime="20190401 15:26:50.595"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:50.596" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume list|awk '{print$2}'|grep -v "ID"'.</msg>
<msg timestamp="20190401 15:26:51.224" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:51.224" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:51.224" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:51.224" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:51.224" starttime="20190401 15:26:50.595"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:51.225" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:51.225" starttime="20190401 15:26:51.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:51.225" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:51.225" starttime="20190401 15:26:51.225"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:51.225" starttime="20190401 15:26:51.225"></status>
</kw>
<msg timestamp="20190401 15:26:51.226" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:51.226" starttime="20190401 15:26:50.595"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{volume_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:51.226" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:51.226" starttime="20190401 15:26:51.226"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:51.227" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:51.227" starttime="20190401 15:26:51.226"></status>
</kw>
<msg timestamp="20190401 15:26:51.227" level="INFO">@{volume_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:51.227" starttime="20190401 15:26:51.226"></status>
</kw>
<kw type="for" name="${volume} IN [ @{volume_list} ]">
<status status="PASS" endtime="20190401 15:26:51.227" starttime="20190401 15:26:51.227"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:51.227" starttime="20190401 15:26:50.594"></status>
</kw>
<kw name="Delete All Stacks" library="OpenStack">
<doc>Get a list of all existing stacks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:51.228" level="INFO">${openstack_cmd} = openstack stack list</msg>
<status status="PASS" endtime="20190401 15:26:51.228" starttime="20190401 15:26:51.228"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:51.228" level="INFO">${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:51.228" starttime="20190401 15:26:51.228"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:51.229" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:51.229" starttime="20190401 15:26:51.229"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:51.229" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:51.858" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:51.858" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:51.858" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:51.858" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:51.858" starttime="20190401 15:26:51.229"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:51.859" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:51.859" starttime="20190401 15:26:51.858"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:51.859" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:51.859" starttime="20190401 15:26:51.859"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:51.859" starttime="20190401 15:26:51.859"></status>
</kw>
<msg timestamp="20190401 15:26:51.860" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:51.860" starttime="20190401 15:26:51.228"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{stack_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:51.860" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:51.860" starttime="20190401 15:26:51.860"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:51.861" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:51.861" starttime="20190401 15:26:51.861"></status>
</kw>
<msg timestamp="20190401 15:26:51.861" level="INFO">@{stack_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:51.861" starttime="20190401 15:26:51.860"></status>
</kw>
<kw type="for" name="${stack} IN [ @{stack_list} ]">
<status status="PASS" endtime="20190401 15:26:51.861" starttime="20190401 15:26:51.861"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:51.861" starttime="20190401 15:26:51.227"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:51.861" starttime="20190401 15:26:46.828"></status>
</kw>
<kw name="Stx Suite TearDown" library="Utils">
<doc>Wrapper to clean up activities on the suite.</doc>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20190401 15:26:51.869" starttime="20190401 15:26:51.862"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:51.869" starttime="20190401 15:26:51.862"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:51.870" starttime="20190401 15:26:46.828">Several failures occurred:

1) Cloud openstack_helm was not found.

2) Cloud openstack_helm was not found.

3) Cloud openstack_helm was not found.

4) Cloud openstack_helm was not found.

5) Cloud openstack_helm was not found.

6) Cloud openstack_helm was not found.

7) Cloud openstack_helm was not found.

8) Cloud openstack_helm was not found.</status>
</kw>
<doc>Tests to create instances from a volume, perform different
power status and set properties, using Cirros OS.
Author(s):
- Juan Carlos Alonso &lt;juan.carlos.alonso@intel.com&gt;</doc>
<status status="FAIL" endtime="20190401 15:26:51.870" starttime="20190401 15:26:35.683">Suite teardown failed:
Several failures occurred:

1) Cloud openstack_helm was not found.

2) Cloud openstack_helm was not found.

3) Cloud openstack_helm was not found.

4) Cloud openstack_helm was not found.

5) Cloud openstack_helm was not found.

6) Cloud openstack_helm was not found.

7) Cloud openstack_helm was not found.

8) Cloud openstack_helm was not found.</status>
</suite>
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-OpenStack/04-Instance-From-Heat-Template.robot" id="s1-s1-s4" name="04-Instance-From-Heat-Template">
<kw type="setup" name="Stx Suite Setup" library="Utils">
<doc>Wrapper to setup the environment needed for exercise
StarlingX features</doc>
<kw name="Open Master Controller Connection" library="Utils">
<doc>Establish a SSH connection with the master controller
to start executing the the suite.</doc>
<kw name="Connect to Controller Node" library="Utils">
<doc>Stablish a SSH connection to the controller and return
the connection id</doc>
<arguments>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_NAME}</arg>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_PSWD}</arg>
<arg>${CONFIG.general.IP_UNIT_0_ADDRESS}</arg>
</arguments>
<assign>
<var>${master_controller_connection}</var>
</assign>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${ip_address} prompt=${prompt}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${controller_connection}</var>
</assign>
<msg timestamp="20190401 15:26:51.886" level="INFO">${controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:26:51.886" starttime="20190401 15:26:51.885"></status>
</kw>
<kw name="Flexible_SSH_Login" library="Utils">
<doc>On active SSH session: if given non-empty password,
do Login, else do Login With Public Key.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${password}</arg>
</arguments>
<assign>
<var>${pwd_length}</var>
</assign>
<msg timestamp="20190401 15:26:51.886" level="INFO">Length is 10</msg>
<msg timestamp="20190401 15:26:51.886" level="INFO">${pwd_length} = 10</msg>
<status status="PASS" endtime="20190401 15:26:51.886" starttime="20190401 15:26:51.886"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${pwd_length} &gt; 0</arg>
<arg>SSHLibrary.Login</arg>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<msg timestamp="20190401 15:26:51.887" level="INFO">Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.</msg>
<msg timestamp="20190401 15:26:52.972" level="INFO">Read output: Last login: Mon Apr  1 21:15:20 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$</msg>
<status status="PASS" endtime="20190401 15:26:52.972" starttime="20190401 15:26:51.887"></status>
</kw>
<msg timestamp="20190401 15:26:52.972" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190401 15:26:52.972" starttime="20190401 15:26:51.886"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:52.972" starttime="20190401 15:26:51.886"></status>
</kw>
<msg timestamp="20190401 15:26:52.973" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:26:52.973" starttime="20190401 15:26:51.885"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190401 15:26:52.973" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:26:52.973" starttime="20190401 15:26:52.973"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190401 15:26:52.973" level="INFO">1</msg>
<status status="PASS" endtime="20190401 15:26:52.973" starttime="20190401 15:26:52.973"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:52.973" starttime="20190401 15:26:51.884"></status>
</kw>
<kw name="Set Env Vars From Openrc" library="Utils">
<doc>Sources the openrc form /etc/nova/ to have the admin
variables exported on the controller.</doc>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>source /etc/platform/openrc</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:52.974" starttime="20190401 15:26:52.974"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190401 15:26:52.975" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190401 15:26:52.975" starttime="20190401 15:26:52.975"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:52.975" starttime="20190401 15:26:52.975"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:52.976" starttime="20190401 15:26:52.976"></status>
</kw>
<msg timestamp="20190401 15:26:52.976" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190401 15:26:52.976" starttime="20190401 15:26:52.975"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20190401 15:26:52.976" starttime="20190401 15:26:52.976"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190401 15:26:52.981" level="INFO">source /etc/platform/openrc</msg>
<status status="PASS" endtime="20190401 15:26:52.981" starttime="20190401 15:26:52.976"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:26:53.358" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190401 15:26:53.358" level="INFO">${output} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:26:53.358" starttime="20190401 15:26:52.981"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190401 15:26:53.360" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:26:53.360" starttime="20190401 15:26:53.360"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190401 15:26:53.360" level="INFO">${clean_out} = </msg>
<status status="PASS" endtime="20190401 15:26:53.360" starttime="20190401 15:26:53.360"></status>
</kw>
<msg timestamp="20190401 15:26:53.360" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190401 15:26:53.360" starttime="20190401 15:26:53.358"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190401 15:26:53.363" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190401 15:26:53.363" starttime="20190401 15:26:53.361"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:53.363" level="INFO">0</msg>
<msg timestamp="20190401 15:26:53.363" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:26:53.363" starttime="20190401 15:26:53.363"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190401 15:26:53.363" level="INFO">0</msg>
<status status="PASS" endtime="20190401 15:26:53.364" starttime="20190401 15:26:53.363"></status>
</kw>
<msg timestamp="20190401 15:26:53.364" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:26:53.364" starttime="20190401 15:26:53.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:53.364" starttime="20190401 15:26:53.364"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:53.365" starttime="20190401 15:26:53.364"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:53.365" starttime="20190401 15:26:53.365"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190401 15:26:53.365" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: </msg>
<status status="PASS" endtime="20190401 15:26:53.365" starttime="20190401 15:26:53.365"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:53.365" starttime="20190401 15:26:52.974"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:53.365" starttime="20190401 15:26:52.974"></status>
</kw>
<status status="PASS" endtime="20190401 15:26:53.365" starttime="20190401 15:26:51.884"></status>
</kw>
<test id="s1-s1-s4-t1" name="Create Flavors for Instance">
<kw name="Create Flavor" library="OpenStack">
<doc>Create a flavor with specified values.</doc>
<arguments>
<arg>${cirros_flavor_ram}</arg>
<arg>${cirros_flavor_vcpus}</arg>
<arg>${cirros_flavor_disk}</arg>
<arg>${cirros_flavor_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:53.367" level="INFO">${openstack_cmd} = openstack flavor create</msg>
<status status="PASS" endtime="20190401 15:26:53.367" starttime="20190401 15:26:53.366"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--ram ${ram}</arg>
<arg>--disk ${disk}</arg>
<arg>--vcpus ${vcpus}</arg>
<arg>--public</arg>
<arg>--id auto</arg>
<arg>${extra_args}</arg>
<arg>${name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:53.367" level="INFO">${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small</msg>
<status status="PASS" endtime="20190401 15:26:53.367" starttime="20190401 15:26:53.367"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:53.368" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:53.368" starttime="20190401 15:26:53.368"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:53.368" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.</msg>
<msg timestamp="20190401 15:26:53.996" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:53.997" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:53.997" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:53.997" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:53.997" starttime="20190401 15:26:53.368"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:53.997" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:53.997" starttime="20190401 15:26:53.997"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:53.998" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:53.998" starttime="20190401 15:26:53.998"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:53.998" starttime="20190401 15:26:53.997"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:53.998" starttime="20190401 15:26:53.367"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:53.998" starttime="20190401 15:26:53.366"></status>
</kw>
<doc>Create flavors with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:53.998" critical="yes" starttime="20190401 15:26:53.366">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s4-t2" name="Create Images for Instances">
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/${cirros_image}</arg>
<arg>${host_image_path}/${cirros_image}</arg>
</arguments>
<msg timestamp="20190401 15:26:54.007" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190401 15:26:54.014" level="INFO">[chan 3] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190401 15:26:54.014" level="FAIL">There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.</msg>
<status status="FAIL" endtime="20190401 15:26:54.014" starttime="20190401 15:26:53.999"></status>
</kw>
<doc>Create images with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:54.014" critical="yes" starttime="20190401 15:26:53.999">There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.</status>
</test>
<test id="s1-s1-s4-t3" name="Create Networks for Instance">
<kw name="Create Network" library="OpenStack">
<doc>Create Network with openstack request.</doc>
<arguments>
<arg>${network_name}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network create</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:54.016" level="INFO">${openstack_cmd} = openstack network create</msg>
<status status="PASS" endtime="20190401 15:26:54.016" starttime="20190401 15:26:54.015"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>${network_name}</arg>
<arg>${additional_args}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:54.016" level="INFO">${cmd} = openstack network create network-1 </msg>
<status status="PASS" endtime="20190401 15:26:54.016" starttime="20190401 15:26:54.016"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:54.017" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:54.017" starttime="20190401 15:26:54.017"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:54.017" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network create network-1 '.</msg>
<msg timestamp="20190401 15:26:54.645" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:54.645" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:54.645" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:54.645" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:54.645" starttime="20190401 15:26:54.017"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:54.646" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:54.646" starttime="20190401 15:26:54.646"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:54.647" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:54.647" starttime="20190401 15:26:54.646"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:54.647" starttime="20190401 15:26:54.646"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:54.647" starttime="20190401 15:26:54.016"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:54.647" starttime="20190401 15:26:54.015"></status>
</kw>
<doc>Create networks to be used to launch Cirros
instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:54.647" critical="yes" starttime="20190401 15:26:54.015">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s4-t4" name="Create Instance Trough Stack">
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/${stack_template}</arg>
<arg>${host_image_path}/${stack_template}</arg>
</arguments>
<msg timestamp="20190401 15:26:54.652" level="INFO">'/home/mgperezi/duplex/stx-test-suite/Utils/stack_template.yml' -&gt; '/home/wrsroot//Utils/stack_template.yml'</msg>
<status status="PASS" endtime="20190401 15:26:54.652" starttime="20190401 15:26:54.648"></status>
</kw>
<kw name="Get Net Id" library="OpenStack">
<doc>Retrieve the net id for the given network name</doc>
<arguments>
<arg>${network_name}</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:54.653" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190401 15:26:54.653" starttime="20190401 15:26:54.653"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "${network_name}"</arg>
<arg>awk '{print$2}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:54.653" level="INFO">${cmd} = openstack network list|grep "network-1"|awk '{print$2}'</msg>
<status status="PASS" endtime="20190401 15:26:54.653" starttime="20190401 15:26:54.653"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:54.654" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:54.654" starttime="20190401 15:26:54.654"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:54.654" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|grep "network-1"|awk '{print$2}''.</msg>
<msg timestamp="20190401 15:26:55.282" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190401 15:26:55.283" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:55.283" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:55.283" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:26:55.283" starttime="20190401 15:26:54.654"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:55.283" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 0}</msg>
<status status="PASS" endtime="20190401 15:26:55.284" starttime="20190401 15:26:55.283"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:26:55.284" starttime="20190401 15:26:55.284"></status>
</kw>
<msg timestamp="20190401 15:26:55.284" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=0 }</msg>
<status status="PASS" endtime="20190401 15:26:55.284" starttime="20190401 15:26:54.653"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:26:55.284" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190401 15:26:55.285" starttime="20190401 15:26:55.284"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${output}</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${splitted_output}</var>
</assign>
<msg timestamp="20190401 15:26:55.285" level="INFO">${splitted_output} = []</msg>
<status status="PASS" endtime="20190401 15:26:55.285" starttime="20190401 15:26:55.285"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${splitted_output}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${net_id}</var>
</assign>
<msg timestamp="20190401 15:26:55.285" level="FAIL">IndexError: Given index 0 is out of the range 0--1.</msg>
<status status="FAIL" endtime="20190401 15:26:55.285" starttime="20190401 15:26:55.285"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:55.285" starttime="20190401 15:26:54.652"></status>
</kw>
<doc>Create a Cirros instance using a heat template</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:26:55.286" critical="yes" starttime="20190401 15:26:54.647">IndexError: Given index 0 is out of the range 0--1.</status>
</test>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>OpenStack.Openstack Cleanup All</arg>
<arg>Utils.Stx Suite TearDown</arg>
</arguments>
<kw name="Openstack Cleanup All" library="OpenStack">
<doc>Delete all instances, images, flavors, networks and
keypairs generated during tests.</doc>
<kw name="Delete All Instances" library="OpenStack">
<doc>Get a list of all existing instances to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:55.287" level="INFO">${openstack_cmd} = openstack server list</msg>
<status status="PASS" endtime="20190401 15:26:55.287" starttime="20190401 15:26:55.287"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:55.287" level="INFO">${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:55.288" starttime="20190401 15:26:55.287"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:55.288" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:55.288" starttime="20190401 15:26:55.288"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:55.289" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:55.867" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:55.867" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:55.867" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:55.867" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:55.867" starttime="20190401 15:26:55.288"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:55.868" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:55.868" starttime="20190401 15:26:55.867"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:55.868" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:55.868" starttime="20190401 15:26:55.868"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:55.869" starttime="20190401 15:26:55.868"></status>
</kw>
<msg timestamp="20190401 15:26:55.869" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:55.869" starttime="20190401 15:26:55.288"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{vm_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:55.869" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:55.870" starttime="20190401 15:26:55.869"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:55.870" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:55.870" starttime="20190401 15:26:55.870"></status>
</kw>
<msg timestamp="20190401 15:26:55.870" level="INFO">@{vm_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:55.870" starttime="20190401 15:26:55.869"></status>
</kw>
<kw type="for" name="${vm} IN [ @{vm_list} ]">
<status status="PASS" endtime="20190401 15:26:55.870" starttime="20190401 15:26:55.870"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:55.870" starttime="20190401 15:26:55.287"></status>
</kw>
<kw name="Delete All Images" library="OpenStack">
<doc>Get a list of all existing images to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:55.871" level="INFO">${openstack_cmd} = openstack image list</msg>
<status status="PASS" endtime="20190401 15:26:55.871" starttime="20190401 15:26:55.871"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "Cirros"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:55.871" level="INFO">${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"</msg>
<status status="PASS" endtime="20190401 15:26:55.871" starttime="20190401 15:26:55.871"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:55.872" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:55.872" starttime="20190401 15:26:55.872"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:55.872" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.</msg>
<msg timestamp="20190401 15:26:56.482" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:56.482" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:56.482" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:56.482" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:56.483" starttime="20190401 15:26:55.872"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:56.483" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:56.483" starttime="20190401 15:26:56.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:56.484" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:56.484" starttime="20190401 15:26:56.484"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:56.484" starttime="20190401 15:26:56.483"></status>
</kw>
<msg timestamp="20190401 15:26:56.484" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:56.484" starttime="20190401 15:26:55.871"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{image_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:56.485" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:56.485" starttime="20190401 15:26:56.485"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:56.485" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:56.485" starttime="20190401 15:26:56.485"></status>
</kw>
<msg timestamp="20190401 15:26:56.485" level="INFO">@{image_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:56.485" starttime="20190401 15:26:56.484"></status>
</kw>
<kw type="for" name="${image} IN [ @{image_list} ]">
<status status="PASS" endtime="20190401 15:26:56.486" starttime="20190401 15:26:56.486"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:56.486" starttime="20190401 15:26:55.870"></status>
</kw>
<kw name="Delete All Flavors" library="OpenStack">
<doc>Get a list of all existing flavors to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:56.486" level="INFO">${openstack_cmd} = openstack flavor list</msg>
<status status="PASS" endtime="20190401 15:26:56.486" starttime="20190401 15:26:56.486"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "m1"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:56.487" level="INFO">${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"</msg>
<status status="PASS" endtime="20190401 15:26:56.487" starttime="20190401 15:26:56.487"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:56.487" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:56.487" starttime="20190401 15:26:56.487"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:56.488" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.</msg>
<msg timestamp="20190401 15:26:57.096" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:57.096" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:57.096" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:57.096" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:57.097" starttime="20190401 15:26:56.488"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:57.097" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:57.097" starttime="20190401 15:26:57.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:57.098" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:57.098" starttime="20190401 15:26:57.098"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:57.098" starttime="20190401 15:26:57.097"></status>
</kw>
<msg timestamp="20190401 15:26:57.098" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:57.098" starttime="20190401 15:26:56.487"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{flavor_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:57.099" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:57.099" starttime="20190401 15:26:57.099"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:57.099" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:57.099" starttime="20190401 15:26:57.099"></status>
</kw>
<msg timestamp="20190401 15:26:57.099" level="INFO">@{flavor_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:57.099" starttime="20190401 15:26:57.098"></status>
</kw>
<kw type="for" name="${flavor} IN [ @{flavor_list} ]">
<status status="PASS" endtime="20190401 15:26:57.100" starttime="20190401 15:26:57.100"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:57.100" starttime="20190401 15:26:56.486"></status>
</kw>
<kw name="Delete All Networks" library="OpenStack">
<doc>Get a list of all existing networks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:57.100" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190401 15:26:57.100" starttime="20190401 15:26:57.100"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "private"</arg>
<arg>grep -v "public"</arg>
<arg>grep -v "external"</arg>
<arg>grep -v "internal"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:57.101" level="INFO">${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"</msg>
<status status="PASS" endtime="20190401 15:26:57.101" starttime="20190401 15:26:57.100"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:57.101" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:57.101" starttime="20190401 15:26:57.101"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:57.102" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.</msg>
<msg timestamp="20190401 15:26:57.760" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:57.760" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:57.760" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:57.761" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:57.761" starttime="20190401 15:26:57.101"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:57.761" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:57.761" starttime="20190401 15:26:57.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:57.762" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:57.762" starttime="20190401 15:26:57.762"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:57.762" starttime="20190401 15:26:57.761"></status>
</kw>
<msg timestamp="20190401 15:26:57.762" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:57.762" starttime="20190401 15:26:57.101"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{network_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:57.763" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:57.763" starttime="20190401 15:26:57.763"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:57.763" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:57.763" starttime="20190401 15:26:57.763"></status>
</kw>
<msg timestamp="20190401 15:26:57.763" level="INFO">@{network_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:57.763" starttime="20190401 15:26:57.762"></status>
</kw>
<kw type="for" name="${network} IN [ @{network_list} ]">
<status status="PASS" endtime="20190401 15:26:57.764" starttime="20190401 15:26:57.764"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:57.764" starttime="20190401 15:26:57.100"></status>
</kw>
<kw name="Delete All KeyPairs" library="OpenStack">
<doc>Get a list of all existing keypais to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack keypair list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:57.764" level="INFO">${openstack_cmd} = openstack keypair list</msg>
<status status="PASS" endtime="20190401 15:26:57.764" starttime="20190401 15:26:57.764"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:57.765" level="INFO">${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:57.765" starttime="20190401 15:26:57.764"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:57.765" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:57.765" starttime="20190401 15:26:57.765"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:57.766" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack keypair list|awk '{print$2}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:58.394" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:58.394" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:58.394" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:58.394" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:58.394" starttime="20190401 15:26:57.766"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:58.395" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:58.395" starttime="20190401 15:26:58.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:58.396" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:58.396" starttime="20190401 15:26:58.395"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:58.396" starttime="20190401 15:26:58.395"></status>
</kw>
<msg timestamp="20190401 15:26:58.396" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:58.396" starttime="20190401 15:26:57.765"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{key_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:58.397" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:58.397" starttime="20190401 15:26:58.397"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:58.397" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:58.397" starttime="20190401 15:26:58.397"></status>
</kw>
<msg timestamp="20190401 15:26:58.397" level="INFO">@{key_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:58.397" starttime="20190401 15:26:58.396"></status>
</kw>
<kw type="for" name="${key} IN [ @{key_list} ]">
<status status="PASS" endtime="20190401 15:26:58.398" starttime="20190401 15:26:58.397"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:58.398" starttime="20190401 15:26:57.764"></status>
</kw>
<kw name="Delete All Snapshots" library="OpenStack">
<doc>Get a list of all existing snapshots to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:58.398" level="INFO">${openstack_cmd} = openstack volume snapshot list</msg>
<status status="PASS" endtime="20190401 15:26:58.398" starttime="20190401 15:26:58.398"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:58.399" level="INFO">${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:58.399" starttime="20190401 15:26:58.398"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:58.399" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:58.399" starttime="20190401 15:26:58.399"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:58.400" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:26:58.992" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:58.992" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:58.992" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:58.992" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:58.992" starttime="20190401 15:26:58.399"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:58.993" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:58.993" starttime="20190401 15:26:58.992"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:58.994" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:58.994" starttime="20190401 15:26:58.993"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:58.994" starttime="20190401 15:26:58.993"></status>
</kw>
<msg timestamp="20190401 15:26:58.994" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:58.994" starttime="20190401 15:26:58.399"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{snapshot_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:58.995" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:58.995" starttime="20190401 15:26:58.994"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:58.995" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:58.995" starttime="20190401 15:26:58.995"></status>
</kw>
<msg timestamp="20190401 15:26:58.995" level="INFO">@{snapshot_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:58.995" starttime="20190401 15:26:58.994"></status>
</kw>
<kw type="for" name="${snapshot} IN [ @{snapshot_list} ]">
<status status="PASS" endtime="20190401 15:26:58.995" starttime="20190401 15:26:58.995"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:58.995" starttime="20190401 15:26:58.398"></status>
</kw>
<kw name="Delete All Volumes" library="OpenStack">
<doc>Get a list of all existing volumes to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:58.996" level="INFO">${openstack_cmd} = openstack volume list</msg>
<status status="PASS" endtime="20190401 15:26:58.996" starttime="20190401 15:26:58.996"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "ID"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:58.996" level="INFO">${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"</msg>
<status status="PASS" endtime="20190401 15:26:58.996" starttime="20190401 15:26:58.996"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:58.997" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:58.997" starttime="20190401 15:26:58.997"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:58.998" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume list|awk '{print$2}'|grep -v "ID"'.</msg>
<msg timestamp="20190401 15:26:59.606" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:26:59.606" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:26:59.606" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:26:59.607" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:26:59.607" starttime="20190401 15:26:58.997"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:26:59.607" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:26:59.607" starttime="20190401 15:26:59.607"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:26:59.608" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:26:59.608" starttime="20190401 15:26:59.608"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:59.608" starttime="20190401 15:26:59.607"></status>
</kw>
<msg timestamp="20190401 15:26:59.608" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:26:59.608" starttime="20190401 15:26:58.996"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{volume_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:26:59.609" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:26:59.609" starttime="20190401 15:26:59.609"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:26:59.609" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:59.609" starttime="20190401 15:26:59.609"></status>
</kw>
<msg timestamp="20190401 15:26:59.609" level="INFO">@{volume_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:26:59.610" starttime="20190401 15:26:59.608"></status>
</kw>
<kw type="for" name="${volume} IN [ @{volume_list} ]">
<status status="PASS" endtime="20190401 15:26:59.610" starttime="20190401 15:26:59.610"></status>
</kw>
<status status="FAIL" endtime="20190401 15:26:59.610" starttime="20190401 15:26:58.996"></status>
</kw>
<kw name="Delete All Stacks" library="OpenStack">
<doc>Get a list of all existing stacks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:26:59.610" level="INFO">${openstack_cmd} = openstack stack list</msg>
<status status="PASS" endtime="20190401 15:26:59.610" starttime="20190401 15:26:59.610"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:26:59.611" level="INFO">${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:26:59.611" starttime="20190401 15:26:59.610"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:26:59.611" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:26:59.611" starttime="20190401 15:26:59.611"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:26:59.612" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:27:00.270" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:27:00.270" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:27:00.270" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:27:00.270" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:00.270" starttime="20190401 15:26:59.611"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:27:00.271" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:27:00.271" starttime="20190401 15:27:00.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:27:00.272" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:27:00.272" starttime="20190401 15:27:00.272"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:00.272" starttime="20190401 15:27:00.271"></status>
</kw>
<msg timestamp="20190401 15:27:00.272" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:27:00.272" starttime="20190401 15:26:59.611"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{stack_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:27:00.273" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:27:00.273" starttime="20190401 15:27:00.273"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:27:00.273" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:00.273" starttime="20190401 15:27:00.273"></status>
</kw>
<msg timestamp="20190401 15:27:00.273" level="INFO">@{stack_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:00.273" starttime="20190401 15:27:00.272"></status>
</kw>
<kw type="for" name="${stack} IN [ @{stack_list} ]">
<status status="PASS" endtime="20190401 15:27:00.274" starttime="20190401 15:27:00.273"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:00.274" starttime="20190401 15:26:59.610"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:00.274" starttime="20190401 15:26:55.286"></status>
</kw>
<kw name="Stx Suite TearDown" library="Utils">
<doc>Wrapper to clean up activities on the suite.</doc>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20190401 15:27:00.276" starttime="20190401 15:27:00.274"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:00.276" starttime="20190401 15:27:00.274"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:00.276" starttime="20190401 15:26:55.286">Several failures occurred:

1) Cloud openstack_helm was not found.

2) Cloud openstack_helm was not found.

3) Cloud openstack_helm was not found.

4) Cloud openstack_helm was not found.

5) Cloud openstack_helm was not found.

6) Cloud openstack_helm was not found.

7) Cloud openstack_helm was not found.

8) Cloud openstack_helm was not found.</status>
</kw>
<doc>Test to launch instance through a heat template.
Author(s):
- Hector Ivan Ramos Escobar &lt;ramos.escobarx.hector.ivan@intel.com&gt;
- Juan Carlos Alonso Sanchez &lt;juan.carlos.alonso@intel.com&gt;</doc>
<status status="FAIL" endtime="20190401 15:27:00.276" starttime="20190401 15:26:51.873">Suite teardown failed:
Several failures occurred:

1) Cloud openstack_helm was not found.

2) Cloud openstack_helm was not found.

3) Cloud openstack_helm was not found.

4) Cloud openstack_helm was not found.

5) Cloud openstack_helm was not found.

6) Cloud openstack_helm was not found.

7) Cloud openstack_helm was not found.

8) Cloud openstack_helm was not found.</status>
</suite>
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-OpenStack/05-Measurements-For-Metric.robot" id="s1-s1-s5" name="05-Measurements-For-Metric">
<kw type="setup" name="Stx Suite Setup" library="Utils">
<doc>Wrapper to setup the environment needed for exercise
StarlingX features</doc>
<kw name="Open Master Controller Connection" library="Utils">
<doc>Establish a SSH connection with the master controller
to start executing the the suite.</doc>
<kw name="Connect to Controller Node" library="Utils">
<doc>Stablish a SSH connection to the controller and return
the connection id</doc>
<arguments>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_NAME}</arg>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_PSWD}</arg>
<arg>${CONFIG.general.IP_UNIT_0_ADDRESS}</arg>
</arguments>
<assign>
<var>${master_controller_connection}</var>
</assign>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${ip_address} prompt=${prompt}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${controller_connection}</var>
</assign>
<msg timestamp="20190401 15:27:00.291" level="INFO">${controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:27:00.291" starttime="20190401 15:27:00.290"></status>
</kw>
<kw name="Flexible_SSH_Login" library="Utils">
<doc>On active SSH session: if given non-empty password,
do Login, else do Login With Public Key.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${password}</arg>
</arguments>
<assign>
<var>${pwd_length}</var>
</assign>
<msg timestamp="20190401 15:27:00.291" level="INFO">Length is 10</msg>
<msg timestamp="20190401 15:27:00.291" level="INFO">${pwd_length} = 10</msg>
<status status="PASS" endtime="20190401 15:27:00.291" starttime="20190401 15:27:00.291"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${pwd_length} &gt; 0</arg>
<arg>SSHLibrary.Login</arg>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<msg timestamp="20190401 15:27:00.292" level="INFO">Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.</msg>
<msg timestamp="20190401 15:27:01.377" level="INFO">Read output: Last login: Mon Apr  1 21:15:37 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$</msg>
<status status="PASS" endtime="20190401 15:27:01.377" starttime="20190401 15:27:00.292"></status>
</kw>
<msg timestamp="20190401 15:27:01.377" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190401 15:27:01.377" starttime="20190401 15:27:00.291"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:01.377" starttime="20190401 15:27:00.291"></status>
</kw>
<msg timestamp="20190401 15:27:01.378" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:27:01.378" starttime="20190401 15:27:00.290"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190401 15:27:01.378" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:27:01.378" starttime="20190401 15:27:01.378"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190401 15:27:01.378" level="INFO">1</msg>
<status status="PASS" endtime="20190401 15:27:01.378" starttime="20190401 15:27:01.378"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:01.379" starttime="20190401 15:27:00.290"></status>
</kw>
<kw name="Set Env Vars From Openrc" library="Utils">
<doc>Sources the openrc form /etc/nova/ to have the admin
variables exported on the controller.</doc>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>source /etc/platform/openrc</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:01.379" starttime="20190401 15:27:01.379"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190401 15:27:01.380" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190401 15:27:01.380" starttime="20190401 15:27:01.380"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:01.381" starttime="20190401 15:27:01.380"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:01.381" starttime="20190401 15:27:01.381"></status>
</kw>
<msg timestamp="20190401 15:27:01.381" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190401 15:27:01.381" starttime="20190401 15:27:01.380"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20190401 15:27:01.381" starttime="20190401 15:27:01.381"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190401 15:27:01.385" level="INFO">source /etc/platform/openrc</msg>
<status status="PASS" endtime="20190401 15:27:01.385" starttime="20190401 15:27:01.381"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:27:01.759" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190401 15:27:01.760" level="INFO">${output} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:01.760" starttime="20190401 15:27:01.385"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190401 15:27:01.761" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:01.761" starttime="20190401 15:27:01.760"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190401 15:27:01.761" level="INFO">${clean_out} = </msg>
<status status="PASS" endtime="20190401 15:27:01.761" starttime="20190401 15:27:01.761"></status>
</kw>
<msg timestamp="20190401 15:27:01.761" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190401 15:27:01.761" starttime="20190401 15:27:01.760"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190401 15:27:01.763" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190401 15:27:01.763" starttime="20190401 15:27:01.761"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:01.764" level="INFO">0</msg>
<msg timestamp="20190401 15:27:01.764" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:27:01.764" starttime="20190401 15:27:01.763"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190401 15:27:01.764" level="INFO">0</msg>
<status status="PASS" endtime="20190401 15:27:01.764" starttime="20190401 15:27:01.764"></status>
</kw>
<msg timestamp="20190401 15:27:01.764" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:27:01.764" starttime="20190401 15:27:01.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:01.765" starttime="20190401 15:27:01.765"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:01.765" starttime="20190401 15:27:01.764"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:01.765" starttime="20190401 15:27:01.765"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190401 15:27:01.766" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: </msg>
<status status="PASS" endtime="20190401 15:27:01.766" starttime="20190401 15:27:01.766"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:01.766" starttime="20190401 15:27:01.379"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:01.766" starttime="20190401 15:27:01.379"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:01.766" starttime="20190401 15:27:00.289"></status>
</kw>
<test id="s1-s1-s5-t1" name="Create Image For Metrics">
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/${cirros_image}</arg>
<arg>${host_image_path}/${cirros_image}</arg>
</arguments>
<msg timestamp="20190401 15:27:01.774" level="INFO">[chan 1] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190401 15:27:01.781" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190401 15:27:01.782" level="FAIL">There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.</msg>
<status status="FAIL" endtime="20190401 15:27:01.782" starttime="20190401 15:27:01.767"></status>
</kw>
<doc>Create images with or without properties to be used
to launch Cirros instances.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:27:01.782" critical="yes" starttime="20190401 15:27:01.766">There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.</status>
</test>
<test id="s1-s1-s5-t2" name="Update Image Name">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>openstack image show</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:27:01.783" level="INFO">${openstack_cmd} = openstack image show cirros</msg>
<status status="PASS" endtime="20190401 15:27:01.783" starttime="20190401 15:27:01.783"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "created_at"</arg>
<arg>awk '{print $4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:01.783" level="INFO">${cmd} = openstack image show cirros|grep "created_at"|awk '{print $4}'</msg>
<status status="PASS" endtime="20190401 15:27:01.783" starttime="20190401 15:27:01.783"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:27:01.784" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:27:01.784" starttime="20190401 15:27:01.784"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:01.784" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image show cirros|grep "created_at"|awk '{print $4}''.</msg>
<msg timestamp="20190401 15:27:02.412" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190401 15:27:02.412" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:27:02.412" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:27:02.412" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:27:02.412" starttime="20190401 15:27:01.784"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:27:02.413" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 0}</msg>
<status status="PASS" endtime="20190401 15:27:02.413" starttime="20190401 15:27:02.413"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:02.414" starttime="20190401 15:27:02.413"></status>
</kw>
<msg timestamp="20190401 15:27:02.414" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=0 }</msg>
<status status="PASS" endtime="20190401 15:27:02.414" starttime="20190401 15:27:01.783"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${created_at}</var>
</assign>
<msg timestamp="20190401 15:27:02.414" level="INFO">${created_at} = </msg>
<status status="PASS" endtime="20190401 15:27:02.415" starttime="20190401 15:27:02.414"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:27:02.415" level="INFO">${openstack_cmd} = openstack image set</msg>
<status status="PASS" endtime="20190401 15:27:02.415" starttime="20190401 15:27:02.415"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--name ${cirros_image_name_tmp}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:02.415" level="INFO">${cmd} = openstack image set --name cirros-tmp cirros</msg>
<status status="PASS" endtime="20190401 15:27:02.415" starttime="20190401 15:27:02.415"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:27:02.416" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:27:02.416" starttime="20190401 15:27:02.416"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:02.416" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image set --name cirros-tmp cirros'.</msg>
<msg timestamp="20190401 15:27:03.095" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:27:03.095" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:27:03.095" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:27:03.095" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:03.095" starttime="20190401 15:27:02.416"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:27:03.096" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:27:03.096" starttime="20190401 15:27:03.095"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:27:03.096" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:27:03.096" starttime="20190401 15:27:03.096"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:03.097" starttime="20190401 15:27:03.096"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:03.097" starttime="20190401 15:27:02.415"></status>
</kw>
<doc>Update image name.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:27:03.097" critical="yes" starttime="20190401 15:27:01.782">Cloud openstack_helm was not found.</status>
</test>
<test id="s1-s1-s5-t3" name="Update Image Disk Ram Size">
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>openstack image show</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:27:03.098" level="INFO">${openstack_cmd} = openstack image show cirros</msg>
<status status="PASS" endtime="20190401 15:27:03.098" starttime="20190401 15:27:03.098"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>grep "updated_at"</arg>
<arg>awk '{print $4}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:03.098" level="INFO">${cmd} = openstack image show cirros|grep "updated_at"|awk '{print $4}'</msg>
<status status="PASS" endtime="20190401 15:27:03.098" starttime="20190401 15:27:03.098"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:27:03.099" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:27:03.099" starttime="20190401 15:27:03.099"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:03.099" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image show cirros|grep "updated_at"|awk '{print $4}''.</msg>
<msg timestamp="20190401 15:27:03.758" level="INFO">Command exited with return code 0.</msg>
<msg timestamp="20190401 15:27:03.758" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:27:03.758" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:27:03.758" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:27:03.758" starttime="20190401 15:27:03.099"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:27:03.759" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 0}</msg>
<status status="PASS" endtime="20190401 15:27:03.759" starttime="20190401 15:27:03.758"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:03.759" starttime="20190401 15:27:03.759"></status>
</kw>
<msg timestamp="20190401 15:27:03.760" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=0 }</msg>
<status status="PASS" endtime="20190401 15:27:03.760" starttime="20190401 15:27:03.098"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${updated_at}</var>
</assign>
<msg timestamp="20190401 15:27:03.760" level="INFO">${updated_at} = </msg>
<status status="PASS" endtime="20190401 15:27:03.760" starttime="20190401 15:27:03.760"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image set</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:27:03.760" level="INFO">${openstack_cmd} = openstack image set</msg>
<status status="PASS" endtime="20190401 15:27:03.760" starttime="20190401 15:27:03.760"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${openstack_cmd}</arg>
<arg>--min-disk ${image_disk_size}</arg>
<arg>${cirros_image_name}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:03.761" level="INFO">${cmd} = openstack image set --min-disk 10 cirros</msg>
<status status="PASS" endtime="20190401 15:27:03.761" starttime="20190401 15:27:03.760"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:27:03.761" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:27:03.761" starttime="20190401 15:27:03.761"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:03.762" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image set --min-disk 10 cirros'.</msg>
<msg timestamp="20190401 15:27:04.391" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:27:04.391" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:27:04.391" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:27:04.391" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:04.391" starttime="20190401 15:27:03.762"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:27:04.392" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:27:04.392" starttime="20190401 15:27:04.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:27:04.392" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:27:04.392" starttime="20190401 15:27:04.392"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:04.393" starttime="20190401 15:27:04.392"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:04.393" starttime="20190401 15:27:03.761"></status>
</kw>
<doc>Update image disk size and ram size.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:27:04.393" critical="yes" starttime="20190401 15:27:03.097">Cloud openstack_helm was not found.</status>
</test>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>OpenStack.Openstack Cleanup All</arg>
<arg>Utils.Stx Suite TearDown</arg>
</arguments>
<kw name="Openstack Cleanup All" library="OpenStack">
<doc>Delete all instances, images, flavors, networks and
keypairs generated during tests.</doc>
<kw name="Delete All Instances" library="OpenStack">
<doc>Get a list of all existing instances to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack server list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:27:04.394" level="INFO">${openstack_cmd} = openstack server list</msg>
<status status="PASS" endtime="20190401 15:27:04.394" starttime="20190401 15:27:04.394"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:04.394" level="INFO">${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:27:04.394" starttime="20190401 15:27:04.394"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:27:04.395" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:27:04.395" starttime="20190401 15:27:04.395"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:04.396" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack server list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:27:05.025" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:27:05.025" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:27:05.025" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:27:05.025" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:05.025" starttime="20190401 15:27:04.395"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:27:05.026" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:27:05.026" starttime="20190401 15:27:05.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:27:05.027" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:27:05.027" starttime="20190401 15:27:05.026"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:05.027" starttime="20190401 15:27:05.026"></status>
</kw>
<msg timestamp="20190401 15:27:05.027" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:27:05.027" starttime="20190401 15:27:04.395"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{vm_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:27:05.028" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:27:05.028" starttime="20190401 15:27:05.028"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:27:05.028" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:05.028" starttime="20190401 15:27:05.028"></status>
</kw>
<msg timestamp="20190401 15:27:05.028" level="INFO">@{vm_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:05.028" starttime="20190401 15:27:05.027"></status>
</kw>
<kw type="for" name="${vm} IN [ @{vm_list} ]">
<status status="PASS" endtime="20190401 15:27:05.028" starttime="20190401 15:27:05.028"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:05.029" starttime="20190401 15:27:04.394"></status>
</kw>
<kw name="Delete All Images" library="OpenStack">
<doc>Get a list of all existing images to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack image list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:27:05.029" level="INFO">${openstack_cmd} = openstack image list</msg>
<status status="PASS" endtime="20190401 15:27:05.029" starttime="20190401 15:27:05.029"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "Cirros"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:05.030" level="INFO">${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"</msg>
<status status="PASS" endtime="20190401 15:27:05.030" starttime="20190401 15:27:05.029"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:27:05.031" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:27:05.031" starttime="20190401 15:27:05.030"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:05.031" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.</msg>
<msg timestamp="20190401 15:27:05.660" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:27:05.660" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:27:05.660" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:27:05.660" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:05.660" starttime="20190401 15:27:05.031"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:27:05.661" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:27:05.661" starttime="20190401 15:27:05.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:27:05.661" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:27:05.661" starttime="20190401 15:27:05.661"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:05.662" starttime="20190401 15:27:05.661"></status>
</kw>
<msg timestamp="20190401 15:27:05.662" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:27:05.662" starttime="20190401 15:27:05.030"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{image_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:27:05.662" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:27:05.662" starttime="20190401 15:27:05.662"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:27:05.663" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:05.663" starttime="20190401 15:27:05.663"></status>
</kw>
<msg timestamp="20190401 15:27:05.663" level="INFO">@{image_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:05.663" starttime="20190401 15:27:05.662"></status>
</kw>
<kw type="for" name="${image} IN [ @{image_list} ]">
<status status="PASS" endtime="20190401 15:27:05.663" starttime="20190401 15:27:05.663"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:05.663" starttime="20190401 15:27:05.029"></status>
</kw>
<kw name="Delete All Flavors" library="OpenStack">
<doc>Get a list of all existing flavors to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack flavor list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:27:05.664" level="INFO">${openstack_cmd} = openstack flavor list</msg>
<status status="PASS" endtime="20190401 15:27:05.664" starttime="20190401 15:27:05.664"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "m1"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:05.664" level="INFO">${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"</msg>
<status status="PASS" endtime="20190401 15:27:05.664" starttime="20190401 15:27:05.664"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:27:05.666" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:27:05.666" starttime="20190401 15:27:05.665"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:05.666" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.</msg>
<msg timestamp="20190401 15:27:06.295" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:27:06.295" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:27:06.295" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:27:06.295" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:06.295" starttime="20190401 15:27:05.666"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:27:06.296" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:27:06.296" starttime="20190401 15:27:06.295"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:27:06.296" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:27:06.296" starttime="20190401 15:27:06.296"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:06.296" starttime="20190401 15:27:06.296"></status>
</kw>
<msg timestamp="20190401 15:27:06.297" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:27:06.297" starttime="20190401 15:27:05.664"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{flavor_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:27:06.297" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:27:06.297" starttime="20190401 15:27:06.297"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:27:06.298" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:06.298" starttime="20190401 15:27:06.297"></status>
</kw>
<msg timestamp="20190401 15:27:06.298" level="INFO">@{flavor_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:06.298" starttime="20190401 15:27:06.297"></status>
</kw>
<kw type="for" name="${flavor} IN [ @{flavor_list} ]">
<status status="PASS" endtime="20190401 15:27:06.298" starttime="20190401 15:27:06.298"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:06.298" starttime="20190401 15:27:05.663"></status>
</kw>
<kw name="Delete All Networks" library="OpenStack">
<doc>Get a list of all existing networks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack network list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:27:06.299" level="INFO">${openstack_cmd} = openstack network list</msg>
<status status="PASS" endtime="20190401 15:27:06.299" starttime="20190401 15:27:06.298"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
<arg>grep -v "private"</arg>
<arg>grep -v "public"</arg>
<arg>grep -v "external"</arg>
<arg>grep -v "internal"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:06.299" level="INFO">${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"</msg>
<status status="PASS" endtime="20190401 15:27:06.299" starttime="20190401 15:27:06.299"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:27:06.300" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:27:06.300" starttime="20190401 15:27:06.299"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:06.300" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.</msg>
<msg timestamp="20190401 15:27:06.878" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:27:06.878" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:27:06.878" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:27:06.878" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:06.878" starttime="20190401 15:27:06.300"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:27:06.879" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:27:06.879" starttime="20190401 15:27:06.878"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:27:06.880" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:27:06.880" starttime="20190401 15:27:06.879"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:06.880" starttime="20190401 15:27:06.879"></status>
</kw>
<msg timestamp="20190401 15:27:06.880" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:27:06.880" starttime="20190401 15:27:06.299"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{network_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:27:06.881" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:27:06.881" starttime="20190401 15:27:06.880"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:27:06.881" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:06.881" starttime="20190401 15:27:06.881"></status>
</kw>
<msg timestamp="20190401 15:27:06.881" level="INFO">@{network_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:06.881" starttime="20190401 15:27:06.880"></status>
</kw>
<kw type="for" name="${network} IN [ @{network_list} ]">
<status status="PASS" endtime="20190401 15:27:06.881" starttime="20190401 15:27:06.881"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:06.881" starttime="20190401 15:27:06.298"></status>
</kw>
<kw name="Delete All KeyPairs" library="OpenStack">
<doc>Get a list of all existing keypais to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack keypair list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:27:06.882" level="INFO">${openstack_cmd} = openstack keypair list</msg>
<status status="PASS" endtime="20190401 15:27:06.882" starttime="20190401 15:27:06.882"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:06.882" level="INFO">${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:27:06.882" starttime="20190401 15:27:06.882"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:27:06.883" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:27:06.883" starttime="20190401 15:27:06.883"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:06.884" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack keypair list|awk '{print$2}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:27:07.492" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:27:07.493" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:27:07.493" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:27:07.493" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:07.493" starttime="20190401 15:27:06.883"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:27:07.493" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:27:07.493" starttime="20190401 15:27:07.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:27:07.494" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:27:07.494" starttime="20190401 15:27:07.494"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:07.494" starttime="20190401 15:27:07.493"></status>
</kw>
<msg timestamp="20190401 15:27:07.494" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:27:07.494" starttime="20190401 15:27:06.882"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{key_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:27:07.495" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:27:07.495" starttime="20190401 15:27:07.495"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:27:07.495" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:07.495" starttime="20190401 15:27:07.495"></status>
</kw>
<msg timestamp="20190401 15:27:07.496" level="INFO">@{key_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:07.496" starttime="20190401 15:27:07.495"></status>
</kw>
<kw type="for" name="${key} IN [ @{key_list} ]">
<status status="PASS" endtime="20190401 15:27:07.496" starttime="20190401 15:27:07.496"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:07.496" starttime="20190401 15:27:06.882"></status>
</kw>
<kw name="Delete All Snapshots" library="OpenStack">
<doc>Get a list of all existing snapshots to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume snapshot list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:27:07.496" level="INFO">${openstack_cmd} = openstack volume snapshot list</msg>
<status status="PASS" endtime="20190401 15:27:07.496" starttime="20190401 15:27:07.496"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:07.497" level="INFO">${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:27:07.497" starttime="20190401 15:27:07.496"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:27:07.497" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:27:07.497" starttime="20190401 15:27:07.497"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:07.498" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:27:08.156" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:27:08.156" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:27:08.156" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:27:08.156" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:08.156" starttime="20190401 15:27:07.497"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:27:08.157" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:27:08.157" starttime="20190401 15:27:08.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:27:08.158" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:27:08.158" starttime="20190401 15:27:08.158"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:08.158" starttime="20190401 15:27:08.157"></status>
</kw>
<msg timestamp="20190401 15:27:08.158" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:27:08.158" starttime="20190401 15:27:07.497"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{snapshot_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:27:08.159" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:27:08.159" starttime="20190401 15:27:08.159"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:27:08.159" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:08.159" starttime="20190401 15:27:08.159"></status>
</kw>
<msg timestamp="20190401 15:27:08.160" level="INFO">@{snapshot_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:08.160" starttime="20190401 15:27:08.158"></status>
</kw>
<kw type="for" name="${snapshot} IN [ @{snapshot_list} ]">
<status status="PASS" endtime="20190401 15:27:08.160" starttime="20190401 15:27:08.160"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:08.160" starttime="20190401 15:27:07.496"></status>
</kw>
<kw name="Delete All Volumes" library="OpenStack">
<doc>Get a list of all existing volumes to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack volume list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:27:08.161" level="INFO">${openstack_cmd} = openstack volume list</msg>
<status status="PASS" endtime="20190401 15:27:08.161" starttime="20190401 15:27:08.160"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$2}'</arg>
<arg>grep -v "ID"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:08.161" level="INFO">${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"</msg>
<status status="PASS" endtime="20190401 15:27:08.161" starttime="20190401 15:27:08.161"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:27:08.162" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:27:08.162" starttime="20190401 15:27:08.161"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:08.162" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack volume list|awk '{print$2}'|grep -v "ID"'.</msg>
<msg timestamp="20190401 15:27:08.790" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:27:08.791" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:27:08.791" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:27:08.791" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:08.791" starttime="20190401 15:27:08.162"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:27:08.791" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:27:08.791" starttime="20190401 15:27:08.791"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:27:08.792" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:27:08.792" starttime="20190401 15:27:08.792"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:08.792" starttime="20190401 15:27:08.792"></status>
</kw>
<msg timestamp="20190401 15:27:08.793" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:27:08.793" starttime="20190401 15:27:08.161"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{volume_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:27:08.793" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:27:08.793" starttime="20190401 15:27:08.793"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:27:08.793" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:08.794" starttime="20190401 15:27:08.793"></status>
</kw>
<msg timestamp="20190401 15:27:08.794" level="INFO">@{volume_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:08.794" starttime="20190401 15:27:08.793"></status>
</kw>
<kw type="for" name="${volume} IN [ @{volume_list} ]">
<status status="PASS" endtime="20190401 15:27:08.794" starttime="20190401 15:27:08.794"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:08.794" starttime="20190401 15:27:08.160"></status>
</kw>
<kw name="Delete All Stacks" library="OpenStack">
<doc>Get a list of all existing stacks to delete them one
by one.</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>openstack stack list</arg>
</arguments>
<assign>
<var>${openstack_cmd}</var>
</assign>
<msg timestamp="20190401 15:27:08.794" level="INFO">${openstack_cmd} = openstack stack list</msg>
<status status="PASS" endtime="20190401 15:27:08.794" starttime="20190401 15:27:08.794"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${openstack_cmd}</arg>
<arg>awk '{print$4}'</arg>
<arg>grep -v "Name"</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:08.795" level="INFO">${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"</msg>
<status status="PASS" endtime="20190401 15:27:08.795" starttime="20190401 15:27:08.795"></status>
</kw>
<kw name="Run OS Command" library="OpenStack">
<doc>Keyword to execute exclusively commands for OpenStack as
it uses the proper token for OS authentication.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>export OS_CLOUD=openstack_helm</arg>
</arguments>
<assign>
<var>${load_os_token}</var>
</assign>
<msg timestamp="20190401 15:27:08.795" level="INFO">${load_os_token} = export OS_CLOUD=openstack_helm</msg>
<status status="PASS" endtime="20190401 15:27:08.795" starttime="20190401 15:27:08.795"></status>
</kw>
<kw name="Execute Command" library="SSHLibrary">
<doc>Executes ``command`` on the remote machine and returns its outputs.</doc>
<arguments>
<arg>${load_os_token} &amp;&amp; ${cmd}</arg>
<arg>return_stdout=True</arg>
<arg>return_stderr=True</arg>
<arg>return_rc=True</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${stdout}</var>
<var>${stderr}</var>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:08.796" level="INFO">Executing command 'export OS_CLOUD=openstack_helm &amp;&amp; openstack stack list|awk '{print$4}'|grep -v "Name"'.</msg>
<msg timestamp="20190401 15:27:09.424" level="INFO">Command exited with return code 1.</msg>
<msg timestamp="20190401 15:27:09.424" level="INFO">${stdout} = </msg>
<msg timestamp="20190401 15:27:09.424" level="INFO">${stderr} = Cloud openstack_helm was not found.</msg>
<msg timestamp="20190401 15:27:09.424" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:09.424" starttime="20190401 15:27:08.796"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${stdout}</arg>
<arg>stderr=${stderr}</arg>
<arg>rc=${rc}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190401 15:27:09.425" level="INFO">${res} = {u'stdout': u'', u'stderr': u'Cloud openstack_helm was not found.', u'rc': 1}</msg>
<status status="PASS" endtime="20190401 15:27:09.425" starttime="20190401 15:27:09.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} != 0 and ${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${stderr}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${stderr}</arg>
</arguments>
<msg timestamp="20190401 15:27:09.425" level="FAIL">Cloud openstack_helm was not found.</msg>
<status status="FAIL" endtime="20190401 15:27:09.425" starttime="20190401 15:27:09.425"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:09.425" starttime="20190401 15:27:09.425"></status>
</kw>
<msg timestamp="20190401 15:27:09.426" level="INFO">&amp;{result} = { stdout= | stderr=Cloud openstack_helm was not found. | rc=1 }</msg>
<status status="FAIL" endtime="20190401 15:27:09.426" starttime="20190401 15:27:08.795"></status>
</kw>
<kw name="Convert Response To List" library="Utils">
<doc>Given a response dictionary, gets the stdout and split
it by spaces and return it as a list.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<assign>
<var>@{stack_list}</var>
</assign>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20190401 15:27:09.426" level="INFO">${response} = </msg>
<status status="PASS" endtime="20190401 15:27:09.426" starttime="20190401 15:27:09.426"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<assign>
<var>@{res_in_list}</var>
</assign>
<msg timestamp="20190401 15:27:09.427" level="INFO">@{res_in_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:09.427" starttime="20190401 15:27:09.427"></status>
</kw>
<msg timestamp="20190401 15:27:09.427" level="INFO">@{stack_list} = [ ]</msg>
<status status="PASS" endtime="20190401 15:27:09.427" starttime="20190401 15:27:09.426"></status>
</kw>
<kw type="for" name="${stack} IN [ @{stack_list} ]">
<status status="PASS" endtime="20190401 15:27:09.427" starttime="20190401 15:27:09.427"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:09.427" starttime="20190401 15:27:08.794"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:09.427" starttime="20190401 15:27:04.394"></status>
</kw>
<kw name="Stx Suite TearDown" library="Utils">
<doc>Wrapper to clean up activities on the suite.</doc>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20190401 15:27:09.429" starttime="20190401 15:27:09.428"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:09.430" starttime="20190401 15:27:09.428"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:09.430" starttime="20190401 15:27:04.393">Several failures occurred:

1) Cloud openstack_helm was not found.

2) Cloud openstack_helm was not found.

3) Cloud openstack_helm was not found.

4) Cloud openstack_helm was not found.

5) Cloud openstack_helm was not found.

6) Cloud openstack_helm was not found.

7) Cloud openstack_helm was not found.

8) Cloud openstack_helm was not found.</status>
</kw>
<doc>Test to create an instance with Cirros.
Author(s):
- Hector Ivan Ramos Escobar &lt;ramos.escobarx.hector.ivan@intel.com&gt;
- Juan Carlos Alonso &lt;juan.carlos.alonso@intel.com&gt;</doc>
<status status="FAIL" endtime="20190401 15:27:09.430" starttime="20190401 15:27:00.278">Suite teardown failed:
Several failures occurred:

1) Cloud openstack_helm was not found.

2) Cloud openstack_helm was not found.

3) Cloud openstack_helm was not found.

4) Cloud openstack_helm was not found.

5) Cloud openstack_helm was not found.

6) Cloud openstack_helm was not found.

7) Cloud openstack_helm was not found.

8) Cloud openstack_helm was not found.</status>
</suite>
<status status="FAIL" endtime="20190401 15:27:09.433" starttime="20190401 15:26:04.872"></status>
</suite>
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-Platform" id="s1-s2" name="Sanity-Platform">
<suite source="/home/mgperezi/duplex/stx-test-suite/Tests/Sanity-Test/Sanity-Platform/02-OpenStack-Pod-Healthy.robot" id="s1-s2-s1" name="02-OpenStack-Pod-Healthy">
<kw type="setup" name="Stx Suite Setup" library="Utils">
<doc>Wrapper to setup the environment needed for exercise
StarlingX features</doc>
<kw name="Open Master Controller Connection" library="Utils">
<doc>Establish a SSH connection with the master controller
to start executing the the suite.</doc>
<kw name="Connect to Controller Node" library="Utils">
<doc>Stablish a SSH connection to the controller and return
the connection id</doc>
<arguments>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_NAME}</arg>
<arg>${CONFIG.credentials.STX_DEPLOY_USER_PSWD}</arg>
<arg>${CONFIG.general.IP_UNIT_0_ADDRESS}</arg>
</arguments>
<assign>
<var>${master_controller_connection}</var>
</assign>
<kw name="Open Connection" library="SSHLibrary">
<doc>Opens a new SSH connection to the given ``host`` and ``port``.</doc>
<arguments>
<arg>${ip_address} prompt=${prompt}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${controller_connection}</var>
</assign>
<msg timestamp="20190401 15:27:09.453" level="INFO">${controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:27:09.453" starttime="20190401 15:27:09.452"></status>
</kw>
<kw name="Flexible_SSH_Login" library="Utils">
<doc>On active SSH session: if given non-empty password,
do Login, else do Login With Public Key.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${password}</arg>
</arguments>
<assign>
<var>${pwd_length}</var>
</assign>
<msg timestamp="20190401 15:27:09.453" level="INFO">Length is 10</msg>
<msg timestamp="20190401 15:27:09.453" level="INFO">${pwd_length} = 10</msg>
<status status="PASS" endtime="20190401 15:27:09.453" starttime="20190401 15:27:09.453"></status>
</kw>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>${pwd_length} &gt; 0</arg>
<arg>SSHLibrary.Login</arg>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<kw name="Login" library="SSHLibrary">
<doc>Logs into the SSH server with the given ``username`` and ``password``.</doc>
<arguments>
<arg>${user}</arg>
<arg>${password}</arg>
<arg>delay=${delay}</arg>
</arguments>
<msg timestamp="20190401 15:27:09.454" level="INFO">Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.</msg>
<msg timestamp="20190401 15:27:10.539" level="INFO">Read output: Last login: Mon Apr  1 21:15:45 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$</msg>
<status status="PASS" endtime="20190401 15:27:10.539" starttime="20190401 15:27:09.454"></status>
</kw>
<msg timestamp="20190401 15:27:10.539" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190401 15:27:10.539" starttime="20190401 15:27:09.453"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:10.539" starttime="20190401 15:27:09.453"></status>
</kw>
<msg timestamp="20190401 15:27:10.540" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:27:10.540" starttime="20190401 15:27:09.452"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190401 15:27:10.540" level="INFO">${master_controller_connection} = 1</msg>
<status status="PASS" endtime="20190401 15:27:10.540" starttime="20190401 15:27:10.540"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${master_controller_connection}</arg>
</arguments>
<msg timestamp="20190401 15:27:10.540" level="INFO">1</msg>
<status status="PASS" endtime="20190401 15:27:10.541" starttime="20190401 15:27:10.540"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:10.541" starttime="20190401 15:27:09.452"></status>
</kw>
<kw name="Set Env Vars From Openrc" library="Utils">
<doc>Sources the openrc form /etc/nova/ to have the admin
variables exported on the controller.</doc>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>source /etc/platform/openrc</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:10.542" starttime="20190401 15:27:10.541"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190401 15:27:10.542" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190401 15:27:10.542" starttime="20190401 15:27:10.542"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:10.543" starttime="20190401 15:27:10.543"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:10.543" starttime="20190401 15:27:10.543"></status>
</kw>
<msg timestamp="20190401 15:27:10.543" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190401 15:27:10.543" starttime="20190401 15:27:10.542"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<status status="PASS" endtime="20190401 15:27:10.544" starttime="20190401 15:27:10.543"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190401 15:27:10.549" level="INFO">source /etc/platform/openrc</msg>
<status status="PASS" endtime="20190401 15:27:10.549" starttime="20190401 15:27:10.544"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:27:10.919" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190401 15:27:10.919" level="INFO">${output} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:10.919" starttime="20190401 15:27:10.549"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190401 15:27:10.920" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:10.920" starttime="20190401 15:27:10.920"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190401 15:27:10.921" level="INFO">${clean_out} = </msg>
<status status="PASS" endtime="20190401 15:27:10.921" starttime="20190401 15:27:10.920"></status>
</kw>
<msg timestamp="20190401 15:27:10.921" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190401 15:27:10.921" starttime="20190401 15:27:10.920"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190401 15:27:10.923" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190401 15:27:10.923" starttime="20190401 15:27:10.921"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:10.923" level="INFO">0</msg>
<msg timestamp="20190401 15:27:10.923" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:27:10.923" starttime="20190401 15:27:10.923"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190401 15:27:10.924" level="INFO">0</msg>
<status status="PASS" endtime="20190401 15:27:10.924" starttime="20190401 15:27:10.924"></status>
</kw>
<msg timestamp="20190401 15:27:10.924" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:27:10.924" starttime="20190401 15:27:10.921"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:10.925" starttime="20190401 15:27:10.924"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:10.925" starttime="20190401 15:27:10.924"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:10.925" starttime="20190401 15:27:10.925"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190401 15:27:10.925" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: </msg>
<status status="PASS" endtime="20190401 15:27:10.926" starttime="20190401 15:27:10.925"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:10.926" starttime="20190401 15:27:10.541"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:10.926" starttime="20190401 15:27:10.541"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:10.926" starttime="20190401 15:27:09.451"></status>
</kw>
<test id="s1-s2-s1-t1" name="OpenStack PODs Healthy">
<kw name="Check System Application Status" library="Utils">
<doc>Check if openstack applications were applied.</doc>
<arguments>
<arg>stx-openstack</arg>
<arg>applied</arg>
</arguments>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>system application-list</arg>
<arg>grep ${application}</arg>
<arg>awk '{print $8}'</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:10.927" level="INFO">${cmd} = system application-list|grep stx-openstack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190401 15:27:10.927" starttime="20190401 15:27:10.927"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:10.928" starttime="20190401 15:27:10.928"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190401 15:27:10.928" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190401 15:27:10.928" starttime="20190401 15:27:10.928"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:10.929" starttime="20190401 15:27:10.929"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:10.929" starttime="20190401 15:27:10.929"></status>
</kw>
<msg timestamp="20190401 15:27:10.929" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190401 15:27:10.929" starttime="20190401 15:27:10.928"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190401 15:27:10.930" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:10.930" starttime="20190401 15:27:10.929"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190401 15:27:10.931" level="INFO">system application-list|grep stx-opens tack|awk '{print $8}'</msg>
<status status="PASS" endtime="20190401 15:27:10.931" starttime="20190401 15:27:10.930"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:27:11.935" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190401 15:27:11.935" level="INFO">${output} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:11.935" starttime="20190401 15:27:10.932"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190401 15:27:11.936" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:11.936" starttime="20190401 15:27:11.936"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190401 15:27:11.936" level="INFO">${clean_out} = </msg>
<status status="PASS" endtime="20190401 15:27:11.936" starttime="20190401 15:27:11.936"></status>
</kw>
<msg timestamp="20190401 15:27:11.936" level="INFO">${output} = </msg>
<status status="PASS" endtime="20190401 15:27:11.936" starttime="20190401 15:27:11.935"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190401 15:27:11.939" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190401 15:27:11.939" starttime="20190401 15:27:11.937"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:11.939" level="INFO">0</msg>
<msg timestamp="20190401 15:27:11.939" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:27:11.939" starttime="20190401 15:27:11.939"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190401 15:27:11.939" level="INFO">0</msg>
<status status="PASS" endtime="20190401 15:27:11.940" starttime="20190401 15:27:11.939"></status>
</kw>
<msg timestamp="20190401 15:27:11.940" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:27:11.940" starttime="20190401 15:27:11.937"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:11.940" starttime="20190401 15:27:11.940"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:11.940" starttime="20190401 15:27:11.940"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:11.941" starttime="20190401 15:27:11.941"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190401 15:27:11.941" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: </msg>
<status status="PASS" endtime="20190401 15:27:11.941" starttime="20190401 15:27:11.941"></status>
</kw>
<msg timestamp="20190401 15:27:11.941" level="INFO">&amp;{result} = { stdout= | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190401 15:27:11.941" starttime="20190401 15:27:10.927"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190401 15:27:11.942" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190401 15:27:11.942" starttime="20190401 15:27:11.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${value}' == 'apply-failed'</arg>
<arg>System Application Apply</arg>
<arg>${application}</arg>
<arg>ELSE</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${value}</arg>
<arg>${status}</arg>
</arguments>
<msg timestamp="20190401 15:27:11.943" level="FAIL"> != applied</msg>
<status status="FAIL" endtime="20190401 15:27:11.943" starttime="20190401 15:27:11.942"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:11.943" starttime="20190401 15:27:11.942"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:11.943" starttime="20190401 15:27:10.926"></status>
</kw>
<doc>Check all OpenStack pods are healthy, in Running or
Completed state.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:27:11.943" critical="yes" starttime="20190401 15:27:10.926"> != applied</status>
</test>
<test id="s1-s2-s1-t2" name="Reapply STX OpenStack">
<kw name="System Application Apply" library="Utils">
<doc>Run the system aplication apply</doc>
<arguments>
<arg>stx-openstack</arg>
</arguments>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>system application-apply ${application}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:11.944" starttime="20190401 15:27:11.944"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190401 15:27:11.945" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190401 15:27:11.945" starttime="20190401 15:27:11.945"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:11.945" starttime="20190401 15:27:11.945"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:11.946" starttime="20190401 15:27:11.946"></status>
</kw>
<msg timestamp="20190401 15:27:11.946" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190401 15:27:11.946" starttime="20190401 15:27:11.945"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190401 15:27:11.946" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:11.946" starttime="20190401 15:27:11.946"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190401 15:27:11.949" level="INFO">system application-apply stx-openstack [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kk</msg>
<status status="PASS" endtime="20190401 15:27:11.949" starttime="20190401 15:27:11.946"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:27:12.943" level="INFO">Application-apply rejected: application not found.
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190401 15:27:12.943" level="INFO">${output} = Application-apply rejected: application not found.
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:12.943" starttime="20190401 15:27:11.949"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190401 15:27:12.944" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:12.944" starttime="20190401 15:27:12.944"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190401 15:27:12.944" level="INFO">${clean_out} = Application-apply rejected: application not found.
</msg>
<status status="PASS" endtime="20190401 15:27:12.944" starttime="20190401 15:27:12.944"></status>
</kw>
<msg timestamp="20190401 15:27:12.944" level="INFO">${output} = Application-apply rejected: application not found.
</msg>
<status status="PASS" endtime="20190401 15:27:12.944" starttime="20190401 15:27:12.943"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190401 15:27:12.946" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190401 15:27:12.947" starttime="20190401 15:27:12.945"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:12.947" level="INFO">1</msg>
<msg timestamp="20190401 15:27:12.947" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:12.947" starttime="20190401 15:27:12.947"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190401 15:27:12.947" level="INFO">1</msg>
<status status="PASS" endtime="20190401 15:27:12.947" starttime="20190401 15:27:12.947"></status>
</kw>
<msg timestamp="20190401 15:27:12.947" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:12.947" starttime="20190401 15:27:12.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20190401 15:27:12.948" level="FAIL">Application-apply rejected: application not found.
</msg>
<status status="FAIL" endtime="20190401 15:27:12.948" starttime="20190401 15:27:12.948"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:12.948" starttime="20190401 15:27:12.948"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:12.948" starttime="20190401 15:27:11.944"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:12.949" starttime="20190401 15:27:11.944"></status>
</kw>
<doc>Re apply stx openstack application without any
modification to helm charts.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:27:12.949" critical="yes" starttime="20190401 15:27:11.943">Application-apply rejected: application not found.
</status>
</test>
<test id="s1-s2-s1-t3" name="STX OpenStack Override Update Reset">
<kw name="Helm Override OpenStack" library="Utils">
<doc>Helm override for OpenStack nova chart and reset.</doc>
<arguments>
<arg>nova</arg>
<arg>openstack</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>system helm-override-update</arg>
</arguments>
<assign>
<var>${kubectl_cmd}</var>
</assign>
<msg timestamp="20190401 15:27:12.950" level="INFO">${kubectl_cmd} = system helm-override-update</msg>
<status status="PASS" endtime="20190401 15:27:12.950" starttime="20190401 15:27:12.950"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>${kubectl_cmd}</arg>
<arg>--set conf.nova.DEFAULT.foo=bar</arg>
<arg>${char_name}</arg>
<arg>${namespace}</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:12.950" level="INFO">${cmd} = system helm-override-update --set conf.nova.DEFAULT.foo=bar nova openstack</msg>
<status status="PASS" endtime="20190401 15:27:12.950" starttime="20190401 15:27:12.950"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:12.951" starttime="20190401 15:27:12.951"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190401 15:27:12.952" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190401 15:27:12.952" starttime="20190401 15:27:12.951"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:12.952" starttime="20190401 15:27:12.952"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:12.952" starttime="20190401 15:27:12.952"></status>
</kw>
<msg timestamp="20190401 15:27:12.953" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190401 15:27:12.953" starttime="20190401 15:27:12.951"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190401 15:27:12.953" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:12.953" starttime="20190401 15:27:12.953"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190401 15:27:12.955" level="INFO">system helm-override-update --set conf .nova.DEFAULT.foo=bar nova openstack</msg>
<status status="PASS" endtime="20190401 15:27:12.955" starttime="20190401 15:27:12.953"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:27:14.091" level="INFO">+----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_overrides | conf:          |
|                |   nova:        |
|                |     DEFAULT:   |
|                |       foo: bar |
|                |                |
+----------------+----------------+
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190401 15:27:14.091" level="INFO">${output} = +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_override...</msg>
<status status="PASS" endtime="20190401 15:27:14.091" starttime="20190401 15:27:12.955"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190401 15:27:14.092" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:14.092" starttime="20190401 15:27:14.092"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190401 15:27:14.092" level="INFO">${clean_out} = +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_override...</msg>
<status status="PASS" endtime="20190401 15:27:14.092" starttime="20190401 15:27:14.092"></status>
</kw>
<msg timestamp="20190401 15:27:14.093" level="INFO">${output} = +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_override...</msg>
<status status="PASS" endtime="20190401 15:27:14.093" starttime="20190401 15:27:14.091"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190401 15:27:14.094" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190401 15:27:14.095" starttime="20190401 15:27:14.093"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:14.095" level="INFO">0</msg>
<msg timestamp="20190401 15:27:14.095" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:27:14.095" starttime="20190401 15:27:14.095"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190401 15:27:14.095" level="INFO">0</msg>
<status status="PASS" endtime="20190401 15:27:14.095" starttime="20190401 15:27:14.095"></status>
</kw>
<msg timestamp="20190401 15:27:14.095" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:27:14.096" starttime="20190401 15:27:14.093"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:14.097" starttime="20190401 15:27:14.096"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:14.097" starttime="20190401 15:27:14.096"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:14.097" starttime="20190401 15:27:14.097"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190401 15:27:14.097" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_overrides | conf:          |
|                |   nova:        |
|                |     DEFAULT:   |
|                |       foo: bar |
|                |                |
+----------------+----------------+</msg>
<status status="PASS" endtime="20190401 15:27:14.097" starttime="20190401 15:27:14.097"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:14.097" starttime="20190401 15:27:12.950"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:14.097" starttime="20190401 15:27:12.949"></status>
</kw>
<kw name="System Application Apply" library="Utils">
<doc>Run the system aplication apply</doc>
<arguments>
<arg>stx-openstack</arg>
</arguments>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>system application-apply ${application}</arg>
<arg>True</arg>
</arguments>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:14.098" starttime="20190401 15:27:14.098"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190401 15:27:14.099" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190401 15:27:14.099" starttime="20190401 15:27:14.099"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:14.100" starttime="20190401 15:27:14.099"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:14.100" starttime="20190401 15:27:14.100"></status>
</kw>
<msg timestamp="20190401 15:27:14.100" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190401 15:27:14.100" starttime="20190401 15:27:14.099"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190401 15:27:14.100" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:14.100" starttime="20190401 15:27:14.100"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190401 15:27:14.104" level="INFO">system application-apply stx-openstack [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kk</msg>
<status status="PASS" endtime="20190401 15:27:14.104" starttime="20190401 15:27:14.100"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:27:15.108" level="INFO">Application-apply rejected: application not found.
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190401 15:27:15.108" level="INFO">${output} = Application-apply rejected: application not found.
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:15.108" starttime="20190401 15:27:14.104"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190401 15:27:15.109" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:15.109" starttime="20190401 15:27:15.108"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190401 15:27:15.109" level="INFO">${clean_out} = Application-apply rejected: application not found.
</msg>
<status status="PASS" endtime="20190401 15:27:15.109" starttime="20190401 15:27:15.109"></status>
</kw>
<msg timestamp="20190401 15:27:15.109" level="INFO">${output} = Application-apply rejected: application not found.
</msg>
<status status="PASS" endtime="20190401 15:27:15.109" starttime="20190401 15:27:15.108"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190401 15:27:15.111" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190401 15:27:15.111" starttime="20190401 15:27:15.110"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:15.112" level="INFO">1</msg>
<msg timestamp="20190401 15:27:15.112" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:15.112" starttime="20190401 15:27:15.111"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190401 15:27:15.112" level="INFO">1</msg>
<status status="PASS" endtime="20190401 15:27:15.112" starttime="20190401 15:27:15.112"></status>
</kw>
<msg timestamp="20190401 15:27:15.112" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:15.112" starttime="20190401 15:27:15.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Fail" library="BuiltIn">
<doc>Fails the test with the given message and optionally alters its tags.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<msg timestamp="20190401 15:27:15.113" level="FAIL">Application-apply rejected: application not found.
</msg>
<status status="FAIL" endtime="20190401 15:27:15.113" starttime="20190401 15:27:15.113"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:15.113" starttime="20190401 15:27:15.112"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:15.113" starttime="20190401 15:27:14.098"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:15.113" starttime="20190401 15:27:14.098"></status>
</kw>
<doc>Helm override for OpenStack nova chart and reset.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:27:15.114" critical="yes" starttime="20190401 15:27:12.949">Application-apply rejected: application not found.
</status>
</test>
<test id="s1-s2-s1-t4" name="Kube System Services">
<kw name="Check PODs Health" library="Utils">
<doc>Check all OpenStack pods are healthy</doc>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>kubectl get pods --all-namespaces -o wide</arg>
</arguments>
<assign>
<var>${kubectl_cmd}</var>
</assign>
<msg timestamp="20190401 15:27:15.115" level="INFO">${kubectl_cmd} = kubectl get pods --all-namespaces -o wide</msg>
<status status="PASS" endtime="20190401 15:27:15.115" starttime="20190401 15:27:15.114"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=|</arg>
<arg>${kubectl_cmd}</arg>
<arg>grep -v NAMESPACE</arg>
<arg>grep -v Running</arg>
<arg>grep -v Completed</arg>
</arguments>
<assign>
<var>${cmd}</var>
</assign>
<msg timestamp="20190401 15:27:15.115" level="INFO">${cmd} = kubectl get pods --all-namespaces -o wide|grep -v NAMESPACE|grep -v Running|grep -v Completed</msg>
<status status="PASS" endtime="20190401 15:27:15.115" starttime="20190401 15:27:15.115"></status>
</kw>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:15.116" starttime="20190401 15:27:15.116"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190401 15:27:15.117" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190401 15:27:15.117" starttime="20190401 15:27:15.116"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:15.117" starttime="20190401 15:27:15.117"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:15.117" starttime="20190401 15:27:15.117"></status>
</kw>
<msg timestamp="20190401 15:27:15.118" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190401 15:27:15.118" starttime="20190401 15:27:15.116"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190401 15:27:15.118" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:15.118" starttime="20190401 15:27:15.118"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190401 15:27:15.120" level="INFO">kubectl get pods --all-namespaces -o w ide|grep -v NAMESPACE|grep -v Running|grep -v Completed</msg>
<status status="PASS" endtime="20190401 15:27:15.120" starttime="20190401 15:27:15.118"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:27:15.256" level="INFO">default       testpod                                0/1     ErrImagePull   0          134m   172.16.0.6   controller-0   &lt;none&gt;
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190401 15:27:15.256" level="INFO">${output} = default       testpod                                0/1     ErrImagePull   0          134m   172.16.0.6   controller-0   &lt;none&gt;
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:15.256" starttime="20190401 15:27:15.120"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190401 15:27:15.257" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:15.257" starttime="20190401 15:27:15.256"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190401 15:27:15.257" level="INFO">${clean_out} = default       testpod                                0/1     ErrImagePull   0          134m   172.16.0.6   controller-0   &lt;none&gt;
</msg>
<status status="PASS" endtime="20190401 15:27:15.257" starttime="20190401 15:27:15.257"></status>
</kw>
<msg timestamp="20190401 15:27:15.257" level="INFO">${output} = default       testpod                                0/1     ErrImagePull   0          134m   172.16.0.6   controller-0   &lt;none&gt;
</msg>
<status status="PASS" endtime="20190401 15:27:15.257" starttime="20190401 15:27:15.256"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190401 15:27:15.259" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190401 15:27:15.259" starttime="20190401 15:27:15.258"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:15.260" level="INFO">0</msg>
<msg timestamp="20190401 15:27:15.260" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:27:15.260" starttime="20190401 15:27:15.259"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190401 15:27:15.260" level="INFO">0</msg>
<status status="PASS" endtime="20190401 15:27:15.260" starttime="20190401 15:27:15.260"></status>
</kw>
<msg timestamp="20190401 15:27:15.260" level="INFO">${rc} = 0</msg>
<status status="PASS" endtime="20190401 15:27:15.260" starttime="20190401 15:27:15.257"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:15.261" starttime="20190401 15:27:15.261"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:15.261" starttime="20190401 15:27:15.260"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:15.261" starttime="20190401 15:27:15.261"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190401 15:27:15.261" level="INFO">Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: default       testpod                                0/1     ErrImagePull   0          134m   172.16.0.6   controller-0   &lt;none&gt;</msg>
<status status="PASS" endtime="20190401 15:27:15.262" starttime="20190401 15:27:15.261"></status>
</kw>
<msg timestamp="20190401 15:27:15.262" level="INFO">&amp;{result} = { stdout=default       testpod                                0/1     ErrImagePull   0          134m   172.16.0.6   controller-0   &lt;none&gt; | stderr= | rc=0 }</msg>
<status status="PASS" endtime="20190401 15:27:15.262" starttime="20190401 15:27:15.115"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190401 15:27:15.262" level="INFO">${value} = default       testpod                                0/1     ErrImagePull   0          134m   172.16.0.6   controller-0   &lt;none&gt;</msg>
<status status="PASS" endtime="20190401 15:27:15.262" starttime="20190401 15:27:15.262"></status>
</kw>
<kw name="Should Be Empty" library="BuiltIn">
<doc>Verifies that the given item is empty.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<msg timestamp="20190401 15:27:15.262" level="INFO">Length is 128</msg>
<msg timestamp="20190401 15:27:15.263" level="FAIL">'default       testpod                                0/1     ErrImagePull   0          134m   172.16.0.6   controller-0   &lt;none&gt;' should be empty.</msg>
<status status="FAIL" endtime="20190401 15:27:15.263" starttime="20190401 15:27:15.262"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:15.263" starttime="20190401 15:27:15.114"></status>
</kw>
<doc>Check pods status and kube-system services are
displayed.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:27:15.263" critical="yes" starttime="20190401 15:27:15.114">'default       testpod                                0/1     ErrImagePull   0          134m   172.16.0.6   controller-0   &lt;none&gt;' should be empty.</status>
</test>
<test id="s1-s2-s1-t5" name="Create Check Delete POD">
<kw name="Put File" library="SSHLibrary">
<doc>Uploads file(s) from the local machine to the remote machine.</doc>
<arguments>
<arg>%{PYTHONPATH}/Utils/${pod_yml}</arg>
<arg>${host_image_path}/${pod_yml}</arg>
</arguments>
<msg timestamp="20190401 15:27:15.271" level="INFO">[chan 1] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190401 15:27:15.277" level="INFO">[chan 2] Opened sftp connection (server version 3)</msg>
<msg timestamp="20190401 15:27:15.280" level="INFO">'/home/mgperezi/duplex/stx-test-suite/Utils/testpod.yaml' -&gt; '/home/wrsroot//testpod.yaml'</msg>
<status status="PASS" endtime="20190401 15:27:15.280" starttime="20190401 15:27:15.263"></status>
</kw>
<kw name="Create POD" library="Utils">
<doc>Create a POD.</doc>
<arguments>
<arg>${pod_yml}</arg>
<arg>${pod_name}</arg>
</arguments>
<kw name="Run Command" library="Utils">
<doc>Execute a command on controller over ssh connection
keeping environment visible to the subsequent keywords.Also allows
the keyword to fail if there is an error, by default this keyword
will not fail and will return the stderr.</doc>
<arguments>
<arg>kubectl create -f ${pod_yml}</arg>
</arguments>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Set Client Configuration" library="SSHLibrary">
<doc>Update the `configuration` of the current connection.</doc>
<arguments>
<arg>timeout=${timeout}</arg>
<arg>prompt=$</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:15.282" starttime="20190401 15:27:15.281"></status>
</kw>
<kw name="Create Empy Result Dictionary" library="Utils">
<doc>Creates an Empty Dictionary with the required structure
for a response of executed command.</doc>
<assign>
<var>&amp;{result}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>stdout=${EMPTY}</arg>
</arguments>
<assign>
<var>&amp;{result_dict}</var>
</assign>
<msg timestamp="20190401 15:27:15.283" level="INFO">&amp;{result_dict} = { stdout= }</msg>
<status status="PASS" endtime="20190401 15:27:15.283" starttime="20190401 15:27:15.282"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>stderr=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:15.283" starttime="20190401 15:27:15.283"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result_dict}</arg>
<arg>rc=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:15.283" starttime="20190401 15:27:15.283"></status>
</kw>
<msg timestamp="20190401 15:27:15.283" level="INFO">&amp;{result} = { stdout= | stderr= | rc= }</msg>
<status status="PASS" endtime="20190401 15:27:15.283" starttime="20190401 15:27:15.282"></status>
</kw>
<kw name="Read" library="SSHLibrary">
<doc>Consumes and returns everything available on the server output.</doc>
<msg timestamp="20190401 15:27:15.284" level="INFO">[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:15.284" starttime="20190401 15:27:15.284"></status>
</kw>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>${cmd}</arg>
</arguments>
<msg timestamp="20190401 15:27:15.290" level="INFO">kubectl create -f testpod.yaml</msg>
<status status="PASS" endtime="20190401 15:27:15.290" starttime="20190401 15:27:15.284"></status>
</kw>
<kw name="Read Until Prompt" library="SSHLibrary">
<doc>Consumes and returns the server output until the prompt is found.</doc>
<assign>
<var>${output}</var>
</assign>
<msg timestamp="20190401 15:27:15.467" level="INFO">Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<msg timestamp="20190401 15:27:15.467" level="INFO">${output} = Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
[wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:15.467" starttime="20190401 15:27:15.290"></status>
</kw>
<kw name="Remove Prompt Line" library="Utils">
<doc>On the response of the command execution is also
retrieved the prompt line (because the use of Read until prompt)
this keyword delete that last line and returns a clean output.</doc>
<arguments>
<arg>${output}</arg>
</arguments>
<assign>
<var>${output}</var>
</assign>
<kw name="Get Line" library="String">
<doc>Returns the specified line from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>-1</arg>
</arguments>
<assign>
<var>${line_to_remove}</var>
</assign>
<msg timestamp="20190401 15:27:15.468" level="INFO">${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$</msg>
<status status="PASS" endtime="20190401 15:27:15.468" starttime="20190401 15:27:15.467"></status>
</kw>
<kw name="Remove String" library="String">
<doc>Removes all ``removables`` from the given ``string``.</doc>
<arguments>
<arg>${output}</arg>
<arg>${line_to_remove}</arg>
</arguments>
<assign>
<var>${clean_out}</var>
</assign>
<msg timestamp="20190401 15:27:15.468" level="INFO">${clean_out} = Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
</msg>
<status status="PASS" endtime="20190401 15:27:15.468" starttime="20190401 15:27:15.468"></status>
</kw>
<msg timestamp="20190401 15:27:15.468" level="INFO">${output} = Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
</msg>
<status status="PASS" endtime="20190401 15:27:15.468" starttime="20190401 15:27:15.467"></status>
</kw>
<kw name="Get Return Code" library="Utils">
<doc>Wrapper to return the code number of last executed
command</doc>
<assign>
<var>${rc}</var>
</assign>
<kw name="Write" library="SSHLibrary">
<doc>Writes the given ``text`` on the remote machine and appends a newline.</doc>
<arguments>
<arg>echo $?</arg>
</arguments>
<msg timestamp="20190401 15:27:15.470" level="INFO">echo $?</msg>
<status status="PASS" endtime="20190401 15:27:15.470" starttime="20190401 15:27:15.469"></status>
</kw>
<kw name="Read Until Regexp" library="SSHLibrary">
<doc>Consumes and returns the server output until a match to ``regexp`` is found.</doc>
<arguments>
<arg>[0-9]+</arg>
</arguments>
<assign>
<var>${rc}</var>
</assign>
<msg timestamp="20190401 15:27:15.470" level="INFO">1</msg>
<msg timestamp="20190401 15:27:15.471" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:15.471" starttime="20190401 15:27:15.470"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rc}</arg>
</arguments>
<msg timestamp="20190401 15:27:15.471" level="INFO">1</msg>
<status status="PASS" endtime="20190401 15:27:15.471" starttime="20190401 15:27:15.471"></status>
</kw>
<msg timestamp="20190401 15:27:15.471" level="INFO">${rc} = 1</msg>
<status status="PASS" endtime="20190401 15:27:15.471" starttime="20190401 15:27:15.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${rc} == 0</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stdout=${output.strip()}</arg>
<arg>ELSE IF</arg>
<arg>${fail_if_error} == True</arg>
<arg>FAIL</arg>
<arg>${output}</arg>
<arg>ELSE</arg>
<arg>Set To Dictionary</arg>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stderr=${output}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:15.472" starttime="20190401 15:27:15.472"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:15.472" starttime="20190401 15:27:15.471"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${result}</arg>
<arg>rc=${rc}</arg>
</arguments>
<status status="PASS" endtime="20190401 15:27:15.472" starttime="20190401 15:27:15.472"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20190401 15:27:15.472" level="INFO">Dictionary size is 3 and it contains following items:
rc: 1
stderr: Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists

stdout: </msg>
<status status="PASS" endtime="20190401 15:27:15.472" starttime="20190401 15:27:15.472"></status>
</kw>
<msg timestamp="20190401 15:27:15.473" level="INFO">&amp;{result} = { stdout= | stderr=Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
 | rc=1 }</msg>
<status status="PASS" endtime="20190401 15:27:15.473" starttime="20190401 15:27:15.281"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${result}</arg>
<arg>stdout</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190401 15:27:15.473" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190401 15:27:15.473" starttime="20190401 15:27:15.473"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${value}</arg>
<arg>pod/${pod_name} created</arg>
</arguments>
<msg timestamp="20190401 15:27:15.474" level="FAIL"> != pod/testpod created</msg>
<status status="FAIL" endtime="20190401 15:27:15.474" starttime="20190401 15:27:15.473"></status>
</kw>
<status status="FAIL" endtime="20190401 15:27:15.474" starttime="20190401 15:27:15.281"></status>
</kw>
<doc>Launch a POD via kubectl.</doc>
<tags>
<tag>Duplex</tag>
<tag>MN-External</tag>
<tag>MN-Local</tag>
<tag>Simplex</tag>
</tags>
<status status="FAIL" endtime="20190401 15:27:15.474" critical="yes" starttime="20190401 15:27:15.263"> != pod/testpod created</status>
</test>
<kw type="teardown" name="Run Keywords" library="BuiltIn">
<doc>Executes all the given keywords in a sequence.</doc>
<arguments>
<arg>Utils.Stx Suite TearDown</arg>
</arguments>
<kw name="Stx Suite TearDown" library="Utils">
<doc>Wrapper to clean up activities on the suite.</doc>
<kw name="Close All Connections" library="SSHLibrary">
<doc>Closes all open connections.</doc>
<status status="PASS" endtime="20190401 15:27:15.476" starttime="20190401 15:27:15.475"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:15.476" starttime="20190401 15:27:15.475"></status>
</kw>
<status status="PASS" endtime="20190401 15:27:15.476" starttime="20190401 15:27:15.474"></status>
</kw>
<doc>Check the health of PODs services; update and apply the
helm chart via system application-apply.
Author(s):
- Hector Ivan Ramos Escobar &lt;ramos.escobarx.hector.ivan@intel.com&gt;
- Juan Carlos Alonso &lt;juan.carlos.alonso@intel.com&gt;</doc>
<status status="FAIL" endtime="20190401 15:27:15.476" starttime="20190401 15:27:09.440"></status>
</suite>
<status status="FAIL" endtime="20190401 15:27:15.478" starttime="20190401 15:27:09.439"></status>
</suite>
<metadata>
<item name="ISO">bootimage.iso</item>
<item name="System">duplex</item>
</metadata>
<status status="FAIL" endtime="20190401 15:27:15.481" starttime="20190401 15:26:04.861"></status>
</suite>
<statistics>
<total>
<stat fail="57" pass="0">Critical Tests</stat>
<stat fail="57" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="57" pass="0">Duplex</stat>
</tag>
<suite>
<stat fail="57" id="s1" name="Sanity-Test" pass="0">Sanity-Test</stat>
<stat fail="52" id="s1-s1" name="Sanity-OpenStack" pass="0">Sanity-Test.Sanity-OpenStack</stat>
<stat fail="14" id="s1-s1-s1" name="01-Instance-From-Image" pass="0">Sanity-Test.Sanity-OpenStack.01-Instance-From-Image</stat>
<stat fail="15" id="s1-s1-s2" name="02-Instance-From-Volume" pass="0">Sanity-Test.Sanity-OpenStack.02-Instance-From-Volume</stat>
<stat fail="16" id="s1-s1-s3" name="03-Instance-From-Snapshot" pass="0">Sanity-Test.Sanity-OpenStack.03-Instance-From-Snapshot</stat>
<stat fail="4" id="s1-s1-s4" name="04-Instance-From-Heat-Template" pass="0">Sanity-Test.Sanity-OpenStack.04-Instance-From-Heat-Template</stat>
<stat fail="3" id="s1-s1-s5" name="05-Measurements-For-Metric" pass="0">Sanity-Test.Sanity-OpenStack.05-Measurements-For-Metric</stat>
<stat fail="5" id="s1-s2" name="Sanity-Platform" pass="0">Sanity-Test.Sanity-Platform</stat>
<stat fail="5" id="s1-s2-s1" name="02-OpenStack-Pod-Healthy" pass="0">Sanity-Test.Sanity-Platform.02-OpenStack-Pod-Healthy</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
