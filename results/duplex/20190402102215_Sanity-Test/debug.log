==============================================================================
20190402 10:22:15.322 - INFO - + START SUITE: Sanity-Test [ ]
==============================================================================
20190402 10:22:15.323 - INFO - +- START SUITE: Sanity-Test.Sanity-OpenStack [ ]
==============================================================================
20190402 10:22:15.442 - INFO - +-- START SUITE: Sanity-Test.Sanity-OpenStack.01-Instance-From-Image [ ]
==============================================================================
20190402 10:22:15.442 - INFO - +--- START SETUP: Utils.Stx Suite Setup [ ]
20190402 10:22:15.443 - INFO - +---- START KW: Utils.Open Master Controller Connection [ ]
20190402 10:22:15.443 - INFO - +----- START KW: Utils.Connect to Controller Node [ ${CONFIG.credentials.STX_DEPLOY_USER_NAME} | ${CONFIG.credentials.STX_DEPLOY_USER_PSWD} | ${CONFIG.general.IP_UNIT_0_ADDRESS} ]
20190402 10:22:15.443 - INFO - +------ START KW: SSHLibrary.Open Connection [ ${ip_address} prompt=${prompt} | timeout=${timeout} ]
20190402 10:22:15.444 - INFO - ${controller_connection} = 1
20190402 10:22:15.444 - INFO - +------ END KW: SSHLibrary.Open Connection (1)
20190402 10:22:15.444 - INFO - +------ START KW: Utils.Flexible_SSH_Login [ ${user} | ${password} ]
20190402 10:22:15.444 - INFO - +------- START KW: BuiltIn.Get Length [ ${password} ]
20190402 10:22:15.444 - INFO - Length is 10
20190402 10:22:15.444 - INFO - ${pwd_length} = 10
20190402 10:22:15.444 - INFO - +------- END KW: BuiltIn.Get Length (0)
20190402 10:22:15.445 - INFO - +------- START KW: BuiltIn.Run Keyword And Return If [ ${pwd_length} > 0 | SSHLibrary.Login | ${user} | ${password} | delay=${delay} ]
20190402 10:22:15.445 - INFO - +-------- START KW: SSHLibrary.Login [ ${user} | ${password} | delay=${delay} ]
20190402 10:22:15.445 - INFO - Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.
20190402 10:22:16.614 - INFO - Read output: Last login: Tue Apr  2 12:46:57 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$
20190402 10:22:16.614 - INFO - /home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/paramiko/kex_ecdh_nist.py:39: CryptographyDeprecationWarning: encode_point has been deprecated on EllipticCurvePublicNumbers and will be removed in a future version. Please use EllipticCurvePublicKey.public_bytes to obtain both compressed and uncompressed point encoding.
  m.add_string(self.Q_C.public_numbers().encode_point())
/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/paramiko/kex_ecdh_nist.py:96: CryptographyDeprecationWarning: Support for unsafe construction of public numbers from encoded data will be removed in a future version. Please use EllipticCurvePublicKey.from_encoded_point
  self.curve, Q_S_bytes
/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/paramiko/kex_ecdh_nist.py:111: CryptographyDeprecationWarning: encode_point has been deprecated on EllipticCurvePublicNumbers and will be removed in a future version. Please use EllipticCurvePublicKey.public_bytes to obtain both compressed and uncompressed point encoding.
  hm.add_string(self.Q_C.public_numbers().encode_point())
20190402 10:22:16.615 - INFO - +-------- END KW: SSHLibrary.Login (1170)
20190402 10:22:16.615 - INFO - Returning from the enclosing user keyword.
20190402 10:22:16.616 - INFO - +------- END KW: BuiltIn.Run Keyword And Return If (1171)
20190402 10:22:16.616 - INFO - +------ END KW: Utils.Flexible_SSH_Login (1172)
20190402 10:22:16.617 - INFO - ${master_controller_connection} = 1
20190402 10:22:16.617 - INFO - +----- END KW: Utils.Connect to Controller Node (1174)
20190402 10:22:16.618 - INFO - +----- START KW: BuiltIn.Set Suite Variable [ ${master_controller_connection} ]
20190402 10:22:16.619 - INFO - ${master_controller_connection} = 1
20190402 10:22:16.619 - INFO - +----- END KW: BuiltIn.Set Suite Variable (1)
20190402 10:22:16.619 - INFO - +----- START KW: BuiltIn.Log [ ${master_controller_connection} ]
20190402 10:22:16.619 - INFO - 1
20190402 10:22:16.619 - INFO - +----- END KW: BuiltIn.Log (0)
20190402 10:22:16.619 - INFO - +---- END KW: Utils.Open Master Controller Connection (1176)
20190402 10:22:16.619 - INFO - +---- START KW: Utils.Set Env Vars From Openrc [ ]
20190402 10:22:16.620 - INFO - +----- START KW: Utils.Run Command [ source /etc/platform/openrc | True ]
20190402 10:22:16.620 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:22:16.620 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:22:16.620 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:22:16.620 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:22:16.621 - INFO - &{result_dict} = { stdout= }
20190402 10:22:16.621 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:22:16.621 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:22:16.621 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:22:16.621 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:22:16.622 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 10:22:16.622 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:22:16.622 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (2)
20190402 10:22:16.622 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 10:22:16.622 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 10:22:16.622 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:22:16.627 - INFO - source /etc/platform/openrc
20190402 10:22:16.627 - INFO - +------ END KW: SSHLibrary.Write (5)
20190402 10:22:16.627 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:22:17.353 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:22:17.353 - INFO - ${output} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:22:17.353 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (726)
20190402 10:22:17.353 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:22:17.353 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:22:17.354 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:22:17.354 - INFO - +------- END KW: String.Get Line (1)
20190402 10:22:17.354 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:22:17.354 - INFO - ${clean_out} =
20190402 10:22:17.354 - INFO - +------- END KW: String.Remove String (0)
20190402 10:22:17.354 - INFO - ${output} =
20190402 10:22:17.354 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 10:22:17.354 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 10:22:17.354 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:22:17.356 - INFO - echo $?
20190402 10:22:17.356 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 10:22:17.356 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:22:17.357 - INFO - 0
20190402 10:22:17.357 - INFO - ${rc} = 0
20190402 10:22:17.357 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 10:22:17.357 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:22:17.357 - INFO - 0
20190402 10:22:17.357 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 10:22:17.357 - INFO - ${rc} = 0
20190402 10:22:17.357 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 10:22:17.358 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:22:17.358 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:22:17.358 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:22:17.358 - INFO - +------ END KW: BuiltIn.Run Keyword If (0)
20190402 10:22:17.358 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:22:17.359 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 10:22:17.359 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:22:17.359 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout:
20190402 10:22:17.359 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 10:22:17.359 - INFO - +----- END KW: Utils.Run Command (739)
20190402 10:22:17.359 - INFO - +---- END KW: Utils.Set Env Vars From Openrc (740)
20190402 10:22:17.359 - INFO - +--- END SETUP: Utils.Stx Suite Setup (1917)
------------------------------------------------------------------------------
20190402 10:22:17.359 - INFO - +--- START TEST: Create Flavors for Instances [ ]
------------------------------------------------------------------------------
20190402 10:22:17.360 - INFO - +---- START KW: BuiltIn.Catenate [ ${flavor_property_1} | ${flavor_property_2} ]
20190402 10:22:17.360 - INFO - ${properties} = --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared'
20190402 10:22:17.360 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:22:17.360 - INFO - +---- START KW: OpenStack.Create Flavor [ ${cirros_flavor_ram} | ${cirros_flavor_vcpus} | ${cirros_flavor_disk} | ${cirros_flavor_name} ]
20190402 10:22:17.361 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 10:22:17.361 - INFO - ${openstack_cmd} = openstack flavor create
20190402 10:22:17.361 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:22:17.361 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 10:22:17.361 - INFO - ${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small
20190402 10:22:17.361 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 10:22:17.361 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:22:17.362 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:17.362 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:17.362 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:22:17.362 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:17.362 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.
20190402 10:22:19.196 - INFO - Command exited with return code 0.
20190402 10:22:19.197 - INFO - ${stdout} = +----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+------------------------------...
20190402 10:22:19.197 - INFO - ${stderr} =
20190402 10:22:19.197 - INFO - ${rc} = 0
20190402 10:22:19.198 - INFO - +------ END KW: SSHLibrary.Execute Command (1835)
20190402 10:22:19.198 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:19.200 - INFO - ${res} = {u'stdout': u'+----------------------------+--------------------------------------+\n| Field                      | Value                                |\n+----------------------------+--------------...
20190402 10:22:19.200 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:22:19.200 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:19.201 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:22:19.202 - INFO - +----- END KW: OpenStack.Run OS Command (1841)
20190402 10:22:19.202 - INFO - +---- END KW: OpenStack.Create Flavor (1842)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:22:19.202 - INFO - +---- START KW: OpenStack.Create Flavor [ ${centos_flavor_ram} | ${centos_flavor_vcpus} | ${centos_flavor_disk} | ${properties} | ${centos_flavor_name} ]
20190402 10:22:19.202 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 10:22:19.203 - INFO - ${openstack_cmd} = openstack flavor create
20190402 10:22:19.203 - INFO - +----- END KW: BuiltIn.Set Variable (1)
20190402 10:22:19.203 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 10:22:19.203 - INFO - ${cmd} = openstack flavor create --ram 4096 --disk 40 --vcpus 2 --public --id auto f1.medium --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared'
20190402 10:22:19.203 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 10:22:19.203 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:22:19.204 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:19.204 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:19.204 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:22:19.204 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:19.204 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 4096 --disk 40 --vcpus 2 --public --id auto f1.medium --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared''.
20190402 10:22:20.638 - INFO - Command exited with return code 0.
20190402 10:22:20.638 - INFO - ${stdout} = +----------------------------+--------------------------------------------------------+
| Field                      | Value                                                  |
+-----------------------...
20190402 10:22:20.639 - INFO - ${stderr} =
20190402 10:22:20.639 - INFO - ${rc} = 0
20190402 10:22:20.639 - INFO - +------ END KW: SSHLibrary.Execute Command (1435)
20190402 10:22:20.640 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:20.641 - INFO - ${res} = {u'stdout': u"+----------------------------+--------------------------------------------------------+\n| Field                      | Value                                                  |\n+-------...
20190402 10:22:20.641 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:22:20.642 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:20.643 - INFO - +------ END KW: BuiltIn.Run Keyword If (0)
20190402 10:22:20.643 - INFO - +----- END KW: OpenStack.Run OS Command (1440)
20190402 10:22:20.643 - INFO - +---- END KW: OpenStack.Create Flavor (1441)
------------------------------------------------------------------------------
20190402 10:22:20.643 - INFO - +--- END TEST: Create Flavors for Instances (3284)
------------------------------------------------------------------------------
20190402 10:22:20.644 - INFO - +--- START TEST: Create Images for Instances [ ]
------------------------------------------------------------------------------
20190402 10:22:20.644 - INFO - +---- START KW: SSHLibrary.Put File [ %{PYTHONPATH}/${cirros_image} | ${host_image_path}/${cirros_image} ]
20190402 10:22:20.653 - INFO - [chan 3] Opened sftp connection (server version 3)
20190402 10:22:20.660 - INFO - [chan 4] Opened sftp connection (server version 3)
20190402 10:22:20.662 - FAIL - There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.
20190402 10:22:20.662 - DEBUG - Traceback (most recent call last):
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1559, in put_file
    destination, mode, newline, scp)
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1619, in _run_command
    raise RuntimeError(e)
20190402 10:22:20.662 - INFO - +---- END KW: SSHLibrary.Put File (18)
------------------------------------------------------------------------------
20190402 10:22:20.663 - INFO - +--- END TEST: Create Images for Instances (19)
------------------------------------------------------------------------------
20190402 10:22:20.663 - INFO - +--- START TEST: Create Networks for Instances [ ]
------------------------------------------------------------------------------
20190402 10:22:20.663 - INFO - +---- START KW: OpenStack.Create Network [ ${network_name} ]
20190402 10:22:20.664 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack network create ]
20190402 10:22:20.664 - INFO - ${openstack_cmd} = openstack network create
20190402 10:22:20.664 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:22:20.664 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${network_name} | ${additional_args} ]
20190402 10:22:20.665 - INFO - ${cmd} = openstack network create network-1
20190402 10:22:20.665 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 10:22:20.665 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:22:20.665 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:20.666 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:20.666 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:22:20.666 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:20.666 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network create network-1 '.
20190402 10:22:22.099 - INFO - Command exited with return code 0.
20190402 10:22:22.100 - INFO - ${stdout} = +---------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:22:22.100 - INFO - ${stderr} =
20190402 10:22:22.100 - INFO - ${rc} = 0
20190402 10:22:22.101 - INFO - +------ END KW: SSHLibrary.Execute Command (1434)
20190402 10:22:22.101 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:22.103 - INFO - ${res} = {u'stdout': u"+---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:22:22.103 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:22:22.103 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:22.104 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:22:22.105 - INFO - +----- END KW: OpenStack.Run OS Command (1440)
20190402 10:22:22.105 - INFO - +---- END KW: OpenStack.Create Network (1442)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:22:22.105 - INFO - +---- START KW: OpenStack.Create Subnet [ ${network_name} | ${subnet_range} | ${subnet_extras} ]
20190402 10:22:22.105 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack subnet create ]
20190402 10:22:22.105 - INFO - ${openstack_cmd} = openstack subnet create
20190402 10:22:22.106 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:22:22.106 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --network ${network_name} | --subnet-range ${range_ip} ${additional_args} ]
20190402 10:22:22.106 - INFO - ${cmd} = openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1
20190402 10:22:22.106 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 10:22:22.106 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:22:22.107 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:22.107 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:22.107 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:22:22.107 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:22.107 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1'.
20190402 10:22:23.791 - INFO - Command exited with return code 0.
20190402 10:22:23.792 - INFO - ${stdout} = +-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:22:23.792 - INFO - ${stderr} =
20190402 10:22:23.792 - INFO - ${rc} = 0
20190402 10:22:23.792 - INFO - +------ END KW: SSHLibrary.Execute Command (1685)
20190402 10:22:23.793 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:23.794 - INFO - ${res} = {u'stdout': u"+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:22:23.795 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:22:23.795 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:23.796 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:22:23.796 - INFO - +----- END KW: OpenStack.Run OS Command (1690)
20190402 10:22:23.796 - INFO - +---- END KW: OpenStack.Create Subnet (1691)
------------------------------------------------------------------------------
20190402 10:22:23.796 - INFO - +--- END TEST: Create Networks for Instances (3133)
------------------------------------------------------------------------------
20190402 10:22:23.797 - INFO - +--- START TEST: Launch Instances [ ]
------------------------------------------------------------------------------
20190402 10:22:23.797 - INFO - +---- START KW: OpenStack.Create Instance [ ${network_name} | ${cirros_instance_name} | ${cirros_image_name} | ${cirros_flavor_name} ]
20190402 10:22:23.797 - INFO - +----- START KW: OpenStack.Get Net Id [ ${net_name} ]
20190402 10:22:23.797 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 10:22:23.798 - INFO - ${openstack_cmd} = openstack network list
20190402 10:22:23.798 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:22:23.798 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep "${network_name}" | awk '{print$2}' ]
20190402 10:22:23.798 - INFO - ${cmd} = openstack network list|grep "network-1"|awk '{print$2}'
20190402 10:22:23.798 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:22:23.798 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:22:23.799 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:23.799 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:23.799 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:22:23.799 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:23.799 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|grep "network-1"|awk '{print$2}''.
20190402 10:22:25.182 - INFO - Command exited with return code 0.
20190402 10:22:25.183 - INFO - ${stdout} = 89c68a7f-c4c0-4963-bc7f-11d2151ded3d
20190402 10:22:25.183 - INFO - ${stderr} =
20190402 10:22:25.183 - INFO - ${rc} = 0
20190402 10:22:25.183 - INFO - +------- END KW: SSHLibrary.Execute Command (1384)
20190402 10:22:25.184 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:25.185 - INFO - ${res} = {u'stdout': u'89c68a7f-c4c0-4963-bc7f-11d2151ded3d', u'stderr': u'', u'rc': 0}
20190402 10:22:25.185 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:22:25.186 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:25.187 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:22:25.187 - INFO - &{result} = { stdout=89c68a7f-c4c0-4963-bc7f-11d2151ded3d | stderr= | rc=0 }
20190402 10:22:25.188 - INFO - +------ END KW: OpenStack.Run OS Command (1390)
20190402 10:22:25.188 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:22:25.188 - INFO - ${output} = 89c68a7f-c4c0-4963-bc7f-11d2151ded3d
20190402 10:22:25.188 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 10:22:25.188 - INFO - +------ START KW: String.Split String [ ${output} | ${EMPTY} ]
20190402 10:22:25.188 - INFO - ${splitted_output} = [u'89c68a7f-c4c0-4963-bc7f-11d2151ded3d']
20190402 10:22:25.188 - INFO - +------ END KW: String.Split String (0)
20190402 10:22:25.188 - INFO - +------ START KW: Collections.Get From List [ ${splitted_output} | 0 ]
20190402 10:22:25.189 - INFO - ${net_id} = 89c68a7f-c4c0-4963-bc7f-11d2151ded3d
20190402 10:22:25.189 - INFO - +------ END KW: Collections.Get From List (1)
20190402 10:22:25.189 - INFO - ${net_id} = 89c68a7f-c4c0-4963-bc7f-11d2151ded3d
20190402 10:22:25.189 - INFO - +----- END KW: OpenStack.Get Net Id (1392)
20190402 10:22:25.189 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack server create ]
20190402 10:22:25.189 - INFO - ${openstack_cmd} = openstack server create
20190402 10:22:25.189 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:22:25.189 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --image ${image} | --flavor ${flavor} | --nic net-id=${net_id} | ${vm_name} ]
20190402 10:22:25.190 - INFO - ${cmd} = openstack server create --image cirros --flavor f1.small --nic net-id=89c68a7f-c4c0-4963-bc7f-11d2151ded3d vm-cirros-1
20190402 10:22:25.190 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 10:22:25.190 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 10:22:25.190 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:25.190 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:25.190 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:22:25.190 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:25.191 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server create --image cirros --flavor f1.small --nic net-id=89c68a7f-c4c0-4963-bc7f-11d2151ded3d vm-cirros-1'.
20190402 10:22:26.674 - INFO - Command exited with return code 1.
20190402 10:22:26.675 - INFO - ${stdout} =
20190402 10:22:26.675 - INFO - ${stderr} = Could not find resource cirros
20190402 10:22:26.675 - INFO - ${rc} = 1
20190402 10:22:26.676 - INFO - +------ END KW: SSHLibrary.Execute Command (1485)
20190402 10:22:26.676 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:26.678 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Could not find resource cirros', u'rc': 1}
20190402 10:22:26.679 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:22:26.679 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:26.680 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:22:26.680 - FAIL - Could not find resource cirros
20190402 10:22:26.680 - DEBUG - Traceback (most recent call last):
  None
20190402 10:22:26.680 - INFO - +------- END KW: BuiltIn.Fail (0)
20190402 10:22:26.680 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:22:26.680 - INFO - +----- END KW: OpenStack.Run OS Command (1490)
20190402 10:22:26.680 - INFO - +---- END KW: OpenStack.Create Instance (2883)
------------------------------------------------------------------------------
20190402 10:22:26.681 - INFO - +--- END TEST: Launch Instances (2885)
------------------------------------------------------------------------------
20190402 10:22:26.681 - INFO - +--- START TEST: Suspend Resume Instances [ ]
------------------------------------------------------------------------------
20190402 10:22:26.681 - INFO - +---- START KW: OpenStack.Suspend Instance [ ${cirros_instance_name} ]
20190402 10:22:26.682 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server suspend ${vm_name} | True | 30 sec ]
20190402 10:22:26.682 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:26.682 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:26.682 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:22:26.682 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:26.683 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server suspend vm-cirros-1'.
20190402 10:22:28.115 - INFO - Command exited with return code 1.
20190402 10:22:28.115 - INFO - ${stdout} =
20190402 10:22:28.116 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:28.116 - INFO - ${rc} = 1
20190402 10:22:28.116 - INFO - +------ END KW: SSHLibrary.Execute Command (1434)
20190402 10:22:28.116 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:28.117 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:22:28.117 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:22:28.117 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:28.117 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:22:28.118 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:28.118 - DEBUG - Traceback (most recent call last):
  None
20190402 10:22:28.118 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:22:28.118 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:22:28.118 - INFO - +----- END KW: OpenStack.Run OS Command (1436)
20190402 10:22:28.118 - INFO - +---- END KW: OpenStack.Suspend Instance (1437)
------------------------------------------------------------------------------
20190402 10:22:28.119 - INFO - +--- END TEST: Suspend Resume Instances (1437)
------------------------------------------------------------------------------
20190402 10:22:28.119 - INFO - +--- START TEST: Set Error Active Flags Instances [ ]
------------------------------------------------------------------------------
20190402 10:22:28.120 - INFO - +---- START KW: OpenStack.Set Error State Instance [ ${cirros_instance_name} | error ]
20190402 10:22:28.120 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server set --state ${value} ${vm_name} | True | 30 sec ]
20190402 10:22:28.121 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:28.121 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:28.121 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:22:28.121 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:28.122 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server set --state error vm-cirros-1'.
20190402 10:22:29.661 - INFO - Command exited with return code 1.
20190402 10:22:29.662 - INFO - ${stdout} =
20190402 10:22:29.662 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:29.662 - INFO - ${rc} = 1
20190402 10:22:29.663 - INFO - +------ END KW: SSHLibrary.Execute Command (1541)
20190402 10:22:29.663 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:29.664 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:22:29.665 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:22:29.665 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:29.666 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:22:29.667 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:29.667 - DEBUG - Traceback (most recent call last):
  None
20190402 10:22:29.667 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:22:29.667 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:22:29.667 - INFO - +----- END KW: OpenStack.Run OS Command (1547)
20190402 10:22:29.667 - INFO - +---- END KW: OpenStack.Set Error State Instance (1547)
------------------------------------------------------------------------------
20190402 10:22:29.668 - INFO - +--- END TEST: Set Error Active Flags Instances (1548)
------------------------------------------------------------------------------
20190402 10:22:29.668 - INFO - +--- START TEST: Pause Unpause Instances [ ]
------------------------------------------------------------------------------
20190402 10:22:29.668 - INFO - +---- START KW: OpenStack.Pause Instance [ ${cirros_instance_name} ]
20190402 10:22:29.668 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server pause ${vm_name} | True | 30 sec ]
20190402 10:22:29.669 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:29.669 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:29.669 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:22:29.669 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:29.669 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server pause vm-cirros-1'.
20190402 10:22:31.083 - INFO - Command exited with return code 1.
20190402 10:22:31.083 - INFO - ${stdout} =
20190402 10:22:31.083 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:31.084 - INFO - ${rc} = 1
20190402 10:22:31.084 - INFO - +------ END KW: SSHLibrary.Execute Command (1415)
20190402 10:22:31.084 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:31.086 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:22:31.086 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:22:31.086 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:31.089 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:22:31.089 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:31.089 - DEBUG - Traceback (most recent call last):
  None
20190402 10:22:31.089 - INFO - +------- END KW: BuiltIn.Fail (2)
20190402 10:22:31.089 - INFO - +------ END KW: BuiltIn.Run Keyword If (3)
20190402 10:22:31.089 - INFO - +----- END KW: OpenStack.Run OS Command (1421)
20190402 10:22:31.089 - INFO - +---- END KW: OpenStack.Pause Instance (1421)
------------------------------------------------------------------------------
20190402 10:22:31.090 - INFO - +--- END TEST: Pause Unpause Instances (1421)
------------------------------------------------------------------------------
20190402 10:22:31.090 - INFO - +--- START TEST: Stop Start Instances [ ]
------------------------------------------------------------------------------
20190402 10:22:31.090 - INFO - +---- START KW: OpenStack.Stop Instance [ ${cirros_instance_name} ]
20190402 10:22:31.091 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server stop ${vm_name} | True | 30 sec ]
20190402 10:22:31.091 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:31.091 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:31.091 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:22:31.091 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:31.092 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server stop vm-cirros-1'.
20190402 10:22:32.474 - INFO - Command exited with return code 1.
20190402 10:22:32.475 - INFO - ${stdout} =
20190402 10:22:32.475 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:32.475 - INFO - ${rc} = 1
20190402 10:22:32.475 - INFO - +------ END KW: SSHLibrary.Execute Command (1384)
20190402 10:22:32.476 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:32.477 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:22:32.477 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:22:32.478 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:32.478 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:22:32.479 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:32.479 - DEBUG - Traceback (most recent call last):
  None
20190402 10:22:32.479 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:22:32.480 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:22:32.480 - INFO - +----- END KW: OpenStack.Run OS Command (1389)
20190402 10:22:32.480 - INFO - +---- END KW: OpenStack.Stop Instance (1390)
------------------------------------------------------------------------------
20190402 10:22:32.480 - INFO - +--- END TEST: Stop Start Instances (1390)
------------------------------------------------------------------------------
20190402 10:22:32.481 - INFO - +--- START TEST: Lock Unlock Instances [ ]
------------------------------------------------------------------------------
20190402 10:22:32.481 - INFO - +---- START KW: OpenStack.Lock Instance [ ${cirros_instance_name} ]
20190402 10:22:32.481 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server lock ${vm_name} | True | 30 sec ]
20190402 10:22:32.482 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:32.482 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:32.482 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:22:32.482 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:32.482 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server lock vm-cirros-1'.
20190402 10:22:33.966 - INFO - Command exited with return code 1.
20190402 10:22:33.967 - INFO - ${stdout} =
20190402 10:22:33.967 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:33.967 - INFO - ${rc} = 1
20190402 10:22:33.968 - INFO - +------ END KW: SSHLibrary.Execute Command (1486)
20190402 10:22:33.968 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:33.970 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:22:33.970 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:22:33.970 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:33.971 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:22:33.972 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:33.972 - DEBUG - Traceback (most recent call last):
  None
20190402 10:22:33.972 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:22:33.972 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:22:33.972 - INFO - +----- END KW: OpenStack.Run OS Command (1491)
20190402 10:22:33.972 - INFO - +---- END KW: OpenStack.Lock Instance (1491)
------------------------------------------------------------------------------
20190402 10:22:33.973 - INFO - +--- END TEST: Lock Unlock Instances (1491)
------------------------------------------------------------------------------
20190402 10:22:33.973 - INFO - +--- START TEST: Reboot Instances [ ]
------------------------------------------------------------------------------
20190402 10:22:33.973 - INFO - +---- START KW: OpenStack.Reboot Instance [ ${cirros_instance_name} ]
20190402 10:22:33.973 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server reboot ${vm_name} | True | 30 sec ]
20190402 10:22:33.974 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:33.974 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:33.974 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:22:33.974 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:33.974 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server reboot vm-cirros-1'.
20190402 10:22:35.364 - INFO - Command exited with return code 1.
20190402 10:22:35.364 - INFO - ${stdout} =
20190402 10:22:35.365 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:35.365 - INFO - ${rc} = 1
20190402 10:22:35.365 - INFO - +------ END KW: SSHLibrary.Execute Command (1391)
20190402 10:22:35.366 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:35.367 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:22:35.367 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:22:35.368 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:35.369 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:22:35.369 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:35.369 - DEBUG - Traceback (most recent call last):
  None
20190402 10:22:35.369 - INFO - +------- END KW: BuiltIn.Fail (0)
20190402 10:22:35.369 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:22:35.369 - INFO - +----- END KW: OpenStack.Run OS Command (1396)
20190402 10:22:35.370 - INFO - +---- END KW: OpenStack.Reboot Instance (1396)
------------------------------------------------------------------------------
20190402 10:22:35.370 - INFO - +--- END TEST: Reboot Instances (1397)
------------------------------------------------------------------------------
20190402 10:22:35.370 - INFO - +--- START TEST: Rebuild Instances [ ]
------------------------------------------------------------------------------
20190402 10:22:35.370 - INFO - +---- START KW: OpenStack.Rebuild Instance [ ${cirros_instance_name} ]
20190402 10:22:35.371 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server rebuild ${vm_name} | True | 30 sec ]
20190402 10:22:35.371 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:35.371 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:35.371 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:22:35.371 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:35.372 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server rebuild vm-cirros-1'.
20190402 10:22:36.855 - INFO - Command exited with return code 1.
20190402 10:22:36.856 - INFO - ${stdout} =
20190402 10:22:36.856 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:36.856 - INFO - ${rc} = 1
20190402 10:22:36.857 - INFO - +------ END KW: SSHLibrary.Execute Command (1485)
20190402 10:22:36.857 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:36.859 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:22:36.859 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:22:36.859 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:36.860 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:22:36.861 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:36.861 - DEBUG - Traceback (most recent call last):
  None
20190402 10:22:36.861 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:22:36.861 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:22:36.861 - INFO - +----- END KW: OpenStack.Run OS Command (1490)
20190402 10:22:36.861 - INFO - +---- END KW: OpenStack.Rebuild Instance (1491)
------------------------------------------------------------------------------
20190402 10:22:36.862 - INFO - +--- END TEST: Rebuild Instances (1491)
------------------------------------------------------------------------------
20190402 10:22:36.862 - INFO - +--- START TEST: Resize Instances [ ]
------------------------------------------------------------------------------
20190402 10:22:36.862 - INFO - +---- START KW: OpenStack.Create Flavor [ ${cirros_flavor_ram} | ${cirros_flavor_vcpus} | ${cirros_flavor_disk} | ${cirros_flavor_name_2} ]
20190402 10:22:36.863 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 10:22:36.863 - INFO - ${openstack_cmd} = openstack flavor create
20190402 10:22:36.863 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:22:36.863 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 10:22:36.863 - INFO - ${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small
20190402 10:22:36.863 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 10:22:36.863 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:22:36.864 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:36.864 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:36.864 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:22:36.864 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:36.864 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small'.
20190402 10:22:38.450 - INFO - Command exited with return code 0.
20190402 10:22:38.451 - INFO - ${stdout} = +----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+------------------------------...
20190402 10:22:38.451 - INFO - ${stderr} =
20190402 10:22:38.451 - INFO - ${rc} = 0
20190402 10:22:38.451 - INFO - +------ END KW: SSHLibrary.Execute Command (1587)
20190402 10:22:38.452 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:38.453 - INFO - ${res} = {u'stdout': u'+----------------------------+--------------------------------------+\n| Field                      | Value                                |\n+----------------------------+--------------...
20190402 10:22:38.453 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:22:38.454 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:38.455 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:22:38.455 - INFO - +----- END KW: OpenStack.Run OS Command (1592)
20190402 10:22:38.456 - INFO - +---- END KW: OpenStack.Create Flavor (1593)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:22:38.456 - INFO - +---- START KW: OpenStack.Resize Instance [ ${cirros_instance_name} | ${cirros_flavor_name_2} ]
20190402 10:22:38.456 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server resize --flavor ${flavor} ${vm_name} | True | 30 sec ]
20190402 10:22:38.456 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:38.457 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:38.457 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:22:38.457 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:38.457 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server resize --flavor f2.small vm-cirros-1'.
20190402 10:22:39.840 - INFO - Command exited with return code 1.
20190402 10:22:39.841 - INFO - ${stdout} =
20190402 10:22:39.841 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:39.841 - INFO - ${rc} = 1
20190402 10:22:39.841 - INFO - +------ END KW: SSHLibrary.Execute Command (1384)
20190402 10:22:39.842 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:39.844 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:22:39.844 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:22:39.844 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:39.845 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:22:39.845 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:39.845 - DEBUG - Traceback (most recent call last):
  None
20190402 10:22:39.845 - INFO - +------- END KW: BuiltIn.Fail (0)
20190402 10:22:39.845 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:22:39.845 - INFO - +----- END KW: OpenStack.Run OS Command (1389)
20190402 10:22:39.846 - INFO - +---- END KW: OpenStack.Resize Instance (1389)
------------------------------------------------------------------------------
20190402 10:22:39.846 - INFO - +--- END TEST: Resize Instances (2984)
------------------------------------------------------------------------------
20190402 10:22:39.846 - INFO - +--- START TEST: Set Unset Properties Instances [ ]
------------------------------------------------------------------------------
20190402 10:22:39.847 - INFO - +---- START KW: BuiltIn.Catenate [ ${instance_property_1}='true' | ${instance_property_2}='500' | ${instance_property_3}='180' ]
20190402 10:22:39.847 - INFO - ${properties} = --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180'
20190402 10:22:39.847 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:22:39.847 - INFO - +---- START KW: OpenStack.Set Instance Property [ ${cirros_instance_name} | ${properties} ]
20190402 10:22:39.847 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server set ${key} ${vm_name} | True | 30 sec ]
20190402 10:22:39.848 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:39.848 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:39.848 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:22:39.848 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:39.848 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-cirros-1'.
20190402 10:22:41.288 - INFO - Command exited with return code 1.
20190402 10:22:41.288 - INFO - ${stdout} =
20190402 10:22:41.289 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:41.289 - INFO - ${rc} = 1
20190402 10:22:41.289 - INFO - +------ END KW: SSHLibrary.Execute Command (1441)
20190402 10:22:41.289 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:41.291 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:22:41.291 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:22:41.291 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:41.292 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:22:41.293 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:22:41.293 - DEBUG - Traceback (most recent call last):
  None
20190402 10:22:41.293 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:22:41.293 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:22:41.293 - INFO - +----- END KW: OpenStack.Run OS Command (1446)
20190402 10:22:41.293 - INFO - +---- END KW: OpenStack.Set Instance Property (1446)
------------------------------------------------------------------------------
20190402 10:22:41.294 - INFO - +--- END TEST: Set Unset Properties Instances (1447)
------------------------------------------------------------------------------
20190402 10:22:41.294 - INFO - +--- START TEST: Evacuate Instances From Hosts [ ]
------------------------------------------------------------------------------
20190402 10:22:41.294 - INFO - +---- START KW: BuiltIn.Run Keyword If [ '${CONFIGURATION_TYPE}' == 'Duplex' | Run Keywords | Evacuate Instances | controller-0 | AND | Evacuate Instances | controller-1 | ELSE IF | '${CONFIGURATION_TYPE}' == 'MN-Local' or '${CONFIGURATION_TYPE}' == 'MN-External' | Run Keywords | Evacuate Instances | compute-0 | AND | Evacuate Instances | compute-1 ]
20190402 10:22:41.295 - INFO - +----- START KW: BuiltIn.Run Keywords [ Evacuate Instances | controller-0 | AND | Evacuate Instances | controller-1 ]
20190402 10:22:41.295 - INFO - +------ START KW: OpenStack.Evacuate Instances [ controller-0 ]
20190402 10:22:41.295 - INFO - +------- START KW: BuiltIn.Set Variable [ openstack compute service set ]
20190402 10:22:41.295 - INFO - ${openstack_cmd} = openstack compute service set
20190402 10:22:41.295 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:22:41.296 - INFO - +------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --disable | --disable-reason test-evacuate | ${host} | nova-compute ]
20190402 10:22:41.296 - INFO - ${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute
20190402 10:22:41.296 - INFO - +------- END KW: BuiltIn.Catenate (1)
20190402 10:22:41.296 - INFO - +------- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 10:22:41.296 - INFO - +-------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:41.296 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:41.296 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:22:41.297 - INFO - +-------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:41.297 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute'.
20190402 10:22:42.763 - INFO - Command exited with return code 0.
20190402 10:22:42.763 - INFO - ${stdout} =
20190402 10:22:42.763 - INFO - ${stderr} =
20190402 10:22:42.764 - INFO - ${rc} = 0
20190402 10:22:42.764 - INFO - +-------- END KW: SSHLibrary.Execute Command (1467)
20190402 10:22:42.764 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:42.766 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:22:42.766 - INFO - +-------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:22:42.766 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:42.767 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:22:42.768 - INFO - +------- END KW: OpenStack.Run OS Command (1472)
20190402 10:22:42.768 - INFO - +------- START KW: BuiltIn.Wait Until Keyword Succeeds [ 5 min | 10 sec | Check Compute Service Property | ${host} | disabled ]
20190402 10:22:42.768 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | disabled ]
20190402 10:22:42.769 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:22:42.769 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:22:42.769 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:22:42.769 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:22:42.769 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:22:42.769 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:22:42.769 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:22:42.770 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:22:42.770 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:42.770 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:42.770 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:22:42.770 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:42.770 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:22:44.154 - INFO - Command exited with return code 0.
20190402 10:22:44.154 - INFO - ${stdout} = disabled
20190402 10:22:44.155 - INFO - ${stderr} =
20190402 10:22:44.155 - INFO - ${rc} = 0
20190402 10:22:44.155 - INFO - +----------- END KW: SSHLibrary.Execute Command (1385)
20190402 10:22:44.156 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:44.157 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:22:44.158 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:22:44.158 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:44.159 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:22:44.159 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:22:44.159 - INFO - +---------- END KW: OpenStack.Run OS Command (1389)
20190402 10:22:44.159 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:22:44.159 - INFO - ${value} = disabled
20190402 10:22:44.159 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:22:44.159 - INFO - ${current_value} = disabled
20190402 10:22:44.160 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1390)
20190402 10:22:44.160 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:22:44.160 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:22:44.160 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:22:44.160 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1392)
20190402 10:22:44.160 - INFO - +------- END KW: BuiltIn.Wait Until Keyword Succeeds (1392)
20190402 10:22:44.160 - INFO - +------- START KW: BuiltIn.Wait Until Keyword Succeeds [ 5 min | 10 sec | Check Compute Service Property | ${host} | enabled ]
20190402 10:22:44.160 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:22:44.161 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:22:44.161 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:22:44.161 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:22:44.161 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:22:44.161 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:22:44.161 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:22:44.161 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:22:44.162 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:22:44.162 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:44.162 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:44.162 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:22:44.162 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:44.163 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:22:45.494 - INFO - Command exited with return code 0.
20190402 10:22:45.494 - INFO - ${stdout} = disabled
20190402 10:22:45.494 - INFO - ${stderr} =
20190402 10:22:45.494 - INFO - ${rc} = 0
20190402 10:22:45.494 - INFO - +----------- END KW: SSHLibrary.Execute Command (1332)
20190402 10:22:45.494 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:45.495 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:22:45.495 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:22:45.495 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:45.495 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:22:45.495 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:22:45.495 - INFO - +---------- END KW: OpenStack.Run OS Command (1333)
20190402 10:22:45.495 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:22:45.495 - INFO - ${value} = disabled
20190402 10:22:45.496 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:22:45.496 - INFO - ${current_value} = disabled
20190402 10:22:45.496 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1335)
20190402 10:22:45.496 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:22:45.496 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:22:45.496 - FAIL - disabled != enabled
20190402 10:22:45.496 - DEBUG - Traceback (most recent call last):
  None
20190402 10:22:45.496 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:22:45.496 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1336)
20190402 10:22:55.497 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:22:55.498 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:22:55.500 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:22:55.501 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:22:55.501 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:22:55.502 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:22:55.502 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:22:55.502 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:22:55.502 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:22:55.502 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:22:55.503 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:22:55.503 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:22:55.503 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:22:55.503 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:22:56.886 - INFO - Command exited with return code 0.
20190402 10:22:56.886 - INFO - ${stdout} = disabled
20190402 10:22:56.887 - INFO - ${stderr} =
20190402 10:22:56.887 - INFO - ${rc} = 0
20190402 10:22:56.887 - INFO - +----------- END KW: SSHLibrary.Execute Command (1384)
20190402 10:22:56.888 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:22:56.889 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:22:56.889 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:22:56.890 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:22:56.891 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:22:56.891 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:22:56.891 - INFO - +---------- END KW: OpenStack.Run OS Command (1389)
20190402 10:22:56.891 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:22:56.891 - INFO - ${value} = disabled
20190402 10:22:56.891 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:22:56.891 - INFO - ${current_value} = disabled
20190402 10:22:56.891 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1393)
20190402 10:22:56.892 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:22:56.892 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:22:56.892 - FAIL - disabled != enabled
20190402 10:22:56.892 - DEBUG - Traceback (most recent call last):
  None
20190402 10:22:56.892 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:22:56.892 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1395)
20190402 10:23:06.893 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:23:06.894 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:23:06.895 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:23:06.896 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:23:06.896 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:23:06.896 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:23:06.897 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:23:06.898 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:23:06.898 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:23:06.898 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:23:06.898 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:23:06.898 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:23:06.898 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:23:06.899 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:23:08.281 - INFO - Command exited with return code 0.
20190402 10:23:08.282 - INFO - ${stdout} = disabled
20190402 10:23:08.282 - INFO - ${stderr} =
20190402 10:23:08.283 - INFO - ${rc} = 0
20190402 10:23:08.283 - INFO - +----------- END KW: SSHLibrary.Execute Command (1385)
20190402 10:23:08.283 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:23:08.285 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:23:08.285 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:23:08.286 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:23:08.287 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:23:08.287 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:23:08.287 - INFO - +---------- END KW: OpenStack.Run OS Command (1389)
20190402 10:23:08.287 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:23:08.287 - INFO - ${value} = disabled
20190402 10:23:08.287 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:23:08.287 - INFO - ${current_value} = disabled
20190402 10:23:08.287 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1393)
20190402 10:23:08.288 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:23:08.288 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:23:08.288 - FAIL - disabled != enabled
20190402 10:23:08.288 - DEBUG - Traceback (most recent call last):
  None
20190402 10:23:08.288 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:23:08.288 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1395)
20190402 10:23:18.288 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:23:18.289 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:23:18.289 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:23:18.290 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:23:18.290 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:23:18.290 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:23:18.290 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:23:18.290 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:23:18.290 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:23:18.291 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:23:18.292 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:23:18.292 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:23:18.292 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:23:18.292 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:23:19.622 - INFO - Command exited with return code 0.
20190402 10:23:19.623 - INFO - ${stdout} = disabled
20190402 10:23:19.623 - INFO - ${stderr} =
20190402 10:23:19.623 - INFO - ${rc} = 0
20190402 10:23:19.624 - INFO - +----------- END KW: SSHLibrary.Execute Command (1331)
20190402 10:23:19.624 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:23:19.625 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:23:19.625 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:23:19.626 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:23:19.626 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:23:19.627 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:23:19.627 - INFO - +---------- END KW: OpenStack.Run OS Command (1337)
20190402 10:23:19.627 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:23:19.628 - INFO - ${value} = disabled
20190402 10:23:19.628 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:23:19.629 - INFO - ${current_value} = disabled
20190402 10:23:19.629 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1340)
20190402 10:23:19.629 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:23:19.630 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:23:19.630 - FAIL - disabled != enabled
20190402 10:23:19.630 - DEBUG - Traceback (most recent call last):
  None
20190402 10:23:19.630 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:23:19.631 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1342)
20190402 10:23:29.632 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:23:29.633 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:23:29.634 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:23:29.635 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:23:29.635 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:23:29.635 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:23:29.636 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:23:29.636 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:23:29.637 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:23:29.637 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:23:29.637 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:23:29.637 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:23:29.638 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:23:29.638 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:23:31.021 - INFO - Command exited with return code 0.
20190402 10:23:31.021 - INFO - ${stdout} = disabled
20190402 10:23:31.022 - INFO - ${stderr} =
20190402 10:23:31.022 - INFO - ${rc} = 0
20190402 10:23:31.022 - INFO - +----------- END KW: SSHLibrary.Execute Command (1385)
20190402 10:23:31.023 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:23:31.024 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:23:31.024 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:23:31.025 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:23:31.025 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:23:31.026 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:23:31.026 - INFO - +---------- END KW: OpenStack.Run OS Command (1389)
20190402 10:23:31.026 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:23:31.026 - INFO - ${value} = disabled
20190402 10:23:31.026 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:23:31.026 - INFO - ${current_value} = disabled
20190402 10:23:31.026 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1393)
20190402 10:23:31.026 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:23:31.027 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:23:31.027 - FAIL - disabled != enabled
20190402 10:23:31.027 - DEBUG - Traceback (most recent call last):
  None
20190402 10:23:31.027 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:23:31.027 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1396)
20190402 10:23:41.028 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:23:41.029 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:23:41.030 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:23:41.030 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:23:41.031 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:23:41.031 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:23:41.032 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:23:41.032 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:23:41.033 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:23:41.033 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:23:41.033 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:23:41.033 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:23:41.033 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:23:41.034 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:23:42.417 - INFO - Command exited with return code 0.
20190402 10:23:42.417 - INFO - ${stdout} = disabled
20190402 10:23:42.418 - INFO - ${stderr} =
20190402 10:23:42.418 - INFO - ${rc} = 0
20190402 10:23:42.418 - INFO - +----------- END KW: SSHLibrary.Execute Command (1385)
20190402 10:23:42.419 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:23:42.420 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:23:42.420 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:23:42.421 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:23:42.422 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:23:42.422 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:23:42.422 - INFO - +---------- END KW: OpenStack.Run OS Command (1389)
20190402 10:23:42.422 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:23:42.422 - INFO - ${value} = disabled
20190402 10:23:42.422 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:23:42.423 - INFO - ${current_value} = disabled
20190402 10:23:42.423 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1394)
20190402 10:23:42.423 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:23:42.423 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:23:42.423 - FAIL - disabled != enabled
20190402 10:23:42.423 - DEBUG - Traceback (most recent call last):
  None
20190402 10:23:42.423 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:23:42.423 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1395)
20190402 10:23:52.424 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:23:52.425 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:23:52.426 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:23:52.427 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:23:52.427 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:23:52.427 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:23:52.428 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:23:52.428 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:23:52.428 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:23:52.429 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:23:52.429 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:23:52.429 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:23:52.429 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:23:52.430 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:23:53.912 - INFO - Command exited with return code 0.
20190402 10:23:53.913 - INFO - ${stdout} = disabled
20190402 10:23:53.913 - INFO - ${stderr} =
20190402 10:23:53.913 - INFO - ${rc} = 0
20190402 10:23:53.913 - INFO - +----------- END KW: SSHLibrary.Execute Command (1484)
20190402 10:23:53.913 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:23:53.914 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:23:53.914 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:23:53.915 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:23:53.915 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:23:53.915 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:23:53.916 - INFO - +---------- END KW: OpenStack.Run OS Command (1488)
20190402 10:23:53.916 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:23:53.916 - INFO - ${value} = disabled
20190402 10:23:53.916 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:23:53.917 - INFO - ${current_value} = disabled
20190402 10:23:53.917 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1492)
20190402 10:23:53.917 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:23:53.918 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:23:53.918 - FAIL - disabled != enabled
20190402 10:23:53.918 - DEBUG - Traceback (most recent call last):
  None
20190402 10:23:53.918 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:23:53.918 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1494)
20190402 10:24:03.919 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:24:03.920 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:24:03.921 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:24:03.922 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:24:03.922 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:24:03.923 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:24:03.924 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:24:03.924 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:24:03.924 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:24:03.924 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:24:03.924 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:24:03.924 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:24:03.925 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:24:03.925 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:24:05.258 - INFO - Command exited with return code 0.
20190402 10:24:05.258 - INFO - ${stdout} = disabled
20190402 10:24:05.258 - INFO - ${stderr} =
20190402 10:24:05.258 - INFO - ${rc} = 0
20190402 10:24:05.259 - INFO - +----------- END KW: SSHLibrary.Execute Command (1334)
20190402 10:24:05.259 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:24:05.261 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:24:05.261 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:24:05.261 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:24:05.262 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:24:05.262 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:24:05.263 - INFO - +---------- END KW: OpenStack.Run OS Command (1339)
20190402 10:24:05.263 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:24:05.263 - INFO - ${value} = disabled
20190402 10:24:05.263 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:24:05.263 - INFO - ${current_value} = disabled
20190402 10:24:05.263 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1343)
20190402 10:24:05.263 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:24:05.263 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:24:05.264 - FAIL - disabled != enabled
20190402 10:24:05.264 - DEBUG - Traceback (most recent call last):
  None
20190402 10:24:05.264 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:24:05.264 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1345)
20190402 10:24:15.265 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:24:15.266 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:24:15.268 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:24:15.269 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:24:15.269 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:24:15.269 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:24:15.270 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:24:15.270 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:24:15.270 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:24:15.270 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:24:15.271 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:24:15.271 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:24:15.271 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:24:15.271 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:24:16.655 - INFO - Command exited with return code 0.
20190402 10:24:16.656 - INFO - ${stdout} = enabled
20190402 10:24:16.656 - INFO - ${stderr} =
20190402 10:24:16.656 - INFO - ${rc} = 0
20190402 10:24:16.656 - INFO - +----------- END KW: SSHLibrary.Execute Command (1385)
20190402 10:24:16.657 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:24:16.658 - INFO - ${res} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}
20190402 10:24:16.658 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:24:16.659 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:24:16.660 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:24:16.660 - INFO - ${result} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}
20190402 10:24:16.660 - INFO - +---------- END KW: OpenStack.Run OS Command (1390)
20190402 10:24:16.660 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:24:16.660 - INFO - ${value} = enabled
20190402 10:24:16.660 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:24:16.660 - INFO - ${current_value} = enabled
20190402 10:24:16.661 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1394)
20190402 10:24:16.661 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:24:16.661 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:24:16.661 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:24:16.661 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1396)
20190402 10:24:16.661 - INFO - +------- END KW: BuiltIn.Wait Until Keyword Succeeds (92501)
20190402 10:24:16.661 - INFO - +------ END KW: OpenStack.Evacuate Instances (95366)
20190402 10:24:16.661 - INFO - +------ START KW: OpenStack.Evacuate Instances [ controller-1 ]
20190402 10:24:16.661 - INFO - +------- START KW: BuiltIn.Set Variable [ openstack compute service set ]
20190402 10:24:16.662 - INFO - ${openstack_cmd} = openstack compute service set
20190402 10:24:16.662 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:24:16.662 - INFO - +------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --disable | --disable-reason test-evacuate | ${host} | nova-compute ]
20190402 10:24:16.662 - INFO - ${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-1 nova-compute
20190402 10:24:16.662 - INFO - +------- END KW: BuiltIn.Catenate (0)
20190402 10:24:16.662 - INFO - +------- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 10:24:16.662 - INFO - +-------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:24:16.663 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:24:16.663 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:24:16.663 - INFO - +-------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:24:16.663 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service set --disable --disable-reason test-evacuate controller-1 nova-compute'.
20190402 10:24:18.111 - INFO - Command exited with return code 0.
20190402 10:24:18.111 - INFO - ${stdout} =
20190402 10:24:18.112 - INFO - ${stderr} =
20190402 10:24:18.112 - INFO - ${rc} = 0
20190402 10:24:18.112 - INFO - +-------- END KW: SSHLibrary.Execute Command (1449)
20190402 10:24:18.113 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:24:18.114 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:24:18.114 - INFO - +-------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:24:18.115 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:24:18.116 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:24:18.116 - INFO - +------- END KW: OpenStack.Run OS Command (1454)
20190402 10:24:18.116 - INFO - +------- START KW: BuiltIn.Wait Until Keyword Succeeds [ 5 min | 10 sec | Check Compute Service Property | ${host} | disabled ]
20190402 10:24:18.116 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | disabled ]
20190402 10:24:18.116 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:24:18.117 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:24:18.117 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:24:18.117 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:24:18.117 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:24:18.117 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:24:18.117 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:24:18.117 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:24:18.118 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:24:18.118 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:24:18.118 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:24:18.118 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:24:18.118 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:24:19.466 - INFO - Command exited with return code 0.
20190402 10:24:19.466 - INFO - ${stdout} = disabled
20190402 10:24:19.466 - INFO - ${stderr} =
20190402 10:24:19.467 - INFO - ${rc} = 0
20190402 10:24:19.467 - INFO - +----------- END KW: SSHLibrary.Execute Command (1349)
20190402 10:24:19.467 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:24:19.469 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:24:19.469 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:24:19.470 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:24:19.471 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:24:19.471 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:24:19.471 - INFO - +---------- END KW: OpenStack.Run OS Command (1354)
20190402 10:24:19.471 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:24:19.471 - INFO - ${value} = disabled
20190402 10:24:19.471 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:24:19.472 - INFO - ${current_value} = disabled
20190402 10:24:19.472 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1356)
20190402 10:24:19.472 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:24:19.472 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:24:19.472 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:24:19.472 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1356)
20190402 10:24:19.472 - INFO - +------- END KW: BuiltIn.Wait Until Keyword Succeeds (1356)
20190402 10:24:19.472 - INFO - +------- START KW: BuiltIn.Wait Until Keyword Succeeds [ 5 min | 10 sec | Check Compute Service Property | ${host} | enabled ]
20190402 10:24:19.472 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:24:19.473 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:24:19.473 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:24:19.473 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:24:19.473 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:24:19.473 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:24:19.473 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:24:19.474 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:24:19.474 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:24:19.474 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:24:19.474 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:24:19.474 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:24:19.474 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:24:19.475 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:24:20.838 - INFO - Command exited with return code 0.
20190402 10:24:20.839 - INFO - ${stdout} = disabled
20190402 10:24:20.839 - INFO - ${stderr} =
20190402 10:24:20.839 - INFO - ${rc} = 0
20190402 10:24:20.839 - INFO - +----------- END KW: SSHLibrary.Execute Command (1365)
20190402 10:24:20.840 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:24:20.841 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:24:20.842 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:24:20.842 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:24:20.843 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:24:20.843 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:24:20.843 - INFO - +---------- END KW: OpenStack.Run OS Command (1369)
20190402 10:24:20.843 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:24:20.843 - INFO - ${value} = disabled
20190402 10:24:20.843 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:24:20.844 - INFO - ${current_value} = disabled
20190402 10:24:20.844 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1371)
20190402 10:24:20.844 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:24:20.844 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:24:20.844 - FAIL - disabled != enabled
20190402 10:24:20.844 - DEBUG - Traceback (most recent call last):
  None
20190402 10:24:20.844 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:24:20.844 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1372)
20190402 10:24:30.845 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:24:30.848 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:24:30.850 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:24:30.851 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:24:30.852 - INFO - +---------- END KW: BuiltIn.Set Variable (2)
20190402 10:24:30.853 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:24:30.854 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:24:30.854 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:24:30.854 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:24:30.856 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:24:30.856 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:24:30.857 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:24:30.857 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:24:30.858 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:24:32.192 - INFO - Command exited with return code 0.
20190402 10:24:32.192 - INFO - ${stdout} = disabled
20190402 10:24:32.192 - INFO - ${stderr} =
20190402 10:24:32.193 - INFO - ${rc} = 0
20190402 10:24:32.193 - INFO - +----------- END KW: SSHLibrary.Execute Command (1336)
20190402 10:24:32.193 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:24:32.195 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:24:32.195 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:24:32.196 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:24:32.196 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:24:32.197 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:24:32.197 - INFO - +---------- END KW: OpenStack.Run OS Command (1343)
20190402 10:24:32.198 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:24:32.198 - INFO - ${value} = disabled
20190402 10:24:32.198 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:24:32.199 - INFO - ${current_value} = disabled
20190402 10:24:32.199 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1351)
20190402 10:24:32.200 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:24:32.200 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:24:32.201 - FAIL - disabled != enabled
20190402 10:24:32.201 - DEBUG - Traceback (most recent call last):
  None
20190402 10:24:32.201 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:24:32.201 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1356)
20190402 10:24:42.202 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:24:42.203 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:24:42.203 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:24:42.203 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:24:42.203 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:24:42.204 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:24:42.204 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:24:42.204 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:24:42.204 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:24:42.205 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:24:42.205 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:24:42.205 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:24:42.205 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:24:42.206 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:24:43.537 - INFO - Command exited with return code 0.
20190402 10:24:43.537 - INFO - ${stdout} = disabled
20190402 10:24:43.537 - INFO - ${stderr} =
20190402 10:24:43.538 - INFO - ${rc} = 0
20190402 10:24:43.538 - INFO - +----------- END KW: SSHLibrary.Execute Command (1333)
20190402 10:24:43.538 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:24:43.539 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:24:43.539 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:24:43.540 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:24:43.540 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:24:43.541 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:24:43.541 - INFO - +---------- END KW: OpenStack.Run OS Command (1337)
20190402 10:24:43.541 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:24:43.542 - INFO - ${value} = disabled
20190402 10:24:43.542 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:24:43.542 - INFO - ${current_value} = disabled
20190402 10:24:43.542 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1340)
20190402 10:24:43.542 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:24:43.542 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:24:43.542 - FAIL - disabled != enabled
20190402 10:24:43.542 - DEBUG - Traceback (most recent call last):
  None
20190402 10:24:43.542 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:24:43.543 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1341)
20190402 10:24:53.543 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:24:53.544 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:24:53.544 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:24:53.545 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:24:53.545 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:24:53.545 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:24:53.545 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:24:53.546 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:24:53.546 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:24:53.547 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:24:53.547 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:24:53.547 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:24:53.547 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:24:53.548 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:24:54.931 - INFO - Command exited with return code 0.
20190402 10:24:54.932 - INFO - ${stdout} = disabled
20190402 10:24:54.932 - INFO - ${stderr} =
20190402 10:24:54.932 - INFO - ${rc} = 0
20190402 10:24:54.932 - INFO - +----------- END KW: SSHLibrary.Execute Command (1385)
20190402 10:24:54.932 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:24:54.933 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:24:54.933 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:24:54.933 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:24:54.934 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:24:54.934 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:24:54.934 - INFO - +---------- END KW: OpenStack.Run OS Command (1388)
20190402 10:24:54.934 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:24:54.934 - INFO - ${value} = disabled
20190402 10:24:54.934 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:24:54.935 - INFO - ${current_value} = disabled
20190402 10:24:54.935 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1391)
20190402 10:24:54.935 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:24:54.935 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:24:54.936 - FAIL - disabled != enabled
20190402 10:24:54.936 - DEBUG - Traceback (most recent call last):
  None
20190402 10:24:54.936 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:24:54.936 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1393)
20190402 10:25:04.937 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:25:04.938 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:25:04.939 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:25:04.940 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:25:04.940 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:25:04.941 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:25:04.942 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:25:04.942 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:25:04.942 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:25:04.942 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:25:04.943 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:25:04.943 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:25:04.943 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:25:04.943 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:25:06.326 - INFO - Command exited with return code 0.
20190402 10:25:06.327 - INFO - ${stdout} = disabled
20190402 10:25:06.327 - INFO - ${stderr} =
20190402 10:25:06.327 - INFO - ${rc} = 0
20190402 10:25:06.327 - INFO - +----------- END KW: SSHLibrary.Execute Command (1384)
20190402 10:25:06.328 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:25:06.329 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:25:06.330 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:25:06.330 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:25:06.331 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:25:06.331 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:25:06.332 - INFO - +---------- END KW: OpenStack.Run OS Command (1389)
20190402 10:25:06.332 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:25:06.332 - INFO - ${value} = disabled
20190402 10:25:06.332 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:25:06.332 - INFO - ${current_value} = disabled
20190402 10:25:06.332 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1394)
20190402 10:25:06.332 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:25:06.332 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:25:06.333 - FAIL - disabled != enabled
20190402 10:25:06.333 - DEBUG - Traceback (most recent call last):
  None
20190402 10:25:06.333 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:25:06.333 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1396)
20190402 10:25:16.334 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:25:16.335 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:25:16.336 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:25:16.336 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:25:16.337 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:25:16.337 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:25:16.338 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:25:16.338 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:25:16.339 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:25:16.339 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:25:16.339 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:25:16.339 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:25:16.339 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:25:16.340 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:25:17.773 - INFO - Command exited with return code 0.
20190402 10:25:17.773 - INFO - ${stdout} = disabled
20190402 10:25:17.773 - INFO - ${stderr} =
20190402 10:25:17.774 - INFO - ${rc} = 0
20190402 10:25:17.774 - INFO - +----------- END KW: SSHLibrary.Execute Command (1435)
20190402 10:25:17.775 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:25:17.776 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:25:17.777 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:25:17.777 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:25:17.778 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:25:17.778 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:25:17.778 - INFO - +---------- END KW: OpenStack.Run OS Command (1439)
20190402 10:25:17.778 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:25:17.778 - INFO - ${value} = disabled
20190402 10:25:17.778 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:25:17.778 - INFO - ${current_value} = disabled
20190402 10:25:17.779 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1443)
20190402 10:25:17.779 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:25:17.779 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:25:17.779 - FAIL - disabled != enabled
20190402 10:25:17.779 - DEBUG - Traceback (most recent call last):
  None
20190402 10:25:17.779 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:25:17.779 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1446)
20190402 10:25:27.780 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:25:27.781 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:25:27.782 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:25:27.782 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:25:27.782 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:25:27.783 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:25:27.783 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:25:27.784 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:25:27.784 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:25:27.785 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:25:27.785 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:25:27.785 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:25:27.785 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:25:27.785 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:25:29.169 - INFO - Command exited with return code 0.
20190402 10:25:29.169 - INFO - ${stdout} = disabled
20190402 10:25:29.170 - INFO - ${stderr} =
20190402 10:25:29.170 - INFO - ${rc} = 0
20190402 10:25:29.170 - INFO - +----------- END KW: SSHLibrary.Execute Command (1385)
20190402 10:25:29.171 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:25:29.173 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:25:29.173 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:25:29.174 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:25:29.174 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:25:29.174 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:25:29.174 - INFO - +---------- END KW: OpenStack.Run OS Command (1390)
20190402 10:25:29.174 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:25:29.174 - INFO - ${value} = disabled
20190402 10:25:29.175 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:25:29.175 - INFO - ${current_value} = disabled
20190402 10:25:29.175 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1394)
20190402 10:25:29.175 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:25:29.175 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:25:29.175 - FAIL - disabled != enabled
20190402 10:25:29.175 - DEBUG - Traceback (most recent call last):
  None
20190402 10:25:29.175 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:25:29.175 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1395)
20190402 10:25:39.176 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:25:39.178 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:25:39.179 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:25:39.179 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:25:39.180 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:25:39.180 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:25:39.181 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:25:39.181 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:25:39.182 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:25:39.183 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:25:39.184 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:25:39.184 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:25:39.184 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:25:39.185 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:25:40.520 - INFO - Command exited with return code 0.
20190402 10:25:40.520 - INFO - ${stdout} = disabled
20190402 10:25:40.521 - INFO - ${stderr} =
20190402 10:25:40.521 - INFO - ${rc} = 0
20190402 10:25:40.521 - INFO - +----------- END KW: SSHLibrary.Execute Command (1337)
20190402 10:25:40.521 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:25:40.523 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:25:40.523 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:25:40.524 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:25:40.525 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:25:40.525 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:25:40.525 - INFO - +---------- END KW: OpenStack.Run OS Command (1343)
20190402 10:25:40.526 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:25:40.526 - INFO - ${value} = disabled
20190402 10:25:40.527 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:25:40.527 - INFO - ${current_value} = disabled
20190402 10:25:40.528 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1349)
20190402 10:25:40.528 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:25:40.529 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:25:40.529 - FAIL - disabled != enabled
20190402 10:25:40.529 - DEBUG - Traceback (most recent call last):
  None
20190402 10:25:40.529 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:25:40.530 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1354)
20190402 10:25:50.530 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:25:50.532 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:25:50.533 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:25:50.533 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:25:50.533 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:25:50.534 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:25:50.535 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:25:50.535 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:25:50.535 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:25:50.536 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:25:50.536 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:25:50.536 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:25:50.536 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:25:50.537 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:25:51.869 - INFO - Command exited with return code 0.
20190402 10:25:51.870 - INFO - ${stdout} = disabled
20190402 10:25:51.870 - INFO - ${stderr} =
20190402 10:25:51.870 - INFO - ${rc} = 0
20190402 10:25:51.870 - INFO - +----------- END KW: SSHLibrary.Execute Command (1334)
20190402 10:25:51.871 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:25:51.872 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:25:51.872 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:25:51.873 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:25:51.874 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:25:51.874 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:25:51.874 - INFO - +---------- END KW: OpenStack.Run OS Command (1339)
20190402 10:25:51.875 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:25:51.875 - INFO - ${value} = disabled
20190402 10:25:51.875 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:25:51.875 - INFO - ${current_value} = disabled
20190402 10:25:51.875 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1343)
20190402 10:25:51.875 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:25:51.875 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:25:51.876 - FAIL - disabled != enabled
20190402 10:25:51.876 - DEBUG - Traceback (most recent call last):
  None
20190402 10:25:51.876 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:25:51.876 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1346)
20190402 10:26:01.876 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:26:01.878 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:26:01.880 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:26:01.881 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:26:01.881 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:01.881 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:26:01.882 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:26:01.882 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:26:01.882 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:26:01.882 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:01.883 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:01.883 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:01.883 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:01.883 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:26:03.216 - INFO - Command exited with return code 0.
20190402 10:26:03.216 - INFO - ${stdout} = disabled
20190402 10:26:03.217 - INFO - ${stderr} =
20190402 10:26:03.217 - INFO - ${rc} = 0
20190402 10:26:03.217 - INFO - +----------- END KW: SSHLibrary.Execute Command (1334)
20190402 10:26:03.218 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:03.219 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:26:03.219 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:26:03.220 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:03.221 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:03.221 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:26:03.221 - INFO - +---------- END KW: OpenStack.Run OS Command (1339)
20190402 10:26:03.221 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:26:03.221 - INFO - ${value} = disabled
20190402 10:26:03.221 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:26:03.221 - INFO - ${current_value} = disabled
20190402 10:26:03.221 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1343)
20190402 10:26:03.222 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:26:03.222 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:26:03.222 - FAIL - disabled != enabled
20190402 10:26:03.222 - DEBUG - Traceback (most recent call last):
  None
20190402 10:26:03.222 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:26:03.222 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1346)
20190402 10:26:13.223 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:26:13.224 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:26:13.225 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:26:13.226 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:26:13.226 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:13.227 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:26:13.227 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:26:13.228 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:26:13.228 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:26:13.228 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:13.228 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:13.228 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:26:13.228 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:13.229 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:26:14.612 - INFO - Command exited with return code 0.
20190402 10:26:14.612 - INFO - ${stdout} = disabled
20190402 10:26:14.612 - INFO - ${stderr} =
20190402 10:26:14.613 - INFO - ${rc} = 0
20190402 10:26:14.613 - INFO - +----------- END KW: SSHLibrary.Execute Command (1385)
20190402 10:26:14.614 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:14.615 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:26:14.615 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:26:14.616 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:14.617 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:26:14.617 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:26:14.617 - INFO - +---------- END KW: OpenStack.Run OS Command (1389)
20190402 10:26:14.617 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:26:14.617 - INFO - ${value} = disabled
20190402 10:26:14.617 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:26:14.617 - INFO - ${current_value} = disabled
20190402 10:26:14.617 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1393)
20190402 10:26:14.617 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:26:14.618 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:26:14.618 - FAIL - disabled != enabled
20190402 10:26:14.618 - DEBUG - Traceback (most recent call last):
  None
20190402 10:26:14.618 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:26:14.618 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1395)
20190402 10:26:24.619 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:26:24.620 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:26:24.621 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:26:24.622 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:26:24.622 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:24.622 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:26:24.623 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:26:24.623 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:26:24.623 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:26:24.624 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:24.624 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:24.624 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:26:24.625 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:24.625 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:26:26.008 - INFO - Command exited with return code 0.
20190402 10:26:26.008 - INFO - ${stdout} = enabled
20190402 10:26:26.008 - INFO - ${stderr} =
20190402 10:26:26.008 - INFO - ${rc} = 0
20190402 10:26:26.008 - INFO - +----------- END KW: SSHLibrary.Execute Command (1383)
20190402 10:26:26.009 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:26.010 - INFO - ${res} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}
20190402 10:26:26.010 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:26:26.010 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:26.011 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:26.011 - INFO - ${result} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}
20190402 10:26:26.011 - INFO - +---------- END KW: OpenStack.Run OS Command (1388)
20190402 10:26:26.012 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:26:26.012 - INFO - ${value} = enabled
20190402 10:26:26.012 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:26:26.013 - INFO - ${current_value} = enabled
20190402 10:26:26.013 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1393)
20190402 10:26:26.013 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:26:26.013 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:26:26.013 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:26:26.013 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1394)
20190402 10:26:26.013 - INFO - +------- END KW: BuiltIn.Wait Until Keyword Succeeds (126541)
20190402 10:26:26.013 - INFO - +------ END KW: OpenStack.Evacuate Instances (129352)
20190402 10:26:26.013 - INFO - +----- END KW: BuiltIn.Run Keywords (224718)
20190402 10:26:26.013 - INFO - +---- END KW: BuiltIn.Run Keyword If (224719)
------------------------------------------------------------------------------
20190402 10:26:26.014 - INFO - +--- END TEST: Evacuate Instances From Hosts (224720)
------------------------------------------------------------------------------
20190402 10:26:26.015 - INFO - +--- START TEARDOWN: BuiltIn.Run Keywords [ OpenStack.Openstack Cleanup All | Utils.Stx Suite TearDown ]
20190402 10:26:26.015 - INFO - +---- START KW: OpenStack.Openstack Cleanup All [ ]
20190402 10:26:26.015 - INFO - +----- START KW: OpenStack.Delete All Instances [ ]
20190402 10:26:26.015 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack server list ]
20190402 10:26:26.016 - INFO - ${openstack_cmd} = openstack server list
20190402 10:26:26.016 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:26:26.016 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:26:26.016 - INFO - ${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"
20190402 10:26:26.016 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:26:26.016 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:26:26.016 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:26.017 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:26.017 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:26.017 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:26.017 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server list|awk '{print$4}'|grep -v "Name"'.
20190402 10:26:27.464 - INFO - Command exited with return code 0.
20190402 10:26:27.465 - INFO - ${stdout} =
20190402 10:26:27.465 - INFO - ${stderr} =
20190402 10:26:27.465 - INFO - ${rc} = 0
20190402 10:26:27.466 - INFO - +------- END KW: SSHLibrary.Execute Command (1449)
20190402 10:26:27.466 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:27.468 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:26:27.468 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:26:27.468 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:27.469 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:27.470 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:26:27.470 - INFO - +------ END KW: OpenStack.Run OS Command (1454)
20190402 10:26:27.470 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:26:27.470 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:26:27.470 - INFO - ${response} =
20190402 10:26:27.470 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:26:27.471 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:26:27.471 - INFO - @{res_in_list} = [ ]
20190402 10:26:27.471 - INFO - +------- END KW: String.Split String (0)
20190402 10:26:27.471 - INFO - @{vm_list} = [ ]
20190402 10:26:27.471 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:26:27.471 - INFO - +------ START KW: ${vm} IN [ @{vm_list} ] [ ]
20190402 10:26:27.471 - INFO - +------ END KW: ${vm} IN [ @{vm_list} ] (0)
20190402 10:26:27.471 - INFO - +----- END KW: OpenStack.Delete All Instances (1456)
20190402 10:26:27.471 - INFO - +----- START KW: OpenStack.Delete All Images [ ]
20190402 10:26:27.471 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack image list ]
20190402 10:26:27.472 - INFO - ${openstack_cmd} = openstack image list
20190402 10:26:27.472 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:26:27.472 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "Cirros" ]
20190402 10:26:27.472 - INFO - ${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"
20190402 10:26:27.472 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:26:27.472 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:26:27.472 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:27.473 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:27.473 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:27.473 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:27.473 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.
20190402 10:26:28.786 - INFO - Command exited with return code 0.
20190402 10:26:28.787 - INFO - ${stdout} =
20190402 10:26:28.787 - INFO - ${stderr} =
20190402 10:26:28.787 - INFO - ${rc} = 0
20190402 10:26:28.788 - INFO - +------- END KW: SSHLibrary.Execute Command (1315)
20190402 10:26:28.788 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:28.790 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:26:28.790 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:26:28.790 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:28.791 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:28.792 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:26:28.792 - INFO - +------ END KW: OpenStack.Run OS Command (1320)
20190402 10:26:28.792 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:26:28.792 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:26:28.793 - INFO - ${response} =
20190402 10:26:28.793 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:26:28.793 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:26:28.793 - INFO - @{res_in_list} = [ ]
20190402 10:26:28.793 - INFO - +------- END KW: String.Split String (0)
20190402 10:26:28.793 - INFO - @{image_list} = [ ]
20190402 10:26:28.793 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:26:28.793 - INFO - +------ START KW: ${image} IN [ @{image_list} ] [ ]
20190402 10:26:28.793 - INFO - +------ END KW: ${image} IN [ @{image_list} ] (0)
20190402 10:26:28.793 - INFO - +----- END KW: OpenStack.Delete All Images (1322)
20190402 10:26:28.794 - INFO - +----- START KW: OpenStack.Delete All Flavors [ ]
20190402 10:26:28.794 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack flavor list ]
20190402 10:26:28.794 - INFO - ${openstack_cmd} = openstack flavor list
20190402 10:26:28.794 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:26:28.794 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "m1" ]
20190402 10:26:28.794 - INFO - ${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"
20190402 10:26:28.794 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:26:28.794 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:26:28.795 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:28.795 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:28.795 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:26:28.795 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:28.795 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.
20190402 10:26:30.243 - INFO - Command exited with return code 0.
20190402 10:26:30.243 - INFO - ${stdout} = 

f2.small
f1.medium
f1.small
20190402 10:26:30.244 - INFO - ${stderr} =
20190402 10:26:30.244 - INFO - ${rc} = 0
20190402 10:26:30.244 - INFO - +------- END KW: SSHLibrary.Execute Command (1449)
20190402 10:26:30.244 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:30.246 - INFO - ${res} = {u'stdout': u'\n\nf2.small\nf1.medium\nf1.small', u'stderr': u'', u'rc': 0}
20190402 10:26:30.246 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:26:30.247 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:30.247 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:30.248 - INFO - &{result} = { stdout=

f2.small
f1.medium
f1.small | stderr= | rc=0 }
20190402 10:26:30.248 - INFO - +------ END KW: OpenStack.Run OS Command (1454)
20190402 10:26:30.248 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:26:30.248 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:26:30.248 - INFO - ${response} = 

f2.small
f1.medium
f1.small
20190402 10:26:30.249 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:26:30.249 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:26:30.249 - INFO - @{res_in_list} = [ f2.small | f1.medium | f1.small ]
20190402 10:26:30.249 - INFO - +------- END KW: String.Split String (0)
20190402 10:26:30.249 - INFO - @{flavor_list} = [ f2.small | f1.medium | f1.small ]
20190402 10:26:30.249 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:26:30.249 - INFO - +------ START KW: ${flavor} IN [ @{flavor_list} ] [ ]
20190402 10:26:30.249 - INFO - +------- START KW: ${flavor} = f2.small [ ]
20190402 10:26:30.249 - INFO - +-------- START KW: OpenStack.Delete Flavor [ ${flavor} ]
20190402 10:26:30.249 - INFO - +--------- START KW: BuiltIn.Set Variable [ openstack flavor delete ]
20190402 10:26:30.250 - INFO - ${openstack_cmd} = openstack flavor delete
20190402 10:26:30.250 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:30.250 - INFO - +--------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${flavor} ]
20190402 10:26:30.250 - INFO - ${cmd} = openstack flavor delete f2.small
20190402 10:26:30.250 - INFO - +--------- END KW: BuiltIn.Catenate (0)
20190402 10:26:30.250 - INFO - +--------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:26:30.250 - INFO - +---------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:30.251 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:30.251 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:30.251 - INFO - +---------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:30.251 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor delete f2.small'.
20190402 10:26:31.684 - INFO - Command exited with return code 0.
20190402 10:26:31.684 - INFO - ${stdout} =
20190402 10:26:31.685 - INFO - ${stderr} =
20190402 10:26:31.685 - INFO - ${rc} = 0
20190402 10:26:31.685 - INFO - +---------- END KW: SSHLibrary.Execute Command (1434)
20190402 10:26:31.686 - INFO - +---------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:31.687 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:26:31.687 - INFO - +---------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:26:31.688 - INFO - +---------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:31.689 - INFO - +---------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:26:31.689 - INFO - +--------- END KW: OpenStack.Run OS Command (1439)
20190402 10:26:31.689 - INFO - +-------- END KW: OpenStack.Delete Flavor (1440)
20190402 10:26:31.689 - INFO - +------- END KW: ${flavor} = f2.small (1440)
20190402 10:26:31.689 - INFO - +------- START KW: ${flavor} = f1.medium [ ]
20190402 10:26:31.689 - INFO - +-------- START KW: OpenStack.Delete Flavor [ ${flavor} ]
20190402 10:26:31.689 - INFO - +--------- START KW: BuiltIn.Set Variable [ openstack flavor delete ]
20190402 10:26:31.689 - INFO - ${openstack_cmd} = openstack flavor delete
20190402 10:26:31.690 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:31.690 - INFO - +--------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${flavor} ]
20190402 10:26:31.690 - INFO - ${cmd} = openstack flavor delete f1.medium
20190402 10:26:31.690 - INFO - +--------- END KW: BuiltIn.Catenate (0)
20190402 10:26:31.690 - INFO - +--------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:26:31.691 - INFO - +---------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:31.691 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:31.691 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:26:31.691 - INFO - +---------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:31.691 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor delete f1.medium'.
20190402 10:26:33.124 - INFO - Command exited with return code 0.
20190402 10:26:33.125 - INFO - ${stdout} =
20190402 10:26:33.125 - INFO - ${stderr} =
20190402 10:26:33.125 - INFO - ${rc} = 0
20190402 10:26:33.125 - INFO - +---------- END KW: SSHLibrary.Execute Command (1434)
20190402 10:26:33.126 - INFO - +---------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:33.127 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:26:33.127 - INFO - +---------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:26:33.128 - INFO - +---------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:33.129 - INFO - +---------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:33.129 - INFO - +--------- END KW: OpenStack.Run OS Command (1439)
20190402 10:26:33.129 - INFO - +-------- END KW: OpenStack.Delete Flavor (1440)
20190402 10:26:33.129 - INFO - +------- END KW: ${flavor} = f1.medium (1440)
20190402 10:26:33.129 - INFO - +------- START KW: ${flavor} = f1.small [ ]
20190402 10:26:33.129 - INFO - +-------- START KW: OpenStack.Delete Flavor [ ${flavor} ]
20190402 10:26:33.129 - INFO - +--------- START KW: BuiltIn.Set Variable [ openstack flavor delete ]
20190402 10:26:33.129 - INFO - ${openstack_cmd} = openstack flavor delete
20190402 10:26:33.130 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:33.130 - INFO - +--------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${flavor} ]
20190402 10:26:33.130 - INFO - ${cmd} = openstack flavor delete f1.small
20190402 10:26:33.130 - INFO - +--------- END KW: BuiltIn.Catenate (0)
20190402 10:26:33.130 - INFO - +--------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:26:33.130 - INFO - +---------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:33.130 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:33.131 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:26:33.131 - INFO - +---------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:33.131 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor delete f1.small'.
20190402 10:26:34.614 - INFO - Command exited with return code 0.
20190402 10:26:34.615 - INFO - ${stdout} =
20190402 10:26:34.615 - INFO - ${stderr} =
20190402 10:26:34.615 - INFO - ${rc} = 0
20190402 10:26:34.615 - INFO - +---------- END KW: SSHLibrary.Execute Command (1484)
20190402 10:26:34.616 - INFO - +---------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:34.617 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:26:34.618 - INFO - +---------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:26:34.618 - INFO - +---------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:34.619 - INFO - +---------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:34.619 - INFO - +--------- END KW: OpenStack.Run OS Command (1489)
20190402 10:26:34.619 - INFO - +-------- END KW: OpenStack.Delete Flavor (1490)
20190402 10:26:34.619 - INFO - +------- END KW: ${flavor} = f1.small (1490)
20190402 10:26:34.619 - INFO - +------ END KW: ${flavor} IN [ @{flavor_list} ] (4370)
20190402 10:26:34.619 - INFO - +----- END KW: OpenStack.Delete All Flavors (5825)
20190402 10:26:34.619 - INFO - +----- START KW: OpenStack.Delete All Networks [ ]
20190402 10:26:34.620 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 10:26:34.620 - INFO - ${openstack_cmd} = openstack network list
20190402 10:26:34.620 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:26:34.620 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "private" | grep -v "public" | grep -v "external" | grep -v "internal" ]
20190402 10:26:34.620 - INFO - ${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"
20190402 10:26:34.620 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:26:34.620 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:26:34.620 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:34.621 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:34.621 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:34.621 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:34.621 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.
20190402 10:26:36.004 - INFO - Command exited with return code 0.
20190402 10:26:36.004 - INFO - ${stdout} = 

network-1
20190402 10:26:36.004 - INFO - ${stderr} =
20190402 10:26:36.004 - INFO - ${rc} = 0
20190402 10:26:36.005 - INFO - +------- END KW: SSHLibrary.Execute Command (1383)
20190402 10:26:36.005 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:36.006 - INFO - ${res} = {u'stdout': u'\n\nnetwork-1', u'stderr': u'', u'rc': 0}
20190402 10:26:36.006 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:26:36.006 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:36.007 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:36.007 - INFO - &{result} = { stdout=

network-1 | stderr= | rc=0 }
20190402 10:26:36.007 - INFO - +------ END KW: OpenStack.Run OS Command (1387)
20190402 10:26:36.008 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:26:36.008 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:26:36.009 - INFO - ${response} = 

network-1
20190402 10:26:36.009 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:26:36.009 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:26:36.010 - INFO - @{res_in_list} = [ network-1 ]
20190402 10:26:36.010 - INFO - +------- END KW: String.Split String (1)
20190402 10:26:36.010 - INFO - @{network_list} = [ network-1 ]
20190402 10:26:36.010 - INFO - +------ END KW: Utils.Convert Response To List (2)
20190402 10:26:36.011 - INFO - +------ START KW: ${network} IN [ @{network_list} ] [ ]
20190402 10:26:36.011 - INFO - +------- START KW: ${network} = network-1 [ ]
20190402 10:26:36.011 - INFO - +-------- START KW: OpenStack.Delete Network [ ${network} ]
20190402 10:26:36.012 - INFO - +--------- START KW: BuiltIn.Set Variable [ openstack network delete ]
20190402 10:26:36.012 - INFO - ${openstack_cmd} = openstack network delete
20190402 10:26:36.012 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:26:36.013 - INFO - +--------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${network} ]
20190402 10:26:36.013 - INFO - ${cmd} = openstack network delete network-1
20190402 10:26:36.013 - INFO - +--------- END KW: BuiltIn.Catenate (1)
20190402 10:26:36.014 - INFO - +--------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:26:36.015 - INFO - +---------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:36.016 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:36.016 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:36.016 - INFO - +---------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:36.017 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network delete network-1'.
20190402 10:26:39.055 - INFO - Command exited with return code 0.
20190402 10:26:39.055 - INFO - ${stdout} =
20190402 10:26:39.055 - INFO - ${stderr} =
20190402 10:26:39.055 - INFO - ${rc} = 0
20190402 10:26:39.055 - INFO - +---------- END KW: SSHLibrary.Execute Command (3039)
20190402 10:26:39.056 - INFO - +---------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:39.056 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:26:39.056 - INFO - +---------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:26:39.057 - INFO - +---------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:39.057 - INFO - +---------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:39.057 - INFO - +--------- END KW: OpenStack.Run OS Command (3043)
20190402 10:26:39.057 - INFO - +-------- END KW: OpenStack.Delete Network (3046)
20190402 10:26:39.057 - INFO - +------- END KW: ${network} = network-1 (3046)
20190402 10:26:39.057 - INFO - +------ END KW: ${network} IN [ @{network_list} ] (3046)
20190402 10:26:39.058 - INFO - +----- END KW: OpenStack.Delete All Networks (4439)
20190402 10:26:39.058 - INFO - +----- START KW: OpenStack.Delete All KeyPairs [ ]
20190402 10:26:39.058 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack keypair list ]
20190402 10:26:39.058 - INFO - ${openstack_cmd} = openstack keypair list
20190402 10:26:39.058 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:26:39.059 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "Name" ]
20190402 10:26:39.059 - INFO - ${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"
20190402 10:26:39.059 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:26:39.059 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:26:39.060 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:39.060 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:39.060 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:26:39.060 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:39.061 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack keypair list|awk '{print$2}'|grep -v "Name"'.
20190402 10:26:40.392 - INFO - Command exited with return code 0.
20190402 10:26:40.392 - INFO - ${stdout} =
20190402 10:26:40.393 - INFO - ${stderr} =
20190402 10:26:40.393 - INFO - ${rc} = 0
20190402 10:26:40.393 - INFO - +------- END KW: SSHLibrary.Execute Command (1333)
20190402 10:26:40.393 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:40.395 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:26:40.395 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:26:40.395 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:40.396 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:40.397 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:26:40.397 - INFO - +------ END KW: OpenStack.Run OS Command (1338)
20190402 10:26:40.397 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:26:40.397 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:26:40.397 - INFO - ${response} =
20190402 10:26:40.398 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:26:40.398 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:26:40.398 - INFO - @{res_in_list} = [ ]
20190402 10:26:40.398 - INFO - +------- END KW: String.Split String (0)
20190402 10:26:40.398 - INFO - @{key_list} = [ ]
20190402 10:26:40.398 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:26:40.398 - INFO - +------ START KW: ${key} IN [ @{key_list} ] [ ]
20190402 10:26:40.398 - INFO - +------ END KW: ${key} IN [ @{key_list} ] (0)
20190402 10:26:40.398 - INFO - +----- END KW: OpenStack.Delete All KeyPairs (1340)
20190402 10:26:40.398 - INFO - +----- START KW: OpenStack.Delete All Snapshots [ ]
20190402 10:26:40.399 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume snapshot list ]
20190402 10:26:40.399 - INFO - ${openstack_cmd} = openstack volume snapshot list
20190402 10:26:40.399 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:26:40.399 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:26:40.399 - INFO - ${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"
20190402 10:26:40.399 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:26:40.399 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:26:40.399 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:40.400 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:40.400 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:40.400 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:40.400 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.
20190402 10:26:41.898 - INFO - Command exited with return code 0.
20190402 10:26:41.898 - INFO - ${stdout} =
20190402 10:26:41.898 - INFO - ${stderr} =
20190402 10:26:41.898 - INFO - ${rc} = 0
20190402 10:26:41.899 - INFO - +------- END KW: SSHLibrary.Execute Command (1498)
20190402 10:26:41.899 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:41.900 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:26:41.900 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:26:41.901 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:41.901 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:26:41.902 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:26:41.902 - INFO - +------ END KW: OpenStack.Run OS Command (1503)
20190402 10:26:41.903 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:26:41.903 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:26:41.903 - INFO - ${response} =
20190402 10:26:41.903 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:26:41.903 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:26:41.904 - INFO - @{res_in_list} = [ ]
20190402 10:26:41.904 - INFO - +------- END KW: String.Split String (1)
20190402 10:26:41.904 - INFO - @{snapshot_list} = [ ]
20190402 10:26:41.904 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:26:41.904 - INFO - +------ START KW: ${snapshot} IN [ @{snapshot_list} ] [ ]
20190402 10:26:41.904 - INFO - +------ END KW: ${snapshot} IN [ @{snapshot_list} ] (0)
20190402 10:26:41.904 - INFO - +----- END KW: OpenStack.Delete All Snapshots (1506)
20190402 10:26:41.904 - INFO - +----- START KW: OpenStack.Delete All Volumes [ ]
20190402 10:26:41.904 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume list ]
20190402 10:26:41.905 - INFO - ${openstack_cmd} = openstack volume list
20190402 10:26:41.905 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:26:41.905 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "ID" ]
20190402 10:26:41.905 - INFO - ${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"
20190402 10:26:41.905 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:26:41.905 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:26:41.905 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:41.906 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:41.906 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:41.906 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:41.906 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume list|awk '{print$2}'|grep -v "ID"'.
20190402 10:26:43.339 - INFO - Command exited with return code 0.
20190402 10:26:43.339 - INFO - ${stdout} =
20190402 10:26:43.340 - INFO - ${stderr} =
20190402 10:26:43.340 - INFO - ${rc} = 0
20190402 10:26:43.340 - INFO - +------- END KW: SSHLibrary.Execute Command (1434)
20190402 10:26:43.341 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:43.342 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:26:43.342 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:26:43.342 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:43.343 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:43.344 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:26:43.344 - INFO - +------ END KW: OpenStack.Run OS Command (1439)
20190402 10:26:43.344 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:26:43.344 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:26:43.344 - INFO - ${response} =
20190402 10:26:43.344 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:26:43.345 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:26:43.345 - INFO - @{res_in_list} = [ ]
20190402 10:26:43.345 - INFO - +------- END KW: String.Split String (0)
20190402 10:26:43.345 - INFO - @{volume_list} = [ ]
20190402 10:26:43.345 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:26:43.345 - INFO - +------ START KW: ${volume} IN [ @{volume_list} ] [ ]
20190402 10:26:43.345 - INFO - +------ END KW: ${volume} IN [ @{volume_list} ] (0)
20190402 10:26:43.345 - INFO - +----- END KW: OpenStack.Delete All Volumes (1441)
20190402 10:26:43.345 - INFO - +----- START KW: OpenStack.Delete All Stacks [ ]
20190402 10:26:43.345 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack stack list ]
20190402 10:26:43.346 - INFO - ${openstack_cmd} = openstack stack list
20190402 10:26:43.346 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:26:43.346 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:26:43.346 - INFO - ${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"
20190402 10:26:43.346 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:26:43.346 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:26:43.346 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:43.347 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:43.347 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:26:43.347 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:43.347 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack list|awk '{print$4}'|grep -v "Name"'.
20190402 10:26:45.188 - INFO - Command exited with return code 0.
20190402 10:26:45.188 - INFO - ${stdout} =
20190402 10:26:45.189 - INFO - ${stderr} =
20190402 10:26:45.189 - INFO - ${rc} = 0
20190402 10:26:45.189 - INFO - +------- END KW: SSHLibrary.Execute Command (1842)
20190402 10:26:45.190 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:45.191 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:26:45.191 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:26:45.192 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:45.193 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:45.193 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:26:45.193 - INFO - +------ END KW: OpenStack.Run OS Command (1847)
20190402 10:26:45.193 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:26:45.193 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:26:45.194 - INFO - ${response} =
20190402 10:26:45.194 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:26:45.194 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:26:45.194 - INFO - @{res_in_list} = [ ]
20190402 10:26:45.194 - INFO - +------- END KW: String.Split String (0)
20190402 10:26:45.194 - INFO - @{stack_list} = [ ]
20190402 10:26:45.194 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:26:45.194 - INFO - +------ START KW: ${stack} IN [ @{stack_list} ] [ ]
20190402 10:26:45.194 - INFO - +------ END KW: ${stack} IN [ @{stack_list} ] (0)
20190402 10:26:45.194 - INFO - +----- END KW: OpenStack.Delete All Stacks (1849)
20190402 10:26:45.194 - INFO - +---- END KW: OpenStack.Openstack Cleanup All (19179)
20190402 10:26:45.195 - INFO - +---- START KW: Utils.Stx Suite TearDown [ ]
20190402 10:26:45.195 - INFO - +----- START KW: SSHLibrary.Close All Connections [ ]
20190402 10:26:45.197 - INFO - +----- END KW: SSHLibrary.Close All Connections (2)
20190402 10:26:45.197 - INFO - +---- END KW: Utils.Stx Suite TearDown (2)
20190402 10:26:45.197 - INFO - +--- END TEARDOWN: BuiltIn.Run Keywords (19182)
==============================================================================
20190402 10:26:45.200 - INFO - +-- END SUITE: Sanity-Test.Sanity-OpenStack.01-Instance-From-Image (269874)
==============================================================================
20190402 10:26:45.213 - INFO - +-- START SUITE: Sanity-Test.Sanity-OpenStack.02-Instance-From-Volume [ ]
==============================================================================
20190402 10:26:45.213 - INFO - +--- START SETUP: Utils.Stx Suite Setup [ ]
20190402 10:26:45.213 - INFO - +---- START KW: Utils.Open Master Controller Connection [ ]
20190402 10:26:45.213 - INFO - +----- START KW: Utils.Connect to Controller Node [ ${CONFIG.credentials.STX_DEPLOY_USER_NAME} | ${CONFIG.credentials.STX_DEPLOY_USER_PSWD} | ${CONFIG.general.IP_UNIT_0_ADDRESS} ]
20190402 10:26:45.214 - INFO - +------ START KW: SSHLibrary.Open Connection [ ${ip_address} prompt=${prompt} | timeout=${timeout} ]
20190402 10:26:45.214 - INFO - ${controller_connection} = 1
20190402 10:26:45.214 - INFO - +------ END KW: SSHLibrary.Open Connection (0)
20190402 10:26:45.214 - INFO - +------ START KW: Utils.Flexible_SSH_Login [ ${user} | ${password} ]
20190402 10:26:45.215 - INFO - +------- START KW: BuiltIn.Get Length [ ${password} ]
20190402 10:26:45.215 - INFO - Length is 10
20190402 10:26:45.215 - INFO - ${pwd_length} = 10
20190402 10:26:45.215 - INFO - +------- END KW: BuiltIn.Get Length (0)
20190402 10:26:45.215 - INFO - +------- START KW: BuiltIn.Run Keyword And Return If [ ${pwd_length} > 0 | SSHLibrary.Login | ${user} | ${password} | delay=${delay} ]
20190402 10:26:45.215 - INFO - +-------- START KW: SSHLibrary.Login [ ${user} | ${password} | delay=${delay} ]
20190402 10:26:45.216 - INFO - Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.
20190402 10:26:46.305 - INFO - Read output: Last login: Tue Apr  2 16:10:58 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$
20190402 10:26:46.305 - INFO - +-------- END KW: SSHLibrary.Login (1090)
20190402 10:26:46.306 - INFO - Returning from the enclosing user keyword.
20190402 10:26:46.306 - INFO - +------- END KW: BuiltIn.Run Keyword And Return If (1091)
20190402 10:26:46.307 - INFO - +------ END KW: Utils.Flexible_SSH_Login (1092)
20190402 10:26:46.307 - INFO - ${master_controller_connection} = 1
20190402 10:26:46.307 - INFO - +----- END KW: Utils.Connect to Controller Node (1094)
20190402 10:26:46.308 - INFO - +----- START KW: BuiltIn.Set Suite Variable [ ${master_controller_connection} ]
20190402 10:26:46.309 - INFO - ${master_controller_connection} = 1
20190402 10:26:46.309 - INFO - +----- END KW: BuiltIn.Set Suite Variable (1)
20190402 10:26:46.309 - INFO - +----- START KW: BuiltIn.Log [ ${master_controller_connection} ]
20190402 10:26:46.310 - INFO - 1
20190402 10:26:46.310 - INFO - +----- END KW: BuiltIn.Log (1)
20190402 10:26:46.311 - INFO - +---- END KW: Utils.Open Master Controller Connection (1097)
20190402 10:26:46.311 - INFO - +---- START KW: Utils.Set Env Vars From Openrc [ ]
20190402 10:26:46.312 - INFO - +----- START KW: Utils.Run Command [ source /etc/platform/openrc | True ]
20190402 10:26:46.314 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:26:46.315 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:26:46.315 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:26:46.316 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:26:46.317 - INFO - &{result_dict} = { stdout= }
20190402 10:26:46.317 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:26:46.318 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:26:46.319 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:26:46.319 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:26:46.320 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 10:26:46.320 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:26:46.321 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (6)
20190402 10:26:46.321 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 10:26:46.322 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 10:26:46.322 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:26:46.336 - INFO - source /etc/platform/openrc
20190402 10:26:46.336 - INFO - +------ END KW: SSHLibrary.Write (14)
20190402 10:26:46.336 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:26:46.723 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:26:46.723 - INFO - ${output} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:26:46.724 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (387)
20190402 10:26:46.724 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:26:46.724 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:26:46.724 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:26:46.724 - INFO - +------- END KW: String.Get Line (0)
20190402 10:26:46.724 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:26:46.725 - INFO - ${clean_out} =
20190402 10:26:46.725 - INFO - +------- END KW: String.Remove String (1)
20190402 10:26:46.725 - INFO - ${output} =
20190402 10:26:46.725 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 10:26:46.725 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 10:26:46.725 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:26:46.726 - INFO - echo $?
20190402 10:26:46.726 - INFO - +------- END KW: SSHLibrary.Write (1)
20190402 10:26:46.726 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:26:46.727 - INFO - 0
20190402 10:26:46.727 - INFO - ${rc} = 0
20190402 10:26:46.727 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 10:26:46.727 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:26:46.727 - INFO - 0
20190402 10:26:46.727 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 10:26:46.727 - INFO - ${rc} = 0
20190402 10:26:46.727 - INFO - +------ END KW: Utils.Get Return Code (2)
20190402 10:26:46.727 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:26:46.728 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:26:46.728 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:26:46.728 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:46.728 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:26:46.728 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 10:26:46.729 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:26:46.729 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout:
20190402 10:26:46.729 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 10:26:46.729 - INFO - +----- END KW: Utils.Run Command (417)
20190402 10:26:46.729 - INFO - +---- END KW: Utils.Set Env Vars From Openrc (418)
20190402 10:26:46.729 - INFO - +--- END SETUP: Utils.Stx Suite Setup (1516)
------------------------------------------------------------------------------
20190402 10:26:46.729 - INFO - +--- START TEST: Create Flavors for Instances [ ]
------------------------------------------------------------------------------
20190402 10:26:46.730 - INFO - +---- START KW: BuiltIn.Catenate [ ${flavor_property_1} | ${flavor_property_2} ]
20190402 10:26:46.730 - INFO - ${properties} = --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared'
20190402 10:26:46.730 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:26:46.730 - INFO - +---- START KW: OpenStack.Create Flavor [ ${cirros_flavor_ram} | ${cirros_flavor_vcpus} | ${cirros_flavor_disk} | ${cirros_flavor_name} ]
20190402 10:26:46.730 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 10:26:46.731 - INFO - ${openstack_cmd} = openstack flavor create
20190402 10:26:46.731 - INFO - +----- END KW: BuiltIn.Set Variable (1)
20190402 10:26:46.731 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 10:26:46.731 - INFO - ${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small
20190402 10:26:46.731 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 10:26:46.731 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:26:46.732 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:46.732 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:46.732 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:26:46.732 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:46.732 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.
20190402 10:26:48.165 - INFO - Command exited with return code 0.
20190402 10:26:48.166 - INFO - ${stdout} = +----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+------------------------------...
20190402 10:26:48.166 - INFO - ${stderr} =
20190402 10:26:48.166 - INFO - ${rc} = 0
20190402 10:26:48.167 - INFO - +------ END KW: SSHLibrary.Execute Command (1435)
20190402 10:26:48.167 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:48.169 - INFO - ${res} = {u'stdout': u'+----------------------------+--------------------------------------+\n| Field                      | Value                                |\n+----------------------------+--------------...
20190402 10:26:48.169 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:26:48.169 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:48.170 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:48.171 - INFO - +----- END KW: OpenStack.Run OS Command (1440)
20190402 10:26:48.171 - INFO - +---- END KW: OpenStack.Create Flavor (1441)
------------------------------------------------------------------------------
20190402 10:26:48.172 - INFO - +--- END TEST: Create Flavors for Instances (1443)
------------------------------------------------------------------------------
20190402 10:26:48.173 - INFO - +--- START TEST: Create Images for Instances [ ]
------------------------------------------------------------------------------
20190402 10:26:48.174 - INFO - +---- START KW: SSHLibrary.Put File [ %{PYTHONPATH}/${cirros_image} | ${host_image_path}/${cirros_image} ]
20190402 10:26:48.183 - INFO - [chan 2] Opened sftp connection (server version 3)
20190402 10:26:48.191 - INFO - [chan 3] Opened sftp connection (server version 3)
20190402 10:26:48.193 - FAIL - There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.
20190402 10:26:48.193 - DEBUG - Traceback (most recent call last):
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1559, in put_file
    destination, mode, newline, scp)
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1619, in _run_command
    raise RuntimeError(e)
20190402 10:26:48.193 - INFO - +---- END KW: SSHLibrary.Put File (19)
------------------------------------------------------------------------------
20190402 10:26:48.194 - INFO - +--- END TEST: Create Images for Instances (21)
------------------------------------------------------------------------------
20190402 10:26:48.195 - INFO - +--- START TEST: Create Networks for Instance [ ]
------------------------------------------------------------------------------
20190402 10:26:48.196 - INFO - +---- START KW: OpenStack.Create Network [ ${network_name} ]
20190402 10:26:48.197 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack network create ]
20190402 10:26:48.198 - INFO - ${openstack_cmd} = openstack network create
20190402 10:26:48.198 - INFO - +----- END KW: BuiltIn.Set Variable (1)
20190402 10:26:48.198 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${network_name} | ${additional_args} ]
20190402 10:26:48.198 - INFO - ${cmd} = openstack network create network-1
20190402 10:26:48.198 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 10:26:48.198 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:26:48.199 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:48.199 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:48.199 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:26:48.199 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:48.199 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network create network-1 '.
20190402 10:26:49.632 - INFO - Command exited with return code 0.
20190402 10:26:49.633 - INFO - ${stdout} = +---------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:26:49.633 - INFO - ${stderr} =
20190402 10:26:49.633 - INFO - ${rc} = 0
20190402 10:26:49.633 - INFO - +------ END KW: SSHLibrary.Execute Command (1434)
20190402 10:26:49.634 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:49.635 - INFO - ${res} = {u'stdout': u"+---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:26:49.636 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:26:49.636 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:49.637 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:49.637 - INFO - +----- END KW: OpenStack.Run OS Command (1439)
20190402 10:26:49.637 - INFO - +---- END KW: OpenStack.Create Network (1441)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:26:49.637 - INFO - +---- START KW: OpenStack.Create Subnet [ ${network_name} | ${subnet_range} | ${subnet_extras} ]
20190402 10:26:49.638 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack subnet create ]
20190402 10:26:49.638 - INFO - ${openstack_cmd} = openstack subnet create
20190402 10:26:49.638 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:26:49.638 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --network ${network_name} | --subnet-range ${range_ip} ${additional_args} ]
20190402 10:26:49.638 - INFO - ${cmd} = openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1
20190402 10:26:49.638 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 10:26:49.638 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:26:49.639 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:49.639 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:49.639 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:26:49.639 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:49.639 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1'.
20190402 10:26:51.373 - INFO - Command exited with return code 0.
20190402 10:26:51.374 - INFO - ${stdout} = +-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:26:51.374 - INFO - ${stderr} =
20190402 10:26:51.374 - INFO - ${rc} = 0
20190402 10:26:51.374 - INFO - +------ END KW: SSHLibrary.Execute Command (1735)
20190402 10:26:51.375 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:51.377 - INFO - ${res} = {u'stdout': u"+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:26:51.377 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:26:51.377 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:51.378 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:51.378 - INFO - +----- END KW: OpenStack.Run OS Command (1740)
20190402 10:26:51.378 - INFO - +---- END KW: OpenStack.Create Subnet (1741)
------------------------------------------------------------------------------
20190402 10:26:51.378 - INFO - +--- END TEST: Create Networks for Instance (3184)
------------------------------------------------------------------------------
20190402 10:26:51.379 - INFO - +--- START TEST: Create Volume for Instances [ ]
------------------------------------------------------------------------------
20190402 10:26:51.379 - INFO - +---- START KW: OpenStack.Create Volume [ ${cirros_volume_size} | ${cirros_image_name} | --bootable | ${cirros_volume_name} ]
20190402 10:26:51.380 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack volume create ]
20190402 10:26:51.380 - INFO - ${openstack_cmd} = openstack volume create
20190402 10:26:51.380 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:26:51.380 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --size ${size} | --image ${image} | ${bootable} | ${name} ]
20190402 10:26:51.380 - INFO - ${cmd} = openstack volume create --size 20 --image cirros --bootable vol-cirros-1
20190402 10:26:51.380 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 10:26:51.380 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 10:26:51.381 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:51.381 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:51.381 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:26:51.381 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:51.381 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume create --size 20 --image cirros --bootable vol-cirros-1'.
20190402 10:26:52.713 - INFO - Command exited with return code 1.
20190402 10:26:52.714 - INFO - ${stdout} =
20190402 10:26:52.714 - INFO - ${stderr} = Could not find resource cirros
20190402 10:26:52.714 - INFO - ${rc} = 1
20190402 10:26:52.715 - INFO - +------ END KW: SSHLibrary.Execute Command (1334)
20190402 10:26:52.715 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:52.717 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Could not find resource cirros', u'rc': 1}
20190402 10:26:52.717 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:26:52.717 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:52.719 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:26:52.719 - FAIL - Could not find resource cirros
20190402 10:26:52.719 - DEBUG - Traceback (most recent call last):
  None
20190402 10:26:52.719 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:26:52.719 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:26:52.719 - INFO - +----- END KW: OpenStack.Run OS Command (1339)
20190402 10:26:52.719 - INFO - +---- END KW: OpenStack.Create Volume (1340)
------------------------------------------------------------------------------
20190402 10:26:52.720 - INFO - +--- END TEST: Create Volume for Instances (1341)
------------------------------------------------------------------------------
20190402 10:26:52.720 - INFO - +--- START TEST: Launch Instances [ ]
------------------------------------------------------------------------------
20190402 10:26:52.720 - INFO - +---- START KW: OpenStack.Create Instance From Volume [ ${network_name} | ${cirros_instance_name} | ${cirros_volume_name} | ${cirros_flavor_name} ]
20190402 10:26:52.721 - INFO - +----- START KW: OpenStack.Get Net Id [ ${net_name} ]
20190402 10:26:52.721 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 10:26:52.721 - INFO - ${openstack_cmd} = openstack network list
20190402 10:26:52.721 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:26:52.721 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep "${network_name}" | awk '{print$2}' ]
20190402 10:26:52.721 - INFO - ${cmd} = openstack network list|grep "network-1"|awk '{print$2}'
20190402 10:26:52.721 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:26:52.722 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:26:52.722 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:52.722 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:52.722 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:26:52.722 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:52.723 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|grep "network-1"|awk '{print$2}''.
20190402 10:26:54.156 - INFO - Command exited with return code 0.
20190402 10:26:54.156 - INFO - ${stdout} = ecc2bdb2-d207-49c6-8498-136d67af2996
20190402 10:26:54.157 - INFO - ${stderr} =
20190402 10:26:54.157 - INFO - ${rc} = 0
20190402 10:26:54.157 - INFO - +------- END KW: SSHLibrary.Execute Command (1435)
20190402 10:26:54.158 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:54.159 - INFO - ${res} = {u'stdout': u'ecc2bdb2-d207-49c6-8498-136d67af2996', u'stderr': u'', u'rc': 0}
20190402 10:26:54.159 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:26:54.160 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:54.161 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:54.161 - INFO - &{result} = { stdout=ecc2bdb2-d207-49c6-8498-136d67af2996 | stderr= | rc=0 }
20190402 10:26:54.161 - INFO - +------ END KW: OpenStack.Run OS Command (1439)
20190402 10:26:54.161 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:26:54.161 - INFO - ${output} = ecc2bdb2-d207-49c6-8498-136d67af2996
20190402 10:26:54.161 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 10:26:54.161 - INFO - +------ START KW: String.Split String [ ${output} | ${EMPTY} ]
20190402 10:26:54.162 - INFO - ${splitted_output} = [u'ecc2bdb2-d207-49c6-8498-136d67af2996']
20190402 10:26:54.162 - INFO - +------ END KW: String.Split String (1)
20190402 10:26:54.162 - INFO - +------ START KW: Collections.Get From List [ ${splitted_output} | 0 ]
20190402 10:26:54.162 - INFO - ${net_id} = ecc2bdb2-d207-49c6-8498-136d67af2996
20190402 10:26:54.162 - INFO - +------ END KW: Collections.Get From List (0)
20190402 10:26:54.162 - INFO - ${net_id} = ecc2bdb2-d207-49c6-8498-136d67af2996
20190402 10:26:54.162 - INFO - +----- END KW: OpenStack.Get Net Id (1441)
20190402 10:26:54.162 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack server create ]
20190402 10:26:54.163 - INFO - ${openstack_cmd} = openstack server create
20190402 10:26:54.163 - INFO - +----- END KW: BuiltIn.Set Variable (1)
20190402 10:26:54.163 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --volume ${volume} | --flavor ${flavor} | --nic net-id=${net_id} | ${vm_name} ]
20190402 10:26:54.163 - INFO - ${cmd} = openstack server create --volume vol-cirros-1 --flavor f1.small --nic net-id=ecc2bdb2-d207-49c6-8498-136d67af2996 vm-cirros-1
20190402 10:26:54.163 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 10:26:54.163 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 10:26:54.163 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:54.164 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:54.164 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:26:54.165 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:54.165 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server create --volume vol-cirros-1 --flavor f1.small --nic net-id=ecc2bdb2-d207-49c6-8498-136d67af2996 vm-cirros-1'.
20190402 10:26:55.598 - INFO - Command exited with return code 1.
20190402 10:26:55.599 - INFO - ${stdout} =
20190402 10:26:55.599 - INFO - ${stderr} = No volume with a name or ID of 'vol-cirros-1' exists.
20190402 10:26:55.599 - INFO - ${rc} = 1
20190402 10:26:55.599 - INFO - +------ END KW: SSHLibrary.Execute Command (1435)
20190402 10:26:55.599 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:55.600 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No volume with a name or ID of 'vol-cirros-1' exists.", u'rc': 1}
20190402 10:26:55.600 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:26:55.600 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:55.601 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:26:55.601 - FAIL - No volume with a name or ID of 'vol-cirros-1' exists.
20190402 10:26:55.601 - DEBUG - Traceback (most recent call last):
  None
20190402 10:26:55.601 - INFO - +------- END KW: BuiltIn.Fail (0)
20190402 10:26:55.601 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:26:55.601 - INFO - +----- END KW: OpenStack.Run OS Command (1438)
20190402 10:26:55.602 - INFO - +---- END KW: OpenStack.Create Instance From Volume (2882)
------------------------------------------------------------------------------
20190402 10:26:55.602 - INFO - +--- END TEST: Launch Instances (2882)
------------------------------------------------------------------------------
20190402 10:26:55.603 - INFO - +--- START TEST: Suspend Resume Instance [ ]
------------------------------------------------------------------------------
20190402 10:26:55.603 - INFO - +---- START KW: OpenStack.Suspend Instance [ ${cirros_instance_name} ]
20190402 10:26:55.603 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server suspend ${vm_name} | True | 30 sec ]
20190402 10:26:55.604 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:55.604 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:55.604 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:26:55.604 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:55.605 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server suspend vm-cirros-1'.
20190402 10:26:57.036 - INFO - Command exited with return code 1.
20190402 10:26:57.037 - INFO - ${stdout} =
20190402 10:26:57.037 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:26:57.037 - INFO - ${rc} = 1
20190402 10:26:57.037 - INFO - +------ END KW: SSHLibrary.Execute Command (1433)
20190402 10:26:57.038 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:57.039 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:26:57.039 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:26:57.040 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:57.041 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:26:57.041 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:26:57.042 - DEBUG - Traceback (most recent call last):
  None
20190402 10:26:57.042 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:26:57.042 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:26:57.042 - INFO - +----- END KW: OpenStack.Run OS Command (1439)
20190402 10:26:57.042 - INFO - +---- END KW: OpenStack.Suspend Instance (1439)
------------------------------------------------------------------------------
20190402 10:26:57.042 - INFO - +--- END TEST: Suspend Resume Instance (1440)
------------------------------------------------------------------------------
20190402 10:26:57.043 - INFO - +--- START TEST: Set Error Active Flags Instance [ ]
------------------------------------------------------------------------------
20190402 10:26:57.043 - INFO - +---- START KW: OpenStack.Set Error State Instance [ ${cirros_instance_name} | error ]
20190402 10:26:57.043 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server set --state ${value} ${vm_name} | True | 30 sec ]
20190402 10:26:57.043 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:57.044 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:57.044 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:26:57.044 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:57.044 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server set --state error vm-cirros-1'.
20190402 10:26:58.427 - INFO - Command exited with return code 1.
20190402 10:26:58.428 - INFO - ${stdout} =
20190402 10:26:58.428 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:26:58.428 - INFO - ${rc} = 1
20190402 10:26:58.428 - INFO - +------ END KW: SSHLibrary.Execute Command (1384)
20190402 10:26:58.429 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:58.430 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:26:58.430 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:26:58.431 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:58.432 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:26:58.432 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:26:58.432 - DEBUG - Traceback (most recent call last):
  None
20190402 10:26:58.432 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:26:58.432 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:26:58.432 - INFO - +----- END KW: OpenStack.Run OS Command (1389)
20190402 10:26:58.432 - INFO - +---- END KW: OpenStack.Set Error State Instance (1389)
------------------------------------------------------------------------------
20190402 10:26:58.433 - INFO - +--- END TEST: Set Error Active Flags Instance (1390)
------------------------------------------------------------------------------
20190402 10:26:58.433 - INFO - +--- START TEST: Pause Unpause Instances [ ]
------------------------------------------------------------------------------
20190402 10:26:58.433 - INFO - +---- START KW: OpenStack.Pause Instance [ ${cirros_instance_name} ]
20190402 10:26:58.433 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server pause ${vm_name} | True | 30 sec ]
20190402 10:26:58.434 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:58.434 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:58.434 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:26:58.434 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:58.434 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server pause vm-cirros-1'.
20190402 10:26:59.918 - INFO - Command exited with return code 1.
20190402 10:26:59.919 - INFO - ${stdout} =
20190402 10:26:59.919 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:26:59.919 - INFO - ${rc} = 1
20190402 10:26:59.920 - INFO - +------ END KW: SSHLibrary.Execute Command (1485)
20190402 10:26:59.920 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:26:59.922 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:26:59.922 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:26:59.922 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:26:59.923 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:26:59.924 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:26:59.924 - DEBUG - Traceback (most recent call last):
  None
20190402 10:26:59.924 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:26:59.924 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:26:59.924 - INFO - +----- END KW: OpenStack.Run OS Command (1491)
20190402 10:26:59.924 - INFO - +---- END KW: OpenStack.Pause Instance (1491)
------------------------------------------------------------------------------
20190402 10:26:59.925 - INFO - +--- END TEST: Pause Unpause Instances (1491)
------------------------------------------------------------------------------
20190402 10:26:59.925 - INFO - +--- START TEST: Stop Start Instances [ ]
------------------------------------------------------------------------------
20190402 10:26:59.925 - INFO - +---- START KW: OpenStack.Stop Instance [ ${cirros_instance_name} ]
20190402 10:26:59.925 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server stop ${vm_name} | True | 30 sec ]
20190402 10:26:59.926 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:26:59.926 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:26:59.926 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:26:59.926 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:26:59.926 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server stop vm-cirros-1'.
20190402 10:27:01.323 - INFO - Command exited with return code 1.
20190402 10:27:01.324 - INFO - ${stdout} =
20190402 10:27:01.324 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:27:01.324 - INFO - ${rc} = 1
20190402 10:27:01.325 - INFO - +------ END KW: SSHLibrary.Execute Command (1398)
20190402 10:27:01.325 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:27:01.327 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:27:01.327 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:27:01.327 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:27:01.328 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:27:01.329 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:27:01.329 - DEBUG - Traceback (most recent call last):
  None
20190402 10:27:01.329 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:27:01.329 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:27:01.329 - INFO - +----- END KW: OpenStack.Run OS Command (1404)
20190402 10:27:01.329 - INFO - +---- END KW: OpenStack.Stop Instance (1404)
------------------------------------------------------------------------------
20190402 10:27:01.330 - INFO - +--- END TEST: Stop Start Instances (1404)
------------------------------------------------------------------------------
20190402 10:27:01.330 - INFO - +--- START TEST: Lock Unlock Instances [ ]
------------------------------------------------------------------------------
20190402 10:27:01.330 - INFO - +---- START KW: OpenStack.Lock Instance [ ${cirros_instance_name} ]
20190402 10:27:01.330 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server lock ${vm_name} | True | 30 sec ]
20190402 10:27:01.331 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:27:01.331 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:27:01.331 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:27:01.331 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:27:01.331 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server lock vm-cirros-1'.
20190402 10:27:02.715 - INFO - Command exited with return code 1.
20190402 10:27:02.715 - INFO - ${stdout} =
20190402 10:27:02.715 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:27:02.715 - INFO - ${rc} = 1
20190402 10:27:02.716 - INFO - +------ END KW: SSHLibrary.Execute Command (1384)
20190402 10:27:02.716 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:27:02.717 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:27:02.718 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:27:02.718 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:27:02.719 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:27:02.720 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:27:02.720 - DEBUG - Traceback (most recent call last):
  None
20190402 10:27:02.720 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:27:02.720 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:27:02.720 - INFO - +----- END KW: OpenStack.Run OS Command (1390)
20190402 10:27:02.720 - INFO - +---- END KW: OpenStack.Lock Instance (1390)
------------------------------------------------------------------------------
20190402 10:27:02.721 - INFO - +--- END TEST: Lock Unlock Instances (1390)
------------------------------------------------------------------------------
20190402 10:27:02.721 - INFO - +--- START TEST: Reboot Instances [ ]
------------------------------------------------------------------------------
20190402 10:27:02.721 - INFO - +---- START KW: OpenStack.Reboot Instance [ ${cirros_instance_name} ]
20190402 10:27:02.721 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server reboot ${vm_name} | True | 30 sec ]
20190402 10:27:02.722 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:27:02.722 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:27:02.722 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:27:02.722 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:27:02.722 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server reboot vm-cirros-1'.
20190402 10:27:04.105 - INFO - Command exited with return code 1.
20190402 10:27:04.106 - INFO - ${stdout} =
20190402 10:27:04.106 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:27:04.106 - INFO - ${rc} = 1
20190402 10:27:04.106 - INFO - +------ END KW: SSHLibrary.Execute Command (1384)
20190402 10:27:04.107 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:27:04.108 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:27:04.108 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:27:04.108 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:27:04.110 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:27:04.110 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:27:04.110 - DEBUG - Traceback (most recent call last):
  None
20190402 10:27:04.110 - INFO - +------- END KW: BuiltIn.Fail (0)
20190402 10:27:04.110 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:27:04.110 - INFO - +----- END KW: OpenStack.Run OS Command (1389)
20190402 10:27:04.111 - INFO - +---- END KW: OpenStack.Reboot Instance (1389)
------------------------------------------------------------------------------
20190402 10:27:04.111 - INFO - +--- END TEST: Reboot Instances (1390)
------------------------------------------------------------------------------
20190402 10:27:04.111 - INFO - +--- START TEST: Rebuild Instances [ ]
------------------------------------------------------------------------------
20190402 10:27:04.111 - INFO - +---- START KW: OpenStack.Rebuild Instance From Volume [ ${cirros_instance_name} | ${cirros_image_name} ]
20190402 10:27:04.112 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server rebuild --image ${image} ${vm_name} | True | 30 sec ]
20190402 10:27:04.112 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:27:04.112 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:27:04.112 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:27:04.112 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:27:04.113 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server rebuild --image cirros vm-cirros-1'.
20190402 10:27:05.495 - INFO - Command exited with return code 1.
20190402 10:27:05.496 - INFO - ${stdout} =
20190402 10:27:05.496 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:27:05.496 - INFO - ${rc} = 1
20190402 10:27:05.497 - INFO - +------ END KW: SSHLibrary.Execute Command (1384)
20190402 10:27:05.497 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:27:05.498 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:27:05.499 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:27:05.499 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:27:05.500 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:27:05.501 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:27:05.501 - DEBUG - Traceback (most recent call last):
  None
20190402 10:27:05.501 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:27:05.501 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:27:05.501 - INFO - +----- END KW: OpenStack.Run OS Command (1389)
20190402 10:27:05.501 - INFO - +---- END KW: OpenStack.Rebuild Instance From Volume (1390)
------------------------------------------------------------------------------
20190402 10:27:05.502 - INFO - +--- END TEST: Rebuild Instances (1390)
------------------------------------------------------------------------------
20190402 10:27:05.502 - INFO - +--- START TEST: Resize Instances [ ]
------------------------------------------------------------------------------
20190402 10:27:05.502 - INFO - +---- START KW: OpenStack.Create Flavor [ ${cirros_flavor_ram} | ${cirros_flavor_vcpus} | ${cirros_flavor_disk} | ${cirros_flavor_name_2} ]
20190402 10:27:05.503 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 10:27:05.503 - INFO - ${openstack_cmd} = openstack flavor create
20190402 10:27:05.503 - INFO - +----- END KW: BuiltIn.Set Variable (1)
20190402 10:27:05.503 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 10:27:05.503 - INFO - ${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small
20190402 10:27:05.503 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 10:27:05.503 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:27:05.504 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:27:05.504 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:27:05.504 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:27:05.504 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:27:05.504 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small'.
20190402 10:27:06.952 - INFO - Command exited with return code 0.
20190402 10:27:06.953 - INFO - ${stdout} = +----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+------------------------------...
20190402 10:27:06.953 - INFO - ${stderr} =
20190402 10:27:06.953 - INFO - ${rc} = 0
20190402 10:27:06.954 - INFO - +------ END KW: SSHLibrary.Execute Command (1449)
20190402 10:27:06.954 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:27:06.956 - INFO - ${res} = {u'stdout': u'+----------------------------+--------------------------------------+\n| Field                      | Value                                |\n+----------------------------+--------------...
20190402 10:27:06.956 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:27:06.957 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:27:06.957 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:27:06.957 - INFO - +----- END KW: OpenStack.Run OS Command (1454)
20190402 10:27:06.957 - INFO - +---- END KW: OpenStack.Create Flavor (1455)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:27:06.957 - INFO - +---- START KW: OpenStack.Resize Instance [ ${cirros_instance_name} | ${cirros_flavor_name_2} ]
20190402 10:27:06.958 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server resize --flavor ${flavor} ${vm_name} | True | 30 sec ]
20190402 10:27:06.958 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:27:06.958 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:27:06.958 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:27:06.958 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:27:06.959 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server resize --flavor f2.small vm-cirros-1'.
20190402 10:27:08.342 - INFO - Command exited with return code 1.
20190402 10:27:08.342 - INFO - ${stdout} =
20190402 10:27:08.342 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:27:08.343 - INFO - ${rc} = 1
20190402 10:27:08.343 - INFO - +------ END KW: SSHLibrary.Execute Command (1385)
20190402 10:27:08.343 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:27:08.346 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:27:08.346 - INFO - +------ END KW: BuiltIn.Create Dictionary (3)
20190402 10:27:08.346 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:27:08.347 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:27:08.348 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:27:08.348 - DEBUG - Traceback (most recent call last):
  None
20190402 10:27:08.349 - INFO - +------- END KW: BuiltIn.Fail (2)
20190402 10:27:08.349 - INFO - +------ END KW: BuiltIn.Run Keyword If (3)
20190402 10:27:08.349 - INFO - +----- END KW: OpenStack.Run OS Command (1391)
20190402 10:27:08.350 - INFO - +---- END KW: OpenStack.Resize Instance (1393)
------------------------------------------------------------------------------
20190402 10:27:08.351 - INFO - +--- END TEST: Resize Instances (2848)
------------------------------------------------------------------------------
20190402 10:27:08.352 - INFO - +--- START TEST: Set Unset Properties Instances [ ]
------------------------------------------------------------------------------
20190402 10:27:08.353 - INFO - +---- START KW: BuiltIn.Catenate [ ${instance_property_1}='true' | ${instance_property_2}='500' | ${instance_property_3}='180' ]
20190402 10:27:08.354 - INFO - ${properties} = --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180'
20190402 10:27:08.355 - INFO - +---- END KW: BuiltIn.Catenate (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:27:08.355 - INFO - +---- START KW: OpenStack.Set Instance Property [ ${cirros_instance_name} | ${properties} ]
20190402 10:27:08.356 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server set ${key} ${vm_name} | True | 30 sec ]
20190402 10:27:08.357 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:27:08.358 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:27:08.358 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:27:08.358 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:27:08.359 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-cirros-1'.
20190402 10:27:09.794 - INFO - Command exited with return code 1.
20190402 10:27:09.794 - INFO - ${stdout} =
20190402 10:27:09.794 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:27:09.795 - INFO - ${rc} = 1
20190402 10:27:09.795 - INFO - +------ END KW: SSHLibrary.Execute Command (1437)
20190402 10:27:09.796 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:27:09.797 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:27:09.797 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:27:09.798 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:27:09.799 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:27:09.799 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:27:09.799 - DEBUG - Traceback (most recent call last):
  None
20190402 10:27:09.799 - INFO - +------- END KW: BuiltIn.Fail (0)
20190402 10:27:09.799 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:27:09.799 - INFO - +----- END KW: OpenStack.Run OS Command (1443)
20190402 10:27:09.799 - INFO - +---- END KW: OpenStack.Set Instance Property (1444)
------------------------------------------------------------------------------
20190402 10:27:09.800 - INFO - +--- END TEST: Set Unset Properties Instances (1449)
------------------------------------------------------------------------------
20190402 10:27:09.800 - INFO - +--- START TEST: Evacuate Instances From Hosts [ ]
------------------------------------------------------------------------------
20190402 10:27:09.800 - INFO - +---- START KW: BuiltIn.Run Keyword If [ '${CONFIGURATION_TYPE}' == 'Duplex' | Run Keywords | Evacuate Instances | controller-0 | AND | Evacuate Instances | controller-1 | ELSE IF | '${CONFIGURATION_TYPE}' == 'MN-Local' or '${CONFIGURATION_TYPE}' == 'MN-External' | Run Keywords | Evacuate Instances | compute-0 | AND | Evacuate Instances | compute-1 ]
20190402 10:27:09.801 - INFO - +----- START KW: BuiltIn.Run Keywords [ Evacuate Instances | controller-0 | AND | Evacuate Instances | controller-1 ]
20190402 10:27:09.801 - INFO - +------ START KW: OpenStack.Evacuate Instances [ controller-0 ]
20190402 10:27:09.801 - INFO - +------- START KW: BuiltIn.Set Variable [ openstack compute service set ]
20190402 10:27:09.801 - INFO - ${openstack_cmd} = openstack compute service set
20190402 10:27:09.802 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:27:09.802 - INFO - +------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --disable | --disable-reason test-evacuate | ${host} | nova-compute ]
20190402 10:27:09.802 - INFO - ${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute
20190402 10:27:09.802 - INFO - +------- END KW: BuiltIn.Catenate (0)
20190402 10:27:09.802 - INFO - +------- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 10:27:09.802 - INFO - +-------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:27:09.802 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:27:09.802 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:27:09.803 - INFO - +-------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:27:09.803 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute'.
20190402 10:27:11.200 - INFO - Command exited with return code 0.
20190402 10:27:11.201 - INFO - ${stdout} =
20190402 10:27:11.201 - INFO - ${stderr} =
20190402 10:27:11.201 - INFO - ${rc} = 0
20190402 10:27:11.201 - INFO - +-------- END KW: SSHLibrary.Execute Command (1399)
20190402 10:27:11.202 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:27:11.203 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:27:11.203 - INFO - +-------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:27:11.204 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:27:11.204 - INFO - +-------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:27:11.205 - INFO - +------- END KW: OpenStack.Run OS Command (1403)
20190402 10:27:11.205 - INFO - +------- START KW: BuiltIn.Wait Until Keyword Succeeds [ 5 min | 10 sec | Check Compute Service Property | ${host} | disabled ]
20190402 10:27:11.205 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | disabled ]
20190402 10:27:11.206 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:27:11.206 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:27:11.206 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:27:11.206 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:27:11.206 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:27:11.207 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:27:11.207 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:27:11.207 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:27:11.207 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:27:11.207 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:27:11.208 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:27:11.208 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:27:11.208 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:27:12.537 - INFO - Command exited with return code 0.
20190402 10:27:12.537 - INFO - ${stdout} = disabled
20190402 10:27:12.538 - INFO - ${stderr} =
20190402 10:27:12.538 - INFO - ${rc} = 0
20190402 10:27:12.538 - INFO - +----------- END KW: SSHLibrary.Execute Command (1330)
20190402 10:27:12.538 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:27:12.539 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:27:12.539 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:27:12.539 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:27:12.539 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:27:12.539 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:27:12.540 - INFO - +---------- END KW: OpenStack.Run OS Command (1332)
20190402 10:27:12.540 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:27:12.540 - INFO - ${value} = disabled
20190402 10:27:12.540 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:27:12.540 - INFO - ${current_value} = disabled
20190402 10:27:12.540 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1335)
20190402 10:27:12.541 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:27:12.541 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:27:12.541 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:27:12.541 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1336)
20190402 10:27:12.541 - INFO - +------- END KW: BuiltIn.Wait Until Keyword Succeeds (1336)
20190402 10:27:12.541 - INFO - +------- START KW: BuiltIn.Wait Until Keyword Succeeds [ 5 min | 10 sec | Check Compute Service Property | ${host} | enabled ]
20190402 10:27:12.542 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:27:12.542 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:27:12.543 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:27:12.543 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:27:12.543 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:27:12.543 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:27:12.543 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:27:12.543 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:27:12.544 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:27:12.544 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:27:12.544 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:27:12.544 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:27:12.545 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:27:12.545 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:27:13.929 - INFO - Command exited with return code 0.
20190402 10:27:13.930 - INFO - ${stdout} = disabled
20190402 10:27:13.930 - INFO - ${stderr} =
20190402 10:27:13.930 - INFO - ${rc} = 0
20190402 10:27:13.931 - INFO - +----------- END KW: SSHLibrary.Execute Command (1385)
20190402 10:27:13.931 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:27:13.932 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:27:13.933 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:27:13.933 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:27:13.934 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:27:13.934 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:27:13.935 - INFO - +---------- END KW: OpenStack.Run OS Command (1390)
20190402 10:27:13.935 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:27:13.935 - INFO - ${value} = disabled
20190402 10:27:13.935 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:27:13.935 - INFO - ${current_value} = disabled
20190402 10:27:13.935 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1393)
20190402 10:27:13.935 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:27:13.936 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:27:13.936 - FAIL - disabled != enabled
20190402 10:27:13.936 - DEBUG - Traceback (most recent call last):
  None
20190402 10:27:13.936 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:27:13.936 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1394)
20190402 10:27:23.937 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:27:23.938 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:27:23.939 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:27:23.940 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:27:23.940 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:27:23.940 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:27:23.942 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:27:23.942 - INFO - +---------- END KW: BuiltIn.Catenate (2)
20190402 10:27:23.942 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:27:23.942 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:27:23.943 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:27:23.943 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:27:23.943 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:27:23.943 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:27:25.276 - INFO - Command exited with return code 0.
20190402 10:27:25.277 - INFO - ${stdout} = disabled
20190402 10:27:25.277 - INFO - ${stderr} =
20190402 10:27:25.277 - INFO - ${rc} = 0
20190402 10:27:25.277 - INFO - +----------- END KW: SSHLibrary.Execute Command (1334)
20190402 10:27:25.278 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:27:25.279 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:27:25.279 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:27:25.280 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:27:25.281 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:27:25.281 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:27:25.281 - INFO - +---------- END KW: OpenStack.Run OS Command (1339)
20190402 10:27:25.281 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:27:25.281 - INFO - ${value} = disabled
20190402 10:27:25.281 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:27:25.281 - INFO - ${current_value} = disabled
20190402 10:27:25.282 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1343)
20190402 10:27:25.282 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:27:25.282 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:27:25.282 - FAIL - disabled != enabled
20190402 10:27:25.282 - DEBUG - Traceback (most recent call last):
  None
20190402 10:27:25.282 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:27:25.282 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1345)
20190402 10:27:35.283 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:27:35.284 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:27:35.285 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:27:35.285 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:27:35.286 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:27:35.286 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:27:35.287 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:27:35.287 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:27:35.287 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:27:35.288 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:27:35.288 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:27:35.288 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:27:35.288 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:27:35.289 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:27:36.721 - INFO - Command exited with return code 0.
20190402 10:27:36.722 - INFO - ${stdout} = disabled
20190402 10:27:36.722 - INFO - ${stderr} =
20190402 10:27:36.722 - INFO - ${rc} = 0
20190402 10:27:36.722 - INFO - +----------- END KW: SSHLibrary.Execute Command (1434)
20190402 10:27:36.723 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:27:36.724 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:27:36.725 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:27:36.725 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:27:36.726 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:27:36.726 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:27:36.727 - INFO - +---------- END KW: OpenStack.Run OS Command (1439)
20190402 10:27:36.727 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:27:36.728 - INFO - ${value} = disabled
20190402 10:27:36.728 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:27:36.729 - INFO - ${current_value} = disabled
20190402 10:27:36.729 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1445)
20190402 10:27:36.729 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:27:36.730 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:27:36.730 - FAIL - disabled != enabled
20190402 10:27:36.731 - DEBUG - Traceback (most recent call last):
  None
20190402 10:27:36.731 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (2)
20190402 10:27:36.731 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1448)
20190402 10:27:46.732 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:27:46.732 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:27:46.732 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:27:46.732 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:27:46.732 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:27:46.733 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:27:46.733 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:27:46.733 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:27:46.733 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:27:46.733 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:27:46.733 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:27:46.734 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:27:46.734 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:27:46.734 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:27:48.116 - INFO - Command exited with return code 0.
20190402 10:27:48.117 - INFO - ${stdout} = disabled
20190402 10:27:48.117 - INFO - ${stderr} =
20190402 10:27:48.117 - INFO - ${rc} = 0
20190402 10:27:48.118 - INFO - +----------- END KW: SSHLibrary.Execute Command (1383)
20190402 10:27:48.118 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:27:48.119 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:27:48.120 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:27:48.120 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:27:48.121 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:27:48.121 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:27:48.122 - INFO - +---------- END KW: OpenStack.Run OS Command (1388)
20190402 10:27:48.122 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:27:48.122 - INFO - ${value} = disabled
20190402 10:27:48.122 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:27:48.122 - INFO - ${current_value} = disabled
20190402 10:27:48.122 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1390)
20190402 10:27:48.122 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:27:48.123 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:27:48.123 - FAIL - disabled != enabled
20190402 10:27:48.123 - DEBUG - Traceback (most recent call last):
  None
20190402 10:27:48.123 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:27:48.123 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1392)
20190402 10:27:58.124 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:27:58.125 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:27:58.126 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:27:58.127 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:27:58.127 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:27:58.127 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:27:58.128 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:27:58.129 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:27:58.129 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:27:58.129 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:27:58.129 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:27:58.129 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:27:58.129 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:27:58.130 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:27:59.462 - INFO - Command exited with return code 0.
20190402 10:27:59.463 - INFO - ${stdout} = disabled
20190402 10:27:59.463 - INFO - ${stderr} =
20190402 10:27:59.463 - INFO - ${rc} = 0
20190402 10:27:59.464 - INFO - +----------- END KW: SSHLibrary.Execute Command (1335)
20190402 10:27:59.464 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:27:59.466 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:27:59.466 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:27:59.466 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:27:59.467 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:27:59.468 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:27:59.468 - INFO - +---------- END KW: OpenStack.Run OS Command (1339)
20190402 10:27:59.468 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:27:59.468 - INFO - ${value} = disabled
20190402 10:27:59.468 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:27:59.468 - INFO - ${current_value} = disabled
20190402 10:27:59.468 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1343)
20190402 10:27:59.469 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:27:59.469 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:27:59.469 - FAIL - disabled != enabled
20190402 10:27:59.469 - DEBUG - Traceback (most recent call last):
  None
20190402 10:27:59.469 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:27:59.469 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1345)
20190402 10:28:09.470 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:28:09.471 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:28:09.471 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:28:09.472 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:28:09.472 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:28:09.472 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:28:09.473 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:28:09.473 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:28:09.474 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:28:09.475 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:28:09.475 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:28:09.475 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:28:09.475 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:28:09.475 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:28:10.808 - INFO - Command exited with return code 0.
20190402 10:28:10.809 - INFO - ${stdout} = disabled
20190402 10:28:10.809 - INFO - ${stderr} =
20190402 10:28:10.809 - INFO - ${rc} = 0
20190402 10:28:10.810 - INFO - +----------- END KW: SSHLibrary.Execute Command (1334)
20190402 10:28:10.810 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:28:10.812 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:28:10.813 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:28:10.813 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:28:10.814 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:28:10.815 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:28:10.815 - INFO - +---------- END KW: OpenStack.Run OS Command (1341)
20190402 10:28:10.815 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:28:10.816 - INFO - ${value} = disabled
20190402 10:28:10.816 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:28:10.817 - INFO - ${current_value} = disabled
20190402 10:28:10.817 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1346)
20190402 10:28:10.817 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:28:10.818 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:28:10.819 - FAIL - disabled != enabled
20190402 10:28:10.819 - DEBUG - Traceback (most recent call last):
  None
20190402 10:28:10.819 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (2)
20190402 10:28:10.819 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1349)
20190402 10:28:20.820 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:28:20.822 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:28:20.823 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:28:20.824 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:28:20.824 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:28:20.824 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:28:20.825 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:28:20.825 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:28:20.825 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:28:20.825 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:28:20.825 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:28:20.826 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:28:20.826 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:28:20.826 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:28:22.209 - INFO - Command exited with return code 0.
20190402 10:28:22.209 - INFO - ${stdout} = disabled
20190402 10:28:22.209 - INFO - ${stderr} =
20190402 10:28:22.209 - INFO - ${rc} = 0
20190402 10:28:22.209 - INFO - +----------- END KW: SSHLibrary.Execute Command (1383)
20190402 10:28:22.210 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:28:22.210 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:28:22.210 - INFO - +----------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:28:22.210 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:28:22.210 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:28:22.211 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:28:22.211 - INFO - +---------- END KW: OpenStack.Run OS Command (1386)
20190402 10:28:22.211 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:28:22.211 - INFO - ${value} = disabled
20190402 10:28:22.211 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:28:22.211 - INFO - ${current_value} = disabled
20190402 10:28:22.211 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1390)
20190402 10:28:22.211 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:28:22.211 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:28:22.212 - FAIL - disabled != enabled
20190402 10:28:22.212 - DEBUG - Traceback (most recent call last):
  None
20190402 10:28:22.212 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:28:22.212 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1392)
20190402 10:28:32.213 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:28:32.214 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:28:32.215 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:28:32.216 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:28:32.216 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:28:32.216 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:28:32.217 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:28:32.217 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:28:32.218 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:28:32.218 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:28:32.218 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:28:32.218 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:28:32.218 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:28:32.219 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:28:33.802 - INFO - Command exited with return code 0.
20190402 10:28:33.803 - INFO - ${stdout} = enabled
20190402 10:28:33.803 - INFO - ${stderr} =
20190402 10:28:33.803 - INFO - ${rc} = 0
20190402 10:28:33.804 - INFO - +----------- END KW: SSHLibrary.Execute Command (1585)
20190402 10:28:33.804 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:28:33.805 - INFO - ${res} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}
20190402 10:28:33.806 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:28:33.806 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:28:33.807 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:28:33.807 - INFO - ${result} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}
20190402 10:28:33.808 - INFO - +---------- END KW: OpenStack.Run OS Command (1589)
20190402 10:28:33.808 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:28:33.808 - INFO - ${value} = enabled
20190402 10:28:33.808 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:28:33.808 - INFO - ${current_value} = enabled
20190402 10:28:33.808 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1594)
20190402 10:28:33.808 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:28:33.809 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:28:33.809 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:28:33.809 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1597)
20190402 10:28:33.809 - INFO - +------- END KW: BuiltIn.Wait Until Keyword Succeeds (81268)
20190402 10:28:33.809 - INFO - +------ END KW: OpenStack.Evacuate Instances (84008)
20190402 10:28:33.809 - INFO - +------ START KW: OpenStack.Evacuate Instances [ controller-1 ]
20190402 10:28:33.809 - INFO - +------- START KW: BuiltIn.Set Variable [ openstack compute service set ]
20190402 10:28:33.809 - INFO - ${openstack_cmd} = openstack compute service set
20190402 10:28:33.809 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:28:33.810 - INFO - +------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --disable | --disable-reason test-evacuate | ${host} | nova-compute ]
20190402 10:28:33.810 - INFO - ${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-1 nova-compute
20190402 10:28:33.810 - INFO - +------- END KW: BuiltIn.Catenate (0)
20190402 10:28:33.810 - INFO - +------- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 10:28:33.810 - INFO - +-------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:28:33.810 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:28:33.810 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:28:33.810 - INFO - +-------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:28:33.811 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service set --disable --disable-reason test-evacuate controller-1 nova-compute'.
20190402 10:28:35.193 - INFO - Command exited with return code 0.
20190402 10:28:35.194 - INFO - ${stdout} =
20190402 10:28:35.194 - INFO - ${stderr} =
20190402 10:28:35.194 - INFO - ${rc} = 0
20190402 10:28:35.195 - INFO - +-------- END KW: SSHLibrary.Execute Command (1385)
20190402 10:28:35.195 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:28:35.198 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:28:35.198 - INFO - +-------- END KW: BuiltIn.Create Dictionary (3)
20190402 10:28:35.198 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:28:35.199 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:28:35.199 - INFO - +------- END KW: OpenStack.Run OS Command (1389)
20190402 10:28:35.199 - INFO - +------- START KW: BuiltIn.Wait Until Keyword Succeeds [ 5 min | 10 sec | Check Compute Service Property | ${host} | disabled ]
20190402 10:28:35.199 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | disabled ]
20190402 10:28:35.200 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:28:35.200 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:28:35.200 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:28:35.200 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:28:35.200 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:28:35.200 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:28:35.201 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:28:35.201 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:28:35.201 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:28:35.201 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:28:35.201 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:28:35.201 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:28:35.202 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:28:36.592 - INFO - Command exited with return code 0.
20190402 10:28:36.592 - INFO - ${stdout} = disabled
20190402 10:28:36.592 - INFO - ${stderr} =
20190402 10:28:36.592 - INFO - ${rc} = 0
20190402 10:28:36.592 - INFO - +----------- END KW: SSHLibrary.Execute Command (1391)
20190402 10:28:36.593 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:28:36.594 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:28:36.594 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:28:36.594 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:28:36.594 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:28:36.595 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:28:36.595 - INFO - +---------- END KW: OpenStack.Run OS Command (1394)
20190402 10:28:36.595 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:28:36.595 - INFO - ${value} = disabled
20190402 10:28:36.596 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:28:36.596 - INFO - ${current_value} = disabled
20190402 10:28:36.596 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1396)
20190402 10:28:36.596 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:28:36.597 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:28:36.597 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:28:36.597 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1398)
20190402 10:28:36.597 - INFO - +------- END KW: BuiltIn.Wait Until Keyword Succeeds (1398)
20190402 10:28:36.597 - INFO - +------- START KW: BuiltIn.Wait Until Keyword Succeeds [ 5 min | 10 sec | Check Compute Service Property | ${host} | enabled ]
20190402 10:28:36.598 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:28:36.599 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:28:36.599 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:28:36.600 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:28:36.600 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:28:36.600 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:28:36.601 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:28:36.601 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:28:36.601 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:28:36.602 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:28:36.602 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:28:36.602 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:28:36.603 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:28:36.603 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:28:38.038 - INFO - Command exited with return code 0.
20190402 10:28:38.038 - INFO - ${stdout} = disabled
20190402 10:28:38.038 - INFO - ${stderr} =
20190402 10:28:38.039 - INFO - ${rc} = 0
20190402 10:28:38.039 - INFO - +----------- END KW: SSHLibrary.Execute Command (1436)
20190402 10:28:38.039 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:28:38.041 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:28:38.041 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:28:38.041 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:28:38.042 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:28:38.043 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:28:38.043 - INFO - +---------- END KW: OpenStack.Run OS Command (1442)
20190402 10:28:38.043 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:28:38.043 - INFO - ${value} = disabled
20190402 10:28:38.043 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:28:38.043 - INFO - ${current_value} = disabled
20190402 10:28:38.043 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1444)
20190402 10:28:38.044 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:28:38.044 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:28:38.044 - FAIL - disabled != enabled
20190402 10:28:38.044 - DEBUG - Traceback (most recent call last):
  None
20190402 10:28:38.044 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:28:38.044 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1446)
20190402 10:28:48.045 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:28:48.047 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:28:48.048 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:28:48.049 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:28:48.049 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:28:48.049 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:28:48.050 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:28:48.050 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:28:48.050 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:28:48.050 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:28:48.050 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:28:48.051 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:28:48.051 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:28:48.051 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:28:49.384 - INFO - Command exited with return code 0.
20190402 10:28:49.384 - INFO - ${stdout} = disabled
20190402 10:28:49.385 - INFO - ${stderr} =
20190402 10:28:49.385 - INFO - ${rc} = 0
20190402 10:28:49.385 - INFO - +----------- END KW: SSHLibrary.Execute Command (1334)
20190402 10:28:49.386 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:28:49.387 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:28:49.387 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:28:49.388 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:28:49.389 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:28:49.389 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:28:49.389 - INFO - +---------- END KW: OpenStack.Run OS Command (1339)
20190402 10:28:49.389 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:28:49.389 - INFO - ${value} = disabled
20190402 10:28:49.389 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:28:49.389 - INFO - ${current_value} = disabled
20190402 10:28:49.390 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1343)
20190402 10:28:49.390 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:28:49.390 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:28:49.390 - FAIL - disabled != enabled
20190402 10:28:49.390 - DEBUG - Traceback (most recent call last):
  None
20190402 10:28:49.390 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:28:49.390 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1345)
20190402 10:28:59.391 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:28:59.392 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:28:59.394 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:28:59.394 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:28:59.394 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:28:59.395 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:28:59.396 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:28:59.396 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:28:59.396 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:28:59.398 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:28:59.398 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:28:59.398 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:28:59.399 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:28:59.400 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:29:00.734 - INFO - Command exited with return code 0.
20190402 10:29:00.734 - INFO - ${stdout} = disabled
20190402 10:29:00.735 - INFO - ${stderr} =
20190402 10:29:00.735 - INFO - ${rc} = 0
20190402 10:29:00.735 - INFO - +----------- END KW: SSHLibrary.Execute Command (1336)
20190402 10:29:00.736 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:29:00.737 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:29:00.737 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:29:00.738 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:29:00.739 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:29:00.739 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:29:00.739 - INFO - +---------- END KW: OpenStack.Run OS Command (1343)
20190402 10:29:00.739 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:29:00.739 - INFO - ${value} = disabled
20190402 10:29:00.739 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:29:00.739 - INFO - ${current_value} = disabled
20190402 10:29:00.739 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1347)
20190402 10:29:00.740 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:29:00.740 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:29:00.740 - FAIL - disabled != enabled
20190402 10:29:00.740 - DEBUG - Traceback (most recent call last):
  None
20190402 10:29:00.740 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:29:00.740 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1349)
20190402 10:29:10.741 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:29:10.742 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:29:10.743 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:29:10.743 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:29:10.744 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:29:10.744 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:29:10.745 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:29:10.745 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:29:10.745 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:29:10.746 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:29:10.746 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:29:10.746 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:29:10.746 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:29:10.747 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:29:12.079 - INFO - Command exited with return code 0.
20190402 10:29:12.080 - INFO - ${stdout} = disabled
20190402 10:29:12.080 - INFO - ${stderr} =
20190402 10:29:12.080 - INFO - ${rc} = 0
20190402 10:29:12.081 - INFO - +----------- END KW: SSHLibrary.Execute Command (1335)
20190402 10:29:12.081 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:29:12.083 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:29:12.083 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:29:12.083 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:29:12.084 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:29:12.084 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:29:12.085 - INFO - +---------- END KW: OpenStack.Run OS Command (1340)
20190402 10:29:12.085 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:29:12.085 - INFO - ${value} = disabled
20190402 10:29:12.085 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:29:12.085 - INFO - ${current_value} = disabled
20190402 10:29:12.085 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1343)
20190402 10:29:12.085 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:29:12.086 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:29:12.086 - FAIL - disabled != enabled
20190402 10:29:12.086 - DEBUG - Traceback (most recent call last):
  None
20190402 10:29:12.086 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:29:12.086 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1345)
20190402 10:29:22.087 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:29:22.088 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:29:22.089 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:29:22.090 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:29:22.090 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:29:22.090 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:29:22.091 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:29:22.092 - INFO - +---------- END KW: BuiltIn.Catenate (2)
20190402 10:29:22.092 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:29:22.092 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:29:22.092 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:29:22.092 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:29:22.093 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:29:22.093 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:29:23.426 - INFO - Command exited with return code 0.
20190402 10:29:23.427 - INFO - ${stdout} = disabled
20190402 10:29:23.427 - INFO - ${stderr} =
20190402 10:29:23.427 - INFO - ${rc} = 0
20190402 10:29:23.428 - INFO - +----------- END KW: SSHLibrary.Execute Command (1336)
20190402 10:29:23.428 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:29:23.430 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:29:23.430 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:29:23.431 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:29:23.432 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:29:23.432 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:29:23.432 - INFO - +---------- END KW: OpenStack.Run OS Command (1340)
20190402 10:29:23.432 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:29:23.432 - INFO - ${value} = disabled
20190402 10:29:23.432 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:29:23.432 - INFO - ${current_value} = disabled
20190402 10:29:23.433 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1345)
20190402 10:29:23.433 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:29:23.433 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:29:23.433 - FAIL - disabled != enabled
20190402 10:29:23.433 - DEBUG - Traceback (most recent call last):
  None
20190402 10:29:23.433 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:29:23.433 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1346)
20190402 10:29:33.434 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:29:33.435 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:29:33.436 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:29:33.437 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:29:33.437 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:29:33.438 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:29:33.439 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:29:33.439 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:29:33.439 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:29:33.439 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:29:33.439 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:29:33.439 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:29:33.440 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:29:33.440 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:29:34.823 - INFO - Command exited with return code 0.
20190402 10:29:34.824 - INFO - ${stdout} = disabled
20190402 10:29:34.824 - INFO - ${stderr} =
20190402 10:29:34.824 - INFO - ${rc} = 0
20190402 10:29:34.824 - INFO - +----------- END KW: SSHLibrary.Execute Command (1384)
20190402 10:29:34.825 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:29:34.827 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:29:34.827 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:29:34.827 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:29:34.828 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:29:34.829 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:29:34.829 - INFO - +---------- END KW: OpenStack.Run OS Command (1390)
20190402 10:29:34.829 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:29:34.830 - INFO - ${value} = disabled
20190402 10:29:34.830 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:29:34.831 - INFO - ${current_value} = disabled
20190402 10:29:34.831 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1396)
20190402 10:29:34.831 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:29:34.832 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:29:34.832 - FAIL - disabled != enabled
20190402 10:29:34.832 - DEBUG - Traceback (most recent call last):
  None
20190402 10:29:34.833 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:29:34.833 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1399)
20190402 10:29:44.834 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:29:44.835 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:29:44.836 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:29:44.836 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:29:44.836 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:29:44.837 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:29:44.838 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:29:44.838 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:29:44.838 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:29:44.839 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:29:44.840 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:29:44.840 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:29:44.840 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:29:44.841 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:29:46.225 - INFO - Command exited with return code 0.
20190402 10:29:46.225 - INFO - ${stdout} = disabled
20190402 10:29:46.226 - INFO - ${stderr} =
20190402 10:29:46.226 - INFO - ${rc} = 0
20190402 10:29:46.226 - INFO - +----------- END KW: SSHLibrary.Execute Command (1386)
20190402 10:29:46.226 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:29:46.228 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:29:46.228 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:29:46.228 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:29:46.230 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:29:46.230 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:29:46.230 - INFO - +---------- END KW: OpenStack.Run OS Command (1392)
20190402 10:29:46.230 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:29:46.231 - INFO - ${value} = disabled
20190402 10:29:46.231 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:29:46.231 - INFO - ${current_value} = disabled
20190402 10:29:46.231 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1396)
20190402 10:29:46.231 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:29:46.232 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:29:46.232 - FAIL - disabled != enabled
20190402 10:29:46.232 - DEBUG - Traceback (most recent call last):
  None
20190402 10:29:46.232 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:29:46.232 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1398)
20190402 10:29:56.233 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:29:56.234 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:29:56.236 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:29:56.236 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:29:56.236 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:29:56.237 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:29:56.238 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:29:56.238 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:29:56.238 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:29:56.238 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:29:56.238 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:29:56.238 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:29:56.239 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:29:56.239 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:29:57.672 - INFO - Command exited with return code 0.
20190402 10:29:57.673 - INFO - ${stdout} = disabled
20190402 10:29:57.673 - INFO - ${stderr} =
20190402 10:29:57.673 - INFO - ${rc} = 0
20190402 10:29:57.674 - INFO - +----------- END KW: SSHLibrary.Execute Command (1434)
20190402 10:29:57.674 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:29:57.676 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:29:57.676 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:29:57.676 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:29:57.677 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:29:57.678 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:29:57.678 - INFO - +---------- END KW: OpenStack.Run OS Command (1440)
20190402 10:29:57.678 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:29:57.679 - INFO - ${value} = disabled
20190402 10:29:57.679 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:29:57.680 - INFO - ${current_value} = disabled
20190402 10:29:57.680 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1446)
20190402 10:29:57.680 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:29:57.681 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:29:57.681 - FAIL - disabled != enabled
20190402 10:29:57.681 - DEBUG - Traceback (most recent call last):
  None
20190402 10:29:57.681 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:29:57.682 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1449)
20190402 10:30:07.683 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:30:07.684 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:30:07.687 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:30:07.688 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:30:07.688 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:30:07.688 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:30:07.688 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:30:07.688 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:30:07.688 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:30:07.689 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:07.689 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:07.689 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:07.689 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:07.689 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:30:09.072 - INFO - Command exited with return code 0.
20190402 10:30:09.073 - INFO - ${stdout} = disabled
20190402 10:30:09.073 - INFO - ${stderr} =
20190402 10:30:09.073 - INFO - ${rc} = 0
20190402 10:30:09.073 - INFO - +----------- END KW: SSHLibrary.Execute Command (1384)
20190402 10:30:09.074 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:30:09.075 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:30:09.076 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:30:09.076 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:30:09.077 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:30:09.077 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:30:09.078 - INFO - +---------- END KW: OpenStack.Run OS Command (1390)
20190402 10:30:09.078 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:30:09.079 - INFO - ${value} = disabled
20190402 10:30:09.079 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:30:09.080 - INFO - ${current_value} = disabled
20190402 10:30:09.080 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1396)
20190402 10:30:09.080 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:30:09.081 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:30:09.081 - FAIL - disabled != enabled
20190402 10:30:09.082 - DEBUG - Traceback (most recent call last):
  None
20190402 10:30:09.082 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (2)
20190402 10:30:09.082 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1399)
20190402 10:30:19.083 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:30:19.084 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:30:19.085 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:30:19.086 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:30:19.086 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:30:19.086 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:30:19.087 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:30:19.087 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:30:19.088 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:30:19.088 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:19.088 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:19.088 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:19.088 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:19.089 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:30:20.471 - INFO - Command exited with return code 0.
20190402 10:30:20.472 - INFO - ${stdout} = disabled
20190402 10:30:20.472 - INFO - ${stderr} =
20190402 10:30:20.472 - INFO - ${rc} = 0
20190402 10:30:20.472 - INFO - +----------- END KW: SSHLibrary.Execute Command (1384)
20190402 10:30:20.473 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:30:20.474 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:30:20.474 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:30:20.474 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:30:20.475 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:30:20.475 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:30:20.476 - INFO - +---------- END KW: OpenStack.Run OS Command (1387)
20190402 10:30:20.476 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:30:20.477 - INFO - ${value} = disabled
20190402 10:30:20.477 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:30:20.477 - INFO - ${current_value} = disabled
20190402 10:30:20.478 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1393)
20190402 10:30:20.478 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:30:20.478 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:30:20.479 - FAIL - disabled != enabled
20190402 10:30:20.479 - DEBUG - Traceback (most recent call last):
  None
20190402 10:30:20.479 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:30:20.479 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1396)
20190402 10:30:30.480 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:30:30.481 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:30:30.483 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:30:30.483 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:30:30.483 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:30.484 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:30:30.485 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:30:30.485 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:30:30.485 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:30:30.485 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:30.486 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:30.486 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:30:30.486 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:30.486 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:30:31.829 - INFO - Command exited with return code 0.
20190402 10:30:31.830 - INFO - ${stdout} = disabled
20190402 10:30:31.830 - INFO - ${stderr} =
20190402 10:30:31.830 - INFO - ${rc} = 0
20190402 10:30:31.831 - INFO - +----------- END KW: SSHLibrary.Execute Command (1345)
20190402 10:30:31.831 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:30:31.833 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:30:31.833 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:30:31.834 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:30:31.834 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:30:31.835 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:30:31.835 - INFO - +---------- END KW: OpenStack.Run OS Command (1350)
20190402 10:30:31.835 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:30:31.836 - INFO - ${value} = disabled
20190402 10:30:31.836 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:30:31.837 - INFO - ${current_value} = disabled
20190402 10:30:31.837 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1356)
20190402 10:30:31.837 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:30:31.838 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:30:31.838 - FAIL - disabled != enabled
20190402 10:30:31.838 - DEBUG - Traceback (most recent call last):
  None
20190402 10:30:31.838 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:30:31.839 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1359)
20190402 10:30:41.840 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:30:41.841 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:30:41.842 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:30:41.842 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:30:41.843 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:30:41.843 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:30:41.844 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:30:41.844 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:30:41.845 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:30:41.845 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:41.845 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:41.845 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:41.845 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:41.846 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:30:43.378 - INFO - Command exited with return code 0.
20190402 10:30:43.379 - INFO - ${stdout} = enabled
20190402 10:30:43.379 - INFO - ${stderr} =
20190402 10:30:43.379 - INFO - ${rc} = 0
20190402 10:30:43.380 - INFO - +----------- END KW: SSHLibrary.Execute Command (1534)
20190402 10:30:43.380 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:30:43.381 - INFO - ${res} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}
20190402 10:30:43.382 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:30:43.382 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:30:43.383 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:30:43.384 - INFO - ${result} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}
20190402 10:30:43.384 - INFO - +---------- END KW: OpenStack.Run OS Command (1540)
20190402 10:30:43.384 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:30:43.385 - INFO - ${value} = enabled
20190402 10:30:43.385 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:30:43.386 - INFO - ${current_value} = enabled
20190402 10:30:43.386 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1545)
20190402 10:30:43.386 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:30:43.387 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:30:43.387 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:30:43.388 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1548)
20190402 10:30:43.388 - INFO - +------- END KW: BuiltIn.Wait Until Keyword Succeeds (126791)
20190402 10:30:43.388 - INFO - +------ END KW: OpenStack.Evacuate Instances (129579)
20190402 10:30:43.388 - INFO - +----- END KW: BuiltIn.Run Keywords (213587)
20190402 10:30:43.389 - INFO - +---- END KW: BuiltIn.Run Keyword If (213588)
------------------------------------------------------------------------------
20190402 10:30:43.390 - INFO - +--- END TEST: Evacuate Instances From Hosts (213589)
------------------------------------------------------------------------------
20190402 10:30:43.396 - INFO - +--- START TEARDOWN: BuiltIn.Run Keywords [ OpenStack.Openstack Cleanup All | Utils.Stx Suite TearDown ]
20190402 10:30:43.396 - INFO - +---- START KW: OpenStack.Openstack Cleanup All [ ]
20190402 10:30:43.397 - INFO - +----- START KW: OpenStack.Delete All Instances [ ]
20190402 10:30:43.398 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack server list ]
20190402 10:30:43.398 - INFO - ${openstack_cmd} = openstack server list
20190402 10:30:43.398 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:30:43.399 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:30:43.399 - INFO - ${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"
20190402 10:30:43.399 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:30:43.400 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:30:43.401 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:43.401 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:43.401 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:43.402 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:43.403 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server list|awk '{print$4}'|grep -v "Name"'.
20190402 10:30:44.887 - INFO - Command exited with return code 0.
20190402 10:30:44.887 - INFO - ${stdout} =
20190402 10:30:44.887 - INFO - ${stderr} =
20190402 10:30:44.887 - INFO - ${rc} = 0
20190402 10:30:44.887 - INFO - +------- END KW: SSHLibrary.Execute Command (1485)
20190402 10:30:44.887 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:30:44.888 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:30:44.888 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:30:44.888 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:30:44.888 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:30:44.889 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:30:44.889 - INFO - +------ END KW: OpenStack.Run OS Command (1489)
20190402 10:30:44.889 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:30:44.889 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:30:44.889 - INFO - ${response} =
20190402 10:30:44.889 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:30:44.889 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:30:44.890 - INFO - @{res_in_list} = [ ]
20190402 10:30:44.890 - INFO - +------- END KW: String.Split String (1)
20190402 10:30:44.890 - INFO - @{vm_list} = [ ]
20190402 10:30:44.890 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:30:44.890 - INFO - +------ START KW: ${vm} IN [ @{vm_list} ] [ ]
20190402 10:30:44.890 - INFO - +------ END KW: ${vm} IN [ @{vm_list} ] (0)
20190402 10:30:44.890 - INFO - +----- END KW: OpenStack.Delete All Instances (1493)
20190402 10:30:44.890 - INFO - +----- START KW: OpenStack.Delete All Images [ ]
20190402 10:30:44.891 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack image list ]
20190402 10:30:44.891 - INFO - ${openstack_cmd} = openstack image list
20190402 10:30:44.891 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:30:44.891 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "Cirros" ]
20190402 10:30:44.892 - INFO - ${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"
20190402 10:30:44.892 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:30:44.892 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:30:44.892 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:44.892 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:44.892 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:44.893 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:44.893 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.
20190402 10:30:46.225 - INFO - Command exited with return code 0.
20190402 10:30:46.225 - INFO - ${stdout} =
20190402 10:30:46.225 - INFO - ${stderr} =
20190402 10:30:46.226 - INFO - ${rc} = 0
20190402 10:30:46.226 - INFO - +------- END KW: SSHLibrary.Execute Command (1333)
20190402 10:30:46.226 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:30:46.228 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:30:46.228 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:30:46.229 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:30:46.229 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:30:46.230 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:30:46.230 - INFO - +------ END KW: OpenStack.Run OS Command (1338)
20190402 10:30:46.230 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:30:46.230 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:30:46.230 - INFO - ${response} =
20190402 10:30:46.231 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:30:46.231 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:30:46.231 - INFO - @{res_in_list} = [ ]
20190402 10:30:46.231 - INFO - +------- END KW: String.Split String (0)
20190402 10:30:46.231 - INFO - @{image_list} = [ ]
20190402 10:30:46.231 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:30:46.231 - INFO - +------ START KW: ${image} IN [ @{image_list} ] [ ]
20190402 10:30:46.231 - INFO - +------ END KW: ${image} IN [ @{image_list} ] (0)
20190402 10:30:46.231 - INFO - +----- END KW: OpenStack.Delete All Images (1341)
20190402 10:30:46.231 - INFO - +----- START KW: OpenStack.Delete All Flavors [ ]
20190402 10:30:46.232 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack flavor list ]
20190402 10:30:46.232 - INFO - ${openstack_cmd} = openstack flavor list
20190402 10:30:46.232 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:30:46.232 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "m1" ]
20190402 10:30:46.232 - INFO - ${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"
20190402 10:30:46.232 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:30:46.232 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:30:46.232 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:46.233 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:46.233 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:30:46.233 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:46.233 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.
20190402 10:30:47.622 - INFO - Command exited with return code 0.
20190402 10:30:47.623 - INFO - ${stdout} = 

f2.small
f1.small
20190402 10:30:47.623 - INFO - ${stderr} =
20190402 10:30:47.623 - INFO - ${rc} = 0
20190402 10:30:47.623 - INFO - +------- END KW: SSHLibrary.Execute Command (1390)
20190402 10:30:47.623 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:30:47.624 - INFO - ${res} = {u'stdout': u'\n\nf2.small\nf1.small', u'stderr': u'', u'rc': 0}
20190402 10:30:47.624 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:30:47.624 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:30:47.624 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:30:47.624 - INFO - &{result} = { stdout=

f2.small
f1.small | stderr= | rc=0 }
20190402 10:30:47.625 - INFO - +------ END KW: OpenStack.Run OS Command (1393)
20190402 10:30:47.625 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:30:47.625 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:30:47.625 - INFO - ${response} = 

f2.small
f1.small
20190402 10:30:47.625 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:30:47.625 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:30:47.626 - INFO - @{res_in_list} = [ f2.small | f1.small ]
20190402 10:30:47.626 - INFO - +------- END KW: String.Split String (1)
20190402 10:30:47.626 - INFO - @{flavor_list} = [ f2.small | f1.small ]
20190402 10:30:47.626 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:30:47.626 - INFO - +------ START KW: ${flavor} IN [ @{flavor_list} ] [ ]
20190402 10:30:47.626 - INFO - +------- START KW: ${flavor} = f2.small [ ]
20190402 10:30:47.626 - INFO - +-------- START KW: OpenStack.Delete Flavor [ ${flavor} ]
20190402 10:30:47.627 - INFO - +--------- START KW: BuiltIn.Set Variable [ openstack flavor delete ]
20190402 10:30:47.627 - INFO - ${openstack_cmd} = openstack flavor delete
20190402 10:30:47.627 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:47.627 - INFO - +--------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${flavor} ]
20190402 10:30:47.627 - INFO - ${cmd} = openstack flavor delete f2.small
20190402 10:30:47.627 - INFO - +--------- END KW: BuiltIn.Catenate (0)
20190402 10:30:47.627 - INFO - +--------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:30:47.628 - INFO - +---------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:47.628 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:47.628 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:47.628 - INFO - +---------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:47.629 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor delete f2.small'.
20190402 10:30:49.058 - INFO - Command exited with return code 0.
20190402 10:30:49.059 - INFO - ${stdout} =
20190402 10:30:49.059 - INFO - ${stderr} =
20190402 10:30:49.059 - INFO - ${rc} = 0
20190402 10:30:49.059 - INFO - +---------- END KW: SSHLibrary.Execute Command (1431)
20190402 10:30:49.059 - INFO - +---------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:30:49.059 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:30:49.060 - INFO - +---------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:30:49.060 - INFO - +---------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:30:49.060 - INFO - +---------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:30:49.060 - INFO - +--------- END KW: OpenStack.Run OS Command (1433)
20190402 10:30:49.060 - INFO - +-------- END KW: OpenStack.Delete Flavor (1434)
20190402 10:30:49.060 - INFO - +------- END KW: ${flavor} = f2.small (1434)
20190402 10:30:49.060 - INFO - +------- START KW: ${flavor} = f1.small [ ]
20190402 10:30:49.060 - INFO - +-------- START KW: OpenStack.Delete Flavor [ ${flavor} ]
20190402 10:30:49.061 - INFO - +--------- START KW: BuiltIn.Set Variable [ openstack flavor delete ]
20190402 10:30:49.061 - INFO - ${openstack_cmd} = openstack flavor delete
20190402 10:30:49.061 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:49.061 - INFO - +--------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${flavor} ]
20190402 10:30:49.061 - INFO - ${cmd} = openstack flavor delete f1.small
20190402 10:30:49.061 - INFO - +--------- END KW: BuiltIn.Catenate (0)
20190402 10:30:49.061 - INFO - +--------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:30:49.062 - INFO - +---------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:49.062 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:49.062 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:49.062 - INFO - +---------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:49.062 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor delete f1.small'.
20190402 10:30:50.493 - INFO - Command exited with return code 0.
20190402 10:30:50.493 - INFO - ${stdout} =
20190402 10:30:50.493 - INFO - ${stderr} =
20190402 10:30:50.493 - INFO - ${rc} = 0
20190402 10:30:50.494 - INFO - +---------- END KW: SSHLibrary.Execute Command (1432)
20190402 10:30:50.494 - INFO - +---------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:30:50.494 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:30:50.494 - INFO - +---------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:30:50.494 - INFO - +---------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:30:50.495 - INFO - +---------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:30:50.495 - INFO - +--------- END KW: OpenStack.Run OS Command (1434)
20190402 10:30:50.495 - INFO - +-------- END KW: OpenStack.Delete Flavor (1435)
20190402 10:30:50.495 - INFO - +------- END KW: ${flavor} = f1.small (1435)
20190402 10:30:50.495 - INFO - +------ END KW: ${flavor} IN [ @{flavor_list} ] (2869)
20190402 10:30:50.495 - INFO - +----- END KW: OpenStack.Delete All Flavors (4264)
20190402 10:30:50.495 - INFO - +----- START KW: OpenStack.Delete All Networks [ ]
20190402 10:30:50.495 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 10:30:50.496 - INFO - ${openstack_cmd} = openstack network list
20190402 10:30:50.496 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:30:50.496 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "private" | grep -v "public" | grep -v "external" | grep -v "internal" ]
20190402 10:30:50.496 - INFO - ${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"
20190402 10:30:50.496 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:30:50.496 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:30:50.497 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:50.497 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:50.497 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:50.497 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:50.497 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.
20190402 10:30:51.829 - INFO - Command exited with return code 0.
20190402 10:30:51.829 - INFO - ${stdout} = 

network-1
20190402 10:30:51.829 - INFO - ${stderr} =
20190402 10:30:51.829 - INFO - ${rc} = 0
20190402 10:30:51.829 - INFO - +------- END KW: SSHLibrary.Execute Command (1332)
20190402 10:30:51.829 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:30:51.830 - INFO - ${res} = {u'stdout': u'\n\nnetwork-1', u'stderr': u'', u'rc': 0}
20190402 10:30:51.830 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:30:51.830 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:30:51.830 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:30:51.830 - INFO - &{result} = { stdout=

network-1 | stderr= | rc=0 }
20190402 10:30:51.830 - INFO - +------ END KW: OpenStack.Run OS Command (1334)
20190402 10:30:51.831 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:30:51.831 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:30:51.831 - INFO - ${response} = 

network-1
20190402 10:30:51.831 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:30:51.831 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:30:51.831 - INFO - @{res_in_list} = [ network-1 ]
20190402 10:30:51.831 - INFO - +------- END KW: String.Split String (0)
20190402 10:30:51.832 - INFO - @{network_list} = [ network-1 ]
20190402 10:30:51.832 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:30:51.832 - INFO - +------ START KW: ${network} IN [ @{network_list} ] [ ]
20190402 10:30:51.832 - INFO - +------- START KW: ${network} = network-1 [ ]
20190402 10:30:51.832 - INFO - +-------- START KW: OpenStack.Delete Network [ ${network} ]
20190402 10:30:51.832 - INFO - +--------- START KW: BuiltIn.Set Variable [ openstack network delete ]
20190402 10:30:51.832 - INFO - ${openstack_cmd} = openstack network delete
20190402 10:30:51.832 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:51.832 - INFO - +--------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${network} ]
20190402 10:30:51.833 - INFO - ${cmd} = openstack network delete network-1
20190402 10:30:51.833 - INFO - +--------- END KW: BuiltIn.Catenate (1)
20190402 10:30:51.833 - INFO - +--------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:30:51.833 - INFO - +---------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:51.833 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:51.834 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:30:51.834 - INFO - +---------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:51.834 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network delete network-1'.
20190402 10:30:54.735 - INFO - Command exited with return code 0.
20190402 10:30:54.735 - INFO - ${stdout} =
20190402 10:30:54.736 - INFO - ${stderr} =
20190402 10:30:54.736 - INFO - ${rc} = 0
20190402 10:30:54.736 - INFO - +---------- END KW: SSHLibrary.Execute Command (2902)
20190402 10:30:54.737 - INFO - +---------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:30:54.738 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:30:54.738 - INFO - +---------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:30:54.739 - INFO - +---------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:30:54.740 - INFO - +---------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:30:54.740 - INFO - +--------- END KW: OpenStack.Run OS Command (2907)
20190402 10:30:54.740 - INFO - +-------- END KW: OpenStack.Delete Network (2908)
20190402 10:30:54.740 - INFO - +------- END KW: ${network} = network-1 (2908)
20190402 10:30:54.740 - INFO - +------ END KW: ${network} IN [ @{network_list} ] (2908)
20190402 10:30:54.740 - INFO - +----- END KW: OpenStack.Delete All Networks (4245)
20190402 10:30:54.740 - INFO - +----- START KW: OpenStack.Delete All KeyPairs [ ]
20190402 10:30:54.740 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack keypair list ]
20190402 10:30:54.741 - INFO - ${openstack_cmd} = openstack keypair list
20190402 10:30:54.741 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:30:54.741 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "Name" ]
20190402 10:30:54.741 - INFO - ${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"
20190402 10:30:54.741 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:30:54.741 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:30:54.741 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:54.742 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:54.742 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:30:54.742 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:54.742 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack keypair list|awk '{print$2}'|grep -v "Name"'.
20190402 10:30:56.074 - INFO - Command exited with return code 0.
20190402 10:30:56.075 - INFO - ${stdout} =
20190402 10:30:56.075 - INFO - ${stderr} =
20190402 10:30:56.075 - INFO - ${rc} = 0
20190402 10:30:56.076 - INFO - +------- END KW: SSHLibrary.Execute Command (1334)
20190402 10:30:56.076 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:30:56.078 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:30:56.078 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:30:56.078 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:30:56.079 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:30:56.080 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:30:56.080 - INFO - +------ END KW: OpenStack.Run OS Command (1339)
20190402 10:30:56.080 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:30:56.080 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:30:56.081 - INFO - ${response} =
20190402 10:30:56.081 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:30:56.081 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:30:56.081 - INFO - @{res_in_list} = [ ]
20190402 10:30:56.081 - INFO - +------- END KW: String.Split String (0)
20190402 10:30:56.081 - INFO - @{key_list} = [ ]
20190402 10:30:56.081 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:30:56.081 - INFO - +------ START KW: ${key} IN [ @{key_list} ] [ ]
20190402 10:30:56.081 - INFO - +------ END KW: ${key} IN [ @{key_list} ] (0)
20190402 10:30:56.082 - INFO - +----- END KW: OpenStack.Delete All KeyPairs (1341)
20190402 10:30:56.082 - INFO - +----- START KW: OpenStack.Delete All Snapshots [ ]
20190402 10:30:56.082 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume snapshot list ]
20190402 10:30:56.082 - INFO - ${openstack_cmd} = openstack volume snapshot list
20190402 10:30:56.082 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:30:56.082 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:30:56.082 - INFO - ${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"
20190402 10:30:56.082 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:30:56.082 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:30:56.083 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:56.083 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:56.083 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:56.083 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:56.083 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.
20190402 10:30:57.415 - INFO - Command exited with return code 0.
20190402 10:30:57.416 - INFO - ${stdout} =
20190402 10:30:57.416 - INFO - ${stderr} =
20190402 10:30:57.416 - INFO - ${rc} = 0
20190402 10:30:57.417 - INFO - +------- END KW: SSHLibrary.Execute Command (1333)
20190402 10:30:57.417 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:30:57.419 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:30:57.419 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:30:57.419 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:30:57.420 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:30:57.421 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:30:57.421 - INFO - +------ END KW: OpenStack.Run OS Command (1339)
20190402 10:30:57.421 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:30:57.421 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:30:57.422 - INFO - ${response} =
20190402 10:30:57.422 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:30:57.422 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:30:57.422 - INFO - @{res_in_list} = [ ]
20190402 10:30:57.422 - INFO - +------- END KW: String.Split String (0)
20190402 10:30:57.422 - INFO - @{snapshot_list} = [ ]
20190402 10:30:57.422 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:30:57.422 - INFO - +------ START KW: ${snapshot} IN [ @{snapshot_list} ] [ ]
20190402 10:30:57.422 - INFO - +------ END KW: ${snapshot} IN [ @{snapshot_list} ] (0)
20190402 10:30:57.422 - INFO - +----- END KW: OpenStack.Delete All Snapshots (1340)
20190402 10:30:57.423 - INFO - +----- START KW: OpenStack.Delete All Volumes [ ]
20190402 10:30:57.423 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume list ]
20190402 10:30:57.423 - INFO - ${openstack_cmd} = openstack volume list
20190402 10:30:57.423 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:30:57.423 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "ID" ]
20190402 10:30:57.423 - INFO - ${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"
20190402 10:30:57.423 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:30:57.423 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:30:57.424 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:57.424 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:57.424 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:57.424 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:57.424 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume list|awk '{print$2}'|grep -v "ID"'.
20190402 10:30:58.857 - INFO - Command exited with return code 0.
20190402 10:30:58.858 - INFO - ${stdout} =
20190402 10:30:58.858 - INFO - ${stderr} =
20190402 10:30:58.858 - INFO - ${rc} = 0
20190402 10:30:58.859 - INFO - +------- END KW: SSHLibrary.Execute Command (1435)
20190402 10:30:58.859 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:30:58.862 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:30:58.862 - INFO - +------- END KW: BuiltIn.Create Dictionary (3)
20190402 10:30:58.862 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:30:58.862 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:30:58.862 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:30:58.863 - INFO - +------ END KW: OpenStack.Run OS Command (1439)
20190402 10:30:58.863 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:30:58.863 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:30:58.863 - INFO - ${response} =
20190402 10:30:58.863 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:30:58.863 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:30:58.863 - INFO - @{res_in_list} = [ ]
20190402 10:30:58.864 - INFO - +------- END KW: String.Split String (0)
20190402 10:30:58.864 - INFO - @{volume_list} = [ ]
20190402 10:30:58.864 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:30:58.864 - INFO - +------ START KW: ${volume} IN [ @{volume_list} ] [ ]
20190402 10:30:58.864 - INFO - +------ END KW: ${volume} IN [ @{volume_list} ] (0)
20190402 10:30:58.864 - INFO - +----- END KW: OpenStack.Delete All Volumes (1441)
20190402 10:30:58.864 - INFO - +----- START KW: OpenStack.Delete All Stacks [ ]
20190402 10:30:58.864 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack stack list ]
20190402 10:30:58.864 - INFO - ${openstack_cmd} = openstack stack list
20190402 10:30:58.864 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:30:58.865 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:30:58.865 - INFO - ${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"
20190402 10:30:58.865 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:30:58.865 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:30:58.865 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:30:58.865 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:30:58.865 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:30:58.866 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:30:58.866 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack list|awk '{print$4}'|grep -v "Name"'.
20190402 10:31:00.200 - INFO - Command exited with return code 0.
20190402 10:31:00.201 - INFO - ${stdout} =
20190402 10:31:00.201 - INFO - ${stderr} =
20190402 10:31:00.201 - INFO - ${rc} = 0
20190402 10:31:00.201 - INFO - +------- END KW: SSHLibrary.Execute Command (1335)
20190402 10:31:00.202 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:00.203 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:31:00.203 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:31:00.204 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:00.205 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:00.205 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:31:00.205 - INFO - +------ END KW: OpenStack.Run OS Command (1340)
20190402 10:31:00.205 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:31:00.205 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:31:00.206 - INFO - ${response} =
20190402 10:31:00.206 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:31:00.206 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:31:00.206 - INFO - @{res_in_list} = [ ]
20190402 10:31:00.206 - INFO - +------- END KW: String.Split String (0)
20190402 10:31:00.206 - INFO - @{stack_list} = [ ]
20190402 10:31:00.206 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:31:00.206 - INFO - +------ START KW: ${stack} IN [ @{stack_list} ] [ ]
20190402 10:31:00.206 - INFO - +------ END KW: ${stack} IN [ @{stack_list} ] (0)
20190402 10:31:00.207 - INFO - +----- END KW: OpenStack.Delete All Stacks (1342)
20190402 10:31:00.207 - INFO - +---- END KW: OpenStack.Openstack Cleanup All (16811)
20190402 10:31:00.207 - INFO - +---- START KW: Utils.Stx Suite TearDown [ ]
20190402 10:31:00.207 - INFO - +----- START KW: SSHLibrary.Close All Connections [ ]
20190402 10:31:00.209 - INFO - +----- END KW: SSHLibrary.Close All Connections (2)
20190402 10:31:00.209 - INFO - +---- END KW: Utils.Stx Suite TearDown (2)
20190402 10:31:00.209 - INFO - +--- END TEARDOWN: BuiltIn.Run Keywords (16813)
==============================================================================
20190402 10:31:00.212 - INFO - +-- END SUITE: Sanity-Test.Sanity-OpenStack.02-Instance-From-Volume (255009)
==============================================================================
20190402 10:31:00.224 - INFO - +-- START SUITE: Sanity-Test.Sanity-OpenStack.03-Instance-From-Snapshot [ ]
==============================================================================
20190402 10:31:00.224 - INFO - +--- START SETUP: Utils.Stx Suite Setup [ ]
20190402 10:31:00.225 - INFO - +---- START KW: Utils.Open Master Controller Connection [ ]
20190402 10:31:00.225 - INFO - +----- START KW: Utils.Connect to Controller Node [ ${CONFIG.credentials.STX_DEPLOY_USER_NAME} | ${CONFIG.credentials.STX_DEPLOY_USER_PSWD} | ${CONFIG.general.IP_UNIT_0_ADDRESS} ]
20190402 10:31:00.225 - INFO - +------ START KW: SSHLibrary.Open Connection [ ${ip_address} prompt=${prompt} | timeout=${timeout} ]
20190402 10:31:00.226 - INFO - ${controller_connection} = 1
20190402 10:31:00.226 - INFO - +------ END KW: SSHLibrary.Open Connection (1)
20190402 10:31:00.226 - INFO - +------ START KW: Utils.Flexible_SSH_Login [ ${user} | ${password} ]
20190402 10:31:00.226 - INFO - +------- START KW: BuiltIn.Get Length [ ${password} ]
20190402 10:31:00.226 - INFO - Length is 10
20190402 10:31:00.226 - INFO - ${pwd_length} = 10
20190402 10:31:00.227 - INFO - +------- END KW: BuiltIn.Get Length (1)
20190402 10:31:00.227 - INFO - +------- START KW: BuiltIn.Run Keyword And Return If [ ${pwd_length} > 0 | SSHLibrary.Login | ${user} | ${password} | delay=${delay} ]
20190402 10:31:00.227 - INFO - +-------- START KW: SSHLibrary.Login [ ${user} | ${password} | delay=${delay} ]
20190402 10:31:00.227 - INFO - Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.
20190402 10:31:01.315 - INFO - Read output: Last login: Tue Apr  2 16:15:28 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$
20190402 10:31:01.315 - INFO - +-------- END KW: SSHLibrary.Login (1088)
20190402 10:31:01.315 - INFO - Returning from the enclosing user keyword.
20190402 10:31:01.315 - INFO - +------- END KW: BuiltIn.Run Keyword And Return If (1088)
20190402 10:31:01.316 - INFO - +------ END KW: Utils.Flexible_SSH_Login (1090)
20190402 10:31:01.316 - INFO - ${master_controller_connection} = 1
20190402 10:31:01.316 - INFO - +----- END KW: Utils.Connect to Controller Node (1091)
20190402 10:31:01.316 - INFO - +----- START KW: BuiltIn.Set Suite Variable [ ${master_controller_connection} ]
20190402 10:31:01.316 - INFO - ${master_controller_connection} = 1
20190402 10:31:01.316 - INFO - +----- END KW: BuiltIn.Set Suite Variable (0)
20190402 10:31:01.316 - INFO - +----- START KW: BuiltIn.Log [ ${master_controller_connection} ]
20190402 10:31:01.317 - INFO - 1
20190402 10:31:01.317 - INFO - +----- END KW: BuiltIn.Log (1)
20190402 10:31:01.317 - INFO - +---- END KW: Utils.Open Master Controller Connection (1092)
20190402 10:31:01.317 - INFO - +---- START KW: Utils.Set Env Vars From Openrc [ ]
20190402 10:31:01.317 - INFO - +----- START KW: Utils.Run Command [ source /etc/platform/openrc | True ]
20190402 10:31:01.318 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:31:01.318 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:31:01.318 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:31:01.318 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:31:01.319 - INFO - &{result_dict} = { stdout= }
20190402 10:31:01.319 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:31:01.319 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:31:01.319 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:31:01.319 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:31:01.319 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:31:01.320 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:31:01.320 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (2)
20190402 10:31:01.320 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 10:31:01.320 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 10:31:01.320 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:31:01.326 - INFO - source /etc/platform/openrc
20190402 10:31:01.327 - INFO - +------ END KW: SSHLibrary.Write (7)
20190402 10:31:01.327 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:31:01.716 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:31:01.716 - INFO - ${output} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:31:01.716 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (389)
20190402 10:31:01.716 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:31:01.717 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:31:01.717 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:31:01.717 - INFO - +------- END KW: String.Get Line (0)
20190402 10:31:01.717 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:31:01.717 - INFO - ${clean_out} =
20190402 10:31:01.717 - INFO - +------- END KW: String.Remove String (0)
20190402 10:31:01.718 - INFO - ${output} =
20190402 10:31:01.718 - INFO - +------ END KW: Utils.Remove Prompt Line (2)
20190402 10:31:01.718 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 10:31:01.718 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:31:01.720 - INFO - echo $?
20190402 10:31:01.720 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 10:31:01.720 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:31:01.720 - INFO - 0
20190402 10:31:01.720 - INFO - ${rc} = 0
20190402 10:31:01.720 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 10:31:01.720 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:31:01.720 - INFO - 0
20190402 10:31:01.721 - INFO - +------- END KW: BuiltIn.Log (1)
20190402 10:31:01.721 - INFO - ${rc} = 0
20190402 10:31:01.721 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 10:31:01.721 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:31:01.721 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:31:01.721 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:31:01.722 - INFO - +------ END KW: BuiltIn.Run Keyword If (0)
20190402 10:31:01.722 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:31:01.722 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 10:31:01.722 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:31:01.722 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout:
20190402 10:31:01.722 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 10:31:01.722 - INFO - +----- END KW: Utils.Run Command (405)
20190402 10:31:01.722 - INFO - +---- END KW: Utils.Set Env Vars From Openrc (405)
20190402 10:31:01.722 - INFO - +--- END SETUP: Utils.Stx Suite Setup (1498)
------------------------------------------------------------------------------
20190402 10:31:01.723 - INFO - +--- START TEST: Create Flavors for Instances [ ]
------------------------------------------------------------------------------
20190402 10:31:01.723 - INFO - +---- START KW: BuiltIn.Catenate [ ${flavor_property_1} | ${flavor_property_2} ]
20190402 10:31:01.723 - INFO - ${properties} = --property sw:wrs:guest:heartbeat='false' --property hw:cpu_policy='shared'
20190402 10:31:01.723 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:31:01.723 - INFO - +---- START KW: OpenStack.Create Flavor [ ${cirros_flavor_ram} | ${cirros_flavor_vcpus} | ${cirros_flavor_disk} | ${cirros_flavor_name} ]
20190402 10:31:01.724 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 10:31:01.724 - INFO - ${openstack_cmd} = openstack flavor create
20190402 10:31:01.724 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:31:01.724 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 10:31:01.725 - INFO - ${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small
20190402 10:31:01.725 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 10:31:01.725 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:31:01.725 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:01.725 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:01.725 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:31:01.725 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:01.726 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.
20190402 10:31:03.208 - INFO - Command exited with return code 0.
20190402 10:31:03.209 - INFO - ${stdout} = +----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+------------------------------...
20190402 10:31:03.209 - INFO - ${stderr} =
20190402 10:31:03.209 - INFO - ${rc} = 0
20190402 10:31:03.210 - INFO - +------ END KW: SSHLibrary.Execute Command (1484)
20190402 10:31:03.210 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:03.212 - INFO - ${res} = {u'stdout': u'+----------------------------+--------------------------------------+\n| Field                      | Value                                |\n+----------------------------+--------------...
20190402 10:31:03.212 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:31:03.212 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:03.213 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:03.214 - INFO - +----- END KW: OpenStack.Run OS Command (1489)
20190402 10:31:03.214 - INFO - +---- END KW: OpenStack.Create Flavor (1491)
------------------------------------------------------------------------------
20190402 10:31:03.214 - INFO - +--- END TEST: Create Flavors for Instances (1491)
------------------------------------------------------------------------------
20190402 10:31:03.214 - INFO - +--- START TEST: Create Images for Instances [ ]
------------------------------------------------------------------------------
20190402 10:31:03.215 - INFO - +---- START KW: SSHLibrary.Put File [ %{PYTHONPATH}/${cirros_image} | ${host_image_path}/${cirros_image} ]
20190402 10:31:03.222 - INFO - [chan 2] Opened sftp connection (server version 3)
20190402 10:31:03.229 - INFO - [chan 3] Opened sftp connection (server version 3)
20190402 10:31:03.230 - FAIL - There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.
20190402 10:31:03.230 - DEBUG - Traceback (most recent call last):
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1559, in put_file
    destination, mode, newline, scp)
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1619, in _run_command
    raise RuntimeError(e)
20190402 10:31:03.230 - INFO - +---- END KW: SSHLibrary.Put File (15)
------------------------------------------------------------------------------
20190402 10:31:03.231 - INFO - +--- END TEST: Create Images for Instances (16)
------------------------------------------------------------------------------
20190402 10:31:03.231 - INFO - +--- START TEST: Create Networks for Instance [ ]
------------------------------------------------------------------------------
20190402 10:31:03.231 - INFO - +---- START KW: OpenStack.Create Network [ ${network_name} ]
20190402 10:31:03.232 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack network create ]
20190402 10:31:03.232 - INFO - ${openstack_cmd} = openstack network create
20190402 10:31:03.232 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:31:03.232 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${network_name} | ${additional_args} ]
20190402 10:31:03.233 - INFO - ${cmd} = openstack network create network-1
20190402 10:31:03.233 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 10:31:03.233 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:31:03.233 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:03.234 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:03.234 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:31:03.234 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:03.234 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network create network-1 '.
20190402 10:31:04.665 - INFO - Command exited with return code 0.
20190402 10:31:04.666 - INFO - ${stdout} = +---------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:31:04.666 - INFO - ${stderr} =
20190402 10:31:04.666 - INFO - ${rc} = 0
20190402 10:31:04.666 - INFO - +------ END KW: SSHLibrary.Execute Command (1432)
20190402 10:31:04.666 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:04.667 - INFO - ${res} = {u'stdout': u"+---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:31:04.667 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:31:04.667 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:04.668 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:04.668 - INFO - +----- END KW: OpenStack.Run OS Command (1435)
20190402 10:31:04.668 - INFO - +---- END KW: OpenStack.Create Network (1437)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:31:04.668 - INFO - +---- START KW: OpenStack.Create Subnet [ ${network_name} | ${subnet_range} | ${subnet_extras} ]
20190402 10:31:04.669 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack subnet create ]
20190402 10:31:04.669 - INFO - ${openstack_cmd} = openstack subnet create
20190402 10:31:04.669 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:31:04.669 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --network ${network_name} | --subnet-range ${range_ip} ${additional_args} ]
20190402 10:31:04.670 - INFO - ${cmd} = openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1
20190402 10:31:04.670 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 10:31:04.670 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:31:04.670 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:04.671 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:04.671 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:31:04.671 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:04.671 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1'.
20190402 10:31:06.556 - INFO - Command exited with return code 0.
20190402 10:31:06.557 - INFO - ${stdout} = +-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:31:06.557 - INFO - ${stderr} =
20190402 10:31:06.557 - INFO - ${rc} = 0
20190402 10:31:06.557 - INFO - +------ END KW: SSHLibrary.Execute Command (1886)
20190402 10:31:06.558 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:06.559 - INFO - ${res} = {u'stdout': u"+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:31:06.559 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:31:06.559 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:06.560 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:06.561 - INFO - +----- END KW: OpenStack.Run OS Command (1890)
20190402 10:31:06.561 - INFO - +---- END KW: OpenStack.Create Subnet (1893)
------------------------------------------------------------------------------
20190402 10:31:06.561 - INFO - +--- END TEST: Create Networks for Instance (3330)
------------------------------------------------------------------------------
20190402 10:31:06.561 - INFO - +--- START TEST: Create Volume for Instances [ ]
------------------------------------------------------------------------------
20190402 10:31:06.562 - INFO - +---- START KW: OpenStack.Create Volume [ ${cirros_volume_size} | ${cirros_image_name} | --bootable | ${cirros_volume_name} ]
20190402 10:31:06.562 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack volume create ]
20190402 10:31:06.562 - INFO - ${openstack_cmd} = openstack volume create
20190402 10:31:06.562 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:31:06.562 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --size ${size} | --image ${image} | ${bootable} | ${name} ]
20190402 10:31:06.563 - INFO - ${cmd} = openstack volume create --size 20 --image cirros --bootable vol-cirros-1
20190402 10:31:06.563 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 10:31:06.563 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 10:31:06.563 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:06.563 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:06.563 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:31:06.563 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:06.564 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume create --size 20 --image cirros --bootable vol-cirros-1'.
20190402 10:31:07.896 - INFO - Command exited with return code 1.
20190402 10:31:07.897 - INFO - ${stdout} =
20190402 10:31:07.897 - INFO - ${stderr} = Could not find resource cirros
20190402 10:31:07.897 - INFO - ${rc} = 1
20190402 10:31:07.897 - INFO - +------ END KW: SSHLibrary.Execute Command (1334)
20190402 10:31:07.898 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:07.899 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Could not find resource cirros', u'rc': 1}
20190402 10:31:07.900 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:31:07.900 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:07.901 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:31:07.901 - FAIL - Could not find resource cirros
20190402 10:31:07.901 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:07.901 - INFO - +------- END KW: BuiltIn.Fail (0)
20190402 10:31:07.901 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:07.902 - INFO - +----- END KW: OpenStack.Run OS Command (1338)
20190402 10:31:07.902 - INFO - +---- END KW: OpenStack.Create Volume (1340)
------------------------------------------------------------------------------
20190402 10:31:07.902 - INFO - +--- END TEST: Create Volume for Instances (1341)
------------------------------------------------------------------------------
20190402 10:31:07.902 - INFO - +--- START TEST: Create Snapshot for Instance [ ]
------------------------------------------------------------------------------
20190402 10:31:07.903 - INFO - +---- START KW: OpenStack.Create Snapshot [ ${cirros_volume_name} | ${cirros_snapshot_name} ]
20190402 10:31:07.903 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack volume snapshot create --volume ${volume} ${name} | True | 30 sec ]
20190402 10:31:07.903 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:07.903 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:07.903 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:31:07.904 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:07.904 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume snapshot create --volume vol-cirros-1 snap-cirros-1'.
20190402 10:31:09.286 - INFO - Command exited with return code 1.
20190402 10:31:09.287 - INFO - ${stdout} =
20190402 10:31:09.287 - INFO - ${stderr} = No volume with a name or ID of 'vol-cirros-1' exists.
20190402 10:31:09.287 - INFO - ${rc} = 1
20190402 10:31:09.287 - INFO - +------ END KW: SSHLibrary.Execute Command (1383)
20190402 10:31:09.288 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:09.289 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No volume with a name or ID of 'vol-cirros-1' exists.", u'rc': 1}
20190402 10:31:09.289 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:31:09.290 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:09.291 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:31:09.291 - FAIL - No volume with a name or ID of 'vol-cirros-1' exists.
20190402 10:31:09.292 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:09.292 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:31:09.292 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:31:09.292 - INFO - +----- END KW: OpenStack.Run OS Command (1389)
20190402 10:31:09.293 - INFO - +---- END KW: OpenStack.Create Snapshot (1390)
------------------------------------------------------------------------------
20190402 10:31:09.294 - INFO - +--- END TEST: Create Snapshot for Instance (1391)
------------------------------------------------------------------------------
20190402 10:31:09.294 - INFO - +--- START TEST: Launch Instances [ ]
------------------------------------------------------------------------------
20190402 10:31:09.295 - INFO - +---- START KW: OpenStack.Create Instance From Snapshot [ ${network_name} | ${cirros_image_name} | ${cirros_instance_name} | ${cirros_snapshot_name} | ${cirros_snapshot_size} | ${cirros_flavor_name} ]
20190402 10:31:09.297 - INFO - +----- START KW: OpenStack.Get Net Id [ ${net_name} ]
20190402 10:31:09.298 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 10:31:09.298 - INFO - ${openstack_cmd} = openstack network list
20190402 10:31:09.298 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:31:09.299 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep "${network_name}" | awk '{print$2}' ]
20190402 10:31:09.299 - INFO - ${cmd} = openstack network list|grep "network-1"|awk '{print$2}'
20190402 10:31:09.300 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:31:09.300 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:31:09.301 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:09.302 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:09.302 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:31:09.302 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:09.303 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|grep "network-1"|awk '{print$2}''.
20190402 10:31:10.687 - INFO - Command exited with return code 0.
20190402 10:31:10.687 - INFO - ${stdout} = 9efe2895-6d55-462a-acfa-9dca71fb4c62
20190402 10:31:10.687 - INFO - ${stderr} =
20190402 10:31:10.688 - INFO - ${rc} = 0
20190402 10:31:10.688 - INFO - +------- END KW: SSHLibrary.Execute Command (1386)
20190402 10:31:10.688 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:10.690 - INFO - ${res} = {u'stdout': u'9efe2895-6d55-462a-acfa-9dca71fb4c62', u'stderr': u'', u'rc': 0}
20190402 10:31:10.690 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:31:10.690 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:10.691 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:10.692 - INFO - &{result} = { stdout=9efe2895-6d55-462a-acfa-9dca71fb4c62 | stderr= | rc=0 }
20190402 10:31:10.692 - INFO - +------ END KW: OpenStack.Run OS Command (1392)
20190402 10:31:10.692 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:31:10.692 - INFO - ${output} = 9efe2895-6d55-462a-acfa-9dca71fb4c62
20190402 10:31:10.692 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 10:31:10.692 - INFO - +------ START KW: String.Split String [ ${output} | ${EMPTY} ]
20190402 10:31:10.693 - INFO - ${splitted_output} = [u'9efe2895-6d55-462a-acfa-9dca71fb4c62']
20190402 10:31:10.693 - INFO - +------ END KW: String.Split String (1)
20190402 10:31:10.693 - INFO - +------ START KW: Collections.Get From List [ ${splitted_output} | 0 ]
20190402 10:31:10.693 - INFO - ${net_id} = 9efe2895-6d55-462a-acfa-9dca71fb4c62
20190402 10:31:10.693 - INFO - +------ END KW: Collections.Get From List (0)
20190402 10:31:10.693 - INFO - ${net_id} = 9efe2895-6d55-462a-acfa-9dca71fb4c62
20190402 10:31:10.693 - INFO - +----- END KW: OpenStack.Get Net Id (1396)
20190402 10:31:10.693 - INFO - +----- START KW: OpenStack.Get Snapshot ID [ ${snapshot} ]
20190402 10:31:10.694 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume snapshot list ]
20190402 10:31:10.694 - INFO - ${openstack_cmd} = openstack volume snapshot list
20190402 10:31:10.695 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:31:10.695 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep "${snapshot}" | awk '{print$2}' ]
20190402 10:31:10.695 - INFO - ${cmd} = openstack volume snapshot list|grep "snap-cirros-1"|awk '{print$2}'
20190402 10:31:10.695 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:31:10.695 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:31:10.695 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:10.695 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:10.696 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:31:10.696 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:10.696 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume snapshot list|grep "snap-cirros-1"|awk '{print$2}''.
20190402 10:31:12.028 - INFO - Command exited with return code 0.
20190402 10:31:12.028 - INFO - ${stdout} =
20190402 10:31:12.029 - INFO - ${stderr} =
20190402 10:31:12.029 - INFO - ${rc} = 0
20190402 10:31:12.029 - INFO - +------- END KW: SSHLibrary.Execute Command (1333)
20190402 10:31:12.030 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:12.031 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:31:12.032 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:31:12.032 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:12.033 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:12.033 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:31:12.033 - INFO - +------ END KW: OpenStack.Run OS Command (1338)
20190402 10:31:12.033 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:31:12.033 - INFO - ${output} =
20190402 10:31:12.033 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 10:31:12.033 - INFO - +------ START KW: String.Split String [ ${output} | ${EMPTY} ]
20190402 10:31:12.034 - INFO - ${splitted_output} = []
20190402 10:31:12.034 - INFO - +------ END KW: String.Split String (1)
20190402 10:31:12.034 - INFO - +------ START KW: Collections.Get From List [ ${splitted_output} | 0 ]
20190402 10:31:12.034 - FAIL - IndexError: Given index 0 is out of the range 0--1.
20190402 10:31:12.034 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:12.034 - INFO - +------ END KW: Collections.Get From List (0)
20190402 10:31:12.034 - INFO - +----- END KW: OpenStack.Get Snapshot ID (1341)
20190402 10:31:12.034 - INFO - +---- END KW: OpenStack.Create Instance From Snapshot (2739)
------------------------------------------------------------------------------
20190402 10:31:12.035 - INFO - +--- END TEST: Launch Instances (2741)
------------------------------------------------------------------------------
20190402 10:31:12.035 - INFO - +--- START TEST: Suspend Resume Instances [ ]
------------------------------------------------------------------------------
20190402 10:31:12.035 - INFO - +---- START KW: OpenStack.Suspend Instance [ ${cirros_instance_name} ]
20190402 10:31:12.036 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server suspend ${vm_name} | True | 30 sec ]
20190402 10:31:12.036 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:12.036 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:12.036 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:31:12.036 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:12.037 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server suspend vm-cirros-1'.
20190402 10:31:13.570 - INFO - Command exited with return code 1.
20190402 10:31:13.570 - INFO - ${stdout} =
20190402 10:31:13.571 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:13.571 - INFO - ${rc} = 1
20190402 10:31:13.571 - INFO - +------ END KW: SSHLibrary.Execute Command (1535)
20190402 10:31:13.572 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:13.573 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:31:13.573 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:31:13.574 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:13.575 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:31:13.576 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:13.576 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:13.576 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:31:13.576 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:31:13.577 - INFO - +----- END KW: OpenStack.Run OS Command (1540)
20190402 10:31:13.577 - INFO - +---- END KW: OpenStack.Suspend Instance (1542)
------------------------------------------------------------------------------
20190402 10:31:13.578 - INFO - +--- END TEST: Suspend Resume Instances (1543)
------------------------------------------------------------------------------
20190402 10:31:13.579 - INFO - +--- START TEST: Set Error Active Flags Instances [ ]
------------------------------------------------------------------------------
20190402 10:31:13.580 - INFO - +---- START KW: OpenStack.Set Error State Instance [ ${cirros_instance_name} | error ]
20190402 10:31:13.581 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server set --state ${value} ${vm_name} | True | 30 sec ]
20190402 10:31:13.582 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:13.583 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:13.583 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:31:13.583 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:13.584 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server set --state error vm-cirros-1'.
20190402 10:31:15.018 - INFO - Command exited with return code 1.
20190402 10:31:15.019 - INFO - ${stdout} =
20190402 10:31:15.019 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:15.019 - INFO - ${rc} = 1
20190402 10:31:15.019 - INFO - +------ END KW: SSHLibrary.Execute Command (1436)
20190402 10:31:15.020 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:15.021 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:31:15.021 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:31:15.022 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:15.023 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:31:15.024 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:15.024 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:15.024 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:31:15.025 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:31:15.025 - INFO - +----- END KW: OpenStack.Run OS Command (1444)
20190402 10:31:15.026 - INFO - +---- END KW: OpenStack.Set Error State Instance (1445)
------------------------------------------------------------------------------
20190402 10:31:15.026 - INFO - +--- END TEST: Set Error Active Flags Instances (1447)
------------------------------------------------------------------------------
20190402 10:31:15.027 - INFO - +--- START TEST: Pause Unpause Instances [ ]
------------------------------------------------------------------------------
20190402 10:31:15.028 - INFO - +---- START KW: OpenStack.Pause Instance [ ${cirros_instance_name} ]
20190402 10:31:15.029 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server pause ${vm_name} | True | 30 sec ]
20190402 10:31:15.030 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:15.031 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:15.031 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:31:15.031 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:15.032 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server pause vm-cirros-1'.
20190402 10:31:16.415 - INFO - Command exited with return code 1.
20190402 10:31:16.416 - INFO - ${stdout} =
20190402 10:31:16.416 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:16.416 - INFO - ${rc} = 1
20190402 10:31:16.417 - INFO - +------ END KW: SSHLibrary.Execute Command (1385)
20190402 10:31:16.417 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:16.419 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:31:16.419 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:31:16.419 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:16.420 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:31:16.421 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:16.421 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:16.422 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:31:16.422 - INFO - +------ END KW: BuiltIn.Run Keyword If (3)
20190402 10:31:16.422 - INFO - +----- END KW: OpenStack.Run OS Command (1393)
20190402 10:31:16.423 - INFO - +---- END KW: OpenStack.Pause Instance (1395)
------------------------------------------------------------------------------
20190402 10:31:16.424 - INFO - +--- END TEST: Pause Unpause Instances (1396)
------------------------------------------------------------------------------
20190402 10:31:16.424 - INFO - +--- START TEST: Stop Start Instances [ ]
------------------------------------------------------------------------------
20190402 10:31:16.425 - INFO - +---- START KW: OpenStack.Stop Instance [ ${cirros_instance_name} ]
20190402 10:31:16.426 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server stop ${vm_name} | True | 30 sec ]
20190402 10:31:16.427 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:16.428 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:16.428 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:31:16.429 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:16.430 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server stop vm-cirros-1'.
20190402 10:31:17.877 - INFO - Command exited with return code 1.
20190402 10:31:17.878 - INFO - ${stdout} =
20190402 10:31:17.878 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:17.878 - INFO - ${rc} = 1
20190402 10:31:17.878 - INFO - +------ END KW: SSHLibrary.Execute Command (1449)
20190402 10:31:17.879 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:17.880 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:31:17.881 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:31:17.882 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:17.883 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:31:17.885 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:17.885 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:17.885 - INFO - +------- END KW: BuiltIn.Fail (2)
20190402 10:31:17.885 - INFO - +------ END KW: BuiltIn.Run Keyword If (4)
20190402 10:31:17.886 - INFO - +----- END KW: OpenStack.Run OS Command (1460)
20190402 10:31:17.887 - INFO - +---- END KW: OpenStack.Stop Instance (1461)
------------------------------------------------------------------------------
20190402 10:31:17.888 - INFO - +--- END TEST: Stop Start Instances (1463)
------------------------------------------------------------------------------
20190402 10:31:17.888 - INFO - +--- START TEST: Lock Unlock Instances [ ]
------------------------------------------------------------------------------
20190402 10:31:17.889 - INFO - +---- START KW: OpenStack.Lock Instance [ ${cirros_instance_name} ]
20190402 10:31:17.890 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server lock ${vm_name} | True | 30 sec ]
20190402 10:31:17.891 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:17.892 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:17.892 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:31:17.892 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:17.893 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server lock vm-cirros-1'.
20190402 10:31:19.276 - INFO - Command exited with return code 1.
20190402 10:31:19.277 - INFO - ${stdout} =
20190402 10:31:19.277 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:19.277 - INFO - ${rc} = 1
20190402 10:31:19.278 - INFO - +------ END KW: SSHLibrary.Execute Command (1386)
20190402 10:31:19.278 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:19.280 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:31:19.280 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:31:19.280 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:19.282 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:31:19.285 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:19.285 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:19.285 - INFO - +------- END KW: BuiltIn.Fail (3)
20190402 10:31:19.286 - INFO - +------ END KW: BuiltIn.Run Keyword If (5)
20190402 10:31:19.286 - INFO - +----- END KW: OpenStack.Run OS Command (1396)
20190402 10:31:19.287 - INFO - +---- END KW: OpenStack.Lock Instance (1398)
------------------------------------------------------------------------------
20190402 10:31:19.288 - INFO - +--- END TEST: Lock Unlock Instances (1399)
------------------------------------------------------------------------------
20190402 10:31:19.289 - INFO - +--- START TEST: Reboot Instances [ ]
------------------------------------------------------------------------------
20190402 10:31:19.289 - INFO - +---- START KW: OpenStack.Reboot Instance [ ${cirros_instance_name} ]
20190402 10:31:19.290 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server reboot ${vm_name} | True | 30 sec ]
20190402 10:31:19.291 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:19.292 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:19.292 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:31:19.292 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:19.293 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server reboot vm-cirros-1'.
20190402 10:31:20.634 - INFO - Command exited with return code 1.
20190402 10:31:20.634 - INFO - ${stdout} =
20190402 10:31:20.634 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:20.634 - INFO - ${rc} = 1
20190402 10:31:20.635 - INFO - +------ END KW: SSHLibrary.Execute Command (1342)
20190402 10:31:20.635 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:20.635 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:31:20.635 - INFO - +------ END KW: BuiltIn.Create Dictionary (0)
20190402 10:31:20.635 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:20.636 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:31:20.636 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:20.636 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:20.636 - INFO - +------- END KW: BuiltIn.Fail (0)
20190402 10:31:20.636 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:20.636 - INFO - +----- END KW: OpenStack.Run OS Command (1346)
20190402 10:31:20.636 - INFO - +---- END KW: OpenStack.Reboot Instance (1347)
------------------------------------------------------------------------------
20190402 10:31:20.636 - INFO - +--- END TEST: Reboot Instances (1348)
------------------------------------------------------------------------------
20190402 10:31:20.637 - INFO - +--- START TEST: Rebuild Instances [ ]
------------------------------------------------------------------------------
20190402 10:31:20.637 - INFO - +---- START KW: OpenStack.Rebuild Instance From Volume [ ${cirros_instance_name} | ${cirros_image_name} ]
20190402 10:31:20.637 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server rebuild --image ${image} ${vm_name} | True | 30 sec ]
20190402 10:31:20.638 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:20.638 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:20.638 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:31:20.638 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:20.638 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server rebuild --image cirros vm-cirros-1'.
20190402 10:31:22.049 - INFO - Command exited with return code 1.
20190402 10:31:22.050 - INFO - ${stdout} =
20190402 10:31:22.050 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:22.050 - INFO - ${rc} = 1
20190402 10:31:22.050 - INFO - +------ END KW: SSHLibrary.Execute Command (1412)
20190402 10:31:22.051 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:22.052 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:31:22.052 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:31:22.052 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:22.053 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:31:22.054 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:22.054 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:22.054 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:31:22.054 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:31:22.055 - INFO - +----- END KW: OpenStack.Run OS Command (1418)
20190402 10:31:22.055 - INFO - +---- END KW: OpenStack.Rebuild Instance From Volume (1418)
------------------------------------------------------------------------------
20190402 10:31:22.056 - INFO - +--- END TEST: Rebuild Instances (1419)
------------------------------------------------------------------------------
20190402 10:31:22.057 - INFO - +--- START TEST: Resize Instances [ ]
------------------------------------------------------------------------------
20190402 10:31:22.057 - INFO - +---- START KW: OpenStack.Create Flavor [ ${cirros_flavor_ram} | ${cirros_flavor_vcpus} | ${cirros_flavor_disk} | ${cirros_flavor_name_2} ]
20190402 10:31:22.059 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 10:31:22.059 - INFO - ${openstack_cmd} = openstack flavor create
20190402 10:31:22.059 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:31:22.059 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 10:31:22.060 - INFO - ${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small
20190402 10:31:22.061 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 10:31:22.061 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:31:22.062 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:22.062 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:22.062 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:31:22.063 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:22.063 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f2.small'.
20190402 10:31:23.497 - INFO - Command exited with return code 0.
20190402 10:31:23.498 - INFO - ${stdout} = +----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+------------------------------...
20190402 10:31:23.498 - INFO - ${stderr} =
20190402 10:31:23.498 - INFO - ${rc} = 0
20190402 10:31:23.499 - INFO - +------ END KW: SSHLibrary.Execute Command (1436)
20190402 10:31:23.499 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:23.501 - INFO - ${res} = {u'stdout': u'+----------------------------+--------------------------------------+\n| Field                      | Value                                |\n+----------------------------+--------------...
20190402 10:31:23.501 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:31:23.501 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:23.502 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:23.503 - INFO - +----- END KW: OpenStack.Run OS Command (1442)
20190402 10:31:23.503 - INFO - +---- END KW: OpenStack.Create Flavor (1446)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:31:23.503 - INFO - +---- START KW: OpenStack.Resize Instance [ ${cirros_instance_name} | ${cirros_flavor_name_2} ]
20190402 10:31:23.503 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server resize --flavor ${flavor} ${vm_name} | True | 30 sec ]
20190402 10:31:23.504 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:23.504 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:23.504 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:31:23.504 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:23.505 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server resize --flavor f2.small vm-cirros-1'.
20190402 10:31:25.038 - INFO - Command exited with return code 1.
20190402 10:31:25.038 - INFO - ${stdout} =
20190402 10:31:25.039 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:25.039 - INFO - ${rc} = 1
20190402 10:31:25.039 - INFO - +------ END KW: SSHLibrary.Execute Command (1535)
20190402 10:31:25.040 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:25.041 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:31:25.041 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:31:25.041 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:25.042 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:31:25.043 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:25.043 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:25.043 - INFO - +------- END KW: BuiltIn.Fail (1)
20190402 10:31:25.043 - INFO - +------ END KW: BuiltIn.Run Keyword If (2)
20190402 10:31:25.044 - INFO - +----- END KW: OpenStack.Run OS Command (1541)
20190402 10:31:25.044 - INFO - +---- END KW: OpenStack.Resize Instance (1541)
------------------------------------------------------------------------------
20190402 10:31:25.045 - INFO - +--- END TEST: Resize Instances (2989)
------------------------------------------------------------------------------
20190402 10:31:25.046 - INFO - +--- START TEST: Set Unset Properties Instances [ ]
------------------------------------------------------------------------------
20190402 10:31:25.046 - INFO - +---- START KW: BuiltIn.Catenate [ ${instance_property_1}='true' | ${instance_property_2}='500' | ${instance_property_3}='180' ]
20190402 10:31:25.048 - INFO - ${properties} = --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180'
20190402 10:31:25.048 - INFO - +---- END KW: BuiltIn.Catenate (2)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:31:25.048 - INFO - +---- START KW: OpenStack.Set Instance Property [ ${cirros_instance_name} | ${properties} ]
20190402 10:31:25.049 - INFO - +----- START KW: OpenStack.Run OS Command [ openstack server set ${key} ${vm_name} | True | 30 sec ]
20190402 10:31:25.050 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:25.050 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:25.050 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:31:25.051 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:25.052 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server set --property sw:wrs:auto_recovery='true' --property hw:wrs:live_migration_max_downtime='500' --property hw:wrs:live_migration_timeout='180' vm-cirros-1'.
20190402 10:31:26.435 - INFO - Command exited with return code 1.
20190402 10:31:26.435 - INFO - ${stdout} =
20190402 10:31:26.436 - INFO - ${stderr} = No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:26.436 - INFO - ${rc} = 1
20190402 10:31:26.436 - INFO - +------ END KW: SSHLibrary.Execute Command (1385)
20190402 10:31:26.437 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:26.438 - INFO - ${res} = {u'stdout': u'', u'stderr': u"No server with a name or ID of 'vm-cirros-1' exists.", u'rc': 1}
20190402 10:31:26.438 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:31:26.439 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:26.440 - INFO - +------- START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:31:26.440 - FAIL - No server with a name or ID of 'vm-cirros-1' exists.
20190402 10:31:26.440 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:26.440 - INFO - +------- END KW: BuiltIn.Fail (0)
20190402 10:31:26.440 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:26.440 - INFO - +----- END KW: OpenStack.Run OS Command (1391)
20190402 10:31:26.440 - INFO - +---- END KW: OpenStack.Set Instance Property (1392)
------------------------------------------------------------------------------
20190402 10:31:26.441 - INFO - +--- END TEST: Set Unset Properties Instances (1395)
------------------------------------------------------------------------------
20190402 10:31:26.441 - INFO - +--- START TEST: Evacuate Instances From Hosts [ ]
------------------------------------------------------------------------------
20190402 10:31:26.441 - INFO - +---- START KW: BuiltIn.Run Keyword If [ '${CONFIGURATION_TYPE}' == 'Duplex' | Run Keywords | Evacuate Instances | controller-0 | AND | Evacuate Instances | controller-1 | ELSE IF | '${CONFIGURATION_TYPE}' == 'MN-Local' or '${CONFIGURATION_TYPE}' == 'MN-External' | Run Keywords | Evacuate Instances | compute-0 | AND | Evacuate Instances | compute-1 ]
20190402 10:31:26.442 - INFO - +----- START KW: BuiltIn.Run Keywords [ Evacuate Instances | controller-0 | AND | Evacuate Instances | controller-1 ]
20190402 10:31:26.442 - INFO - +------ START KW: OpenStack.Evacuate Instances [ controller-0 ]
20190402 10:31:26.442 - INFO - +------- START KW: BuiltIn.Set Variable [ openstack compute service set ]
20190402 10:31:26.442 - INFO - ${openstack_cmd} = openstack compute service set
20190402 10:31:26.442 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:31:26.442 - INFO - +------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --disable | --disable-reason test-evacuate | ${host} | nova-compute ]
20190402 10:31:26.443 - INFO - ${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute
20190402 10:31:26.443 - INFO - +------- END KW: BuiltIn.Catenate (1)
20190402 10:31:26.443 - INFO - +------- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 10:31:26.443 - INFO - +-------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:26.444 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:26.444 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:31:26.444 - INFO - +-------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:26.444 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service set --disable --disable-reason test-evacuate controller-0 nova-compute'.
20190402 10:31:27.776 - INFO - Command exited with return code 0.
20190402 10:31:27.777 - INFO - ${stdout} =
20190402 10:31:27.777 - INFO - ${stderr} =
20190402 10:31:27.778 - INFO - ${rc} = 0
20190402 10:31:27.778 - INFO - +-------- END KW: SSHLibrary.Execute Command (1334)
20190402 10:31:27.778 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:27.780 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:31:27.780 - INFO - +-------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:31:27.780 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:27.781 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:27.782 - INFO - +------- END KW: OpenStack.Run OS Command (1339)
20190402 10:31:27.782 - INFO - +------- START KW: BuiltIn.Wait Until Keyword Succeeds [ 5 min | 10 sec | Check Compute Service Property | ${host} | disabled ]
20190402 10:31:27.782 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | disabled ]
20190402 10:31:27.782 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:31:27.783 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:31:27.783 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:31:27.783 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:31:27.783 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:31:27.783 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:31:27.783 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:31:27.783 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:31:27.784 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:27.784 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:27.784 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:31:27.784 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:27.784 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:31:29.197 - INFO - Command exited with return code 0.
20190402 10:31:29.198 - INFO - ${stdout} = disabled
20190402 10:31:29.198 - INFO - ${stderr} =
20190402 10:31:29.198 - INFO - ${rc} = 0
20190402 10:31:29.199 - INFO - +----------- END KW: SSHLibrary.Execute Command (1415)
20190402 10:31:29.199 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:29.201 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:31:29.201 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:31:29.201 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:29.202 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:29.203 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:31:29.203 - INFO - +---------- END KW: OpenStack.Run OS Command (1420)
20190402 10:31:29.203 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:31:29.203 - INFO - ${value} = disabled
20190402 10:31:29.203 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:31:29.203 - INFO - ${current_value} = disabled
20190402 10:31:29.203 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1421)
20190402 10:31:29.203 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:31:29.204 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:31:29.204 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:31:29.204 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1422)
20190402 10:31:29.204 - INFO - +------- END KW: BuiltIn.Wait Until Keyword Succeeds (1422)
20190402 10:31:29.204 - INFO - +------- START KW: BuiltIn.Wait Until Keyword Succeeds [ 5 min | 10 sec | Check Compute Service Property | ${host} | enabled ]
20190402 10:31:29.204 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:31:29.205 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:31:29.205 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:31:29.205 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:31:29.205 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:31:29.205 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:31:29.205 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:31:29.205 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:31:29.205 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:31:29.206 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:29.206 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:29.206 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:31:29.206 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:29.206 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:31:30.620 - INFO - Command exited with return code 0.
20190402 10:31:30.621 - INFO - ${stdout} = disabled
20190402 10:31:30.621 - INFO - ${stderr} =
20190402 10:31:30.621 - INFO - ${rc} = 0
20190402 10:31:30.621 - INFO - +----------- END KW: SSHLibrary.Execute Command (1415)
20190402 10:31:30.622 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:30.623 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:31:30.624 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:31:30.624 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:30.625 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:30.625 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:31:30.626 - INFO - +---------- END KW: OpenStack.Run OS Command (1421)
20190402 10:31:30.626 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:31:30.627 - INFO - ${value} = disabled
20190402 10:31:30.627 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:31:30.628 - INFO - ${current_value} = disabled
20190402 10:31:30.628 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1423)
20190402 10:31:30.628 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:31:30.629 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:31:30.629 - FAIL - disabled != enabled
20190402 10:31:30.630 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:30.630 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (2)
20190402 10:31:30.630 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1426)
20190402 10:31:40.631 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:31:40.632 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:31:40.633 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:31:40.634 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:31:40.634 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:31:40.634 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:31:40.635 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:31:40.635 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:31:40.636 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:31:40.636 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:40.636 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:40.636 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:31:40.636 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:40.637 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:31:42.069 - INFO - Command exited with return code 0.
20190402 10:31:42.070 - INFO - ${stdout} = disabled
20190402 10:31:42.070 - INFO - ${stderr} =
20190402 10:31:42.070 - INFO - ${rc} = 0
20190402 10:31:42.071 - INFO - +----------- END KW: SSHLibrary.Execute Command (1434)
20190402 10:31:42.071 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:42.072 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:31:42.073 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:31:42.073 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:42.074 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:42.074 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:31:42.075 - INFO - +---------- END KW: OpenStack.Run OS Command (1439)
20190402 10:31:42.075 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:31:42.076 - INFO - ${value} = disabled
20190402 10:31:42.076 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:31:42.076 - INFO - ${current_value} = disabled
20190402 10:31:42.077 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1444)
20190402 10:31:42.077 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:31:42.078 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:31:42.078 - FAIL - disabled != enabled
20190402 10:31:42.078 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:42.078 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:31:42.079 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1448)
20190402 10:31:52.079 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:31:52.080 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:31:52.081 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:31:52.082 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:31:52.082 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:31:52.082 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:31:52.083 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:31:52.083 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:31:52.083 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:31:52.084 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:31:52.085 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:31:52.085 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:31:52.085 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:31:52.086 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:31:53.467 - INFO - Command exited with return code 0.
20190402 10:31:53.468 - INFO - ${stdout} = disabled
20190402 10:31:53.468 - INFO - ${stderr} =
20190402 10:31:53.468 - INFO - ${rc} = 0
20190402 10:31:53.468 - INFO - +----------- END KW: SSHLibrary.Execute Command (1383)
20190402 10:31:53.468 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:31:53.469 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:31:53.469 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:31:53.469 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:31:53.470 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:31:53.470 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:31:53.470 - INFO - +---------- END KW: OpenStack.Run OS Command (1387)
20190402 10:31:53.470 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:31:53.470 - INFO - ${value} = disabled
20190402 10:31:53.470 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:31:53.471 - INFO - ${current_value} = disabled
20190402 10:31:53.471 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1391)
20190402 10:31:53.471 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:31:53.471 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:31:53.472 - FAIL - disabled != enabled
20190402 10:31:53.472 - DEBUG - Traceback (most recent call last):
  None
20190402 10:31:53.472 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:31:53.472 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1393)
20190402 10:32:03.473 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:32:03.474 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:32:03.475 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:32:03.475 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:32:03.475 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:32:03.476 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:32:03.477 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:32:03.477 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:32:03.477 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:32:03.478 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:32:03.479 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:32:03.479 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:32:03.480 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:32:03.481 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:32:04.863 - INFO - Command exited with return code 0.
20190402 10:32:04.864 - INFO - ${stdout} = disabled
20190402 10:32:04.864 - INFO - ${stderr} =
20190402 10:32:04.864 - INFO - ${rc} = 0
20190402 10:32:04.865 - INFO - +----------- END KW: SSHLibrary.Execute Command (1385)
20190402 10:32:04.865 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:32:04.867 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:32:04.867 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:32:04.867 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:32:04.868 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:32:04.869 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:32:04.869 - INFO - +---------- END KW: OpenStack.Run OS Command (1392)
20190402 10:32:04.869 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:32:04.870 - INFO - ${value} = disabled
20190402 10:32:04.870 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:32:04.870 - INFO - ${current_value} = disabled
20190402 10:32:04.871 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1397)
20190402 10:32:04.871 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:32:04.872 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:32:04.872 - FAIL - disabled != enabled
20190402 10:32:04.872 - DEBUG - Traceback (most recent call last):
  None
20190402 10:32:04.872 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:32:04.873 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1399)
20190402 10:32:14.873 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:32:14.874 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:32:14.875 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:32:14.876 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:32:14.876 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:32:14.876 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:32:14.877 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:32:14.877 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:32:14.878 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:32:14.879 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:32:14.880 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:32:14.880 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:32:14.880 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:32:14.881 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:32:16.221 - INFO - Command exited with return code 0.
20190402 10:32:16.221 - INFO - ${stdout} = disabled
20190402 10:32:16.221 - INFO - ${stderr} =
20190402 10:32:16.221 - INFO - ${rc} = 0
20190402 10:32:16.221 - INFO - +----------- END KW: SSHLibrary.Execute Command (1341)
20190402 10:32:16.221 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:32:16.222 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:32:16.222 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:32:16.222 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:32:16.222 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:32:16.222 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:32:16.222 - INFO - +---------- END KW: OpenStack.Run OS Command (1344)
20190402 10:32:16.223 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:32:16.223 - INFO - ${value} = disabled
20190402 10:32:16.223 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:32:16.223 - INFO - ${current_value} = disabled
20190402 10:32:16.223 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1349)
20190402 10:32:16.223 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:32:16.223 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:32:16.223 - FAIL - disabled != enabled
20190402 10:32:16.223 - DEBUG - Traceback (most recent call last):
  None
20190402 10:32:16.223 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:32:16.224 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1351)
20190402 10:32:26.224 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:32:26.225 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:32:26.225 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:32:26.226 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:32:26.226 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:32:26.226 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:32:26.226 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:32:26.226 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:32:26.226 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:32:26.227 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:32:26.227 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:32:26.227 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:32:26.228 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:32:26.228 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:32:27.609 - INFO - Command exited with return code 0.
20190402 10:32:27.610 - INFO - ${stdout} = disabled
20190402 10:32:27.610 - INFO - ${stderr} =
20190402 10:32:27.610 - INFO - ${rc} = 0
20190402 10:32:27.611 - INFO - +----------- END KW: SSHLibrary.Execute Command (1382)
20190402 10:32:27.611 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:32:27.612 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:32:27.613 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:32:27.613 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:32:27.614 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:32:27.614 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:32:27.614 - INFO - +---------- END KW: OpenStack.Run OS Command (1388)
20190402 10:32:27.615 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:32:27.615 - INFO - ${value} = disabled
20190402 10:32:27.615 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:32:27.615 - INFO - ${current_value} = disabled
20190402 10:32:27.615 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1390)
20190402 10:32:27.615 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:32:27.615 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:32:27.616 - FAIL - disabled != enabled
20190402 10:32:27.616 - DEBUG - Traceback (most recent call last):
  None
20190402 10:32:27.616 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:32:27.616 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1392)
20190402 10:32:37.616 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:32:37.617 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:32:37.617 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:32:37.617 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:32:37.617 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:32:37.617 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:32:37.618 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:32:37.618 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:32:37.618 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:32:37.618 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:32:37.618 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:32:37.618 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:32:37.618 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:32:37.619 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:32:39.101 - INFO - Command exited with return code 0.
20190402 10:32:39.102 - INFO - ${stdout} = disabled
20190402 10:32:39.102 - INFO - ${stderr} =
20190402 10:32:39.102 - INFO - ${rc} = 0
20190402 10:32:39.102 - INFO - +----------- END KW: SSHLibrary.Execute Command (1484)
20190402 10:32:39.102 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:32:39.103 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:32:39.103 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:32:39.103 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:32:39.103 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:32:39.103 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:32:39.103 - INFO - +---------- END KW: OpenStack.Run OS Command (1485)
20190402 10:32:39.103 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:32:39.104 - INFO - ${value} = disabled
20190402 10:32:39.104 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:32:39.104 - INFO - ${current_value} = disabled
20190402 10:32:39.104 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1487)
20190402 10:32:39.104 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:32:39.104 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:32:39.104 - FAIL - disabled != enabled
20190402 10:32:39.104 - DEBUG - Traceback (most recent call last):
  None
20190402 10:32:39.104 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:32:39.104 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1488)
20190402 10:32:49.105 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:32:49.105 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:32:49.106 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:32:49.106 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:32:49.106 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:32:49.106 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:32:49.106 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:32:49.106 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:32:49.106 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:32:49.107 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:32:49.107 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:32:49.107 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:32:49.107 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:32:49.108 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:32:50.439 - INFO - Command exited with return code 0.
20190402 10:32:50.439 - INFO - ${stdout} = disabled
20190402 10:32:50.439 - INFO - ${stderr} =
20190402 10:32:50.439 - INFO - ${rc} = 0
20190402 10:32:50.440 - INFO - +----------- END KW: SSHLibrary.Execute Command (1333)
20190402 10:32:50.440 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:32:50.441 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:32:50.441 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:32:50.442 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:32:50.442 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:32:50.443 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:32:50.443 - INFO - +---------- END KW: OpenStack.Run OS Command (1337)
20190402 10:32:50.443 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:32:50.444 - INFO - ${value} = disabled
20190402 10:32:50.444 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:32:50.445 - INFO - ${current_value} = disabled
20190402 10:32:50.445 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1340)
20190402 10:32:50.445 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:32:50.446 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:32:50.446 - FAIL - disabled != enabled
20190402 10:32:50.447 - DEBUG - Traceback (most recent call last):
  None
20190402 10:32:50.447 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (2)
20190402 10:32:50.447 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1342)
20190402 10:33:00.448 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:33:00.449 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:33:00.449 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:33:00.450 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:33:00.450 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:33:00.450 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:33:00.451 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}'
20190402 10:33:00.451 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:33:00.451 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:33:00.453 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:33:00.453 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:33:00.453 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:33:00.453 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:33:00.454 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-0|awk '{print$10}''.
20190402 10:33:01.835 - INFO - Command exited with return code 0.
20190402 10:33:01.835 - INFO - ${stdout} = enabled
20190402 10:33:01.835 - INFO - ${stderr} =
20190402 10:33:01.835 - INFO - ${rc} = 0
20190402 10:33:01.835 - INFO - +----------- END KW: SSHLibrary.Execute Command (1382)
20190402 10:33:01.836 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:33:01.836 - INFO - ${res} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}
20190402 10:33:01.836 - INFO - +----------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:33:01.836 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:33:01.837 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:33:01.837 - INFO - ${result} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}
20190402 10:33:01.837 - INFO - +---------- END KW: OpenStack.Run OS Command (1386)
20190402 10:33:01.837 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:33:01.837 - INFO - ${value} = enabled
20190402 10:33:01.837 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:33:01.837 - INFO - ${current_value} = enabled
20190402 10:33:01.837 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1388)
20190402 10:33:01.838 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:33:01.838 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:33:01.838 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:33:01.838 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1390)
20190402 10:33:01.838 - INFO - +------- END KW: BuiltIn.Wait Until Keyword Succeeds (92634)
20190402 10:33:01.838 - INFO - +------ END KW: OpenStack.Evacuate Instances (95396)
20190402 10:33:01.838 - INFO - +------ START KW: OpenStack.Evacuate Instances [ controller-1 ]
20190402 10:33:01.838 - INFO - +------- START KW: BuiltIn.Set Variable [ openstack compute service set ]
20190402 10:33:01.839 - INFO - ${openstack_cmd} = openstack compute service set
20190402 10:33:01.839 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:33:01.839 - INFO - +------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --disable | --disable-reason test-evacuate | ${host} | nova-compute ]
20190402 10:33:01.839 - INFO - ${cmd} = openstack compute service set --disable --disable-reason test-evacuate controller-1 nova-compute
20190402 10:33:01.839 - INFO - +------- END KW: BuiltIn.Catenate (0)
20190402 10:33:01.839 - INFO - +------- START KW: OpenStack.Run OS Command [ ${cmd} | True | 30 sec ]
20190402 10:33:01.839 - INFO - +-------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:33:01.840 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:33:01.840 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:33:01.840 - INFO - +-------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:33:01.840 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service set --disable --disable-reason test-evacuate controller-1 nova-compute'.
20190402 10:33:03.220 - INFO - Command exited with return code 0.
20190402 10:33:03.221 - INFO - ${stdout} =
20190402 10:33:03.221 - INFO - ${stderr} =
20190402 10:33:03.221 - INFO - ${rc} = 0
20190402 10:33:03.221 - INFO - +-------- END KW: SSHLibrary.Execute Command (1381)
20190402 10:33:03.221 - INFO - +-------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:33:03.221 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:33:03.221 - INFO - +-------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:33:03.222 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:33:03.222 - INFO - +-------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:33:03.222 - INFO - +------- END KW: OpenStack.Run OS Command (1383)
20190402 10:33:03.222 - INFO - +------- START KW: BuiltIn.Wait Until Keyword Succeeds [ 5 min | 10 sec | Check Compute Service Property | ${host} | disabled ]
20190402 10:33:03.223 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | disabled ]
20190402 10:33:03.223 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:33:03.223 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:33:03.223 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:33:03.223 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:33:03.223 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:33:03.224 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:33:03.224 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:33:03.224 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:33:03.225 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:33:03.225 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:33:03.225 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:33:03.225 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:33:03.226 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:33:04.606 - INFO - Command exited with return code 0.
20190402 10:33:04.607 - INFO - ${stdout} = disabled
20190402 10:33:04.607 - INFO - ${stderr} =
20190402 10:33:04.607 - INFO - ${rc} = 0
20190402 10:33:04.607 - INFO - +----------- END KW: SSHLibrary.Execute Command (1382)
20190402 10:33:04.607 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:33:04.607 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:33:04.608 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:33:04.608 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:33:04.608 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:33:04.608 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:33:04.608 - INFO - +---------- END KW: OpenStack.Run OS Command (1384)
20190402 10:33:04.608 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:33:04.609 - INFO - ${value} = disabled
20190402 10:33:04.609 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:33:04.609 - INFO - ${current_value} = disabled
20190402 10:33:04.609 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1386)
20190402 10:33:04.609 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:33:04.609 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:33:04.609 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:33:04.610 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1387)
20190402 10:33:04.610 - INFO - +------- END KW: BuiltIn.Wait Until Keyword Succeeds (1388)
20190402 10:33:04.610 - INFO - +------- START KW: BuiltIn.Wait Until Keyword Succeeds [ 5 min | 10 sec | Check Compute Service Property | ${host} | enabled ]
20190402 10:33:04.610 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:33:04.611 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:33:04.611 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:33:04.611 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:33:04.611 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:33:04.611 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:33:04.612 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:33:04.612 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:33:04.612 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:33:04.612 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:33:04.612 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:33:04.612 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:33:04.612 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:33:04.613 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:33:05.945 - INFO - Command exited with return code 0.
20190402 10:33:05.945 - INFO - ${stdout} = disabled
20190402 10:33:05.945 - INFO - ${stderr} =
20190402 10:33:05.945 - INFO - ${rc} = 0
20190402 10:33:05.945 - INFO - +----------- END KW: SSHLibrary.Execute Command (1333)
20190402 10:33:05.945 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:33:05.946 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:33:05.946 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:33:05.946 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:33:05.946 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:33:05.946 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:33:05.947 - INFO - +---------- END KW: OpenStack.Run OS Command (1334)
20190402 10:33:05.947 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:33:05.947 - INFO - ${value} = disabled
20190402 10:33:05.947 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:33:05.947 - INFO - ${current_value} = disabled
20190402 10:33:05.947 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1336)
20190402 10:33:05.947 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:33:05.948 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:33:05.948 - FAIL - disabled != enabled
20190402 10:33:05.948 - DEBUG - Traceback (most recent call last):
  None
20190402 10:33:05.948 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:33:05.948 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1338)
20190402 10:33:15.948 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:33:15.949 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:33:15.949 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:33:15.949 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:33:15.949 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:33:15.950 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:33:15.950 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:33:15.950 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:33:15.950 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:33:15.950 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:33:15.950 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:33:15.950 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:33:15.951 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:33:15.951 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:33:17.333 - INFO - Command exited with return code 0.
20190402 10:33:17.334 - INFO - ${stdout} = disabled
20190402 10:33:17.334 - INFO - ${stderr} =
20190402 10:33:17.334 - INFO - ${rc} = 0
20190402 10:33:17.334 - INFO - +----------- END KW: SSHLibrary.Execute Command (1383)
20190402 10:33:17.334 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:33:17.335 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:33:17.335 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:33:17.335 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:33:17.336 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:33:17.336 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:33:17.336 - INFO - +---------- END KW: OpenStack.Run OS Command (1386)
20190402 10:33:17.337 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:33:17.337 - INFO - ${value} = disabled
20190402 10:33:17.337 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:33:17.337 - INFO - ${current_value} = disabled
20190402 10:33:17.338 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1389)
20190402 10:33:17.338 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:33:17.338 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:33:17.339 - FAIL - disabled != enabled
20190402 10:33:17.339 - DEBUG - Traceback (most recent call last):
  None
20190402 10:33:17.339 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:33:17.339 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1391)
20190402 10:33:27.339 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:33:27.340 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:33:27.340 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:33:27.340 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:33:27.340 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:33:27.341 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:33:27.341 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:33:27.341 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:33:27.341 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:33:27.342 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:33:27.342 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:33:27.342 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:33:27.342 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:33:27.343 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:33:28.673 - INFO - Command exited with return code 0.
20190402 10:33:28.673 - INFO - ${stdout} = disabled
20190402 10:33:28.674 - INFO - ${stderr} =
20190402 10:33:28.674 - INFO - ${rc} = 0
20190402 10:33:28.674 - INFO - +----------- END KW: SSHLibrary.Execute Command (1332)
20190402 10:33:28.674 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:33:28.675 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:33:28.675 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:33:28.676 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:33:28.677 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:33:28.677 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:33:28.677 - INFO - +---------- END KW: OpenStack.Run OS Command (1336)
20190402 10:33:28.678 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:33:28.678 - INFO - ${value} = disabled
20190402 10:33:28.679 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:33:28.679 - INFO - ${current_value} = disabled
20190402 10:33:28.679 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1339)
20190402 10:33:28.679 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:33:28.680 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:33:28.680 - FAIL - disabled != enabled
20190402 10:33:28.680 - DEBUG - Traceback (most recent call last):
  None
20190402 10:33:28.681 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:33:28.681 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1342)
20190402 10:33:38.682 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:33:38.683 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:33:38.684 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:33:38.685 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:33:38.685 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:33:38.686 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:33:38.687 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:33:38.687 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:33:38.687 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:33:38.687 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:33:38.687 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:33:38.687 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:33:38.688 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:33:38.688 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:33:40.020 - INFO - Command exited with return code 0.
20190402 10:33:40.020 - INFO - ${stdout} = disabled
20190402 10:33:40.021 - INFO - ${stderr} =
20190402 10:33:40.021 - INFO - ${rc} = 0
20190402 10:33:40.021 - INFO - +----------- END KW: SSHLibrary.Execute Command (1333)
20190402 10:33:40.022 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:33:40.023 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:33:40.023 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:33:40.024 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:33:40.025 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:33:40.025 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:33:40.025 - INFO - +---------- END KW: OpenStack.Run OS Command (1338)
20190402 10:33:40.025 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:33:40.025 - INFO - ${value} = disabled
20190402 10:33:40.025 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:33:40.025 - INFO - ${current_value} = disabled
20190402 10:33:40.026 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1343)
20190402 10:33:40.026 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:33:40.026 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:33:40.026 - FAIL - disabled != enabled
20190402 10:33:40.026 - DEBUG - Traceback (most recent call last):
  None
20190402 10:33:40.026 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:33:40.026 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1344)
20190402 10:33:50.027 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:33:50.028 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:33:50.029 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:33:50.030 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:33:50.030 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:33:50.030 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:33:50.031 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:33:50.031 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:33:50.031 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:33:50.032 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:33:50.033 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:33:50.033 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:33:50.033 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:33:50.034 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:33:51.366 - INFO - Command exited with return code 0.
20190402 10:33:51.367 - INFO - ${stdout} = disabled
20190402 10:33:51.367 - INFO - ${stderr} =
20190402 10:33:51.367 - INFO - ${rc} = 0
20190402 10:33:51.367 - INFO - +----------- END KW: SSHLibrary.Execute Command (1334)
20190402 10:33:51.368 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:33:51.369 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:33:51.369 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:33:51.369 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:33:51.370 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:33:51.370 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:33:51.370 - INFO - +---------- END KW: OpenStack.Run OS Command (1339)
20190402 10:33:51.370 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:33:51.371 - INFO - ${value} = disabled
20190402 10:33:51.371 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:33:51.372 - INFO - ${current_value} = disabled
20190402 10:33:51.372 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1344)
20190402 10:33:51.372 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:33:51.372 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:33:51.372 - FAIL - disabled != enabled
20190402 10:33:51.372 - DEBUG - Traceback (most recent call last):
  None
20190402 10:33:51.372 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:33:51.373 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1346)
20190402 10:34:01.373 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:34:01.374 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:34:01.375 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:34:01.376 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:34:01.376 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:34:01.376 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:34:01.377 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:34:01.377 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:34:01.377 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:34:01.378 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:34:01.378 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:34:01.378 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:34:01.378 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:34:01.379 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:34:02.711 - INFO - Command exited with return code 0.
20190402 10:34:02.711 - INFO - ${stdout} = disabled
20190402 10:34:02.711 - INFO - ${stderr} =
20190402 10:34:02.711 - INFO - ${rc} = 0
20190402 10:34:02.711 - INFO - +----------- END KW: SSHLibrary.Execute Command (1333)
20190402 10:34:02.711 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:34:02.712 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:34:02.712 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:34:02.712 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:34:02.712 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:34:02.712 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:34:02.712 - INFO - +---------- END KW: OpenStack.Run OS Command (1335)
20190402 10:34:02.712 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:34:02.713 - INFO - ${value} = disabled
20190402 10:34:02.713 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:34:02.713 - INFO - ${current_value} = disabled
20190402 10:34:02.713 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1339)
20190402 10:34:02.713 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:34:02.713 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:34:02.713 - FAIL - disabled != enabled
20190402 10:34:02.713 - DEBUG - Traceback (most recent call last):
  None
20190402 10:34:02.713 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:34:02.714 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1341)
20190402 10:34:12.714 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:34:12.715 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:34:12.716 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:34:12.717 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:34:12.717 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:34:12.718 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:34:12.718 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:34:12.719 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:34:12.719 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:34:12.722 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:34:12.722 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:34:12.723 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:34:12.723 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:34:12.724 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:34:14.107 - INFO - Command exited with return code 0.
20190402 10:34:14.107 - INFO - ${stdout} = disabled
20190402 10:34:14.107 - INFO - ${stderr} =
20190402 10:34:14.107 - INFO - ${rc} = 0
20190402 10:34:14.107 - INFO - +----------- END KW: SSHLibrary.Execute Command (1384)
20190402 10:34:14.107 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:34:14.108 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:34:14.108 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:34:14.108 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:34:14.108 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:34:14.108 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:34:14.108 - INFO - +---------- END KW: OpenStack.Run OS Command (1389)
20190402 10:34:14.108 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:34:14.108 - INFO - ${value} = disabled
20190402 10:34:14.109 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:34:14.109 - INFO - ${current_value} = disabled
20190402 10:34:14.109 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1394)
20190402 10:34:14.109 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:34:14.109 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:34:14.109 - FAIL - disabled != enabled
20190402 10:34:14.109 - DEBUG - Traceback (most recent call last):
  None
20190402 10:34:14.109 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:34:14.109 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1395)
20190402 10:34:24.110 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:34:24.110 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:34:24.111 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:34:24.111 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:34:24.111 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:34:24.111 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:34:24.111 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:34:24.111 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:34:24.111 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:34:24.112 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:34:24.112 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:34:24.112 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:34:24.112 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:34:24.112 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:34:25.444 - INFO - Command exited with return code 0.
20190402 10:34:25.444 - INFO - ${stdout} = disabled
20190402 10:34:25.444 - INFO - ${stderr} =
20190402 10:34:25.444 - INFO - ${rc} = 0
20190402 10:34:25.444 - INFO - +----------- END KW: SSHLibrary.Execute Command (1332)
20190402 10:34:25.445 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:34:25.445 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:34:25.445 - INFO - +----------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:34:25.445 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:34:25.445 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:34:25.446 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:34:25.446 - INFO - +---------- END KW: OpenStack.Run OS Command (1335)
20190402 10:34:25.446 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:34:25.446 - INFO - ${value} = disabled
20190402 10:34:25.446 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:34:25.446 - INFO - ${current_value} = disabled
20190402 10:34:25.446 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1336)
20190402 10:34:25.446 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:34:25.447 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:34:25.447 - FAIL - disabled != enabled
20190402 10:34:25.447 - DEBUG - Traceback (most recent call last):
  None
20190402 10:34:25.447 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:34:25.447 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1337)
20190402 10:34:35.447 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:34:35.448 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:34:35.448 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:34:35.449 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:34:35.449 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:34:35.449 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:34:35.449 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:34:35.449 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:34:35.450 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:34:35.450 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:34:35.450 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:34:35.450 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:34:35.451 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:34:35.451 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:34:36.882 - INFO - Command exited with return code 0.
20190402 10:34:36.882 - INFO - ${stdout} = disabled
20190402 10:34:36.882 - INFO - ${stderr} =
20190402 10:34:36.882 - INFO - ${rc} = 0
20190402 10:34:36.883 - INFO - +----------- END KW: SSHLibrary.Execute Command (1431)
20190402 10:34:36.883 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:34:36.884 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:34:36.885 - INFO - +----------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:34:36.885 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:34:36.886 - INFO - +----------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:34:36.886 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:34:36.886 - INFO - +---------- END KW: OpenStack.Run OS Command (1437)
20190402 10:34:36.886 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:34:36.887 - INFO - ${value} = disabled
20190402 10:34:36.887 - INFO - +---------- END KW: Collections.Get From Dictionary (1)
20190402 10:34:36.887 - INFO - ${current_value} = disabled
20190402 10:34:36.888 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1440)
20190402 10:34:36.888 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:34:36.889 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:34:36.889 - FAIL - disabled != enabled
20190402 10:34:36.889 - DEBUG - Traceback (most recent call last):
  None
20190402 10:34:36.889 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:34:36.890 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1442)
20190402 10:34:46.890 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:34:46.891 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:34:46.891 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:34:46.891 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:34:46.891 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:34:46.891 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:34:46.892 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:34:46.892 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:34:46.892 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:34:46.892 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:34:46.892 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:34:46.892 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:34:46.892 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:34:46.893 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:34:48.224 - INFO - Command exited with return code 0.
20190402 10:34:48.224 - INFO - ${stdout} = disabled
20190402 10:34:48.224 - INFO - ${stderr} =
20190402 10:34:48.224 - INFO - ${rc} = 0
20190402 10:34:48.224 - INFO - +----------- END KW: SSHLibrary.Execute Command (1332)
20190402 10:34:48.224 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:34:48.225 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:34:48.225 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:34:48.225 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:34:48.225 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:34:48.225 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:34:48.226 - INFO - +---------- END KW: OpenStack.Run OS Command (1334)
20190402 10:34:48.226 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:34:48.226 - INFO - ${value} = disabled
20190402 10:34:48.226 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:34:48.226 - INFO - ${current_value} = disabled
20190402 10:34:48.226 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1335)
20190402 10:34:48.226 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:34:48.226 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:34:48.227 - FAIL - disabled != enabled
20190402 10:34:48.227 - DEBUG - Traceback (most recent call last):
  None
20190402 10:34:48.227 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:34:48.227 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1337)
20190402 10:34:58.227 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:34:58.229 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:34:58.230 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:34:58.230 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:34:58.230 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:34:58.231 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:34:58.231 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:34:58.231 - INFO - +---------- END KW: BuiltIn.Catenate (0)
20190402 10:34:58.232 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:34:58.233 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:34:58.233 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:34:58.234 - INFO - +----------- END KW: BuiltIn.Set Variable (1)
20190402 10:34:58.234 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:34:58.235 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:34:59.617 - INFO - Command exited with return code 0.
20190402 10:34:59.617 - INFO - ${stdout} = disabled
20190402 10:34:59.617 - INFO - ${stderr} =
20190402 10:34:59.617 - INFO - ${rc} = 0
20190402 10:34:59.617 - INFO - +----------- END KW: SSHLibrary.Execute Command (1383)
20190402 10:34:59.617 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:34:59.618 - INFO - ${res} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:34:59.618 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:34:59.618 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:34:59.618 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:34:59.618 - INFO - ${result} = {u'stdout': u'disabled', u'stderr': u'', u'rc': 0}
20190402 10:34:59.618 - INFO - +---------- END KW: OpenStack.Run OS Command (1386)
20190402 10:34:59.619 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:34:59.619 - INFO - ${value} = disabled
20190402 10:34:59.619 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:34:59.619 - INFO - ${current_value} = disabled
20190402 10:34:59.619 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1390)
20190402 10:34:59.619 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:34:59.620 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:34:59.620 - FAIL - disabled != enabled
20190402 10:34:59.620 - DEBUG - Traceback (most recent call last):
  None
20190402 10:34:59.620 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:34:59.620 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1393)
20190402 10:35:09.621 - INFO - +-------- START KW: OpenStack.Check Compute Service Property [ ${host} | enabled ]
20190402 10:35:09.622 - INFO - +--------- START KW: OpenStack.Retrieve Field Property Compute [ ${compute} ]
20190402 10:35:09.623 - INFO - +---------- START KW: BuiltIn.Set Variable [ openstack compute service list --service nova-compute ]
20190402 10:35:09.623 - INFO - ${openstack_cmd} = openstack compute service list --service nova-compute
20190402 10:35:09.624 - INFO - +---------- END KW: BuiltIn.Set Variable (1)
20190402 10:35:09.624 - INFO - +---------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep ${compute} | awk '{print$10}' ]
20190402 10:35:09.625 - INFO - ${cmd} = openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}'
20190402 10:35:09.625 - INFO - +---------- END KW: BuiltIn.Catenate (1)
20190402 10:35:09.625 - INFO - +---------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:35:09.625 - INFO - +----------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:09.625 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:09.625 - INFO - +----------- END KW: BuiltIn.Set Variable (0)
20190402 10:35:09.626 - INFO - +----------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:09.626 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack compute service list --service nova-compute|grep controller-1|awk '{print$10}''.
20190402 10:35:10.957 - INFO - Command exited with return code 0.
20190402 10:35:10.957 - INFO - ${stdout} = enabled
20190402 10:35:10.958 - INFO - ${stderr} =
20190402 10:35:10.958 - INFO - ${rc} = 0
20190402 10:35:10.958 - INFO - +----------- END KW: SSHLibrary.Execute Command (1332)
20190402 10:35:10.958 - INFO - +----------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:10.959 - INFO - ${res} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}
20190402 10:35:10.959 - INFO - +----------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:35:10.959 - INFO - +----------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:10.959 - INFO - +----------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:35:10.960 - INFO - ${result} = {u'stdout': u'enabled', u'stderr': u'', u'rc': 0}
20190402 10:35:10.960 - INFO - +---------- END KW: OpenStack.Run OS Command (1335)
20190402 10:35:10.960 - INFO - +---------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:35:10.960 - INFO - ${value} = enabled
20190402 10:35:10.960 - INFO - +---------- END KW: Collections.Get From Dictionary (0)
20190402 10:35:10.960 - INFO - ${current_value} = enabled
20190402 10:35:10.960 - INFO - +--------- END KW: OpenStack.Retrieve Field Property Compute (1338)
20190402 10:35:10.960 - INFO - +--------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:35:10.961 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:35:10.961 - INFO - +--------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:35:10.961 - INFO - +-------- END KW: OpenStack.Check Compute Service Property (1340)
20190402 10:35:10.961 - INFO - +------- END KW: BuiltIn.Wait Until Keyword Succeeds (126351)
20190402 10:35:10.961 - INFO - +------ END KW: OpenStack.Evacuate Instances (129123)
20190402 10:35:10.961 - INFO - +----- END KW: BuiltIn.Run Keywords (224519)
20190402 10:35:10.961 - INFO - +---- END KW: BuiltIn.Run Keyword If (224520)
------------------------------------------------------------------------------
20190402 10:35:10.961 - INFO - +--- END TEST: Evacuate Instances From Hosts (224520)
------------------------------------------------------------------------------
20190402 10:35:10.962 - INFO - +--- START TEARDOWN: BuiltIn.Run Keywords [ OpenStack.Openstack Cleanup All | Utils.Stx Suite TearDown ]
20190402 10:35:10.963 - INFO - +---- START KW: OpenStack.Openstack Cleanup All [ ]
20190402 10:35:10.963 - INFO - +----- START KW: OpenStack.Delete All Instances [ ]
20190402 10:35:10.963 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack server list ]
20190402 10:35:10.963 - INFO - ${openstack_cmd} = openstack server list
20190402 10:35:10.963 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:35:10.963 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:35:10.964 - INFO - ${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"
20190402 10:35:10.964 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:35:10.964 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:35:10.964 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:10.964 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:10.964 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:35:10.964 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:10.965 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server list|awk '{print$4}'|grep -v "Name"'.
20190402 10:35:12.351 - INFO - Command exited with return code 0.
20190402 10:35:12.351 - INFO - ${stdout} =
20190402 10:35:12.351 - INFO - ${stderr} =
20190402 10:35:12.351 - INFO - ${rc} = 0
20190402 10:35:12.352 - INFO - +------- END KW: SSHLibrary.Execute Command (1387)
20190402 10:35:12.352 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:12.352 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:35:12.352 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:35:12.352 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:12.353 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:35:12.353 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:35:12.353 - INFO - +------ END KW: OpenStack.Run OS Command (1389)
20190402 10:35:12.353 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:35:12.353 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:35:12.354 - INFO - ${response} =
20190402 10:35:12.354 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:35:12.354 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:35:12.354 - INFO - @{res_in_list} = [ ]
20190402 10:35:12.354 - INFO - +------- END KW: String.Split String (0)
20190402 10:35:12.354 - INFO - @{vm_list} = [ ]
20190402 10:35:12.354 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:35:12.354 - INFO - +------ START KW: ${vm} IN [ @{vm_list} ] [ ]
20190402 10:35:12.355 - INFO - +------ END KW: ${vm} IN [ @{vm_list} ] (1)
20190402 10:35:12.355 - INFO - +----- END KW: OpenStack.Delete All Instances (1392)
20190402 10:35:12.355 - INFO - +----- START KW: OpenStack.Delete All Images [ ]
20190402 10:35:12.355 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack image list ]
20190402 10:35:12.355 - INFO - ${openstack_cmd} = openstack image list
20190402 10:35:12.355 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:35:12.355 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "Cirros" ]
20190402 10:35:12.356 - INFO - ${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"
20190402 10:35:12.356 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:35:12.356 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:35:12.356 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:12.356 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:12.356 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:35:12.357 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:12.357 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.
20190402 10:35:13.687 - INFO - Command exited with return code 0.
20190402 10:35:13.688 - INFO - ${stdout} =
20190402 10:35:13.688 - INFO - ${stderr} =
20190402 10:35:13.688 - INFO - ${rc} = 0
20190402 10:35:13.688 - INFO - +------- END KW: SSHLibrary.Execute Command (1331)
20190402 10:35:13.688 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:13.689 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:35:13.689 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:35:13.689 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:13.689 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:35:13.690 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:35:13.690 - INFO - +------ END KW: OpenStack.Run OS Command (1334)
20190402 10:35:13.690 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:35:13.690 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:35:13.690 - INFO - ${response} =
20190402 10:35:13.690 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:35:13.690 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:35:13.691 - INFO - @{res_in_list} = [ ]
20190402 10:35:13.691 - INFO - +------- END KW: String.Split String (1)
20190402 10:35:13.691 - INFO - @{image_list} = [ ]
20190402 10:35:13.691 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:35:13.691 - INFO - +------ START KW: ${image} IN [ @{image_list} ] [ ]
20190402 10:35:13.691 - INFO - +------ END KW: ${image} IN [ @{image_list} ] (0)
20190402 10:35:13.691 - INFO - +----- END KW: OpenStack.Delete All Images (1336)
20190402 10:35:13.691 - INFO - +----- START KW: OpenStack.Delete All Flavors [ ]
20190402 10:35:13.691 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack flavor list ]
20190402 10:35:13.692 - INFO - ${openstack_cmd} = openstack flavor list
20190402 10:35:13.692 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:35:13.692 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "m1" ]
20190402 10:35:13.692 - INFO - ${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"
20190402 10:35:13.692 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:35:13.692 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:35:13.692 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:13.693 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:13.693 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:35:13.693 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:13.693 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.
20190402 10:35:15.075 - INFO - Command exited with return code 0.
20190402 10:35:15.075 - INFO - ${stdout} = 

f2.small
f1.small
20190402 10:35:15.075 - INFO - ${stderr} =
20190402 10:35:15.075 - INFO - ${rc} = 0
20190402 10:35:15.076 - INFO - +------- END KW: SSHLibrary.Execute Command (1383)
20190402 10:35:15.076 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:15.077 - INFO - ${res} = {u'stdout': u'\n\nf2.small\nf1.small', u'stderr': u'', u'rc': 0}
20190402 10:35:15.078 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:35:15.078 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:15.079 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:35:15.079 - INFO - &{result} = { stdout=

f2.small
f1.small | stderr= | rc=0 }
20190402 10:35:15.080 - INFO - +------ END KW: OpenStack.Run OS Command (1387)
20190402 10:35:15.080 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:35:15.081 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:35:15.081 - INFO - ${response} = 

f2.small
f1.small
20190402 10:35:15.081 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:35:15.082 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:35:15.082 - INFO - @{res_in_list} = [ f2.small | f1.small ]
20190402 10:35:15.082 - INFO - +------- END KW: String.Split String (0)
20190402 10:35:15.083 - INFO - @{flavor_list} = [ f2.small | f1.small ]
20190402 10:35:15.083 - INFO - +------ END KW: Utils.Convert Response To List (3)
20190402 10:35:15.083 - INFO - +------ START KW: ${flavor} IN [ @{flavor_list} ] [ ]
20190402 10:35:15.083 - INFO - +------- START KW: ${flavor} = f2.small [ ]
20190402 10:35:15.084 - INFO - +-------- START KW: OpenStack.Delete Flavor [ ${flavor} ]
20190402 10:35:15.084 - INFO - +--------- START KW: BuiltIn.Set Variable [ openstack flavor delete ]
20190402 10:35:15.085 - INFO - ${openstack_cmd} = openstack flavor delete
20190402 10:35:15.085 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:35:15.085 - INFO - +--------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${flavor} ]
20190402 10:35:15.086 - INFO - ${cmd} = openstack flavor delete f2.small
20190402 10:35:15.086 - INFO - +--------- END KW: BuiltIn.Catenate (1)
20190402 10:35:15.087 - INFO - +--------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:35:15.088 - INFO - +---------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:15.088 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:15.088 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:35:15.089 - INFO - +---------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:15.090 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor delete f2.small'.
20190402 10:35:16.522 - INFO - Command exited with return code 0.
20190402 10:35:16.523 - INFO - ${stdout} =
20190402 10:35:16.523 - INFO - ${stderr} =
20190402 10:35:16.523 - INFO - ${rc} = 0
20190402 10:35:16.523 - INFO - +---------- END KW: SSHLibrary.Execute Command (1434)
20190402 10:35:16.524 - INFO - +---------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:16.525 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:35:16.525 - INFO - +---------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:35:16.526 - INFO - +---------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:16.526 - INFO - +---------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:35:16.527 - INFO - +--------- END KW: OpenStack.Run OS Command (1441)
20190402 10:35:16.527 - INFO - +-------- END KW: OpenStack.Delete Flavor (1443)
20190402 10:35:16.527 - INFO - +------- END KW: ${flavor} = f2.small (1444)
20190402 10:35:16.527 - INFO - +------- START KW: ${flavor} = f1.small [ ]
20190402 10:35:16.528 - INFO - +-------- START KW: OpenStack.Delete Flavor [ ${flavor} ]
20190402 10:35:16.528 - INFO - +--------- START KW: BuiltIn.Set Variable [ openstack flavor delete ]
20190402 10:35:16.528 - INFO - ${openstack_cmd} = openstack flavor delete
20190402 10:35:16.529 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:35:16.529 - INFO - +--------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${flavor} ]
20190402 10:35:16.529 - INFO - ${cmd} = openstack flavor delete f1.small
20190402 10:35:16.529 - INFO - +--------- END KW: BuiltIn.Catenate (0)
20190402 10:35:16.529 - INFO - +--------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:35:16.529 - INFO - +---------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:16.529 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:16.530 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:35:16.530 - INFO - +---------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:16.530 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor delete f1.small'.
20190402 10:35:18.063 - INFO - Command exited with return code 0.
20190402 10:35:18.063 - INFO - ${stdout} =
20190402 10:35:18.063 - INFO - ${stderr} =
20190402 10:35:18.063 - INFO - ${rc} = 0
20190402 10:35:18.063 - INFO - +---------- END KW: SSHLibrary.Execute Command (1533)
20190402 10:35:18.063 - INFO - +---------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:18.064 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:35:18.064 - INFO - +---------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:35:18.064 - INFO - +---------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:18.064 - INFO - +---------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:35:18.064 - INFO - +--------- END KW: OpenStack.Run OS Command (1535)
20190402 10:35:18.064 - INFO - +-------- END KW: OpenStack.Delete Flavor (1536)
20190402 10:35:18.064 - INFO - +------- END KW: ${flavor} = f1.small (1537)
20190402 10:35:18.064 - INFO - +------ END KW: ${flavor} IN [ @{flavor_list} ] (2981)
20190402 10:35:18.065 - INFO - +----- END KW: OpenStack.Delete All Flavors (4374)
20190402 10:35:18.065 - INFO - +----- START KW: OpenStack.Delete All Networks [ ]
20190402 10:35:18.065 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 10:35:18.065 - INFO - ${openstack_cmd} = openstack network list
20190402 10:35:18.065 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:35:18.065 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "private" | grep -v "public" | grep -v "external" | grep -v "internal" ]
20190402 10:35:18.065 - INFO - ${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"
20190402 10:35:18.065 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:35:18.066 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:35:18.066 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:18.066 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:18.066 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:35:18.066 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:18.067 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.
20190402 10:35:19.448 - INFO - Command exited with return code 0.
20190402 10:35:19.448 - INFO - ${stdout} = 

network-1
20190402 10:35:19.448 - INFO - ${stderr} =
20190402 10:35:19.448 - INFO - ${rc} = 0
20190402 10:35:19.449 - INFO - +------- END KW: SSHLibrary.Execute Command (1383)
20190402 10:35:19.449 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:19.449 - INFO - ${res} = {u'stdout': u'\n\nnetwork-1', u'stderr': u'', u'rc': 0}
20190402 10:35:19.450 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:35:19.450 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:19.450 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:35:19.450 - INFO - &{result} = { stdout=

network-1 | stderr= | rc=0 }
20190402 10:35:19.451 - INFO - +------ END KW: OpenStack.Run OS Command (1384)
20190402 10:35:19.451 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:35:19.451 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:35:19.451 - INFO - ${response} = 

network-1
20190402 10:35:19.452 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:35:19.452 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:35:19.452 - INFO - @{res_in_list} = [ network-1 ]
20190402 10:35:19.452 - INFO - +------- END KW: String.Split String (0)
20190402 10:35:19.452 - INFO - @{network_list} = [ network-1 ]
20190402 10:35:19.452 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:35:19.453 - INFO - +------ START KW: ${network} IN [ @{network_list} ] [ ]
20190402 10:35:19.453 - INFO - +------- START KW: ${network} = network-1 [ ]
20190402 10:35:19.453 - INFO - +-------- START KW: OpenStack.Delete Network [ ${network} ]
20190402 10:35:19.453 - INFO - +--------- START KW: BuiltIn.Set Variable [ openstack network delete ]
20190402 10:35:19.454 - INFO - ${openstack_cmd} = openstack network delete
20190402 10:35:19.454 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:35:19.454 - INFO - +--------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${network} ]
20190402 10:35:19.454 - INFO - ${cmd} = openstack network delete network-1
20190402 10:35:19.454 - INFO - +--------- END KW: BuiltIn.Catenate (0)
20190402 10:35:19.454 - INFO - +--------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:35:19.455 - INFO - +---------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:19.455 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:19.455 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:35:19.455 - INFO - +---------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:19.455 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network delete network-1'.
20190402 10:35:22.190 - INFO - Command exited with return code 0.
20190402 10:35:22.191 - INFO - ${stdout} =
20190402 10:35:22.191 - INFO - ${stderr} =
20190402 10:35:22.191 - INFO - ${rc} = 0
20190402 10:35:22.192 - INFO - +---------- END KW: SSHLibrary.Execute Command (2736)
20190402 10:35:22.192 - INFO - +---------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:22.194 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:35:22.194 - INFO - +---------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:35:22.194 - INFO - +---------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:22.195 - INFO - +---------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:35:22.196 - INFO - +--------- END KW: OpenStack.Run OS Command (2741)
20190402 10:35:22.196 - INFO - +-------- END KW: OpenStack.Delete Network (2743)
20190402 10:35:22.196 - INFO - +------- END KW: ${network} = network-1 (2743)
20190402 10:35:22.196 - INFO - +------ END KW: ${network} IN [ @{network_list} ] (2743)
20190402 10:35:22.196 - INFO - +----- END KW: OpenStack.Delete All Networks (4131)
20190402 10:35:22.197 - INFO - +----- START KW: OpenStack.Delete All KeyPairs [ ]
20190402 10:35:22.197 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack keypair list ]
20190402 10:35:22.198 - INFO - ${openstack_cmd} = openstack keypair list
20190402 10:35:22.198 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:35:22.198 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "Name" ]
20190402 10:35:22.199 - INFO - ${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"
20190402 10:35:22.199 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:35:22.199 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:35:22.200 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:22.201 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:22.201 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:35:22.201 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:22.202 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack keypair list|awk '{print$2}'|grep -v "Name"'.
20190402 10:35:23.548 - INFO - Command exited with return code 0.
20190402 10:35:23.548 - INFO - ${stdout} =
20190402 10:35:23.549 - INFO - ${stderr} =
20190402 10:35:23.549 - INFO - ${rc} = 0
20190402 10:35:23.549 - INFO - +------- END KW: SSHLibrary.Execute Command (1348)
20190402 10:35:23.549 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:23.550 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:35:23.550 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:35:23.550 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:23.550 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:35:23.551 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:35:23.551 - INFO - +------ END KW: OpenStack.Run OS Command (1352)
20190402 10:35:23.551 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:35:23.551 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:35:23.552 - INFO - ${response} =
20190402 10:35:23.552 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:35:23.552 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:35:23.552 - INFO - @{res_in_list} = [ ]
20190402 10:35:23.552 - INFO - +------- END KW: String.Split String (0)
20190402 10:35:23.553 - INFO - @{key_list} = [ ]
20190402 10:35:23.553 - INFO - +------ END KW: Utils.Convert Response To List (2)
20190402 10:35:23.553 - INFO - +------ START KW: ${key} IN [ @{key_list} ] [ ]
20190402 10:35:23.553 - INFO - +------ END KW: ${key} IN [ @{key_list} ] (0)
20190402 10:35:23.553 - INFO - +----- END KW: OpenStack.Delete All KeyPairs (1356)
20190402 10:35:23.553 - INFO - +----- START KW: OpenStack.Delete All Snapshots [ ]
20190402 10:35:23.555 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume snapshot list ]
20190402 10:35:23.555 - INFO - ${openstack_cmd} = openstack volume snapshot list
20190402 10:35:23.555 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:35:23.555 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:35:23.555 - INFO - ${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"
20190402 10:35:23.556 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:35:23.556 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:35:23.556 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:23.556 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:23.556 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:35:23.557 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:23.557 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.
20190402 10:35:24.890 - INFO - Command exited with return code 0.
20190402 10:35:24.890 - INFO - ${stdout} =
20190402 10:35:24.890 - INFO - ${stderr} =
20190402 10:35:24.890 - INFO - ${rc} = 0
20190402 10:35:24.891 - INFO - +------- END KW: SSHLibrary.Execute Command (1333)
20190402 10:35:24.891 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:24.892 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:35:24.892 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:35:24.892 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:24.893 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:35:24.893 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:35:24.894 - INFO - +------ END KW: OpenStack.Run OS Command (1338)
20190402 10:35:24.894 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:35:24.895 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:35:24.895 - INFO - ${response} =
20190402 10:35:24.895 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:35:24.895 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:35:24.896 - INFO - @{res_in_list} = [ ]
20190402 10:35:24.896 - INFO - +------- END KW: String.Split String (1)
20190402 10:35:24.896 - INFO - @{snapshot_list} = [ ]
20190402 10:35:24.897 - INFO - +------ END KW: Utils.Convert Response To List (3)
20190402 10:35:24.897 - INFO - +------ START KW: ${snapshot} IN [ @{snapshot_list} ] [ ]
20190402 10:35:24.897 - INFO - +------ END KW: ${snapshot} IN [ @{snapshot_list} ] (0)
20190402 10:35:24.897 - INFO - +----- END KW: OpenStack.Delete All Snapshots (1344)
20190402 10:35:24.897 - INFO - +----- START KW: OpenStack.Delete All Volumes [ ]
20190402 10:35:24.898 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume list ]
20190402 10:35:24.898 - INFO - ${openstack_cmd} = openstack volume list
20190402 10:35:24.898 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:35:24.899 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "ID" ]
20190402 10:35:24.900 - INFO - ${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"
20190402 10:35:24.900 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:35:24.900 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:35:24.901 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:24.901 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:24.902 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:35:24.902 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:24.903 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume list|awk '{print$2}'|grep -v "ID"'.
20190402 10:35:26.298 - INFO - Command exited with return code 0.
20190402 10:35:26.298 - INFO - ${stdout} =
20190402 10:35:26.299 - INFO - ${stderr} =
20190402 10:35:26.299 - INFO - ${rc} = 0
20190402 10:35:26.299 - INFO - +------- END KW: SSHLibrary.Execute Command (1397)
20190402 10:35:26.299 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:26.299 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:35:26.300 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:35:26.300 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:26.300 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:35:26.300 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:35:26.300 - INFO - +------ END KW: OpenStack.Run OS Command (1400)
20190402 10:35:26.300 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:35:26.301 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:35:26.301 - INFO - ${response} =
20190402 10:35:26.301 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:35:26.301 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:35:26.301 - INFO - @{res_in_list} = [ ]
20190402 10:35:26.301 - INFO - +------- END KW: String.Split String (0)
20190402 10:35:26.302 - INFO - @{volume_list} = [ ]
20190402 10:35:26.302 - INFO - +------ END KW: Utils.Convert Response To List (2)
20190402 10:35:26.302 - INFO - +------ START KW: ${volume} IN [ @{volume_list} ] [ ]
20190402 10:35:26.302 - INFO - +------ END KW: ${volume} IN [ @{volume_list} ] (0)
20190402 10:35:26.302 - INFO - +----- END KW: OpenStack.Delete All Volumes (1405)
20190402 10:35:26.302 - INFO - +----- START KW: OpenStack.Delete All Stacks [ ]
20190402 10:35:26.302 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack stack list ]
20190402 10:35:26.302 - INFO - ${openstack_cmd} = openstack stack list
20190402 10:35:26.302 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:35:26.303 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:35:26.303 - INFO - ${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"
20190402 10:35:26.303 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:35:26.303 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:35:26.303 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:26.304 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:26.304 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:35:26.304 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:26.304 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack list|awk '{print$4}'|grep -v "Name"'.
20190402 10:35:27.665 - INFO - Command exited with return code 0.
20190402 10:35:27.665 - INFO - ${stdout} =
20190402 10:35:27.666 - INFO - ${stderr} =
20190402 10:35:27.666 - INFO - ${rc} = 0
20190402 10:35:27.666 - INFO - +------- END KW: SSHLibrary.Execute Command (1362)
20190402 10:35:27.666 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:27.666 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:35:27.666 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:35:27.667 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:27.667 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:35:27.667 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:35:27.667 - INFO - +------ END KW: OpenStack.Run OS Command (1364)
20190402 10:35:27.667 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:35:27.668 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:35:27.668 - INFO - ${response} =
20190402 10:35:27.668 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:35:27.668 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:35:27.668 - INFO - @{res_in_list} = [ ]
20190402 10:35:27.668 - INFO - +------- END KW: String.Split String (0)
20190402 10:35:27.669 - INFO - @{stack_list} = [ ]
20190402 10:35:27.669 - INFO - +------ END KW: Utils.Convert Response To List (2)
20190402 10:35:27.669 - INFO - +------ START KW: ${stack} IN [ @{stack_list} ] [ ]
20190402 10:35:27.669 - INFO - +------ END KW: ${stack} IN [ @{stack_list} ] (0)
20190402 10:35:27.669 - INFO - +----- END KW: OpenStack.Delete All Stacks (1367)
20190402 10:35:27.669 - INFO - +---- END KW: OpenStack.Openstack Cleanup All (16706)
20190402 10:35:27.669 - INFO - +---- START KW: Utils.Stx Suite TearDown [ ]
20190402 10:35:27.669 - INFO - +----- START KW: SSHLibrary.Close All Connections [ ]
20190402 10:35:27.671 - INFO - +----- END KW: SSHLibrary.Close All Connections (2)
20190402 10:35:27.671 - INFO - +---- END KW: Utils.Stx Suite TearDown (2)
20190402 10:35:27.671 - INFO - +--- END TEARDOWN: BuiltIn.Run Keywords (16709)
==============================================================================
20190402 10:35:27.674 - INFO - +-- END SUITE: Sanity-Test.Sanity-OpenStack.03-Instance-From-Snapshot (267459)
==============================================================================
20190402 10:35:27.686 - INFO - +-- START SUITE: Sanity-Test.Sanity-OpenStack.04-Instance-From-Heat-Template [ ]
==============================================================================
20190402 10:35:27.686 - INFO - +--- START SETUP: Utils.Stx Suite Setup [ ]
20190402 10:35:27.687 - INFO - +---- START KW: Utils.Open Master Controller Connection [ ]
20190402 10:35:27.687 - INFO - +----- START KW: Utils.Connect to Controller Node [ ${CONFIG.credentials.STX_DEPLOY_USER_NAME} | ${CONFIG.credentials.STX_DEPLOY_USER_PSWD} | ${CONFIG.general.IP_UNIT_0_ADDRESS} ]
20190402 10:35:27.687 - INFO - +------ START KW: SSHLibrary.Open Connection [ ${ip_address} prompt=${prompt} | timeout=${timeout} ]
20190402 10:35:27.688 - INFO - ${controller_connection} = 1
20190402 10:35:27.688 - INFO - +------ END KW: SSHLibrary.Open Connection (1)
20190402 10:35:27.688 - INFO - +------ START KW: Utils.Flexible_SSH_Login [ ${user} | ${password} ]
20190402 10:35:27.688 - INFO - +------- START KW: BuiltIn.Get Length [ ${password} ]
20190402 10:35:27.688 - INFO - Length is 10
20190402 10:35:27.688 - INFO - ${pwd_length} = 10
20190402 10:35:27.689 - INFO - +------- END KW: BuiltIn.Get Length (0)
20190402 10:35:27.689 - INFO - +------- START KW: BuiltIn.Run Keyword And Return If [ ${pwd_length} > 0 | SSHLibrary.Login | ${user} | ${password} | delay=${delay} ]
20190402 10:35:27.689 - INFO - +-------- START KW: SSHLibrary.Login [ ${user} | ${password} | delay=${delay} ]
20190402 10:35:27.689 - INFO - Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.
20190402 10:35:28.793 - INFO - Read output: Last login: Tue Apr  2 16:19:43 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$
20190402 10:35:28.793 - INFO - +-------- END KW: SSHLibrary.Login (1104)
20190402 10:35:28.794 - INFO - Returning from the enclosing user keyword.
20190402 10:35:28.794 - INFO - +------- END KW: BuiltIn.Run Keyword And Return If (1105)
20190402 10:35:28.794 - INFO - +------ END KW: Utils.Flexible_SSH_Login (1106)
20190402 10:35:28.795 - INFO - ${master_controller_connection} = 1
20190402 10:35:28.795 - INFO - +----- END KW: Utils.Connect to Controller Node (1108)
20190402 10:35:28.795 - INFO - +----- START KW: BuiltIn.Set Suite Variable [ ${master_controller_connection} ]
20190402 10:35:28.796 - INFO - ${master_controller_connection} = 1
20190402 10:35:28.796 - INFO - +----- END KW: BuiltIn.Set Suite Variable (1)
20190402 10:35:28.796 - INFO - +----- START KW: BuiltIn.Log [ ${master_controller_connection} ]
20190402 10:35:28.797 - INFO - 1
20190402 10:35:28.797 - INFO - +----- END KW: BuiltIn.Log (1)
20190402 10:35:28.797 - INFO - +---- END KW: Utils.Open Master Controller Connection (1110)
20190402 10:35:28.798 - INFO - +---- START KW: Utils.Set Env Vars From Openrc [ ]
20190402 10:35:28.798 - INFO - +----- START KW: Utils.Run Command [ source /etc/platform/openrc | True ]
20190402 10:35:28.799 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:35:28.800 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (1)
20190402 10:35:28.800 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:35:28.801 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:35:28.802 - INFO - &{result_dict} = { stdout= }
20190402 10:35:28.802 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:35:28.802 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:35:28.803 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 10:35:28.803 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:35:28.804 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 10:35:28.805 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:35:28.805 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (5)
20190402 10:35:28.805 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 10:35:28.806 - INFO - +------ END KW: SSHLibrary.Read (1)
20190402 10:35:28.806 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:35:28.815 - INFO - source /etc/platform/openrc
20190402 10:35:28.815 - INFO - +------ END KW: SSHLibrary.Write (9)
20190402 10:35:28.815 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:35:29.221 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:35:29.222 - INFO - ${output} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:35:29.222 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (407)
20190402 10:35:29.222 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:35:29.222 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:35:29.223 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:35:29.223 - INFO - +------- END KW: String.Get Line (1)
20190402 10:35:29.223 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:35:29.223 - INFO - ${clean_out} =
20190402 10:35:29.223 - INFO - +------- END KW: String.Remove String (0)
20190402 10:35:29.223 - INFO - ${output} =
20190402 10:35:29.223 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 10:35:29.223 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 10:35:29.224 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:35:29.225 - INFO - echo $?
20190402 10:35:29.225 - INFO - +------- END KW: SSHLibrary.Write (1)
20190402 10:35:29.225 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:35:29.225 - INFO - 0
20190402 10:35:29.226 - INFO - ${rc} = 0
20190402 10:35:29.226 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 10:35:29.226 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:35:29.226 - INFO - 0
20190402 10:35:29.226 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 10:35:29.226 - INFO - ${rc} = 0
20190402 10:35:29.226 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 10:35:29.226 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:35:29.227 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:35:29.227 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:35:29.227 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:35:29.227 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:35:29.227 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 10:35:29.227 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:35:29.227 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout:
20190402 10:35:29.228 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 10:35:29.228 - INFO - +----- END KW: Utils.Run Command (430)
20190402 10:35:29.228 - INFO - +---- END KW: Utils.Set Env Vars From Openrc (430)
20190402 10:35:29.228 - INFO - +--- END SETUP: Utils.Stx Suite Setup (1542)
------------------------------------------------------------------------------
20190402 10:35:29.228 - INFO - +--- START TEST: Create Flavors for Instance [ ]
------------------------------------------------------------------------------
20190402 10:35:29.228 - INFO - +---- START KW: OpenStack.Create Flavor [ ${cirros_flavor_ram} | ${cirros_flavor_vcpus} | ${cirros_flavor_disk} | ${cirros_flavor_name} ]
20190402 10:35:29.229 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack flavor create ]
20190402 10:35:29.229 - INFO - ${openstack_cmd} = openstack flavor create
20190402 10:35:29.229 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:35:29.229 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --ram ${ram} | --disk ${disk} | --vcpus ${vcpus} | --public | --id auto | ${extra_args} | ${name} ]
20190402 10:35:29.230 - INFO - ${cmd} = openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small
20190402 10:35:29.230 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 10:35:29.230 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:35:29.230 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:29.230 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:29.230 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:35:29.230 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:29.231 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor create --ram 2048 --disk 20 --vcpus 1 --public --id auto  f1.small'.
20190402 10:35:30.662 - INFO - Command exited with return code 0.
20190402 10:35:30.663 - INFO - ${stdout} = +----------------------------+--------------------------------------+
| Field                      | Value                                |
+----------------------------+------------------------------...
20190402 10:35:30.663 - INFO - ${stderr} =
20190402 10:35:30.663 - INFO - ${rc} = 0
20190402 10:35:30.663 - INFO - +------ END KW: SSHLibrary.Execute Command (1433)
20190402 10:35:30.664 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:30.665 - INFO - ${res} = {u'stdout': u'+----------------------------+--------------------------------------+\n| Field                      | Value                                |\n+----------------------------+--------------...
20190402 10:35:30.665 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:35:30.665 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:30.666 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:35:30.666 - INFO - +----- END KW: OpenStack.Run OS Command (1436)
20190402 10:35:30.667 - INFO - +---- END KW: OpenStack.Create Flavor (1438)
------------------------------------------------------------------------------
20190402 10:35:30.667 - INFO - +--- END TEST: Create Flavors for Instance (1439)
------------------------------------------------------------------------------
20190402 10:35:30.668 - INFO - +--- START TEST: Create Images for Instances [ ]
------------------------------------------------------------------------------
20190402 10:35:30.668 - INFO - +---- START KW: SSHLibrary.Put File [ %{PYTHONPATH}/${cirros_image} | ${host_image_path}/${cirros_image} ]
20190402 10:35:30.707 - INFO - [chan 2] Opened sftp connection (server version 3)
20190402 10:35:30.714 - INFO - [chan 3] Opened sftp connection (server version 3)
20190402 10:35:30.716 - FAIL - There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.
20190402 10:35:30.716 - DEBUG - Traceback (most recent call last):
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1559, in put_file
    destination, mode, newline, scp)
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1619, in _run_command
    raise RuntimeError(e)
20190402 10:35:30.716 - INFO - +---- END KW: SSHLibrary.Put File (48)
------------------------------------------------------------------------------
20190402 10:35:30.717 - INFO - +--- END TEST: Create Images for Instances (50)
------------------------------------------------------------------------------
20190402 10:35:30.718 - INFO - +--- START TEST: Create Networks for Instance [ ]
------------------------------------------------------------------------------
20190402 10:35:30.719 - INFO - +---- START KW: OpenStack.Create Network [ ${network_name} ]
20190402 10:35:30.720 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack network create ]
20190402 10:35:30.720 - INFO - ${openstack_cmd} = openstack network create
20190402 10:35:30.720 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:35:30.721 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${network_name} | ${additional_args} ]
20190402 10:35:30.722 - INFO - ${cmd} = openstack network create network-1
20190402 10:35:30.722 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 10:35:30.723 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:35:30.724 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:30.724 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:30.724 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:35:30.724 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:30.725 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network create network-1 '.
20190402 10:35:32.308 - INFO - Command exited with return code 0.
20190402 10:35:32.308 - INFO - ${stdout} = +---------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:35:32.308 - INFO - ${stderr} =
20190402 10:35:32.309 - INFO - ${rc} = 0
20190402 10:35:32.309 - INFO - +------ END KW: SSHLibrary.Execute Command (1585)
20190402 10:35:32.309 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:32.309 - INFO - ${res} = {u'stdout': u"+---------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:35:32.309 - INFO - +------ END KW: BuiltIn.Create Dictionary (0)
20190402 10:35:32.309 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:32.310 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:35:32.310 - INFO - +----- END KW: OpenStack.Run OS Command (1588)
20190402 10:35:32.310 - INFO - +---- END KW: OpenStack.Create Network (1591)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:35:32.310 - INFO - +---- START KW: OpenStack.Create Subnet [ ${network_name} | ${subnet_range} | ${subnet_extras} ]
20190402 10:35:32.311 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack subnet create ]
20190402 10:35:32.311 - INFO - ${openstack_cmd} = openstack subnet create
20190402 10:35:32.311 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:35:32.311 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --network ${network_name} | --subnet-range ${range_ip} ${additional_args} ]
20190402 10:35:32.311 - INFO - ${cmd} = openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1
20190402 10:35:32.311 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 10:35:32.311 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:35:32.312 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:32.312 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:32.312 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:35:32.312 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:32.312 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack subnet create --network network-1 --subnet-range 192.168.0.0/24 --ip-version 4 --dhcp subnet-1'.
20190402 10:35:34.026 - INFO - Command exited with return code 0.
20190402 10:35:34.026 - INFO - ${stdout} = +-------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:35:34.027 - INFO - ${stderr} =
20190402 10:35:34.027 - INFO - ${rc} = 0
20190402 10:35:34.027 - INFO - +------ END KW: SSHLibrary.Execute Command (1715)
20190402 10:35:34.027 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:34.029 - INFO - ${res} = {u'stdout': u"+-------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------...
20190402 10:35:34.029 - INFO - +------ END KW: BuiltIn.Create Dictionary (2)
20190402 10:35:34.029 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:34.030 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:35:34.031 - INFO - +----- END KW: OpenStack.Run OS Command (1720)
20190402 10:35:34.031 - INFO - +---- END KW: OpenStack.Create Subnet (1721)
------------------------------------------------------------------------------
20190402 10:35:34.032 - INFO - +--- END TEST: Create Networks for Instance (3314)
------------------------------------------------------------------------------
20190402 10:35:34.033 - INFO - +--- START TEST: Create Instance Trough Stack [ ]
------------------------------------------------------------------------------
20190402 10:35:34.033 - INFO - +---- START KW: SSHLibrary.Put File [ %{PYTHONPATH}/${stack_template} | ${host_image_path}/${stack_template} ]
20190402 10:35:34.046 - INFO - '/home/mgperezi/duplex/stx-test-suite/Utils/stack_template.yml' -> '/home/wrsroot//Utils/stack_template.yml'
20190402 10:35:34.047 - INFO - +---- END KW: SSHLibrary.Put File (14)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:35:34.047 - INFO - +---- START KW: OpenStack.Get Net Id [ ${network_name} ]
20190402 10:35:34.048 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 10:35:34.048 - INFO - ${openstack_cmd} = openstack network list
20190402 10:35:34.048 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:35:34.049 - INFO - +----- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep "${network_name}" | awk '{print$2}' ]
20190402 10:35:34.049 - INFO - ${cmd} = openstack network list|grep "network-1"|awk '{print$2}'
20190402 10:35:34.050 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 10:35:34.050 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:35:34.051 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:34.051 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:34.051 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:35:34.052 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:34.052 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|grep "network-1"|awk '{print$2}''.
20190402 10:35:35.534 - INFO - Command exited with return code 0.
20190402 10:35:35.535 - INFO - ${stdout} = 34fa618c-a9af-47a4-9945-5a6e6b5af32b
20190402 10:35:35.535 - INFO - ${stderr} =
20190402 10:35:35.535 - INFO - ${rc} = 0
20190402 10:35:35.535 - INFO - +------ END KW: SSHLibrary.Execute Command (1483)
20190402 10:35:35.536 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:35.539 - INFO - ${res} = {u'stdout': u'34fa618c-a9af-47a4-9945-5a6e6b5af32b', u'stderr': u'', u'rc': 0}
20190402 10:35:35.540 - INFO - +------ END KW: BuiltIn.Create Dictionary (4)
20190402 10:35:35.540 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:35.541 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:35:35.542 - INFO - &{result} = { stdout=34fa618c-a9af-47a4-9945-5a6e6b5af32b | stderr= | rc=0 }
20190402 10:35:35.542 - INFO - +----- END KW: OpenStack.Run OS Command (1492)
20190402 10:35:35.542 - INFO - +----- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:35:35.543 - INFO - ${output} = 34fa618c-a9af-47a4-9945-5a6e6b5af32b
20190402 10:35:35.543 - INFO - +----- END KW: Collections.Get From Dictionary (1)
20190402 10:35:35.543 - INFO - +----- START KW: String.Split String [ ${output} | ${EMPTY} ]
20190402 10:35:35.544 - INFO - ${splitted_output} = [u'34fa618c-a9af-47a4-9945-5a6e6b5af32b']
20190402 10:35:35.544 - INFO - +----- END KW: String.Split String (1)
20190402 10:35:35.544 - INFO - +----- START KW: Collections.Get From List [ ${splitted_output} | 0 ]
20190402 10:35:35.545 - INFO - ${net_id} = 34fa618c-a9af-47a4-9945-5a6e6b5af32b
20190402 10:35:35.545 - INFO - +----- END KW: Collections.Get From List (1)
20190402 10:35:35.545 - INFO - ${net_id} = 34fa618c-a9af-47a4-9945-5a6e6b5af32b
20190402 10:35:35.546 - INFO - +---- END KW: OpenStack.Get Net Id (1499)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:35:35.546 - INFO - +---- START KW: OpenStack.Create Stack [ ${stack_name_1} | ${stack_template} | ${net_id} ]
20190402 10:35:35.547 - INFO - +----- START KW: BuiltIn.Set Variable [ openstack stack create --template ]
20190402 10:35:35.547 - INFO - ${openstack_cmd} = openstack stack create --template
20190402 10:35:35.548 - INFO - +----- END KW: BuiltIn.Set Variable (1)
20190402 10:35:35.548 - INFO - +----- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${stack_template} | ${stack_name} | --parameter "NetID=${net_id}" ]
20190402 10:35:35.549 - INFO - ${cmd} = openstack stack create --template Utils/stack_template.yml stack-cirros-1 --parameter "NetID=34fa618c-a9af-47a4-9945-5a6e6b5af32b"
20190402 10:35:35.549 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 10:35:35.549 - INFO - +----- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:35:35.550 - INFO - +------ START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:35.550 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:35.551 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:35:35.551 - INFO - +------ START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:35.552 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack create --template Utils/stack_template.yml stack-cirros-1 --parameter "NetID=34fa618c-a9af-47a4-9945-5a6e6b5af32b"'.
20190402 10:35:36.982 - INFO - Command exited with return code 1.
20190402 10:35:36.983 - INFO - ${stdout} =
20190402 10:35:36.983 - INFO - ${stderr} = ERROR: Property error: : resources.server.properties.image: : Error validating value 'cirros': No images matching {'name': u'cirros'}.
20190402 10:35:36.983 - INFO - ${rc} = 1
20190402 10:35:36.983 - INFO - +------ END KW: SSHLibrary.Execute Command (1432)
20190402 10:35:36.983 - INFO - +------ START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:36.984 - INFO - ${res} = {u'stdout': u'', u'stderr': u"ERROR: Property error: : resources.server.properties.image: : Error validating value 'cirros': No images matching {'name': u'cirros'}.", u'rc': 1}
20190402 10:35:36.984 - INFO - +------ END KW: BuiltIn.Create Dictionary (1)
20190402 10:35:36.984 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:36.984 - INFO - +------ END KW: BuiltIn.Run Keyword If (0)
20190402 10:35:36.984 - INFO - ${output} = {u'stdout': u'', u'stderr': u"ERROR: Property error: : resources.server.properties.image: : Error validating value 'cirros': No images matching {'name': u'cirros'}.", u'rc': 1}
20190402 10:35:36.984 - INFO - +----- END KW: OpenStack.Run OS Command (1435)
20190402 10:35:36.984 - INFO - +----- START KW: BuiltIn.Wait Until Keyword Succeeds [ 5 min | 10 sec | Check Field Value | stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:35:36.985 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:35:36.985 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:35:36.986 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:35:36.986 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:35:36.986 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:35:36.986 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:35:36.987 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:35:36.987 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:35:36.987 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:35:36.987 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:36.987 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:36.988 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:35:36.988 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:36.988 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:35:38.319 - INFO - Command exited with return code 0.
20190402 10:35:38.320 - INFO - ${stdout} =
20190402 10:35:38.320 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:35:38.320 - INFO - ${rc} = 0
20190402 10:35:38.320 - INFO - +--------- END KW: SSHLibrary.Execute Command (1332)
20190402 10:35:38.321 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:38.322 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:35:38.322 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:35:38.322 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:38.322 - INFO - +--------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:35:38.322 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:35:38.322 - INFO - +-------- END KW: OpenStack.Run OS Command (1335)
20190402 10:35:38.322 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:35:38.323 - INFO - ${value} =
20190402 10:35:38.323 - INFO - +-------- END KW: Collections.Get From Dictionary (1)
20190402 10:35:38.323 - INFO - ${current_value} =
20190402 10:35:38.323 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1338)
20190402 10:35:38.323 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:35:38.324 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:35:38.324 - FAIL -  != CREATE_COMPLETE
20190402 10:35:38.324 - DEBUG - Traceback (most recent call last):
  None
20190402 10:35:38.324 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:35:38.324 - INFO - +------ END KW: OpenStack.Check Field Value (1339)
20190402 10:35:48.324 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:35:48.325 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:35:48.325 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:35:48.325 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:35:48.325 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:35:48.325 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:35:48.326 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:35:48.326 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:35:48.326 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:35:48.326 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:48.326 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:48.326 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:35:48.327 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:48.327 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:35:49.609 - INFO - Command exited with return code 0.
20190402 10:35:49.609 - INFO - ${stdout} =
20190402 10:35:49.609 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:35:49.610 - INFO - ${rc} = 0
20190402 10:35:49.610 - INFO - +--------- END KW: SSHLibrary.Execute Command (1283)
20190402 10:35:49.610 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:35:49.611 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:35:49.611 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:35:49.612 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:35:49.612 - INFO - +--------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:35:49.613 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:35:49.613 - INFO - +-------- END KW: OpenStack.Run OS Command (1287)
20190402 10:35:49.613 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:35:49.613 - INFO - ${value} =
20190402 10:35:49.614 - INFO - +-------- END KW: Collections.Get From Dictionary (1)
20190402 10:35:49.614 - INFO - ${current_value} =
20190402 10:35:49.614 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1289)
20190402 10:35:49.614 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:35:49.614 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:35:49.614 - FAIL -  != CREATE_COMPLETE
20190402 10:35:49.614 - DEBUG - Traceback (most recent call last):
  None
20190402 10:35:49.614 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:35:49.615 - INFO - +------ END KW: OpenStack.Check Field Value (1291)
20190402 10:35:59.615 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:35:59.617 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:35:59.618 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:35:59.618 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:35:59.619 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:35:59.619 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:35:59.620 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:35:59.620 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:35:59.620 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:35:59.621 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:35:59.622 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:35:59.622 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:35:59.622 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:35:59.623 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:36:00.905 - INFO - Command exited with return code 0.
20190402 10:36:00.905 - INFO - ${stdout} =
20190402 10:36:00.905 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:36:00.905 - INFO - ${rc} = 0
20190402 10:36:00.905 - INFO - +--------- END KW: SSHLibrary.Execute Command (1283)
20190402 10:36:00.905 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:36:00.906 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:36:00.906 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:36:00.906 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:36:00.906 - INFO - +--------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:36:00.906 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:36:00.906 - INFO - +-------- END KW: OpenStack.Run OS Command (1286)
20190402 10:36:00.906 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:36:00.906 - INFO - ${value} =
20190402 10:36:00.907 - INFO - +-------- END KW: Collections.Get From Dictionary (1)
20190402 10:36:00.907 - INFO - ${current_value} =
20190402 10:36:00.907 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1290)
20190402 10:36:00.907 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:36:00.907 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:36:00.907 - FAIL -  != CREATE_COMPLETE
20190402 10:36:00.907 - DEBUG - Traceback (most recent call last):
  None
20190402 10:36:00.907 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:36:00.907 - INFO - +------ END KW: OpenStack.Check Field Value (1292)
20190402 10:36:10.908 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:36:10.910 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:36:10.912 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:36:10.913 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:36:10.913 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:36:10.913 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:36:10.913 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:36:10.913 - INFO - +-------- END KW: BuiltIn.Catenate (0)
20190402 10:36:10.913 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:36:10.914 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:36:10.914 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:36:10.914 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:36:10.914 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:36:10.914 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:36:12.196 - INFO - Command exited with return code 0.
20190402 10:36:12.196 - INFO - ${stdout} =
20190402 10:36:12.196 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:36:12.196 - INFO - ${rc} = 0
20190402 10:36:12.196 - INFO - +--------- END KW: SSHLibrary.Execute Command (1282)
20190402 10:36:12.196 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:36:12.197 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:36:12.197 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:36:12.197 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:36:12.198 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:36:12.198 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:36:12.198 - INFO - +-------- END KW: OpenStack.Run OS Command (1285)
20190402 10:36:12.198 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:36:12.198 - INFO - ${value} =
20190402 10:36:12.199 - INFO - +-------- END KW: Collections.Get From Dictionary (1)
20190402 10:36:12.199 - INFO - ${current_value} =
20190402 10:36:12.199 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1289)
20190402 10:36:12.199 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:36:12.199 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:36:12.200 - FAIL -  != CREATE_COMPLETE
20190402 10:36:12.200 - DEBUG - Traceback (most recent call last):
  None
20190402 10:36:12.200 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:36:12.200 - INFO - +------ END KW: OpenStack.Check Field Value (1292)
20190402 10:36:22.201 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:36:22.202 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:36:22.203 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:36:22.204 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:36:22.204 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:36:22.204 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:36:22.205 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:36:22.205 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:36:22.206 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:36:22.206 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:36:22.206 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:36:22.206 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:36:22.206 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:36:22.207 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:36:23.488 - INFO - Command exited with return code 0.
20190402 10:36:23.489 - INFO - ${stdout} =
20190402 10:36:23.489 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:36:23.489 - INFO - ${rc} = 0
20190402 10:36:23.489 - INFO - +--------- END KW: SSHLibrary.Execute Command (1283)
20190402 10:36:23.489 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:36:23.489 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:36:23.490 - INFO - +--------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:36:23.490 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:36:23.490 - INFO - +--------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:36:23.490 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:36:23.490 - INFO - +-------- END KW: OpenStack.Run OS Command (1284)
20190402 10:36:23.490 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:36:23.491 - INFO - ${value} =
20190402 10:36:23.491 - INFO - +-------- END KW: Collections.Get From Dictionary (1)
20190402 10:36:23.491 - INFO - ${current_value} =
20190402 10:36:23.491 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1289)
20190402 10:36:23.491 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:36:23.491 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:36:23.491 - FAIL -  != CREATE_COMPLETE
20190402 10:36:23.491 - DEBUG - Traceback (most recent call last):
  None
20190402 10:36:23.491 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:36:23.492 - INFO - +------ END KW: OpenStack.Check Field Value (1291)
20190402 10:36:33.492 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:36:33.493 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:36:33.494 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:36:33.495 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:36:33.496 - INFO - +-------- END KW: BuiltIn.Set Variable (2)
20190402 10:36:33.496 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:36:33.497 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:36:33.497 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:36:33.497 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:36:33.498 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:36:33.498 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:36:33.499 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:36:33.499 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:36:33.500 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:36:34.830 - INFO - Command exited with return code 0.
20190402 10:36:34.830 - INFO - ${stdout} =
20190402 10:36:34.830 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:36:34.831 - INFO - ${rc} = 0
20190402 10:36:34.831 - INFO - +--------- END KW: SSHLibrary.Execute Command (1332)
20190402 10:36:34.831 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:36:34.831 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:36:34.831 - INFO - +--------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:36:34.831 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:36:34.832 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:36:34.832 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:36:34.832 - INFO - +-------- END KW: OpenStack.Run OS Command (1335)
20190402 10:36:34.832 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:36:34.832 - INFO - ${value} =
20190402 10:36:34.832 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:36:34.833 - INFO - ${current_value} =
20190402 10:36:34.833 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1340)
20190402 10:36:34.833 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:36:34.833 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:36:34.833 - FAIL -  != CREATE_COMPLETE
20190402 10:36:34.833 - DEBUG - Traceback (most recent call last):
  None
20190402 10:36:34.833 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:36:34.833 - INFO - +------ END KW: OpenStack.Check Field Value (1341)
20190402 10:36:44.834 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:36:44.834 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:36:44.835 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:36:44.835 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:36:44.835 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:36:44.835 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:36:44.836 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:36:44.836 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:36:44.836 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:36:44.836 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:36:44.837 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:36:44.837 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:36:44.837 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:36:44.837 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:36:46.218 - INFO - Command exited with return code 0.
20190402 10:36:46.218 - INFO - ${stdout} =
20190402 10:36:46.218 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:36:46.218 - INFO - ${rc} = 0
20190402 10:36:46.218 - INFO - +--------- END KW: SSHLibrary.Execute Command (1381)
20190402 10:36:46.218 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:36:46.219 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:36:46.219 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:36:46.219 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:36:46.219 - INFO - +--------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:36:46.219 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:36:46.219 - INFO - +-------- END KW: OpenStack.Run OS Command (1383)
20190402 10:36:46.220 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:36:46.220 - INFO - ${value} =
20190402 10:36:46.220 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:36:46.220 - INFO - ${current_value} =
20190402 10:36:46.220 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1386)
20190402 10:36:46.220 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:36:46.220 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:36:46.220 - FAIL -  != CREATE_COMPLETE
20190402 10:36:46.220 - DEBUG - Traceback (most recent call last):
  None
20190402 10:36:46.221 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:36:46.221 - INFO - +------ END KW: OpenStack.Check Field Value (1387)
20190402 10:36:56.221 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:36:56.222 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:36:56.223 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:36:56.224 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:36:56.224 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:36:56.224 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:36:56.225 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:36:56.225 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:36:56.226 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:36:56.227 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:36:56.228 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:36:56.228 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:36:56.228 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:36:56.229 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:36:57.911 - INFO - Command exited with return code 0.
20190402 10:36:57.912 - INFO - ${stdout} =
20190402 10:36:57.912 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:36:57.912 - INFO - ${rc} = 0
20190402 10:36:57.912 - INFO - +--------- END KW: SSHLibrary.Execute Command (1684)
20190402 10:36:57.913 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:36:57.914 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:36:57.914 - INFO - +--------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:36:57.914 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:36:57.915 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:36:57.915 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:36:57.915 - INFO - +-------- END KW: OpenStack.Run OS Command (1690)
20190402 10:36:57.916 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:36:57.916 - INFO - ${value} =
20190402 10:36:57.916 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:36:57.917 - INFO - ${current_value} =
20190402 10:36:57.917 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1695)
20190402 10:36:57.917 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:36:57.918 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:36:57.918 - FAIL -  != CREATE_COMPLETE
20190402 10:36:57.918 - DEBUG - Traceback (most recent call last):
  None
20190402 10:36:57.918 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:36:57.919 - INFO - +------ END KW: OpenStack.Check Field Value (1698)
20190402 10:37:07.919 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:37:07.920 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:37:07.920 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:37:07.921 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:37:07.921 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:37:07.921 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:37:07.921 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:37:07.921 - INFO - +-------- END KW: BuiltIn.Catenate (0)
20190402 10:37:07.921 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:37:07.922 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:37:07.922 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:37:07.922 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:37:07.922 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:37:07.922 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:37:09.254 - INFO - Command exited with return code 0.
20190402 10:37:09.254 - INFO - ${stdout} =
20190402 10:37:09.254 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:37:09.254 - INFO - ${rc} = 0
20190402 10:37:09.255 - INFO - +--------- END KW: SSHLibrary.Execute Command (1332)
20190402 10:37:09.255 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:37:09.256 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:37:09.256 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:37:09.257 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:37:09.257 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:37:09.257 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:37:09.258 - INFO - +-------- END KW: OpenStack.Run OS Command (1337)
20190402 10:37:09.258 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:37:09.258 - INFO - ${value} =
20190402 10:37:09.259 - INFO - +-------- END KW: Collections.Get From Dictionary (1)
20190402 10:37:09.259 - INFO - ${current_value} =
20190402 10:37:09.259 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1339)
20190402 10:37:09.259 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:37:09.259 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:37:09.259 - FAIL -  != CREATE_COMPLETE
20190402 10:37:09.259 - DEBUG - Traceback (most recent call last):
  None
20190402 10:37:09.260 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:37:09.260 - INFO - +------ END KW: OpenStack.Check Field Value (1341)
20190402 10:37:19.260 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:37:19.261 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:37:19.261 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:37:19.261 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:37:19.261 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:37:19.262 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:37:19.262 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:37:19.262 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:37:19.262 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:37:19.262 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:37:19.263 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:37:19.263 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:37:19.263 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:37:19.263 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:37:20.545 - INFO - Command exited with return code 0.
20190402 10:37:20.545 - INFO - ${stdout} =
20190402 10:37:20.545 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:37:20.546 - INFO - ${rc} = 0
20190402 10:37:20.546 - INFO - +--------- END KW: SSHLibrary.Execute Command (1283)
20190402 10:37:20.546 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:37:20.547 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:37:20.548 - INFO - +--------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:37:20.548 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:37:20.549 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:37:20.549 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:37:20.550 - INFO - +-------- END KW: OpenStack.Run OS Command (1287)
20190402 10:37:20.550 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:37:20.551 - INFO - ${value} =
20190402 10:37:20.551 - INFO - +-------- END KW: Collections.Get From Dictionary (1)
20190402 10:37:20.551 - INFO - ${current_value} =
20190402 10:37:20.552 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1291)
20190402 10:37:20.552 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:37:20.553 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:37:20.553 - FAIL -  != CREATE_COMPLETE
20190402 10:37:20.553 - DEBUG - Traceback (most recent call last):
  None
20190402 10:37:20.553 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:37:20.554 - INFO - +------ END KW: OpenStack.Check Field Value (1293)
20190402 10:37:30.554 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:37:30.556 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:37:30.557 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:37:30.558 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:37:30.558 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:37:30.558 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:37:30.559 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:37:30.559 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:37:30.559 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:37:30.561 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:37:30.561 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:37:30.561 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:37:30.562 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:37:30.563 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:37:31.844 - INFO - Command exited with return code 0.
20190402 10:37:31.844 - INFO - ${stdout} =
20190402 10:37:31.845 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:37:31.845 - INFO - ${rc} = 0
20190402 10:37:31.845 - INFO - +--------- END KW: SSHLibrary.Execute Command (1284)
20190402 10:37:31.845 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:37:31.847 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:37:31.847 - INFO - +--------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:37:31.847 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:37:31.848 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:37:31.848 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:37:31.849 - INFO - +-------- END KW: OpenStack.Run OS Command (1290)
20190402 10:37:31.849 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:37:31.850 - INFO - ${value} =
20190402 10:37:31.850 - INFO - +-------- END KW: Collections.Get From Dictionary (1)
20190402 10:37:31.850 - INFO - ${current_value} =
20190402 10:37:31.851 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1295)
20190402 10:37:31.851 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:37:31.852 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:37:31.852 - FAIL -  != CREATE_COMPLETE
20190402 10:37:31.852 - DEBUG - Traceback (most recent call last):
  None
20190402 10:37:31.852 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:37:31.853 - INFO - +------ END KW: OpenStack.Check Field Value (1299)
20190402 10:37:41.854 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:37:41.855 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:37:41.856 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:37:41.857 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:37:41.857 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:37:41.857 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:37:41.858 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:37:41.858 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:37:41.858 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:37:41.859 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:37:41.860 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:37:41.860 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:37:41.860 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:37:41.861 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:37:43.256 - INFO - Command exited with return code 0.
20190402 10:37:43.256 - INFO - ${stdout} =
20190402 10:37:43.256 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:37:43.256 - INFO - ${rc} = 0
20190402 10:37:43.256 - INFO - +--------- END KW: SSHLibrary.Execute Command (1396)
20190402 10:37:43.256 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:37:43.257 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:37:43.257 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:37:43.257 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:37:43.257 - INFO - +--------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:37:43.257 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:37:43.257 - INFO - +-------- END KW: OpenStack.Run OS Command (1399)
20190402 10:37:43.258 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:37:43.258 - INFO - ${value} =
20190402 10:37:43.258 - INFO - +-------- END KW: Collections.Get From Dictionary (1)
20190402 10:37:43.258 - INFO - ${current_value} =
20190402 10:37:43.258 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1403)
20190402 10:37:43.258 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:37:43.259 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:37:43.259 - FAIL -  != CREATE_COMPLETE
20190402 10:37:43.259 - DEBUG - Traceback (most recent call last):
  None
20190402 10:37:43.259 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:37:43.259 - INFO - +------ END KW: OpenStack.Check Field Value (1406)
20190402 10:37:53.260 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:37:53.261 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:37:53.262 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:37:53.263 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:37:53.263 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:37:53.264 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:37:53.265 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:37:53.265 - INFO - +-------- END KW: BuiltIn.Catenate (2)
20190402 10:37:53.266 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:37:53.268 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:37:53.268 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:37:53.269 - INFO - +--------- END KW: BuiltIn.Set Variable (2)
20190402 10:37:53.269 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:37:53.270 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:37:54.656 - INFO - Command exited with return code 0.
20190402 10:37:54.656 - INFO - ${stdout} =
20190402 10:37:54.656 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:37:54.656 - INFO - ${rc} = 0
20190402 10:37:54.657 - INFO - +--------- END KW: SSHLibrary.Execute Command (1388)
20190402 10:37:54.657 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:37:54.658 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:37:54.659 - INFO - +--------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:37:54.659 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:37:54.660 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:37:54.660 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:37:54.660 - INFO - +-------- END KW: OpenStack.Run OS Command (1395)
20190402 10:37:54.661 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:37:54.661 - INFO - ${value} =
20190402 10:37:54.661 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:37:54.662 - INFO - ${current_value} =
20190402 10:37:54.662 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1401)
20190402 10:37:54.662 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:37:54.663 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:37:54.663 - FAIL -  != CREATE_COMPLETE
20190402 10:37:54.663 - DEBUG - Traceback (most recent call last):
  None
20190402 10:37:54.664 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:37:54.664 - INFO - +------ END KW: OpenStack.Check Field Value (1404)
20190402 10:38:04.665 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:38:04.666 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:38:04.667 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:38:04.668 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:38:04.668 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:38:04.668 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:38:04.668 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:38:04.668 - INFO - +-------- END KW: BuiltIn.Catenate (0)
20190402 10:38:04.668 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:38:04.669 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:38:04.669 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:38:04.669 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:38:04.669 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:38:04.669 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:38:05.949 - INFO - Command exited with return code 0.
20190402 10:38:05.950 - INFO - ${stdout} =
20190402 10:38:05.950 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:38:05.950 - INFO - ${rc} = 0
20190402 10:38:05.950 - INFO - +--------- END KW: SSHLibrary.Execute Command (1281)
20190402 10:38:05.950 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:38:05.951 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:38:05.951 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:38:05.951 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:38:05.952 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:38:05.952 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:38:05.952 - INFO - +-------- END KW: OpenStack.Run OS Command (1284)
20190402 10:38:05.952 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:38:05.952 - INFO - ${value} =
20190402 10:38:05.952 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:38:05.953 - INFO - ${current_value} =
20190402 10:38:05.953 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1287)
20190402 10:38:05.953 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:38:05.953 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:38:05.953 - FAIL -  != CREATE_COMPLETE
20190402 10:38:05.953 - DEBUG - Traceback (most recent call last):
  None
20190402 10:38:05.954 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:38:05.954 - INFO - +------ END KW: OpenStack.Check Field Value (1289)
20190402 10:38:15.954 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:38:15.956 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:38:15.958 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:38:15.958 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:38:15.958 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:38:15.959 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:38:15.959 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:38:15.960 - INFO - +-------- END KW: BuiltIn.Catenate (0)
20190402 10:38:15.960 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:38:15.961 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:38:15.961 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:38:15.962 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:38:15.962 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:38:15.963 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:38:17.245 - INFO - Command exited with return code 0.
20190402 10:38:17.246 - INFO - ${stdout} =
20190402 10:38:17.246 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:38:17.247 - INFO - ${rc} = 0
20190402 10:38:17.247 - INFO - +--------- END KW: SSHLibrary.Execute Command (1285)
20190402 10:38:17.248 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:38:17.249 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:38:17.249 - INFO - +--------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:38:17.250 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:38:17.250 - INFO - +--------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:38:17.250 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:38:17.250 - INFO - +-------- END KW: OpenStack.Run OS Command (1290)
20190402 10:38:17.250 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:38:17.251 - INFO - ${value} =
20190402 10:38:17.251 - INFO - +-------- END KW: Collections.Get From Dictionary (1)
20190402 10:38:17.251 - INFO - ${current_value} =
20190402 10:38:17.251 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1295)
20190402 10:38:17.251 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:38:17.251 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:38:17.251 - FAIL -  != CREATE_COMPLETE
20190402 10:38:17.251 - DEBUG - Traceback (most recent call last):
  None
20190402 10:38:17.251 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:38:17.252 - INFO - +------ END KW: OpenStack.Check Field Value (1298)
20190402 10:38:27.252 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:38:27.253 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:38:27.255 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:38:27.255 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:38:27.256 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:38:27.256 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:38:27.257 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:38:27.257 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:38:27.257 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:38:27.258 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:38:27.259 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:38:27.259 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:38:27.259 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:38:27.260 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:38:28.542 - INFO - Command exited with return code 0.
20190402 10:38:28.542 - INFO - ${stdout} =
20190402 10:38:28.542 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:38:28.543 - INFO - ${rc} = 0
20190402 10:38:28.543 - INFO - +--------- END KW: SSHLibrary.Execute Command (1284)
20190402 10:38:28.543 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:38:28.544 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:38:28.545 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:38:28.545 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:38:28.546 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:38:28.546 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:38:28.546 - INFO - +-------- END KW: OpenStack.Run OS Command (1289)
20190402 10:38:28.547 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:38:28.547 - INFO - ${value} =
20190402 10:38:28.548 - INFO - +-------- END KW: Collections.Get From Dictionary (1)
20190402 10:38:28.548 - INFO - ${current_value} =
20190402 10:38:28.548 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1295)
20190402 10:38:28.549 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:38:28.549 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:38:28.550 - FAIL -  != CREATE_COMPLETE
20190402 10:38:28.550 - DEBUG - Traceback (most recent call last):
  None
20190402 10:38:28.550 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:38:28.550 - INFO - +------ END KW: OpenStack.Check Field Value (1298)
20190402 10:38:38.551 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:38:38.551 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:38:38.552 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:38:38.552 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:38:38.552 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:38:38.552 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:38:38.552 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:38:38.553 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:38:38.553 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:38:38.553 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:38:38.553 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:38:38.553 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:38:38.553 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:38:38.554 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:38:39.835 - INFO - Command exited with return code 0.
20190402 10:38:39.836 - INFO - ${stdout} =
20190402 10:38:39.836 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:38:39.836 - INFO - ${rc} = 0
20190402 10:38:39.836 - INFO - +--------- END KW: SSHLibrary.Execute Command (1283)
20190402 10:38:39.836 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:38:39.837 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:38:39.838 - INFO - +--------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:38:39.838 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:38:39.839 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:38:39.839 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:38:39.839 - INFO - +-------- END KW: OpenStack.Run OS Command (1286)
20190402 10:38:39.839 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:38:39.840 - INFO - ${value} =
20190402 10:38:39.840 - INFO - +-------- END KW: Collections.Get From Dictionary (1)
20190402 10:38:39.840 - INFO - ${current_value} =
20190402 10:38:39.841 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1289)
20190402 10:38:39.841 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:38:39.841 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:38:39.842 - FAIL -  != CREATE_COMPLETE
20190402 10:38:39.842 - DEBUG - Traceback (most recent call last):
  None
20190402 10:38:39.842 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:38:39.842 - INFO - +------ END KW: OpenStack.Check Field Value (1291)
20190402 10:38:49.843 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:38:49.843 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:38:49.844 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:38:49.844 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:38:49.844 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:38:49.844 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:38:49.845 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:38:49.845 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:38:49.845 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:38:49.845 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:38:49.845 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:38:49.845 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:38:49.846 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:38:49.846 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:38:51.127 - INFO - Command exited with return code 0.
20190402 10:38:51.127 - INFO - ${stdout} =
20190402 10:38:51.127 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:38:51.127 - INFO - ${rc} = 0
20190402 10:38:51.127 - INFO - +--------- END KW: SSHLibrary.Execute Command (1281)
20190402 10:38:51.127 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:38:51.128 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:38:51.128 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:38:51.128 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:38:51.129 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:38:51.129 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:38:51.129 - INFO - +-------- END KW: OpenStack.Run OS Command (1284)
20190402 10:38:51.129 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:38:51.129 - INFO - ${value} =
20190402 10:38:51.129 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:38:51.130 - INFO - ${current_value} =
20190402 10:38:51.130 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1287)
20190402 10:38:51.130 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:38:51.130 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:38:51.130 - FAIL -  != CREATE_COMPLETE
20190402 10:38:51.130 - DEBUG - Traceback (most recent call last):
  None
20190402 10:38:51.130 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:38:51.130 - INFO - +------ END KW: OpenStack.Check Field Value (1287)
20190402 10:39:01.131 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:39:01.131 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:39:01.132 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:39:01.132 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:39:01.132 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:39:01.132 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:39:01.132 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:39:01.132 - INFO - +-------- END KW: BuiltIn.Catenate (0)
20190402 10:39:01.132 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:39:01.133 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:39:01.133 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:39:01.133 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:39:01.133 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:39:01.134 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:39:02.415 - INFO - Command exited with return code 0.
20190402 10:39:02.415 - INFO - ${stdout} =
20190402 10:39:02.415 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:39:02.415 - INFO - ${rc} = 0
20190402 10:39:02.415 - INFO - +--------- END KW: SSHLibrary.Execute Command (1282)
20190402 10:39:02.416 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:39:02.417 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:39:02.417 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:39:02.417 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:39:02.418 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:39:02.418 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:39:02.418 - INFO - +-------- END KW: OpenStack.Run OS Command (1286)
20190402 10:39:02.419 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:39:02.419 - INFO - ${value} =
20190402 10:39:02.419 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:39:02.420 - INFO - ${current_value} =
20190402 10:39:02.420 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1289)
20190402 10:39:02.420 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:39:02.421 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:39:02.421 - FAIL -  != CREATE_COMPLETE
20190402 10:39:02.421 - DEBUG - Traceback (most recent call last):
  None
20190402 10:39:02.421 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:39:02.422 - INFO - +------ END KW: OpenStack.Check Field Value (1290)
20190402 10:39:12.422 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:39:12.422 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:39:12.423 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:39:12.423 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:39:12.423 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:39:12.423 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:39:12.424 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:39:12.424 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:39:12.424 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:39:12.424 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:39:12.424 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:39:12.424 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:39:12.424 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:39:12.425 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:39:13.705 - INFO - Command exited with return code 0.
20190402 10:39:13.706 - INFO - ${stdout} =
20190402 10:39:13.706 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:39:13.706 - INFO - ${rc} = 0
20190402 10:39:13.706 - INFO - +--------- END KW: SSHLibrary.Execute Command (1282)
20190402 10:39:13.707 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:39:13.708 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:39:13.708 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:39:13.708 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:39:13.709 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:39:13.709 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:39:13.709 - INFO - +-------- END KW: OpenStack.Run OS Command (1285)
20190402 10:39:13.710 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:39:13.710 - INFO - ${value} =
20190402 10:39:13.710 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:39:13.711 - INFO - ${current_value} =
20190402 10:39:13.711 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1289)
20190402 10:39:13.711 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:39:13.712 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:39:13.712 - FAIL -  != CREATE_COMPLETE
20190402 10:39:13.712 - DEBUG - Traceback (most recent call last):
  None
20190402 10:39:13.712 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:39:13.713 - INFO - +------ END KW: OpenStack.Check Field Value (1291)
20190402 10:39:23.714 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:39:23.715 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:39:23.716 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:39:23.717 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:39:23.717 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:39:23.717 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:39:23.718 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:39:23.718 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:39:23.718 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:39:23.720 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:39:23.720 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:39:23.720 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:39:23.721 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:39:23.721 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:39:25.004 - INFO - Command exited with return code 0.
20190402 10:39:25.004 - INFO - ${stdout} =
20190402 10:39:25.004 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:39:25.005 - INFO - ${rc} = 0
20190402 10:39:25.005 - INFO - +--------- END KW: SSHLibrary.Execute Command (1285)
20190402 10:39:25.005 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:39:25.006 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:39:25.006 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:39:25.007 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:39:25.007 - INFO - +--------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:39:25.008 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:39:25.008 - INFO - +-------- END KW: OpenStack.Run OS Command (1290)
20190402 10:39:25.008 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:39:25.008 - INFO - ${value} =
20190402 10:39:25.008 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:39:25.009 - INFO - ${current_value} =
20190402 10:39:25.009 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1294)
20190402 10:39:25.009 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:39:25.010 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:39:25.010 - FAIL -  != CREATE_COMPLETE
20190402 10:39:25.010 - DEBUG - Traceback (most recent call last):
  None
20190402 10:39:25.010 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:39:25.010 - INFO - +------ END KW: OpenStack.Check Field Value (1297)
20190402 10:39:35.011 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:39:35.012 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:39:35.013 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:39:35.013 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:39:35.013 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:39:35.013 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:39:35.013 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:39:35.014 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:39:35.014 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:39:35.014 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:39:35.014 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:39:35.014 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:39:35.014 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:39:35.015 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:39:36.296 - INFO - Command exited with return code 0.
20190402 10:39:36.296 - INFO - ${stdout} =
20190402 10:39:36.296 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:39:36.296 - INFO - ${rc} = 0
20190402 10:39:36.297 - INFO - +--------- END KW: SSHLibrary.Execute Command (1282)
20190402 10:39:36.297 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:39:36.297 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:39:36.297 - INFO - +--------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:39:36.297 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:39:36.298 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:39:36.298 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:39:36.298 - INFO - +-------- END KW: OpenStack.Run OS Command (1284)
20190402 10:39:36.298 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:39:36.298 - INFO - ${value} =
20190402 10:39:36.298 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:39:36.299 - INFO - ${current_value} =
20190402 10:39:36.299 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1287)
20190402 10:39:36.299 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:39:36.299 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:39:36.299 - FAIL -  != CREATE_COMPLETE
20190402 10:39:36.299 - DEBUG - Traceback (most recent call last):
  None
20190402 10:39:36.299 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:39:36.299 - INFO - +------ END KW: OpenStack.Check Field Value (1288)
20190402 10:39:46.300 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:39:46.300 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:39:46.301 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:39:46.301 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:39:46.301 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:39:46.301 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:39:46.302 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:39:46.302 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:39:46.302 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:39:46.302 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:39:46.302 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:39:46.302 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:39:46.302 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:39:46.303 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:39:47.584 - INFO - Command exited with return code 0.
20190402 10:39:47.585 - INFO - ${stdout} =
20190402 10:39:47.585 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:39:47.585 - INFO - ${rc} = 0
20190402 10:39:47.585 - INFO - +--------- END KW: SSHLibrary.Execute Command (1283)
20190402 10:39:47.585 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:39:47.586 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:39:47.586 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:39:47.586 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:39:47.586 - INFO - +--------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:39:47.586 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:39:47.586 - INFO - +-------- END KW: OpenStack.Run OS Command (1284)
20190402 10:39:47.586 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:39:47.587 - INFO - ${value} =
20190402 10:39:47.587 - INFO - +-------- END KW: Collections.Get From Dictionary (1)
20190402 10:39:47.587 - INFO - ${current_value} =
20190402 10:39:47.587 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1287)
20190402 10:39:47.587 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:39:47.587 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:39:47.587 - FAIL -  != CREATE_COMPLETE
20190402 10:39:47.587 - DEBUG - Traceback (most recent call last):
  None
20190402 10:39:47.587 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:39:47.588 - INFO - +------ END KW: OpenStack.Check Field Value (1288)
20190402 10:39:57.588 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:39:57.591 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:39:57.592 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:39:57.593 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:39:57.593 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:39:57.593 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:39:57.594 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:39:57.594 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:39:57.595 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:39:57.597 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:39:57.597 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:39:57.597 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:39:57.597 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:39:57.598 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:39:58.885 - INFO - Command exited with return code 0.
20190402 10:39:58.885 - INFO - ${stdout} =
20190402 10:39:58.885 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:39:58.885 - INFO - ${rc} = 0
20190402 10:39:58.886 - INFO - +--------- END KW: SSHLibrary.Execute Command (1289)
20190402 10:39:58.886 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:39:58.887 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:39:58.887 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:39:58.887 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:39:58.887 - INFO - +--------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:39:58.887 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:39:58.888 - INFO - +-------- END KW: OpenStack.Run OS Command (1292)
20190402 10:39:58.888 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:39:58.888 - INFO - ${value} =
20190402 10:39:58.888 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:39:58.888 - INFO - ${current_value} =
20190402 10:39:58.888 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1298)
20190402 10:39:58.889 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:39:58.889 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:39:58.889 - FAIL -  != CREATE_COMPLETE
20190402 10:39:58.889 - DEBUG - Traceback (most recent call last):
  None
20190402 10:39:58.889 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:39:58.889 - INFO - +------ END KW: OpenStack.Check Field Value (1301)
20190402 10:40:08.890 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:40:08.892 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:40:08.893 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:40:08.894 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:40:08.894 - INFO - +-------- END KW: BuiltIn.Set Variable (1)
20190402 10:40:08.894 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:40:08.895 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:40:08.896 - INFO - +-------- END KW: BuiltIn.Catenate (2)
20190402 10:40:08.896 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:40:08.897 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:40:08.898 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:40:08.898 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:40:08.898 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:40:08.899 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:40:10.181 - INFO - Command exited with return code 0.
20190402 10:40:10.182 - INFO - ${stdout} =
20190402 10:40:10.182 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:40:10.182 - INFO - ${rc} = 0
20190402 10:40:10.183 - INFO - +--------- END KW: SSHLibrary.Execute Command (1284)
20190402 10:40:10.183 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:40:10.184 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:40:10.185 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:40:10.185 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:40:10.186 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:40:10.186 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:40:10.186 - INFO - +-------- END KW: OpenStack.Run OS Command (1290)
20190402 10:40:10.187 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:40:10.187 - INFO - ${value} =
20190402 10:40:10.188 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:40:10.188 - INFO - ${current_value} =
20190402 10:40:10.188 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1296)
20190402 10:40:10.189 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:40:10.189 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:40:10.190 - FAIL -  != CREATE_COMPLETE
20190402 10:40:10.190 - DEBUG - Traceback (most recent call last):
  None
20190402 10:40:10.190 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:40:10.190 - INFO - +------ END KW: OpenStack.Check Field Value (1300)
20190402 10:40:20.191 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:40:20.193 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:40:20.194 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:40:20.196 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:40:20.196 - INFO - +-------- END KW: BuiltIn.Set Variable (2)
20190402 10:40:20.196 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:40:20.196 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:40:20.196 - INFO - +-------- END KW: BuiltIn.Catenate (0)
20190402 10:40:20.196 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:40:20.197 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:40:20.197 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:40:20.197 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:40:20.197 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:40:20.197 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:40:21.478 - INFO - Command exited with return code 0.
20190402 10:40:21.478 - INFO - ${stdout} =
20190402 10:40:21.478 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:40:21.478 - INFO - ${rc} = 0
20190402 10:40:21.478 - INFO - +--------- END KW: SSHLibrary.Execute Command (1281)
20190402 10:40:21.479 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:40:21.479 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:40:21.479 - INFO - +--------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:40:21.479 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:40:21.480 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:40:21.480 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:40:21.480 - INFO - +-------- END KW: OpenStack.Run OS Command (1284)
20190402 10:40:21.480 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:40:21.480 - INFO - ${value} =
20190402 10:40:21.480 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:40:21.480 - INFO - ${current_value} =
20190402 10:40:21.480 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1288)
20190402 10:40:21.480 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:40:21.481 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:40:21.481 - FAIL -  != CREATE_COMPLETE
20190402 10:40:21.481 - DEBUG - Traceback (most recent call last):
  None
20190402 10:40:21.481 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:40:21.481 - INFO - +------ END KW: OpenStack.Check Field Value (1290)
20190402 10:40:31.481 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:40:31.482 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:40:31.482 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:40:31.482 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:40:31.482 - INFO - +-------- END KW: BuiltIn.Set Variable (0)
20190402 10:40:31.483 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:40:31.483 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:40:31.483 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:40:31.483 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:40:31.483 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:40:31.483 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:40:31.483 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:40:31.484 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:40:31.484 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:40:32.765 - INFO - Command exited with return code 0.
20190402 10:40:32.766 - INFO - ${stdout} =
20190402 10:40:32.766 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:40:32.766 - INFO - ${rc} = 0
20190402 10:40:32.766 - INFO - +--------- END KW: SSHLibrary.Execute Command (1282)
20190402 10:40:32.767 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:40:32.768 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:40:32.768 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:40:32.768 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:40:32.769 - INFO - +--------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:40:32.769 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:40:32.769 - INFO - +-------- END KW: OpenStack.Run OS Command (1286)
20190402 10:40:32.770 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:40:32.770 - INFO - ${value} =
20190402 10:40:32.770 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:40:32.771 - INFO - ${current_value} =
20190402 10:40:32.771 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1289)
20190402 10:40:32.771 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:40:32.771 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:40:32.771 - FAIL -  != CREATE_COMPLETE
20190402 10:40:32.771 - DEBUG - Traceback (most recent call last):
  None
20190402 10:40:32.771 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:40:32.771 - INFO - +------ END KW: OpenStack.Check Field Value (1290)
20190402 10:40:42.772 - INFO - +------ START KW: OpenStack.Check Field Value [ stack | ${stack_name} | stack_status | CREATE_COMPLETE ]
20190402 10:40:42.774 - INFO - +------- START KW: OpenStack.Retrieve Field Property [ ${component} | ${component_name} | ${property} ]
20190402 10:40:42.776 - INFO - +-------- START KW: BuiltIn.Set Variable [ openstack ${component} show ${component_name} ]
20190402 10:40:42.777 - INFO - ${openstack_cmd} = openstack stack show stack-cirros-1
20190402 10:40:42.777 - INFO - +-------- END KW: BuiltIn.Set Variable (2)
20190402 10:40:42.777 - INFO - +-------- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep -w ${property} | tail -1 | awk '{print$4}' ]
20190402 10:40:42.778 - INFO - ${cmd} = openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}'
20190402 10:40:42.778 - INFO - +-------- END KW: BuiltIn.Catenate (1)
20190402 10:40:42.779 - INFO - +-------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:40:42.814 - INFO - +--------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:40:42.814 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:40:42.814 - INFO - +--------- END KW: BuiltIn.Set Variable (0)
20190402 10:40:42.815 - INFO - +--------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:40:42.815 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack show stack-cirros-1|grep -w stack_status|tail -1|awk '{print$4}''.
20190402 10:40:44.197 - INFO - Command exited with return code 0.
20190402 10:40:44.197 - INFO - ${stdout} =
20190402 10:40:44.197 - INFO - ${stderr} = Stack not found: stack-cirros-1
20190402 10:40:44.197 - INFO - ${rc} = 0
20190402 10:40:44.197 - INFO - +--------- END KW: SSHLibrary.Execute Command (1382)
20190402 10:40:44.197 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:40:44.198 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:40:44.198 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:40:44.198 - INFO - +--------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:40:44.198 - INFO - +--------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:40:44.198 - INFO - ${result} = {u'stdout': u'', u'stderr': u'Stack not found: stack-cirros-1', u'rc': 0}
20190402 10:40:44.199 - INFO - +-------- END KW: OpenStack.Run OS Command (1419)
20190402 10:40:44.199 - INFO - +-------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:40:44.199 - INFO - ${value} =
20190402 10:40:44.199 - INFO - +-------- END KW: Collections.Get From Dictionary (0)
20190402 10:40:44.199 - INFO - ${current_value} =
20190402 10:40:44.199 - INFO - +------- END KW: OpenStack.Retrieve Field Property (1425)
20190402 10:40:44.199 - INFO - +------- START KW: BuiltIn.Should Be Equal As Strings [ ${current_value} | ${expected_value} ]
20190402 10:40:44.199 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:40:44.200 - FAIL -  != CREATE_COMPLETE
20190402 10:40:44.200 - DEBUG - Traceback (most recent call last):
  None
20190402 10:40:44.200 - INFO - +------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:40:44.200 - INFO - +------ END KW: OpenStack.Check Field Value (1428)
20190402 10:40:44.200 - FAIL - Keyword 'Check Field Value' failed after retrying for 5 minutes. The last error was:  != CREATE_COMPLETE
20190402 10:40:44.200 - DEBUG - Traceback (most recent call last):
  None
20190402 10:40:44.200 - INFO - +----- END KW: BuiltIn.Wait Until Keyword Succeeds (307216)
20190402 10:40:44.200 - INFO - +---- END KW: OpenStack.Create Stack (308654)
------------------------------------------------------------------------------
20190402 10:40:44.200 - INFO - +--- END TEST: Create Instance Trough Stack (310168)
------------------------------------------------------------------------------
20190402 10:40:44.201 - INFO - +--- START TEARDOWN: BuiltIn.Run Keywords [ OpenStack.Openstack Cleanup All | Utils.Stx Suite TearDown ]
20190402 10:40:44.201 - INFO - +---- START KW: OpenStack.Openstack Cleanup All [ ]
20190402 10:40:44.201 - INFO - +----- START KW: OpenStack.Delete All Instances [ ]
20190402 10:40:44.201 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack server list ]
20190402 10:40:44.202 - INFO - ${openstack_cmd} = openstack server list
20190402 10:40:44.202 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:40:44.202 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:40:44.202 - INFO - ${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"
20190402 10:40:44.202 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:40:44.202 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:40:44.203 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:40:44.203 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:40:44.203 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:40:44.203 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:40:44.203 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server list|awk '{print$4}'|grep -v "Name"'.
20190402 10:40:45.584 - INFO - Command exited with return code 0.
20190402 10:40:45.585 - INFO - ${stdout} =
20190402 10:40:45.585 - INFO - ${stderr} =
20190402 10:40:45.585 - INFO - ${rc} = 0
20190402 10:40:45.585 - INFO - +------- END KW: SSHLibrary.Execute Command (1382)
20190402 10:40:45.586 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:40:45.587 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:40:45.587 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:40:45.587 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:40:45.588 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:40:45.588 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:40:45.589 - INFO - +------ END KW: OpenStack.Run OS Command (1386)
20190402 10:40:45.589 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:40:45.590 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:40:45.590 - INFO - ${response} =
20190402 10:40:45.590 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:40:45.590 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:40:45.590 - INFO - @{res_in_list} = [ ]
20190402 10:40:45.591 - INFO - +------- END KW: String.Split String (1)
20190402 10:40:45.591 - INFO - @{vm_list} = [ ]
20190402 10:40:45.591 - INFO - +------ END KW: Utils.Convert Response To List (2)
20190402 10:40:45.591 - INFO - +------ START KW: ${vm} IN [ @{vm_list} ] [ ]
20190402 10:40:45.591 - INFO - +------ END KW: ${vm} IN [ @{vm_list} ] (0)
20190402 10:40:45.591 - INFO - +----- END KW: OpenStack.Delete All Instances (1390)
20190402 10:40:45.591 - INFO - +----- START KW: OpenStack.Delete All Images [ ]
20190402 10:40:45.591 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack image list ]
20190402 10:40:45.592 - INFO - ${openstack_cmd} = openstack image list
20190402 10:40:45.592 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:40:45.592 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "Cirros" ]
20190402 10:40:45.592 - INFO - ${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"
20190402 10:40:45.592 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:40:45.592 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:40:45.592 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:40:45.593 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:40:45.593 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:40:45.593 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:40:45.593 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.
20190402 10:40:46.874 - INFO - Command exited with return code 0.
20190402 10:40:46.874 - INFO - ${stdout} =
20190402 10:40:46.874 - INFO - ${stderr} =
20190402 10:40:46.874 - INFO - ${rc} = 0
20190402 10:40:46.874 - INFO - +------- END KW: SSHLibrary.Execute Command (1281)
20190402 10:40:46.874 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:40:46.875 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:40:46.875 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:40:46.875 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:40:46.875 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:40:46.875 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:40:46.875 - INFO - +------ END KW: OpenStack.Run OS Command (1283)
20190402 10:40:46.875 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:40:46.876 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:40:46.876 - INFO - ${response} =
20190402 10:40:46.876 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:40:46.876 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:40:46.876 - INFO - @{res_in_list} = [ ]
20190402 10:40:46.876 - INFO - +------- END KW: String.Split String (0)
20190402 10:40:46.876 - INFO - @{image_list} = [ ]
20190402 10:40:46.876 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:40:46.877 - INFO - +------ START KW: ${image} IN [ @{image_list} ] [ ]
20190402 10:40:46.877 - INFO - +------ END KW: ${image} IN [ @{image_list} ] (0)
20190402 10:40:46.877 - INFO - +----- END KW: OpenStack.Delete All Images (1286)
20190402 10:40:46.877 - INFO - +----- START KW: OpenStack.Delete All Flavors [ ]
20190402 10:40:46.877 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack flavor list ]
20190402 10:40:46.877 - INFO - ${openstack_cmd} = openstack flavor list
20190402 10:40:46.877 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:40:46.877 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "m1" ]
20190402 10:40:46.878 - INFO - ${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"
20190402 10:40:46.878 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:40:46.878 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:40:46.878 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:40:46.878 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:40:46.878 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:40:46.878 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:40:46.879 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.
20190402 10:40:48.223 - INFO - Command exited with return code 0.
20190402 10:40:48.224 - INFO - ${stdout} = 

f1.small
20190402 10:40:48.224 - INFO - ${stderr} =
20190402 10:40:48.224 - INFO - ${rc} = 0
20190402 10:40:48.224 - INFO - +------- END KW: SSHLibrary.Execute Command (1346)
20190402 10:40:48.224 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:40:48.225 - INFO - ${res} = {u'stdout': u'\n\nf1.small', u'stderr': u'', u'rc': 0}
20190402 10:40:48.226 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:40:48.226 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:40:48.227 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:40:48.227 - INFO - &{result} = { stdout=

f1.small | stderr= | rc=0 }
20190402 10:40:48.227 - INFO - +------ END KW: OpenStack.Run OS Command (1349)
20190402 10:40:48.228 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:40:48.228 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:40:48.228 - INFO - ${response} = 

f1.small
20190402 10:40:48.228 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:40:48.228 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:40:48.229 - INFO - @{res_in_list} = [ f1.small ]
20190402 10:40:48.229 - INFO - +------- END KW: String.Split String (1)
20190402 10:40:48.229 - INFO - @{flavor_list} = [ f1.small ]
20190402 10:40:48.229 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:40:48.229 - INFO - +------ START KW: ${flavor} IN [ @{flavor_list} ] [ ]
20190402 10:40:48.229 - INFO - +------- START KW: ${flavor} = f1.small [ ]
20190402 10:40:48.229 - INFO - +-------- START KW: OpenStack.Delete Flavor [ ${flavor} ]
20190402 10:40:48.229 - INFO - +--------- START KW: BuiltIn.Set Variable [ openstack flavor delete ]
20190402 10:40:48.229 - INFO - ${openstack_cmd} = openstack flavor delete
20190402 10:40:48.230 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:40:48.230 - INFO - +--------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${flavor} ]
20190402 10:40:48.230 - INFO - ${cmd} = openstack flavor delete f1.small
20190402 10:40:48.230 - INFO - +--------- END KW: BuiltIn.Catenate (0)
20190402 10:40:48.230 - INFO - +--------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:40:48.230 - INFO - +---------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:40:48.230 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:40:48.230 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:40:48.231 - INFO - +---------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:40:48.231 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor delete f1.small'.
20190402 10:40:49.663 - INFO - Command exited with return code 0.
20190402 10:40:49.664 - INFO - ${stdout} =
20190402 10:40:49.664 - INFO - ${stderr} =
20190402 10:40:49.664 - INFO - ${rc} = 0
20190402 10:40:49.664 - INFO - +---------- END KW: SSHLibrary.Execute Command (1433)
20190402 10:40:49.665 - INFO - +---------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:40:49.666 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:40:49.666 - INFO - +---------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:40:49.666 - INFO - +---------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:40:49.667 - INFO - +---------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:40:49.667 - INFO - +--------- END KW: OpenStack.Run OS Command (1437)
20190402 10:40:49.667 - INFO - +-------- END KW: OpenStack.Delete Flavor (1438)
20190402 10:40:49.668 - INFO - +------- END KW: ${flavor} = f1.small (1438)
20190402 10:40:49.668 - INFO - +------ END KW: ${flavor} IN [ @{flavor_list} ] (1439)
20190402 10:40:49.668 - INFO - +----- END KW: OpenStack.Delete All Flavors (2791)
20190402 10:40:49.668 - INFO - +----- START KW: OpenStack.Delete All Networks [ ]
20190402 10:40:49.669 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 10:40:49.669 - INFO - ${openstack_cmd} = openstack network list
20190402 10:40:49.669 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:40:49.669 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "private" | grep -v "public" | grep -v "external" | grep -v "internal" ]
20190402 10:40:49.670 - INFO - ${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"
20190402 10:40:49.670 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:40:49.670 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:40:49.671 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:40:49.672 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:40:49.672 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:40:49.672 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:40:49.673 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.
20190402 10:40:51.054 - INFO - Command exited with return code 0.
20190402 10:40:51.054 - INFO - ${stdout} = 

network-1
20190402 10:40:51.054 - INFO - ${stderr} =
20190402 10:40:51.055 - INFO - ${rc} = 0
20190402 10:40:51.055 - INFO - +------- END KW: SSHLibrary.Execute Command (1383)
20190402 10:40:51.055 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:40:51.057 - INFO - ${res} = {u'stdout': u'\n\nnetwork-1', u'stderr': u'', u'rc': 0}
20190402 10:40:51.057 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:40:51.057 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:40:51.058 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:40:51.059 - INFO - &{result} = { stdout=

network-1 | stderr= | rc=0 }
20190402 10:40:51.059 - INFO - +------ END KW: OpenStack.Run OS Command (1389)
20190402 10:40:51.060 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:40:51.060 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:40:51.061 - INFO - ${response} = 

network-1
20190402 10:40:51.061 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:40:51.061 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:40:51.062 - INFO - @{res_in_list} = [ network-1 ]
20190402 10:40:51.062 - INFO - +------- END KW: String.Split String (1)
20190402 10:40:51.062 - INFO - @{network_list} = [ network-1 ]
20190402 10:40:51.063 - INFO - +------ END KW: Utils.Convert Response To List (4)
20190402 10:40:51.063 - INFO - +------ START KW: ${network} IN [ @{network_list} ] [ ]
20190402 10:40:51.063 - INFO - +------- START KW: ${network} = network-1 [ ]
20190402 10:40:51.063 - INFO - +-------- START KW: OpenStack.Delete Network [ ${network} ]
20190402 10:40:51.064 - INFO - +--------- START KW: BuiltIn.Set Variable [ openstack network delete ]
20190402 10:40:51.064 - INFO - ${openstack_cmd} = openstack network delete
20190402 10:40:51.065 - INFO - +--------- END KW: BuiltIn.Set Variable (1)
20190402 10:40:51.065 - INFO - +--------- START KW: BuiltIn.Catenate [ ${openstack_cmd} | ${network} ]
20190402 10:40:51.065 - INFO - ${cmd} = openstack network delete network-1
20190402 10:40:51.066 - INFO - +--------- END KW: BuiltIn.Catenate (1)
20190402 10:40:51.066 - INFO - +--------- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:40:51.067 - INFO - +---------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:40:51.067 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:40:51.067 - INFO - +---------- END KW: BuiltIn.Set Variable (0)
20190402 10:40:51.068 - INFO - +---------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:40:51.068 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network delete network-1'.
20190402 10:40:53.954 - INFO - Command exited with return code 0.
20190402 10:40:53.955 - INFO - ${stdout} =
20190402 10:40:53.955 - INFO - ${stderr} =
20190402 10:40:53.955 - INFO - ${rc} = 0
20190402 10:40:53.955 - INFO - +---------- END KW: SSHLibrary.Execute Command (2887)
20190402 10:40:53.956 - INFO - +---------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:40:53.957 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:40:53.957 - INFO - +---------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:40:53.958 - INFO - +---------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:40:53.959 - INFO - +---------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:40:53.959 - INFO - +--------- END KW: OpenStack.Run OS Command (2893)
20190402 10:40:53.960 - INFO - +-------- END KW: OpenStack.Delete Network (2897)
20190402 10:40:53.960 - INFO - +------- END KW: ${network} = network-1 (2897)
20190402 10:40:53.960 - INFO - +------ END KW: ${network} IN [ @{network_list} ] (2897)
20190402 10:40:53.961 - INFO - +----- END KW: OpenStack.Delete All Networks (4293)
20190402 10:40:53.961 - INFO - +----- START KW: OpenStack.Delete All KeyPairs [ ]
20190402 10:40:53.962 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack keypair list ]
20190402 10:40:53.962 - INFO - ${openstack_cmd} = openstack keypair list
20190402 10:40:53.963 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:40:53.963 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "Name" ]
20190402 10:40:53.963 - INFO - ${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"
20190402 10:40:53.964 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:40:53.964 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:40:53.965 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:40:53.966 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:40:53.966 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:40:53.966 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:40:53.967 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack keypair list|awk '{print$2}'|grep -v "Name"'.
20190402 10:40:55.350 - INFO - Command exited with return code 0.
20190402 10:40:55.350 - INFO - ${stdout} =
20190402 10:40:55.350 - INFO - ${stderr} =
20190402 10:40:55.350 - INFO - ${rc} = 0
20190402 10:40:55.351 - INFO - +------- END KW: SSHLibrary.Execute Command (1384)
20190402 10:40:55.351 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:40:55.352 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:40:55.352 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:40:55.353 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:40:55.353 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:40:55.354 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:40:55.354 - INFO - +------ END KW: OpenStack.Run OS Command (1390)
20190402 10:40:55.355 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:40:55.355 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:40:55.356 - INFO - ${response} =
20190402 10:40:55.356 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:40:55.356 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:40:55.357 - INFO - @{res_in_list} = [ ]
20190402 10:40:55.357 - INFO - +------- END KW: String.Split String (1)
20190402 10:40:55.357 - INFO - @{key_list} = [ ]
20190402 10:40:55.358 - INFO - +------ END KW: Utils.Convert Response To List (4)
20190402 10:40:55.358 - INFO - +------ START KW: ${key} IN [ @{key_list} ] [ ]
20190402 10:40:55.358 - INFO - +------ END KW: ${key} IN [ @{key_list} ] (0)
20190402 10:40:55.359 - INFO - +----- END KW: OpenStack.Delete All KeyPairs (1397)
20190402 10:40:55.359 - INFO - +----- START KW: OpenStack.Delete All Snapshots [ ]
20190402 10:40:55.360 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume snapshot list ]
20190402 10:40:55.361 - INFO - ${openstack_cmd} = openstack volume snapshot list
20190402 10:40:55.361 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:40:55.361 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:40:55.362 - INFO - ${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"
20190402 10:40:55.363 - INFO - +------ END KW: BuiltIn.Catenate (2)
20190402 10:40:55.363 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:40:55.364 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:40:55.364 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:40:55.364 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:40:55.365 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:40:55.365 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.
20190402 10:40:56.748 - INFO - Command exited with return code 0.
20190402 10:40:56.749 - INFO - ${stdout} =
20190402 10:40:56.749 - INFO - ${stderr} =
20190402 10:40:56.749 - INFO - ${rc} = 0
20190402 10:40:56.749 - INFO - +------- END KW: SSHLibrary.Execute Command (1384)
20190402 10:40:56.750 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:40:56.751 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:40:56.751 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:40:56.751 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:40:56.752 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:40:56.753 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:40:56.753 - INFO - +------ END KW: OpenStack.Run OS Command (1390)
20190402 10:40:56.753 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:40:56.754 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:40:56.755 - INFO - ${response} =
20190402 10:40:56.755 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:40:56.755 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:40:56.756 - INFO - @{res_in_list} = [ ]
20190402 10:40:56.756 - INFO - +------- END KW: String.Split String (1)
20190402 10:40:56.756 - INFO - @{snapshot_list} = [ ]
20190402 10:40:56.756 - INFO - +------ END KW: Utils.Convert Response To List (3)
20190402 10:40:56.756 - INFO - +------ START KW: ${snapshot} IN [ @{snapshot_list} ] [ ]
20190402 10:40:56.757 - INFO - +------ END KW: ${snapshot} IN [ @{snapshot_list} ] (1)
20190402 10:40:56.757 - INFO - +----- END KW: OpenStack.Delete All Snapshots (1398)
20190402 10:40:56.757 - INFO - +----- START KW: OpenStack.Delete All Volumes [ ]
20190402 10:40:56.758 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume list ]
20190402 10:40:56.759 - INFO - ${openstack_cmd} = openstack volume list
20190402 10:40:56.759 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:40:56.759 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "ID" ]
20190402 10:40:56.760 - INFO - ${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"
20190402 10:40:56.760 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:40:56.761 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:40:56.762 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:40:56.762 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:40:56.762 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:40:56.763 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:40:56.763 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume list|awk '{print$2}'|grep -v "ID"'.
20190402 10:40:58.196 - INFO - Command exited with return code 0.
20190402 10:40:58.196 - INFO - ${stdout} =
20190402 10:40:58.196 - INFO - ${stderr} =
20190402 10:40:58.196 - INFO - ${rc} = 0
20190402 10:40:58.196 - INFO - +------- END KW: SSHLibrary.Execute Command (1434)
20190402 10:40:58.196 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:40:58.197 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:40:58.197 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:40:58.197 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:40:58.198 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:40:58.198 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:40:58.198 - INFO - +------ END KW: OpenStack.Run OS Command (1437)
20190402 10:40:58.198 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:40:58.198 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:40:58.198 - INFO - ${response} =
20190402 10:40:58.199 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:40:58.199 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:40:58.199 - INFO - @{res_in_list} = [ ]
20190402 10:40:58.199 - INFO - +------- END KW: String.Split String (0)
20190402 10:40:58.199 - INFO - @{volume_list} = [ ]
20190402 10:40:58.199 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:40:58.199 - INFO - +------ START KW: ${volume} IN [ @{volume_list} ] [ ]
20190402 10:40:58.199 - INFO - +------ END KW: ${volume} IN [ @{volume_list} ] (0)
20190402 10:40:58.199 - INFO - +----- END KW: OpenStack.Delete All Volumes (1442)
20190402 10:40:58.199 - INFO - +----- START KW: OpenStack.Delete All Stacks [ ]
20190402 10:40:58.200 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack stack list ]
20190402 10:40:58.200 - INFO - ${openstack_cmd} = openstack stack list
20190402 10:40:58.200 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:40:58.200 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:40:58.200 - INFO - ${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"
20190402 10:40:58.200 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:40:58.200 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:40:58.201 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:40:58.201 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:40:58.201 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:40:58.201 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:40:58.201 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack list|awk '{print$4}'|grep -v "Name"'.
20190402 10:40:59.548 - INFO - Command exited with return code 0.
20190402 10:40:59.549 - INFO - ${stdout} =
20190402 10:40:59.549 - INFO - ${stderr} =
20190402 10:40:59.549 - INFO - ${rc} = 0
20190402 10:40:59.550 - INFO - +------- END KW: SSHLibrary.Execute Command (1349)
20190402 10:40:59.550 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:40:59.551 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:40:59.552 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:40:59.552 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:40:59.553 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:40:59.553 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:40:59.554 - INFO - +------ END KW: OpenStack.Run OS Command (1354)
20190402 10:40:59.554 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:40:59.555 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:40:59.555 - INFO - ${response} =
20190402 10:40:59.555 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:40:59.556 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:40:59.556 - INFO - @{res_in_list} = [ ]
20190402 10:40:59.557 - INFO - +------- END KW: String.Split String (0)
20190402 10:40:59.557 - INFO - @{stack_list} = [ ]
20190402 10:40:59.557 - INFO - +------ END KW: Utils.Convert Response To List (3)
20190402 10:40:59.557 - INFO - +------ START KW: ${stack} IN [ @{stack_list} ] [ ]
20190402 10:40:59.558 - INFO - +------ END KW: ${stack} IN [ @{stack_list} ] (1)
20190402 10:40:59.558 - INFO - +----- END KW: OpenStack.Delete All Stacks (1359)
20190402 10:40:59.558 - INFO - +---- END KW: OpenStack.Openstack Cleanup All (15357)
20190402 10:40:59.559 - INFO - +---- START KW: Utils.Stx Suite TearDown [ ]
20190402 10:40:59.559 - INFO - +----- START KW: SSHLibrary.Close All Connections [ ]
20190402 10:40:59.562 - INFO - +----- END KW: SSHLibrary.Close All Connections (3)
20190402 10:40:59.562 - INFO - +---- END KW: Utils.Stx Suite TearDown (3)
20190402 10:40:59.562 - INFO - +--- END TEARDOWN: BuiltIn.Run Keywords (15361)
==============================================================================
20190402 10:40:59.565 - INFO - +-- END SUITE: Sanity-Test.Sanity-OpenStack.04-Instance-From-Heat-Template (331887)
==============================================================================
20190402 10:40:59.592 - INFO - +-- START SUITE: Sanity-Test.Sanity-OpenStack.05-Measurements-For-Metric [ ]
==============================================================================
20190402 10:40:59.592 - INFO - +--- START SETUP: Utils.Stx Suite Setup [ ]
20190402 10:40:59.592 - INFO - +---- START KW: Utils.Open Master Controller Connection [ ]
20190402 10:40:59.593 - INFO - +----- START KW: Utils.Connect to Controller Node [ ${CONFIG.credentials.STX_DEPLOY_USER_NAME} | ${CONFIG.credentials.STX_DEPLOY_USER_PSWD} | ${CONFIG.general.IP_UNIT_0_ADDRESS} ]
20190402 10:40:59.593 - INFO - +------ START KW: SSHLibrary.Open Connection [ ${ip_address} prompt=${prompt} | timeout=${timeout} ]
20190402 10:40:59.594 - INFO - ${controller_connection} = 1
20190402 10:40:59.594 - INFO - +------ END KW: SSHLibrary.Open Connection (1)
20190402 10:40:59.594 - INFO - +------ START KW: Utils.Flexible_SSH_Login [ ${user} | ${password} ]
20190402 10:40:59.594 - INFO - +------- START KW: BuiltIn.Get Length [ ${password} ]
20190402 10:40:59.595 - INFO - Length is 10
20190402 10:40:59.595 - INFO - ${pwd_length} = 10
20190402 10:40:59.595 - INFO - +------- END KW: BuiltIn.Get Length (1)
20190402 10:40:59.595 - INFO - +------- START KW: BuiltIn.Run Keyword And Return If [ ${pwd_length} > 0 | SSHLibrary.Login | ${user} | ${password} | delay=${delay} ]
20190402 10:40:59.595 - INFO - +-------- START KW: SSHLibrary.Login [ ${user} | ${password} | delay=${delay} ]
20190402 10:40:59.596 - INFO - Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.
20190402 10:41:00.682 - INFO - Read output: Last login: Tue Apr  2 16:24:10 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$
20190402 10:41:00.683 - INFO - +-------- END KW: SSHLibrary.Login (1088)
20190402 10:41:00.683 - INFO - Returning from the enclosing user keyword.
20190402 10:41:00.684 - INFO - +------- END KW: BuiltIn.Run Keyword And Return If (1089)
20190402 10:41:00.685 - INFO - +------ END KW: Utils.Flexible_SSH_Login (1090)
20190402 10:41:00.685 - INFO - ${master_controller_connection} = 1
20190402 10:41:00.685 - INFO - +----- END KW: Utils.Connect to Controller Node (1092)
20190402 10:41:00.685 - INFO - +----- START KW: BuiltIn.Set Suite Variable [ ${master_controller_connection} ]
20190402 10:41:00.685 - INFO - ${master_controller_connection} = 1
20190402 10:41:00.685 - INFO - +----- END KW: BuiltIn.Set Suite Variable (0)
20190402 10:41:00.686 - INFO - +----- START KW: BuiltIn.Log [ ${master_controller_connection} ]
20190402 10:41:00.686 - INFO - 1
20190402 10:41:00.686 - INFO - +----- END KW: BuiltIn.Log (0)
20190402 10:41:00.686 - INFO - +---- END KW: Utils.Open Master Controller Connection (1094)
20190402 10:41:00.686 - INFO - +---- START KW: Utils.Set Env Vars From Openrc [ ]
20190402 10:41:00.686 - INFO - +----- START KW: Utils.Run Command [ source /etc/platform/openrc | True ]
20190402 10:41:00.687 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:41:00.687 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:41:00.687 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:41:00.688 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:41:00.688 - INFO - &{result_dict} = { stdout= }
20190402 10:41:00.688 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:41:00.688 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:41:00.688 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:00.688 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:41:00.689 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 10:41:00.689 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:41:00.689 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (2)
20190402 10:41:00.689 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 10:41:00.689 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 10:41:00.689 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:41:00.694 - INFO - source /etc/platform/openrc
20190402 10:41:00.694 - INFO - +------ END KW: SSHLibrary.Write (5)
20190402 10:41:00.694 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:41:01.082 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:01.082 - INFO - ${output} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:01.082 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (388)
20190402 10:41:01.082 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:41:01.083 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:41:01.083 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:01.083 - INFO - +------- END KW: String.Get Line (0)
20190402 10:41:01.083 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:41:01.083 - INFO - ${clean_out} =
20190402 10:41:01.083 - INFO - +------- END KW: String.Remove String (0)
20190402 10:41:01.083 - INFO - ${output} =
20190402 10:41:01.083 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 10:41:01.083 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 10:41:01.084 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:41:01.085 - INFO - echo $?
20190402 10:41:01.085 - INFO - +------- END KW: SSHLibrary.Write (1)
20190402 10:41:01.085 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:41:01.085 - INFO - 0
20190402 10:41:01.086 - INFO - ${rc} = 0
20190402 10:41:01.086 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 10:41:01.086 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:41:01.086 - INFO - 0
20190402 10:41:01.086 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 10:41:01.086 - INFO - ${rc} = 0
20190402 10:41:01.086 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 10:41:01.086 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:41:01.087 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:41:01.087 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 10:41:01.087 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:01.087 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:41:01.087 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 10:41:01.087 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:41:01.087 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout:
20190402 10:41:01.087 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 10:41:01.088 - INFO - +----- END KW: Utils.Run Command (402)
20190402 10:41:01.088 - INFO - +---- END KW: Utils.Set Env Vars From Openrc (402)
20190402 10:41:01.088 - INFO - +--- END SETUP: Utils.Stx Suite Setup (1496)
------------------------------------------------------------------------------
20190402 10:41:01.088 - INFO - +--- START TEST: Create Image For Metrics [ ]
------------------------------------------------------------------------------
20190402 10:41:01.088 - INFO - +---- START KW: SSHLibrary.Put File [ %{PYTHONPATH}/${cirros_image} | ${host_image_path}/${cirros_image} ]
20190402 10:41:01.095 - INFO - [chan 1] Opened sftp connection (server version 3)
20190402 10:41:01.101 - INFO - [chan 2] Opened sftp connection (server version 3)
20190402 10:41:01.102 - FAIL - There are no source files matching '/home/mgperezi/duplex/stx-test-suite/cirros-0.4.0-x86_64-disk.qcow2'.
20190402 10:41:01.102 - DEBUG - Traceback (most recent call last):
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1559, in put_file
    destination, mode, newline, scp)
  File "/home/mgperezi/duplex/stx-test-suite/Maria/lib/python2.7/site-packages/SSHLibrary/library.py", line 1619, in _run_command
    raise RuntimeError(e)
20190402 10:41:01.102 - INFO - +---- END KW: SSHLibrary.Put File (14)
------------------------------------------------------------------------------
20190402 10:41:01.102 - INFO - +--- END TEST: Create Image For Metrics (14)
------------------------------------------------------------------------------
20190402 10:41:01.103 - INFO - +--- START TEST: Update Image Name [ ]
------------------------------------------------------------------------------
20190402 10:41:01.103 - INFO - +---- START KW: BuiltIn.Catenate [ openstack image show | ${cirros_image_name} ]
20190402 10:41:01.103 - INFO - ${openstack_cmd} = openstack image show cirros
20190402 10:41:01.103 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:41:01.103 - INFO - +---- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep "created_at" | awk '{print $4}' ]
20190402 10:41:01.104 - INFO - ${cmd} = openstack image show cirros|grep "created_at"|awk '{print $4}'
20190402 10:41:01.104 - INFO - +---- END KW: BuiltIn.Catenate (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:41:01.104 - INFO - +---- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:41:01.104 - INFO - +----- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:41:01.104 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:41:01.104 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:41:01.105 - INFO - +----- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:41:01.105 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image show cirros|grep "created_at"|awk '{print $4}''.
20190402 10:41:02.485 - INFO - Command exited with return code 0.
20190402 10:41:02.486 - INFO - ${stdout} =
20190402 10:41:02.486 - INFO - ${stderr} = Could not find resource cirros
20190402 10:41:02.486 - INFO - ${rc} = 0
20190402 10:41:02.486 - INFO - +----- END KW: SSHLibrary.Execute Command (1381)
20190402 10:41:02.486 - INFO - +----- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:41:02.487 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Could not find resource cirros', u'rc': 0}
20190402 10:41:02.487 - INFO - +----- END KW: BuiltIn.Create Dictionary (1)
20190402 10:41:02.488 - INFO - +----- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:41:02.488 - INFO - +----- END KW: BuiltIn.Run Keyword If (0)
20190402 10:41:02.489 - INFO - &{result} = { stdout= | stderr=Could not find resource cirros | rc=0 }
20190402 10:41:02.489 - INFO - +---- END KW: OpenStack.Run OS Command (1385)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:41:02.490 - INFO - +---- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:02.491 - INFO - ${created_at} =
20190402 10:41:02.491 - INFO - +---- END KW: Collections.Get From Dictionary (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:41:02.491 - INFO - +---- START KW: BuiltIn.Set Variable [ openstack image set ]
20190402 10:41:02.492 - INFO - ${openstack_cmd} = openstack image set
20190402 10:41:02.492 - INFO - +---- END KW: BuiltIn.Set Variable (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:41:02.493 - INFO - +---- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --name ${cirros_image_name_tmp} | ${cirros_image_name} ]
20190402 10:41:02.494 - INFO - ${cmd} = openstack image set --name cirros-tmp cirros
20190402 10:41:02.494 - INFO - +---- END KW: BuiltIn.Catenate (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:41:02.494 - INFO - +---- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:41:02.495 - INFO - +----- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:41:02.496 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:41:02.496 - INFO - +----- END KW: BuiltIn.Set Variable (1)
20190402 10:41:02.496 - INFO - +----- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:41:02.497 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image set --name cirros-tmp cirros'.
20190402 10:41:03.836 - INFO - Command exited with return code 1.
20190402 10:41:03.836 - INFO - ${stdout} =
20190402 10:41:03.836 - INFO - ${stderr} = Could not find resource cirros
20190402 10:41:03.837 - INFO - ${rc} = 1
20190402 10:41:03.837 - INFO - +----- END KW: SSHLibrary.Execute Command (1341)
20190402 10:41:03.837 - INFO - +----- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:41:03.837 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Could not find resource cirros', u'rc': 1}
20190402 10:41:03.837 - INFO - +----- END KW: BuiltIn.Create Dictionary (0)
20190402 10:41:03.838 - INFO - +----- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:41:03.838 - INFO - +------ START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:41:03.838 - FAIL - Could not find resource cirros
20190402 10:41:03.838 - DEBUG - Traceback (most recent call last):
  None
20190402 10:41:03.838 - INFO - +------ END KW: BuiltIn.Fail (0)
20190402 10:41:03.838 - INFO - +----- END KW: BuiltIn.Run Keyword If (0)
20190402 10:41:03.839 - INFO - +---- END KW: OpenStack.Run OS Command (1344)
------------------------------------------------------------------------------
20190402 10:41:03.839 - INFO - +--- END TEST: Update Image Name (2736)
------------------------------------------------------------------------------
20190402 10:41:03.839 - INFO - +--- START TEST: Update Image Disk Ram Size [ ]
------------------------------------------------------------------------------
20190402 10:41:03.840 - INFO - +---- START KW: BuiltIn.Catenate [ openstack image show | ${cirros_image_name} ]
20190402 10:41:03.840 - INFO - ${openstack_cmd} = openstack image show cirros
20190402 10:41:03.840 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:41:03.840 - INFO - +---- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | grep "updated_at" | awk '{print $4}' ]
20190402 10:41:03.840 - INFO - ${cmd} = openstack image show cirros|grep "updated_at"|awk '{print $4}'
20190402 10:41:03.841 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:41:03.841 - INFO - +---- START KW: OpenStack.Run OS Command [ ${cmd} ]
20190402 10:41:03.841 - INFO - +----- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:41:03.841 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:41:03.841 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:41:03.842 - INFO - +----- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:41:03.842 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image show cirros|grep "updated_at"|awk '{print $4}''.
20190402 10:41:05.122 - INFO - Command exited with return code 0.
20190402 10:41:05.122 - INFO - ${stdout} =
20190402 10:41:05.122 - INFO - ${stderr} = Could not find resource cirros
20190402 10:41:05.123 - INFO - ${rc} = 0
20190402 10:41:05.123 - INFO - +----- END KW: SSHLibrary.Execute Command (1282)
20190402 10:41:05.123 - INFO - +----- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:41:05.124 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Could not find resource cirros', u'rc': 0}
20190402 10:41:05.124 - INFO - +----- END KW: BuiltIn.Create Dictionary (1)
20190402 10:41:05.124 - INFO - +----- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:41:05.124 - INFO - +----- END KW: BuiltIn.Run Keyword If (0)
20190402 10:41:05.125 - INFO - &{result} = { stdout= | stderr=Could not find resource cirros | rc=0 }
20190402 10:41:05.125 - INFO - +---- END KW: OpenStack.Run OS Command (1284)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:41:05.125 - INFO - +---- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:05.125 - INFO - ${updated_at} =
20190402 10:41:05.125 - INFO - +---- END KW: Collections.Get From Dictionary (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:41:05.125 - INFO - +---- START KW: BuiltIn.Set Variable [ openstack image set ]
20190402 10:41:05.126 - INFO - ${openstack_cmd} = openstack image set
20190402 10:41:05.126 - INFO - +---- END KW: BuiltIn.Set Variable (1)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:41:05.126 - INFO - +---- START KW: BuiltIn.Catenate [ ${openstack_cmd} | --min-disk ${image_disk_size} | ${cirros_image_name} ]
20190402 10:41:05.126 - INFO - ${cmd} = openstack image set --min-disk 10 cirros
20190402 10:41:05.126 - INFO - +---- END KW: BuiltIn.Catenate (0)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:41:05.126 - INFO - +---- START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:41:05.127 - INFO - +----- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:41:05.127 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:41:05.127 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:41:05.127 - INFO - +----- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:41:05.128 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image set --min-disk 10 cirros'.
20190402 10:41:06.422 - INFO - Command exited with return code 1.
20190402 10:41:06.423 - INFO - ${stdout} =
20190402 10:41:06.423 - INFO - ${stderr} = Could not find resource cirros
20190402 10:41:06.423 - INFO - ${rc} = 1
20190402 10:41:06.424 - INFO - +----- END KW: SSHLibrary.Execute Command (1296)
20190402 10:41:06.424 - INFO - +----- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:41:06.426 - INFO - ${res} = {u'stdout': u'', u'stderr': u'Could not find resource cirros', u'rc': 1}
20190402 10:41:06.426 - INFO - +----- END KW: BuiltIn.Create Dictionary (2)
20190402 10:41:06.426 - INFO - +----- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:41:06.428 - INFO - +------ START KW: BuiltIn.Fail [ ${stderr} ]
20190402 10:41:06.428 - FAIL - Could not find resource cirros
20190402 10:41:06.428 - DEBUG - Traceback (most recent call last):
  None
20190402 10:41:06.429 - INFO - +------ END KW: BuiltIn.Fail (0)
20190402 10:41:06.429 - INFO - +----- END KW: BuiltIn.Run Keyword If (3)
20190402 10:41:06.429 - INFO - +---- END KW: OpenStack.Run OS Command (1303)
------------------------------------------------------------------------------
20190402 10:41:06.430 - INFO - +--- END TEST: Update Image Disk Ram Size (2590)
------------------------------------------------------------------------------
20190402 10:41:06.431 - INFO - +--- START TEARDOWN: BuiltIn.Run Keywords [ OpenStack.Openstack Cleanup All | Utils.Stx Suite TearDown ]
20190402 10:41:06.432 - INFO - +---- START KW: OpenStack.Openstack Cleanup All [ ]
20190402 10:41:06.432 - INFO - +----- START KW: OpenStack.Delete All Instances [ ]
20190402 10:41:06.433 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack server list ]
20190402 10:41:06.433 - INFO - ${openstack_cmd} = openstack server list
20190402 10:41:06.433 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:41:06.434 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:41:06.434 - INFO - ${cmd} = openstack server list|awk '{print$4}'|grep -v "Name"
20190402 10:41:06.434 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:41:06.435 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:41:06.436 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:41:06.436 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:41:06.436 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:41:06.437 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:41:06.437 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack server list|awk '{print$4}'|grep -v "Name"'.
20190402 10:41:08.019 - INFO - Command exited with return code 0.
20190402 10:41:08.020 - INFO - ${stdout} =
20190402 10:41:08.021 - INFO - ${stderr} =
20190402 10:41:08.021 - INFO - ${rc} = 0
20190402 10:41:08.021 - INFO - +------- END KW: SSHLibrary.Execute Command (1584)
20190402 10:41:08.021 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:41:08.023 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:41:08.023 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:41:08.023 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:41:08.024 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:08.025 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:41:08.025 - INFO - +------ END KW: OpenStack.Run OS Command (1590)
20190402 10:41:08.026 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:41:08.026 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:08.027 - INFO - ${response} =
20190402 10:41:08.027 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:41:08.028 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:41:08.028 - INFO - @{res_in_list} = [ ]
20190402 10:41:08.028 - INFO - +------- END KW: String.Split String (1)
20190402 10:41:08.029 - INFO - @{vm_list} = [ ]
20190402 10:41:08.029 - INFO - +------ END KW: Utils.Convert Response To List (3)
20190402 10:41:08.029 - INFO - +------ START KW: ${vm} IN [ @{vm_list} ] [ ]
20190402 10:41:08.029 - INFO - +------ END KW: ${vm} IN [ @{vm_list} ] (0)
20190402 10:41:08.030 - INFO - +----- END KW: OpenStack.Delete All Instances (1597)
20190402 10:41:08.030 - INFO - +----- START KW: OpenStack.Delete All Images [ ]
20190402 10:41:08.030 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack image list ]
20190402 10:41:08.031 - INFO - ${openstack_cmd} = openstack image list
20190402 10:41:08.031 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:41:08.031 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "Cirros" ]
20190402 10:41:08.032 - INFO - ${cmd} = openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"
20190402 10:41:08.032 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:41:08.032 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:41:08.033 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:41:08.034 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:41:08.034 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:41:08.034 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:41:08.035 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack image list|awk '{print$4}'|grep -v "Name"|grep -v "Cirros"'.
20190402 10:41:09.372 - INFO - Command exited with return code 0.
20190402 10:41:09.372 - INFO - ${stdout} =
20190402 10:41:09.372 - INFO - ${stderr} =
20190402 10:41:09.372 - INFO - ${rc} = 0
20190402 10:41:09.372 - INFO - +------- END KW: SSHLibrary.Execute Command (1338)
20190402 10:41:09.372 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:41:09.374 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:41:09.374 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:41:09.374 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:41:09.374 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:41:09.375 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:41:09.375 - INFO - +------ END KW: OpenStack.Run OS Command (1343)
20190402 10:41:09.375 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:41:09.375 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:09.375 - INFO - ${response} =
20190402 10:41:09.375 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:41:09.375 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:41:09.376 - INFO - @{res_in_list} = [ ]
20190402 10:41:09.376 - INFO - +------- END KW: String.Split String (1)
20190402 10:41:09.376 - INFO - @{image_list} = [ ]
20190402 10:41:09.376 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:41:09.376 - INFO - +------ START KW: ${image} IN [ @{image_list} ] [ ]
20190402 10:41:09.376 - INFO - +------ END KW: ${image} IN [ @{image_list} ] (0)
20190402 10:41:09.376 - INFO - +----- END KW: OpenStack.Delete All Images (1346)
20190402 10:41:09.376 - INFO - +----- START KW: OpenStack.Delete All Flavors [ ]
20190402 10:41:09.376 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack flavor list ]
20190402 10:41:09.377 - INFO - ${openstack_cmd} = openstack flavor list
20190402 10:41:09.377 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:41:09.377 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "m1" ]
20190402 10:41:09.377 - INFO - ${cmd} = openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"
20190402 10:41:09.377 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:41:09.377 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:41:09.377 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:41:09.378 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:41:09.378 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:41:09.378 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:41:09.378 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack flavor list|awk '{print$4}'|grep -v "Name"|grep -v "m1"'.
20190402 10:41:10.710 - INFO - Command exited with return code 0.
20190402 10:41:10.710 - INFO - ${stdout} =
20190402 10:41:10.710 - INFO - ${stderr} =
20190402 10:41:10.711 - INFO - ${rc} = 0
20190402 10:41:10.711 - INFO - +------- END KW: SSHLibrary.Execute Command (1333)
20190402 10:41:10.711 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:41:10.711 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:41:10.712 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:41:10.712 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:41:10.712 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:41:10.712 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:41:10.712 - INFO - +------ END KW: OpenStack.Run OS Command (1335)
20190402 10:41:10.712 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:41:10.713 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:10.713 - INFO - ${response} =
20190402 10:41:10.713 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:41:10.713 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:41:10.713 - INFO - @{res_in_list} = [ ]
20190402 10:41:10.713 - INFO - +------- END KW: String.Split String (0)
20190402 10:41:10.713 - INFO - @{flavor_list} = [ ]
20190402 10:41:10.713 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:41:10.713 - INFO - +------ START KW: ${flavor} IN [ @{flavor_list} ] [ ]
20190402 10:41:10.714 - INFO - +------ END KW: ${flavor} IN [ @{flavor_list} ] (1)
20190402 10:41:10.714 - INFO - +----- END KW: OpenStack.Delete All Flavors (1338)
20190402 10:41:10.714 - INFO - +----- START KW: OpenStack.Delete All Networks [ ]
20190402 10:41:10.714 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack network list ]
20190402 10:41:10.714 - INFO - ${openstack_cmd} = openstack network list
20190402 10:41:10.714 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:41:10.714 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" | grep -v "private" | grep -v "public" | grep -v "external" | grep -v "internal" ]
20190402 10:41:10.715 - INFO - ${cmd} = openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"
20190402 10:41:10.715 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:41:10.715 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:41:10.715 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:41:10.715 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:41:10.715 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:41:10.715 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:41:10.716 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack network list|awk '{print$4}'|grep -v "Name"|grep -v "private"|grep -v "public"|grep -v "external"|grep -v "internal"'.
20190402 10:41:12.047 - INFO - Command exited with return code 0.
20190402 10:41:12.048 - INFO - ${stdout} =
20190402 10:41:12.048 - INFO - ${stderr} =
20190402 10:41:12.048 - INFO - ${rc} = 0
20190402 10:41:12.048 - INFO - +------- END KW: SSHLibrary.Execute Command (1333)
20190402 10:41:12.048 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:41:12.049 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:41:12.050 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:41:12.050 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:41:12.050 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:41:12.051 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:41:12.051 - INFO - +------ END KW: OpenStack.Run OS Command (1336)
20190402 10:41:12.051 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:41:12.052 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:12.053 - INFO - ${response} =
20190402 10:41:12.053 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:41:12.053 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:41:12.054 - INFO - @{res_in_list} = [ ]
20190402 10:41:12.054 - INFO - +------- END KW: String.Split String (1)
20190402 10:41:12.054 - INFO - @{network_list} = [ ]
20190402 10:41:12.054 - INFO - +------ END KW: Utils.Convert Response To List (3)
20190402 10:41:12.054 - INFO - +------ START KW: ${network} IN [ @{network_list} ] [ ]
20190402 10:41:12.054 - INFO - +------ END KW: ${network} IN [ @{network_list} ] (0)
20190402 10:41:12.054 - INFO - +----- END KW: OpenStack.Delete All Networks (1340)
20190402 10:41:12.054 - INFO - +----- START KW: OpenStack.Delete All KeyPairs [ ]
20190402 10:41:12.055 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack keypair list ]
20190402 10:41:12.055 - INFO - ${openstack_cmd} = openstack keypair list
20190402 10:41:12.055 - INFO - +------ END KW: BuiltIn.Set Variable (1)
20190402 10:41:12.055 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "Name" ]
20190402 10:41:12.055 - INFO - ${cmd} = openstack keypair list|awk '{print$2}'|grep -v "Name"
20190402 10:41:12.055 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:41:12.055 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:41:12.056 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:41:12.056 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:41:12.056 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:41:12.056 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:41:12.056 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack keypair list|awk '{print$2}'|grep -v "Name"'.
20190402 10:41:13.445 - INFO - Command exited with return code 0.
20190402 10:41:13.445 - INFO - ${stdout} =
20190402 10:41:13.446 - INFO - ${stderr} =
20190402 10:41:13.446 - INFO - ${rc} = 0
20190402 10:41:13.446 - INFO - +------- END KW: SSHLibrary.Execute Command (1390)
20190402 10:41:13.447 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:41:13.449 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:41:13.449 - INFO - +------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:41:13.450 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:41:13.450 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:41:13.450 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:41:13.451 - INFO - +------ END KW: OpenStack.Run OS Command (1395)
20190402 10:41:13.451 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:41:13.451 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:13.451 - INFO - ${response} =
20190402 10:41:13.451 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:41:13.451 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:41:13.451 - INFO - @{res_in_list} = [ ]
20190402 10:41:13.451 - INFO - +------- END KW: String.Split String (0)
20190402 10:41:13.452 - INFO - @{key_list} = [ ]
20190402 10:41:13.452 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:41:13.452 - INFO - +------ START KW: ${key} IN [ @{key_list} ] [ ]
20190402 10:41:13.452 - INFO - +------ END KW: ${key} IN [ @{key_list} ] (0)
20190402 10:41:13.452 - INFO - +----- END KW: OpenStack.Delete All KeyPairs (1398)
20190402 10:41:13.452 - INFO - +----- START KW: OpenStack.Delete All Snapshots [ ]
20190402 10:41:13.452 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume snapshot list ]
20190402 10:41:13.452 - INFO - ${openstack_cmd} = openstack volume snapshot list
20190402 10:41:13.452 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:41:13.452 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:41:13.453 - INFO - ${cmd} = openstack volume snapshot list|awk '{print$4}'|grep -v "Name"
20190402 10:41:13.453 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:41:13.453 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:41:13.453 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:41:13.453 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:41:13.453 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:41:13.453 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:41:13.454 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume snapshot list|awk '{print$4}'|grep -v "Name"'.
20190402 10:41:14.784 - INFO - Command exited with return code 0.
20190402 10:41:14.784 - INFO - ${stdout} =
20190402 10:41:14.784 - INFO - ${stderr} =
20190402 10:41:14.784 - INFO - ${rc} = 0
20190402 10:41:14.784 - INFO - +------- END KW: SSHLibrary.Execute Command (1331)
20190402 10:41:14.785 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:41:14.785 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:41:14.785 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:41:14.785 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:41:14.785 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:41:14.786 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:41:14.786 - INFO - +------ END KW: OpenStack.Run OS Command (1333)
20190402 10:41:14.786 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:41:14.786 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:14.786 - INFO - ${response} =
20190402 10:41:14.786 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:41:14.787 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:41:14.787 - INFO - @{res_in_list} = [ ]
20190402 10:41:14.787 - INFO - +------- END KW: String.Split String (0)
20190402 10:41:14.787 - INFO - @{snapshot_list} = [ ]
20190402 10:41:14.787 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:41:14.787 - INFO - +------ START KW: ${snapshot} IN [ @{snapshot_list} ] [ ]
20190402 10:41:14.787 - INFO - +------ END KW: ${snapshot} IN [ @{snapshot_list} ] (0)
20190402 10:41:14.787 - INFO - +----- END KW: OpenStack.Delete All Snapshots (1335)
20190402 10:41:14.787 - INFO - +----- START KW: OpenStack.Delete All Volumes [ ]
20190402 10:41:14.788 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack volume list ]
20190402 10:41:14.788 - INFO - ${openstack_cmd} = openstack volume list
20190402 10:41:14.788 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:41:14.788 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$2}' | grep -v "ID" ]
20190402 10:41:14.789 - INFO - ${cmd} = openstack volume list|awk '{print$2}'|grep -v "ID"
20190402 10:41:14.789 - INFO - +------ END KW: BuiltIn.Catenate (1)
20190402 10:41:14.789 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:41:14.789 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:41:14.790 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:41:14.790 - INFO - +------- END KW: BuiltIn.Set Variable (1)
20190402 10:41:14.790 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:41:14.790 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack volume list|awk '{print$2}'|grep -v "ID"'.
20190402 10:41:16.201 - INFO - Command exited with return code 0.
20190402 10:41:16.201 - INFO - ${stdout} =
20190402 10:41:16.201 - INFO - ${stderr} =
20190402 10:41:16.201 - INFO - ${rc} = 0
20190402 10:41:16.201 - INFO - +------- END KW: SSHLibrary.Execute Command (1411)
20190402 10:41:16.201 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:41:16.202 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:41:16.202 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:41:16.202 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:41:16.202 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:41:16.203 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:41:16.203 - INFO - +------ END KW: OpenStack.Run OS Command (1414)
20190402 10:41:16.203 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:41:16.203 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:16.203 - INFO - ${response} =
20190402 10:41:16.203 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:41:16.204 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:41:16.204 - INFO - @{res_in_list} = [ ]
20190402 10:41:16.204 - INFO - +------- END KW: String.Split String (0)
20190402 10:41:16.204 - INFO - @{volume_list} = [ ]
20190402 10:41:16.204 - INFO - +------ END KW: Utils.Convert Response To List (1)
20190402 10:41:16.204 - INFO - +------ START KW: ${volume} IN [ @{volume_list} ] [ ]
20190402 10:41:16.204 - INFO - +------ END KW: ${volume} IN [ @{volume_list} ] (0)
20190402 10:41:16.204 - INFO - +----- END KW: OpenStack.Delete All Volumes (1417)
20190402 10:41:16.204 - INFO - +----- START KW: OpenStack.Delete All Stacks [ ]
20190402 10:41:16.205 - INFO - +------ START KW: BuiltIn.Set Variable [ openstack stack list ]
20190402 10:41:16.205 - INFO - ${openstack_cmd} = openstack stack list
20190402 10:41:16.205 - INFO - +------ END KW: BuiltIn.Set Variable (0)
20190402 10:41:16.205 - INFO - +------ START KW: BuiltIn.Catenate [ SEPARATOR=| | ${openstack_cmd} | awk '{print$4}' | grep -v "Name" ]
20190402 10:41:16.205 - INFO - ${cmd} = openstack stack list|awk '{print$4}'|grep -v "Name"
20190402 10:41:16.205 - INFO - +------ END KW: BuiltIn.Catenate (0)
20190402 10:41:16.205 - INFO - +------ START KW: OpenStack.Run OS Command [ ${cmd} | True ]
20190402 10:41:16.206 - INFO - +------- START KW: BuiltIn.Set Variable [ export OS_CLOUD=openstack_helm ]
20190402 10:41:16.206 - INFO - ${load_os_token} = export OS_CLOUD=openstack_helm
20190402 10:41:16.206 - INFO - +------- END KW: BuiltIn.Set Variable (0)
20190402 10:41:16.206 - INFO - +------- START KW: SSHLibrary.Execute Command [ ${load_os_token} && ${cmd} | return_stdout=True | return_stderr=True | return_rc=True | timeout=${timeout} ]
20190402 10:41:16.207 - INFO - Executing command 'export OS_CLOUD=openstack_helm && openstack stack list|awk '{print$4}'|grep -v "Name"'.
20190402 10:41:17.518 - INFO - Command exited with return code 0.
20190402 10:41:17.518 - INFO - ${stdout} =
20190402 10:41:17.518 - INFO - ${stderr} =
20190402 10:41:17.518 - INFO - ${rc} = 0
20190402 10:41:17.518 - INFO - +------- END KW: SSHLibrary.Execute Command (1312)
20190402 10:41:17.519 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${stdout} | stderr=${stderr} | rc=${rc} ]
20190402 10:41:17.520 - INFO - ${res} = {u'stdout': u'', u'stderr': u'', u'rc': 0}
20190402 10:41:17.520 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:41:17.520 - INFO - +------- START KW: BuiltIn.Run Keyword If [ ${rc} != 0 and ${fail_if_error} == True | FAIL | ${stderr} ]
20190402 10:41:17.521 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:17.522 - INFO - &{result} = { stdout= | stderr= | rc=0 }
20190402 10:41:17.522 - INFO - +------ END KW: OpenStack.Run OS Command (1317)
20190402 10:41:17.522 - INFO - +------ START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:41:17.523 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:17.523 - INFO - ${response} =
20190402 10:41:17.523 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:41:17.523 - INFO - +------- START KW: String.Split String [ ${response} ]
20190402 10:41:17.524 - INFO - @{res_in_list} = [ ]
20190402 10:41:17.524 - INFO - +------- END KW: String.Split String (1)
20190402 10:41:17.524 - INFO - @{stack_list} = [ ]
20190402 10:41:17.524 - INFO - +------ END KW: Utils.Convert Response To List (2)
20190402 10:41:17.524 - INFO - +------ START KW: ${stack} IN [ @{stack_list} ] [ ]
20190402 10:41:17.524 - INFO - +------ END KW: ${stack} IN [ @{stack_list} ] (0)
20190402 10:41:17.524 - INFO - +----- END KW: OpenStack.Delete All Stacks (1320)
20190402 10:41:17.524 - INFO - +---- END KW: OpenStack.Openstack Cleanup All (11092)
20190402 10:41:17.524 - INFO - +---- START KW: Utils.Stx Suite TearDown [ ]
20190402 10:41:17.525 - INFO - +----- START KW: SSHLibrary.Close All Connections [ ]
20190402 10:41:17.557 - INFO - +----- END KW: SSHLibrary.Close All Connections (32)
20190402 10:41:17.557 - INFO - +---- END KW: Utils.Stx Suite TearDown (33)
20190402 10:41:17.558 - INFO - +--- END TEARDOWN: BuiltIn.Run Keywords (11127)
==============================================================================
20190402 10:41:17.561 - INFO - +-- END SUITE: Sanity-Test.Sanity-OpenStack.05-Measurements-For-Metric (17993)
==============================================================================
20190402 10:41:17.581 - INFO - +- END SUITE: Sanity-Test.Sanity-OpenStack (1142247)
==============================================================================
20190402 10:41:17.582 - INFO - +- START SUITE: Sanity-Test.Sanity-Platform [ ]
==============================================================================
20190402 10:41:17.594 - INFO - +-- START SUITE: Sanity-Test.Sanity-Platform.02-OpenStack-Pod-Healthy [ ]
==============================================================================
20190402 10:41:17.594 - INFO - +--- START SETUP: Utils.Stx Suite Setup [ ]
20190402 10:41:17.594 - INFO - +---- START KW: Utils.Open Master Controller Connection [ ]
20190402 10:41:17.595 - INFO - +----- START KW: Utils.Connect to Controller Node [ ${CONFIG.credentials.STX_DEPLOY_USER_NAME} | ${CONFIG.credentials.STX_DEPLOY_USER_PSWD} | ${CONFIG.general.IP_UNIT_0_ADDRESS} ]
20190402 10:41:17.595 - INFO - +------ START KW: SSHLibrary.Open Connection [ ${ip_address} prompt=${prompt} | timeout=${timeout} ]
20190402 10:41:17.595 - INFO - ${controller_connection} = 1
20190402 10:41:17.595 - INFO - +------ END KW: SSHLibrary.Open Connection (0)
20190402 10:41:17.596 - INFO - +------ START KW: Utils.Flexible_SSH_Login [ ${user} | ${password} ]
20190402 10:41:17.596 - INFO - +------- START KW: BuiltIn.Get Length [ ${password} ]
20190402 10:41:17.596 - INFO - Length is 10
20190402 10:41:17.596 - INFO - ${pwd_length} = 10
20190402 10:41:17.596 - INFO - +------- END KW: BuiltIn.Get Length (0)
20190402 10:41:17.596 - INFO - +------- START KW: BuiltIn.Run Keyword And Return If [ ${pwd_length} > 0 | SSHLibrary.Login | ${user} | ${password} | delay=${delay} ]
20190402 10:41:17.596 - INFO - +-------- START KW: SSHLibrary.Login [ ${user} | ${password} | delay=${delay} ]
20190402 10:41:17.597 - INFO - Logging into '192.168.200.76 prompt=$:22' as 'wrsroot'.
20190402 10:41:18.683 - INFO - Read output: Last login: Tue Apr  2 16:29:42 2019 from 192.168.200.60
/etc/motd.d/00-header:

[H[2J
WARNING: Unauthorized access to this system is forbidden and will be
prosecuted by law. By accessing this system, you agree that your
actions may be monitored if unauthorized usage is suspected.

controller-0:~$
20190402 10:41:18.683 - INFO - +-------- END KW: SSHLibrary.Login (1087)
20190402 10:41:18.683 - INFO - Returning from the enclosing user keyword.
20190402 10:41:18.683 - INFO - +------- END KW: BuiltIn.Run Keyword And Return If (1087)
20190402 10:41:18.684 - INFO - +------ END KW: Utils.Flexible_SSH_Login (1088)
20190402 10:41:18.684 - INFO - ${master_controller_connection} = 1
20190402 10:41:18.684 - INFO - +----- END KW: Utils.Connect to Controller Node (1089)
20190402 10:41:18.684 - INFO - +----- START KW: BuiltIn.Set Suite Variable [ ${master_controller_connection} ]
20190402 10:41:18.685 - INFO - ${master_controller_connection} = 1
20190402 10:41:18.685 - INFO - +----- END KW: BuiltIn.Set Suite Variable (1)
20190402 10:41:18.685 - INFO - +----- START KW: BuiltIn.Log [ ${master_controller_connection} ]
20190402 10:41:18.685 - INFO - 1
20190402 10:41:18.685 - INFO - +----- END KW: BuiltIn.Log (0)
20190402 10:41:18.685 - INFO - +---- END KW: Utils.Open Master Controller Connection (1091)
20190402 10:41:18.686 - INFO - +---- START KW: Utils.Set Env Vars From Openrc [ ]
20190402 10:41:18.686 - INFO - +----- START KW: Utils.Run Command [ source /etc/platform/openrc | True ]
20190402 10:41:18.687 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:41:18.687 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:41:18.687 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:41:18.688 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:41:18.688 - INFO - &{result_dict} = { stdout= }
20190402 10:41:18.688 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:41:18.689 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:41:18.689 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:18.689 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:41:18.690 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:18.690 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:41:18.690 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (3)
20190402 10:41:18.690 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 10:41:18.690 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 10:41:18.691 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:41:18.698 - INFO - source /etc/platform/openrc
20190402 10:41:18.699 - INFO - +------ END KW: SSHLibrary.Write (9)
20190402 10:41:18.699 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:41:19.137 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:19.137 - INFO - ${output} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:19.137 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (438)
20190402 10:41:19.138 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:41:19.138 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:41:19.138 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:19.138 - INFO - +------- END KW: String.Get Line (0)
20190402 10:41:19.138 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:41:19.139 - INFO - ${clean_out} =
20190402 10:41:19.139 - INFO - +------- END KW: String.Remove String (1)
20190402 10:41:19.139 - INFO - ${output} =
20190402 10:41:19.139 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 10:41:19.139 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 10:41:19.139 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:41:19.141 - INFO - echo $?
20190402 10:41:19.141 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 10:41:19.141 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:41:19.141 - INFO - 0
20190402 10:41:19.141 - INFO - ${rc} = 0
20190402 10:41:19.141 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 10:41:19.142 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:41:19.142 - INFO - 0
20190402 10:41:19.142 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 10:41:19.142 - INFO - ${rc} = 0
20190402 10:41:19.142 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 10:41:19.142 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:41:19.142 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:41:19.143 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 10:41:19.143 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:19.143 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:41:19.143 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 10:41:19.143 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:41:19.143 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout:
20190402 10:41:19.143 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 10:41:19.144 - INFO - +----- END KW: Utils.Run Command (458)
20190402 10:41:19.144 - INFO - +---- END KW: Utils.Set Env Vars From Openrc (458)
20190402 10:41:19.144 - INFO - +--- END SETUP: Utils.Stx Suite Setup (1550)
------------------------------------------------------------------------------
20190402 10:41:19.144 - INFO - +--- START TEST: OpenStack PODs Healthy [ ]
------------------------------------------------------------------------------
20190402 10:41:19.144 - INFO - +---- START KW: Utils.Check System Application Status [ stx-openstack | applied ]
20190402 10:41:19.144 - INFO - +----- START KW: BuiltIn.Catenate [ SEPARATOR=| | system application-list | grep ${application} | awk '{print $8}' ]
20190402 10:41:19.145 - INFO - ${cmd} = system application-list|grep stx-openstack|awk '{print $8}'
20190402 10:41:19.145 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 10:41:19.145 - INFO - +----- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:41:19.145 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:41:19.145 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:41:19.146 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:41:19.146 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:41:19.146 - INFO - &{result_dict} = { stdout= }
20190402 10:41:19.146 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:41:19.146 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:41:19.146 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:19.147 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:41:19.147 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:19.147 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:41:19.147 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (1)
20190402 10:41:19.147 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 10:41:19.147 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:19.148 - INFO - +------ END KW: SSHLibrary.Read (1)
20190402 10:41:19.148 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:41:19.149 - INFO - system application-list|grep stx-opens tack|awk '{print $8}'
20190402 10:41:19.149 - INFO - +------ END KW: SSHLibrary.Write (1)
20190402 10:41:19.149 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:41:20.322 - INFO - applied
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:20.323 - INFO - ${output} = applied
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:20.323 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (1174)
20190402 10:41:20.323 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:41:20.323 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:41:20.323 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:20.324 - INFO - +------- END KW: String.Get Line (1)
20190402 10:41:20.324 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:41:20.324 - INFO - ${clean_out} = applied
20190402 10:41:20.324 - INFO - +------- END KW: String.Remove String (0)
20190402 10:41:20.324 - INFO - ${output} = applied
20190402 10:41:20.324 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 10:41:20.324 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 10:41:20.324 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:41:20.326 - INFO - echo $?
20190402 10:41:20.326 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 10:41:20.326 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:41:20.326 - INFO - 0
20190402 10:41:20.327 - INFO - ${rc} = 0
20190402 10:41:20.327 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 10:41:20.327 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:41:20.327 - INFO - 0
20190402 10:41:20.327 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 10:41:20.327 - INFO - ${rc} = 0
20190402 10:41:20.327 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 10:41:20.327 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:41:20.327 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:41:20.328 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 10:41:20.328 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:20.328 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:41:20.328 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 10:41:20.328 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:41:20.328 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applied
20190402 10:41:20.328 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 10:41:20.329 - INFO - &{result} = { stdout=applied | stderr= | rc=0 }
20190402 10:41:20.329 - INFO - +----- END KW: Utils.Run Command (1184)
20190402 10:41:20.329 - INFO - +----- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:20.329 - INFO - ${value} = applied
20190402 10:41:20.329 - INFO - +----- END KW: Collections.Get From Dictionary (0)
20190402 10:41:20.329 - INFO - +----- START KW: BuiltIn.Run Keyword If [ '${value}' == 'apply-failed' | System Application Apply | ${application} | ELSE | Should Be Equal As Strings | ${value} | ${status} ]
20190402 10:41:20.329 - INFO - +------ START KW: BuiltIn.Should Be Equal As Strings [ ${value} | ${status} ]
20190402 10:41:20.330 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:41:20.330 - INFO - +------ END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:41:20.330 - INFO - +----- END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:20.330 - INFO - +---- END KW: Utils.Check System Application Status (1186)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:41:20.330 - INFO - +---- START KW: Utils.Check PODs Health [ ]
20190402 10:41:20.330 - INFO - +----- START KW: BuiltIn.Set Variable [ kubectl get pods --all-namespaces -o wide ]
20190402 10:41:20.330 - INFO - ${kubectl_cmd} = kubectl get pods --all-namespaces -o wide
20190402 10:41:20.330 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:41:20.330 - INFO - +----- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep -v NAMESPACE | grep -v Running | grep -v Completed ]
20190402 10:41:20.331 - INFO - ${cmd} = kubectl get pods --all-namespaces -o wide|grep -v NAMESPACE|grep -v Running|grep -v Completed
20190402 10:41:20.331 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 10:41:20.331 - INFO - +----- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:41:20.331 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:41:20.331 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:41:20.331 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:41:20.332 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:41:20.332 - INFO - &{result_dict} = { stdout= }
20190402 10:41:20.332 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:41:20.332 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:41:20.332 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:20.333 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:41:20.333 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:20.333 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:41:20.333 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (2)
20190402 10:41:20.333 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 10:41:20.333 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:20.333 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 10:41:20.333 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:41:20.346 - INFO - kubectl get pods --all-namespaces -o w ide|grep -v NAMESPACE|grep -v Running|grep -v Completed
20190402 10:41:20.346 - INFO - +------ END KW: SSHLibrary.Write (13)
20190402 10:41:20.346 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:41:21.046 - INFO - default       testpod                                                       0/1     ImagePullBackOff   0          4h22m   172.16.0.6     controller-0   <none>
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:21.046 - INFO - ${output} = default       testpod                                                       0/1     ImagePullBackOff   0          4h22m   172.16.0.6     controller-0   <none>
[wrsroot@controller-0 ~(keystone_admin)]...
20190402 10:41:21.046 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (700)
20190402 10:41:21.046 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:41:21.047 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:41:21.047 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:21.047 - INFO - +------- END KW: String.Get Line (0)
20190402 10:41:21.047 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:41:21.047 - INFO - ${clean_out} = default       testpod                                                       0/1     ImagePullBackOff   0          4h22m   172.16.0.6     controller-0   <none>
20190402 10:41:21.047 - INFO - +------- END KW: String.Remove String (0)
20190402 10:41:21.047 - INFO - ${output} = default       testpod                                                       0/1     ImagePullBackOff   0          4h22m   172.16.0.6     controller-0   <none>
20190402 10:41:21.048 - INFO - +------ END KW: Utils.Remove Prompt Line (2)
20190402 10:41:21.048 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 10:41:21.048 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:41:21.049 - INFO - echo $?
20190402 10:41:21.049 - INFO - +------- END KW: SSHLibrary.Write (1)
20190402 10:41:21.049 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:41:21.050 - INFO - 0
20190402 10:41:21.050 - INFO - ${rc} = 0
20190402 10:41:21.050 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 10:41:21.050 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:41:21.050 - INFO - 0
20190402 10:41:21.050 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 10:41:21.050 - INFO - ${rc} = 0
20190402 10:41:21.050 - INFO - +------ END KW: Utils.Get Return Code (2)
20190402 10:41:21.050 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:41:21.051 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:41:21.051 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:21.051 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:21.051 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:41:21.051 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 10:41:21.051 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:41:21.051 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: default       testpod                                                       0/1     ImagePullBackOff   0          4h22m   172.16.0.6     controller-0   <none>
20190402 10:41:21.052 - INFO - +------ END KW: Collections.Log Dictionary (1)
20190402 10:41:21.052 - INFO - &{result} = { stdout=default       testpod                                                       0/1     ImagePullBackOff   0          4h22m   172.16.0.6     controller-0   <none> | stderr= | rc=0 }
20190402 10:41:21.052 - INFO - +----- END KW: Utils.Run Command (721)
20190402 10:41:21.052 - INFO - +----- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:21.052 - INFO - ${value} = default       testpod                                                       0/1     ImagePullBackOff   0          4h22m   172.16.0.6     controller-0   <none>
20190402 10:41:21.052 - INFO - +----- END KW: Collections.Get From Dictionary (0)
20190402 10:41:21.052 - INFO - +----- START KW: BuiltIn.Should Be Empty [ ${value} ]
20190402 10:41:21.052 - INFO - Length is 158
20190402 10:41:21.053 - FAIL - 'default       testpod                                                       0/1     ImagePullBackOff   0          4h22m   172.16.0.6     controller-0   <none>' should be empty.
20190402 10:41:21.053 - DEBUG - Traceback (most recent call last):
  None
20190402 10:41:21.053 - INFO - +----- END KW: BuiltIn.Should Be Empty (1)
20190402 10:41:21.053 - INFO - +---- END KW: Utils.Check PODs Health (723)
------------------------------------------------------------------------------
20190402 10:41:21.053 - INFO - +--- END TEST: OpenStack PODs Healthy (1909)
------------------------------------------------------------------------------
20190402 10:41:21.053 - INFO - +--- START TEST: Reapply STX OpenStack [ ]
------------------------------------------------------------------------------
20190402 10:41:21.054 - INFO - +---- START KW: Utils.System Application Apply [ stx-openstack ]
20190402 10:41:21.054 - INFO - +----- START KW: Utils.Run Command [ system application-apply ${application} | True ]
20190402 10:41:21.054 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:41:21.055 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (1)
20190402 10:41:21.055 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:41:21.055 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:41:21.055 - INFO - &{result_dict} = { stdout= }
20190402 10:41:21.055 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:41:21.056 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:41:21.056 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:21.056 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:41:21.056 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:21.057 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:41:21.057 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (2)
20190402 10:41:21.057 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 10:41:21.057 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:21.057 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 10:41:21.057 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:41:21.060 - INFO - system application-apply stx-openstack [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kk
20190402 10:41:21.060 - INFO - +------ END KW: SSHLibrary.Write (3)
20190402 10:41:21.060 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:41:22.198 - INFO - +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00.451151+00:00 |
| manifest_file | manifest.yaml                    |
| manifest_name | armada-manifest                  |
| name          | stx-openstack                    |
| progress      | None                             |
| status        | applying                         |
| updated_at    | 2019-04-02T13:12:46.297104+00:00 |
+---------------+----------------------------------+
Please use 'system application-list' or 'system application-show stx-openstack' to view the current progress.
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:22.198 - INFO - ${output} = +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00....
20190402 10:41:22.198 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (1138)
20190402 10:41:22.198 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:41:22.199 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:41:22.199 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:22.199 - INFO - +------- END KW: String.Get Line (0)
20190402 10:41:22.199 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:41:22.199 - INFO - ${clean_out} = +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00....
20190402 10:41:22.200 - INFO - +------- END KW: String.Remove String (0)
20190402 10:41:22.200 - INFO - ${output} = +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00....
20190402 10:41:22.200 - INFO - +------ END KW: Utils.Remove Prompt Line (2)
20190402 10:41:22.200 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 10:41:22.200 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:41:22.202 - INFO - echo $?
20190402 10:41:22.202 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 10:41:22.202 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:41:22.202 - INFO - 0
20190402 10:41:22.202 - INFO - ${rc} = 0
20190402 10:41:22.202 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 10:41:22.202 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:41:22.202 - INFO - 0
20190402 10:41:22.202 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 10:41:22.203 - INFO - ${rc} = 0
20190402 10:41:22.203 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 10:41:22.203 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:41:22.203 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:41:22.203 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:22.203 - INFO - +------ END KW: BuiltIn.Run Keyword If (0)
20190402 10:41:22.203 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:41:22.204 - INFO - +------ END KW: Collections.Set To Dictionary (1)
20190402 10:41:22.204 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:41:22.204 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00.451151+00:00 |
| manifest_file | manifest.yaml                    |
| manifest_name | armada-manifest                  |
| name          | stx-openstack                    |
| progress      | None                             |
| status        | applying                         |
| updated_at    | 2019-04-02T13:12:46.297104+00:00 |
+---------------+----------------------------------+
Please use 'system application-list' or 'system application-show stx-openstack' to view the current progress.
20190402 10:41:22.204 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 10:41:22.204 - INFO - +----- END KW: Utils.Run Command (1150)
20190402 10:41:22.204 - INFO - +----- START KW: BuiltIn.Wait Until Keyword Succeeds [ 90 min | 5 sec | Check System Application Status | ${application} | applied ]
20190402 10:41:22.205 - INFO - +------ START KW: Utils.Check System Application Status [ ${application} | applied ]
20190402 10:41:22.205 - INFO - +------- START KW: BuiltIn.Catenate [ SEPARATOR=| | system application-list | grep ${application} | awk '{print $8}' ]
20190402 10:41:22.205 - INFO - ${cmd} = system application-list|grep stx-openstack|awk '{print $8}'
20190402 10:41:22.205 - INFO - +------- END KW: BuiltIn.Catenate (0)
20190402 10:41:22.205 - INFO - +------- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:41:22.206 - INFO - +-------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:41:22.206 - INFO - +-------- END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:41:22.206 - INFO - +-------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:41:22.206 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:41:22.207 - INFO - &{result_dict} = { stdout= }
20190402 10:41:22.207 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:41:22.207 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:41:22.207 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:22.207 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:41:22.208 - INFO - +--------- END KW: Collections.Set To Dictionary (1)
20190402 10:41:22.208 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:41:22.208 - INFO - +-------- END KW: Utils.Create Empy Result Dictionary (2)
20190402 10:41:22.208 - INFO - +-------- START KW: SSHLibrary.Read [ ]
20190402 10:41:22.208 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:22.208 - INFO - +-------- END KW: SSHLibrary.Read (0)
20190402 10:41:22.208 - INFO - +-------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:41:22.210 - INFO - system application-list|grep stx-opens tack|awk '{print $8}'
20190402 10:41:22.210 - INFO - +-------- END KW: SSHLibrary.Write (2)
20190402 10:41:22.210 - INFO - +-------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:41:23.306 - INFO - applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:23.306 - INFO - ${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:23.306 - INFO - +-------- END KW: SSHLibrary.Read Until Prompt (1096)
20190402 10:41:23.306 - INFO - +-------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:41:23.307 - INFO - +--------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:41:23.307 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:23.307 - INFO - +--------- END KW: String.Get Line (0)
20190402 10:41:23.307 - INFO - +--------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:41:23.307 - INFO - ${clean_out} = applying
20190402 10:41:23.308 - INFO - +--------- END KW: String.Remove String (0)
20190402 10:41:23.308 - INFO - ${output} = applying
20190402 10:41:23.308 - INFO - +-------- END KW: Utils.Remove Prompt Line (2)
20190402 10:41:23.308 - INFO - +-------- START KW: Utils.Get Return Code [ ]
20190402 10:41:23.308 - INFO - +--------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:41:23.310 - INFO - echo $?
20190402 10:41:23.310 - INFO - +--------- END KW: SSHLibrary.Write (2)
20190402 10:41:23.310 - INFO - +--------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:41:23.310 - INFO - 0
20190402 10:41:23.310 - INFO - ${rc} = 0
20190402 10:41:23.310 - INFO - +--------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 10:41:23.310 - INFO - +--------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:41:23.311 - INFO - 0
20190402 10:41:23.311 - INFO - +--------- END KW: BuiltIn.Log (1)
20190402 10:41:23.311 - INFO - ${rc} = 0
20190402 10:41:23.311 - INFO - +-------- END KW: Utils.Get Return Code (3)
20190402 10:41:23.311 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:41:23.311 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:41:23.312 - INFO - +--------- END KW: Collections.Set To Dictionary (1)
20190402 10:41:23.312 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:23.312 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:41:23.312 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:23.312 - INFO - +-------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:41:23.312 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying
20190402 10:41:23.312 - INFO - +-------- END KW: Collections.Log Dictionary (0)
20190402 10:41:23.312 - INFO - &{result} = { stdout=applying | stderr= | rc=0 }
20190402 10:41:23.313 - INFO - +------- END KW: Utils.Run Command (1107)
20190402 10:41:23.313 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:23.313 - INFO - ${value} = applying
20190402 10:41:23.313 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:41:23.313 - INFO - +------- START KW: BuiltIn.Run Keyword If [ '${value}' == 'apply-failed' | System Application Apply | ${application} | ELSE | Should Be Equal As Strings | ${value} | ${status} ]
20190402 10:41:23.313 - INFO - +-------- START KW: BuiltIn.Should Be Equal As Strings [ ${value} | ${status} ]
20190402 10:41:23.313 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:41:23.314 - FAIL - applying != applied
20190402 10:41:23.314 - DEBUG - Traceback (most recent call last):
  None
20190402 10:41:23.314 - INFO - +-------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:41:23.314 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:23.314 - INFO - +------ END KW: Utils.Check System Application Status (1109)
20190402 10:41:28.314 - INFO - +------ START KW: Utils.Check System Application Status [ ${application} | applied ]
20190402 10:41:28.315 - INFO - +------- START KW: BuiltIn.Catenate [ SEPARATOR=| | system application-list | grep ${application} | awk '{print $8}' ]
20190402 10:41:28.315 - INFO - ${cmd} = system application-list|grep stx-openstack|awk '{print $8}'
20190402 10:41:28.315 - INFO - +------- END KW: BuiltIn.Catenate (0)
20190402 10:41:28.315 - INFO - +------- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:41:28.316 - INFO - +-------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:41:28.316 - INFO - +-------- END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:41:28.316 - INFO - +-------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:41:28.316 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:41:28.317 - INFO - &{result_dict} = { stdout= }
20190402 10:41:28.317 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:41:28.317 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:41:28.317 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:28.317 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:41:28.317 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:28.317 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:41:28.318 - INFO - +-------- END KW: Utils.Create Empy Result Dictionary (2)
20190402 10:41:28.318 - INFO - +-------- START KW: SSHLibrary.Read [ ]
20190402 10:41:28.318 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:28.318 - INFO - +-------- END KW: SSHLibrary.Read (0)
20190402 10:41:28.318 - INFO - +-------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:41:28.329 - INFO - system application-list|grep stx-opens tack|awk '{print $8}'
20190402 10:41:28.329 - INFO - +-------- END KW: SSHLibrary.Write (11)
20190402 10:41:28.329 - INFO - +-------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:41:29.762 - INFO - applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:29.762 - INFO - ${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:29.762 - INFO - +-------- END KW: SSHLibrary.Read Until Prompt (1433)
20190402 10:41:29.763 - INFO - +-------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:41:29.763 - INFO - +--------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:41:29.763 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:29.763 - INFO - +--------- END KW: String.Get Line (0)
20190402 10:41:29.763 - INFO - +--------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:41:29.764 - INFO - ${clean_out} = applying
20190402 10:41:29.764 - INFO - +--------- END KW: String.Remove String (1)
20190402 10:41:29.764 - INFO - ${output} = applying
20190402 10:41:29.764 - INFO - +-------- END KW: Utils.Remove Prompt Line (1)
20190402 10:41:29.764 - INFO - +-------- START KW: Utils.Get Return Code [ ]
20190402 10:41:29.764 - INFO - +--------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:41:29.771 - INFO - echo $?
20190402 10:41:29.771 - INFO - +--------- END KW: SSHLibrary.Write (7)
20190402 10:41:29.771 - INFO - +--------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:41:29.778 - INFO - 0
20190402 10:41:29.778 - INFO - ${rc} = 0
20190402 10:41:29.778 - INFO - +--------- END KW: SSHLibrary.Read Until Regexp (7)
20190402 10:41:29.779 - INFO - +--------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:41:29.779 - INFO - 0
20190402 10:41:29.779 - INFO - +--------- END KW: BuiltIn.Log (0)
20190402 10:41:29.779 - INFO - ${rc} = 0
20190402 10:41:29.779 - INFO - +-------- END KW: Utils.Get Return Code (15)
20190402 10:41:29.779 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:41:29.780 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:41:29.780 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:29.780 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:29.780 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:41:29.781 - INFO - +-------- END KW: Collections.Set To Dictionary (1)
20190402 10:41:29.781 - INFO - +-------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:41:29.781 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying
20190402 10:41:29.781 - INFO - +-------- END KW: Collections.Log Dictionary (0)
20190402 10:41:29.781 - INFO - &{result} = { stdout=applying | stderr= | rc=0 }
20190402 10:41:29.781 - INFO - +------- END KW: Utils.Run Command (1466)
20190402 10:41:29.781 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:29.781 - INFO - ${value} = applying
20190402 10:41:29.781 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:41:29.782 - INFO - +------- START KW: BuiltIn.Run Keyword If [ '${value}' == 'apply-failed' | System Application Apply | ${application} | ELSE | Should Be Equal As Strings | ${value} | ${status} ]
20190402 10:41:29.782 - INFO - +-------- START KW: BuiltIn.Should Be Equal As Strings [ ${value} | ${status} ]
20190402 10:41:29.782 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:41:29.782 - FAIL - applying != applied
20190402 10:41:29.782 - DEBUG - Traceback (most recent call last):
  None
20190402 10:41:29.782 - INFO - +-------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:41:29.782 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:41:29.782 - INFO - +------ END KW: Utils.Check System Application Status (1468)
20190402 10:41:34.783 - INFO - +------ START KW: Utils.Check System Application Status [ ${application} | applied ]
20190402 10:41:34.784 - INFO - +------- START KW: BuiltIn.Catenate [ SEPARATOR=| | system application-list | grep ${application} | awk '{print $8}' ]
20190402 10:41:34.785 - INFO - ${cmd} = system application-list|grep stx-openstack|awk '{print $8}'
20190402 10:41:34.785 - INFO - +------- END KW: BuiltIn.Catenate (1)
20190402 10:41:34.785 - INFO - +------- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:41:34.786 - INFO - +-------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:41:34.787 - INFO - +-------- END KW: SSHLibrary.Set Client Configuration (1)
20190402 10:41:34.787 - INFO - +-------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:41:34.788 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:41:34.789 - INFO - &{result_dict} = { stdout= }
20190402 10:41:34.789 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:41:34.790 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:41:34.791 - INFO - +--------- END KW: Collections.Set To Dictionary (1)
20190402 10:41:34.791 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:41:34.792 - INFO - +--------- END KW: Collections.Set To Dictionary (1)
20190402 10:41:34.793 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:41:34.793 - INFO - +-------- END KW: Utils.Create Empy Result Dictionary (6)
20190402 10:41:34.793 - INFO - +-------- START KW: SSHLibrary.Read [ ]
20190402 10:41:34.793 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:34.794 - INFO - +-------- END KW: SSHLibrary.Read (1)
20190402 10:41:34.794 - INFO - +-------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:41:34.820 - INFO - system application-list|grep stx-opens tack|awk '{print $8}'
20190402 10:41:34.821 - INFO - +-------- END KW: SSHLibrary.Write (27)
20190402 10:41:34.821 - INFO - +-------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:41:38.203 - INFO - applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:38.204 - INFO - ${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:38.204 - INFO - +-------- END KW: SSHLibrary.Read Until Prompt (3383)
20190402 10:41:38.204 - INFO - +-------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:41:38.205 - INFO - +--------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:41:38.205 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:38.205 - INFO - +--------- END KW: String.Get Line (1)
20190402 10:41:38.205 - INFO - +--------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:41:38.205 - INFO - ${clean_out} = applying
20190402 10:41:38.205 - INFO - +--------- END KW: String.Remove String (0)
20190402 10:41:38.205 - INFO - ${output} = applying
20190402 10:41:38.205 - INFO - +-------- END KW: Utils.Remove Prompt Line (1)
20190402 10:41:38.205 - INFO - +-------- START KW: Utils.Get Return Code [ ]
20190402 10:41:38.206 - INFO - +--------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:41:38.207 - INFO - echo $?
20190402 10:41:38.207 - INFO - +--------- END KW: SSHLibrary.Write (1)
20190402 10:41:38.207 - INFO - +--------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:41:38.208 - INFO - 0
20190402 10:41:38.208 - INFO - ${rc} = 0
20190402 10:41:38.208 - INFO - +--------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 10:41:38.208 - INFO - +--------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:41:38.208 - INFO - 0
20190402 10:41:38.208 - INFO - +--------- END KW: BuiltIn.Log (0)
20190402 10:41:38.208 - INFO - ${rc} = 0
20190402 10:41:38.208 - INFO - +-------- END KW: Utils.Get Return Code (3)
20190402 10:41:38.208 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:41:38.209 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:41:38.209 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:38.209 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:38.209 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:41:38.209 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:38.209 - INFO - +-------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:41:38.210 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying
20190402 10:41:38.210 - INFO - +-------- END KW: Collections.Log Dictionary (1)
20190402 10:41:38.210 - INFO - &{result} = { stdout=applying | stderr= | rc=0 }
20190402 10:41:38.210 - INFO - +------- END KW: Utils.Run Command (3425)
20190402 10:41:38.210 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:38.210 - INFO - ${value} = applying
20190402 10:41:38.211 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:41:38.211 - INFO - +------- START KW: BuiltIn.Run Keyword If [ '${value}' == 'apply-failed' | System Application Apply | ${application} | ELSE | Should Be Equal As Strings | ${value} | ${status} ]
20190402 10:41:38.211 - INFO - +-------- START KW: BuiltIn.Should Be Equal As Strings [ ${value} | ${status} ]
20190402 10:41:38.211 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:41:38.211 - FAIL - applying != applied
20190402 10:41:38.211 - DEBUG - Traceback (most recent call last):
  None
20190402 10:41:38.211 - INFO - +-------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:41:38.211 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:41:38.211 - INFO - +------ END KW: Utils.Check System Application Status (3428)
20190402 10:41:43.212 - INFO - +------ START KW: Utils.Check System Application Status [ ${application} | applied ]
20190402 10:41:43.213 - INFO - +------- START KW: BuiltIn.Catenate [ SEPARATOR=| | system application-list | grep ${application} | awk '{print $8}' ]
20190402 10:41:43.214 - INFO - ${cmd} = system application-list|grep stx-openstack|awk '{print $8}'
20190402 10:41:43.214 - INFO - +------- END KW: BuiltIn.Catenate (1)
20190402 10:41:43.214 - INFO - +------- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:41:43.215 - INFO - +-------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:41:43.216 - INFO - +-------- END KW: SSHLibrary.Set Client Configuration (1)
20190402 10:41:43.216 - INFO - +-------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:41:43.217 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:41:43.218 - INFO - &{result_dict} = { stdout= }
20190402 10:41:43.218 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:41:43.219 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:41:43.219 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:43.220 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:41:43.221 - INFO - +--------- END KW: Collections.Set To Dictionary (1)
20190402 10:41:43.221 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:41:43.222 - INFO - +-------- END KW: Utils.Create Empy Result Dictionary (5)
20190402 10:41:43.222 - INFO - +-------- START KW: SSHLibrary.Read [ ]
20190402 10:41:43.222 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:43.223 - INFO - +-------- END KW: SSHLibrary.Read (0)
20190402 10:41:43.223 - INFO - +-------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:41:43.245 - INFO - system application-list|grep stx-opens tack|awk '{print $8}'
20190402 10:41:43.245 - INFO - +-------- END KW: SSHLibrary.Write (22)
20190402 10:41:43.246 - INFO - +-------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:41:44.497 - INFO - applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:44.497 - INFO - ${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:44.497 - INFO - +-------- END KW: SSHLibrary.Read Until Prompt (1251)
20190402 10:41:44.497 - INFO - +-------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:41:44.498 - INFO - +--------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:41:44.498 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:44.498 - INFO - +--------- END KW: String.Get Line (0)
20190402 10:41:44.498 - INFO - +--------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:41:44.498 - INFO - ${clean_out} = applying
20190402 10:41:44.498 - INFO - +--------- END KW: String.Remove String (0)
20190402 10:41:44.498 - INFO - ${output} = applying
20190402 10:41:44.498 - INFO - +-------- END KW: Utils.Remove Prompt Line (1)
20190402 10:41:44.499 - INFO - +-------- START KW: Utils.Get Return Code [ ]
20190402 10:41:44.499 - INFO - +--------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:41:44.500 - INFO - echo $?
20190402 10:41:44.500 - INFO - +--------- END KW: SSHLibrary.Write (1)
20190402 10:41:44.500 - INFO - +--------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:41:44.500 - INFO - 0
20190402 10:41:44.501 - INFO - ${rc} = 0
20190402 10:41:44.501 - INFO - +--------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 10:41:44.501 - INFO - +--------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:41:44.501 - INFO - 0
20190402 10:41:44.501 - INFO - +--------- END KW: BuiltIn.Log (0)
20190402 10:41:44.501 - INFO - ${rc} = 0
20190402 10:41:44.501 - INFO - +-------- END KW: Utils.Get Return Code (2)
20190402 10:41:44.501 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:41:44.502 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:41:44.502 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:44.502 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:44.502 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:41:44.502 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:44.502 - INFO - +-------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:41:44.502 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying
20190402 10:41:44.503 - INFO - +-------- END KW: Collections.Log Dictionary (1)
20190402 10:41:44.503 - INFO - &{result} = { stdout=applying | stderr= | rc=0 }
20190402 10:41:44.503 - INFO - +------- END KW: Utils.Run Command (1289)
20190402 10:41:44.503 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:44.503 - INFO - ${value} = applying
20190402 10:41:44.503 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:41:44.503 - INFO - +------- START KW: BuiltIn.Run Keyword If [ '${value}' == 'apply-failed' | System Application Apply | ${application} | ELSE | Should Be Equal As Strings | ${value} | ${status} ]
20190402 10:41:44.505 - INFO - +-------- START KW: BuiltIn.Should Be Equal As Strings [ ${value} | ${status} ]
20190402 10:41:44.505 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:41:44.505 - FAIL - applying != applied
20190402 10:41:44.505 - DEBUG - Traceback (most recent call last):
  None
20190402 10:41:44.505 - INFO - +-------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:41:44.505 - INFO - +------- END KW: BuiltIn.Run Keyword If (2)
20190402 10:41:44.506 - INFO - +------ END KW: Utils.Check System Application Status (1294)
20190402 10:41:49.506 - INFO - +------ START KW: Utils.Check System Application Status [ ${application} | applied ]
20190402 10:41:49.507 - INFO - +------- START KW: BuiltIn.Catenate [ SEPARATOR=| | system application-list | grep ${application} | awk '{print $8}' ]
20190402 10:41:49.508 - INFO - ${cmd} = system application-list|grep stx-openstack|awk '{print $8}'
20190402 10:41:49.508 - INFO - +------- END KW: BuiltIn.Catenate (1)
20190402 10:41:49.509 - INFO - +------- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:41:49.509 - INFO - +-------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:41:49.509 - INFO - +-------- END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:41:49.509 - INFO - +-------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:41:49.510 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:41:49.510 - INFO - &{result_dict} = { stdout= }
20190402 10:41:49.510 - INFO - +--------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:41:49.510 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:41:49.510 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:49.511 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:41:49.511 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:49.511 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:41:49.511 - INFO - +-------- END KW: Utils.Create Empy Result Dictionary (2)
20190402 10:41:49.511 - INFO - +-------- START KW: SSHLibrary.Read [ ]
20190402 10:41:49.511 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:49.511 - INFO - +-------- END KW: SSHLibrary.Read (0)
20190402 10:41:49.511 - INFO - +-------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:41:49.523 - INFO - system application-list|grep stx-opens tack|awk '{print $8}'
20190402 10:41:49.523 - INFO - +-------- END KW: SSHLibrary.Write (12)
20190402 10:41:49.523 - INFO - +-------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:41:50.733 - INFO - applied
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:50.733 - INFO - ${output} = applied
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:50.733 - INFO - +-------- END KW: SSHLibrary.Read Until Prompt (1210)
20190402 10:41:50.734 - INFO - +-------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:41:50.734 - INFO - +--------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:41:50.734 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:50.734 - INFO - +--------- END KW: String.Get Line (0)
20190402 10:41:50.734 - INFO - +--------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:41:50.735 - INFO - ${clean_out} = applied
20190402 10:41:50.735 - INFO - +--------- END KW: String.Remove String (1)
20190402 10:41:50.735 - INFO - ${output} = applied
20190402 10:41:50.735 - INFO - +-------- END KW: Utils.Remove Prompt Line (1)
20190402 10:41:50.735 - INFO - +-------- START KW: Utils.Get Return Code [ ]
20190402 10:41:50.735 - INFO - +--------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:41:50.737 - INFO - echo $?
20190402 10:41:50.737 - INFO - +--------- END KW: SSHLibrary.Write (2)
20190402 10:41:50.737 - INFO - +--------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:41:50.737 - INFO - 0
20190402 10:41:50.737 - INFO - ${rc} = 0
20190402 10:41:50.737 - INFO - +--------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 10:41:50.738 - INFO - +--------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:41:50.738 - INFO - 0
20190402 10:41:50.738 - INFO - +--------- END KW: BuiltIn.Log (0)
20190402 10:41:50.738 - INFO - ${rc} = 0
20190402 10:41:50.738 - INFO - +-------- END KW: Utils.Get Return Code (3)
20190402 10:41:50.738 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:41:50.739 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:41:50.739 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:50.739 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:50.739 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:41:50.739 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:50.740 - INFO - +-------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:41:50.740 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applied
20190402 10:41:50.740 - INFO - +-------- END KW: Collections.Log Dictionary (0)
20190402 10:41:50.740 - INFO - &{result} = { stdout=applied | stderr= | rc=0 }
20190402 10:41:50.740 - INFO - +------- END KW: Utils.Run Command (1232)
20190402 10:41:50.740 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:50.740 - INFO - ${value} = applied
20190402 10:41:50.740 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:41:50.741 - INFO - +------- START KW: BuiltIn.Run Keyword If [ '${value}' == 'apply-failed' | System Application Apply | ${application} | ELSE | Should Be Equal As Strings | ${value} | ${status} ]
20190402 10:41:50.741 - INFO - +-------- START KW: BuiltIn.Should Be Equal As Strings [ ${value} | ${status} ]
20190402 10:41:50.741 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:41:50.741 - INFO - +-------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:41:50.741 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:41:50.741 - INFO - +------ END KW: Utils.Check System Application Status (1235)
20190402 10:41:50.741 - INFO - +----- END KW: BuiltIn.Wait Until Keyword Succeeds (28537)
20190402 10:41:50.741 - INFO - +---- END KW: Utils.System Application Apply (29687)
------------------------------------------------------------------------------
20190402 10:41:50.742 - INFO - +--- END TEST: Reapply STX OpenStack (29689)
------------------------------------------------------------------------------
20190402 10:41:50.742 - INFO - +--- START TEST: STX OpenStack Override Update Reset [ ]
------------------------------------------------------------------------------
20190402 10:41:50.742 - INFO - +---- START KW: Utils.Helm Override OpenStack [ nova | openstack ]
20190402 10:41:50.743 - INFO - +----- START KW: BuiltIn.Set Variable [ system helm-override-update ]
20190402 10:41:50.743 - INFO - ${kubectl_cmd} = system helm-override-update
20190402 10:41:50.743 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:41:50.743 - INFO - +----- START KW: BuiltIn.Catenate [ ${kubectl_cmd} | --set conf.nova.DEFAULT.foo=bar | ${char_name} | ${namespace} ]
20190402 10:41:50.743 - INFO - ${cmd} = system helm-override-update --set conf.nova.DEFAULT.foo=bar nova openstack
20190402 10:41:50.743 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 10:41:50.743 - INFO - +----- START KW: Utils.Run Command [ ${cmd} | True ]
20190402 10:41:50.744 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:41:50.744 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:41:50.744 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:41:50.744 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:41:50.745 - INFO - &{result_dict} = { stdout= }
20190402 10:41:50.745 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:41:50.745 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:41:50.745 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:50.745 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:41:50.745 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:50.746 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:41:50.746 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (2)
20190402 10:41:50.746 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 10:41:50.746 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:50.746 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 10:41:50.746 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:41:50.748 - INFO - system helm-override-update --set conf .nova.DEFAULT.foo=bar nova openstack
20190402 10:41:50.748 - INFO - +------ END KW: SSHLibrary.Write (2)
20190402 10:41:50.748 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:41:52.397 - INFO - +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_overrides | conf:          |
|                |   nova:        |
|                |     DEFAULT:   |
|                |       foo: bar |
|                |                |
+----------------+----------------+
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:52.397 - INFO - ${output} = +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_override...
20190402 10:41:52.397 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (1649)
20190402 10:41:52.398 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:41:52.398 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:41:52.398 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:52.398 - INFO - +------- END KW: String.Get Line (0)
20190402 10:41:52.399 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:41:52.399 - INFO - ${clean_out} = +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_override...
20190402 10:41:52.399 - INFO - +------- END KW: String.Remove String (0)
20190402 10:41:52.399 - INFO - ${output} = +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_override...
20190402 10:41:52.399 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 10:41:52.399 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 10:41:52.400 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:41:52.401 - INFO - echo $?
20190402 10:41:52.401 - INFO - +------- END KW: SSHLibrary.Write (1)
20190402 10:41:52.401 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:41:52.401 - INFO - 0
20190402 10:41:52.401 - INFO - ${rc} = 0
20190402 10:41:52.401 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 10:41:52.401 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:41:52.402 - INFO - 0
20190402 10:41:52.402 - INFO - +------- END KW: BuiltIn.Log (1)
20190402 10:41:52.402 - INFO - ${rc} = 0
20190402 10:41:52.402 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 10:41:52.402 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:41:52.403 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:41:52.403 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:52.403 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:52.403 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:41:52.404 - INFO - +------ END KW: Collections.Set To Dictionary (1)
20190402 10:41:52.404 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:41:52.404 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: +----------------+----------------+
| Property       | Value          |
+----------------+----------------+
| name           | nova           |
| namespace      | openstack      |
| user_overrides | conf:          |
|                |   nova:        |
|                |     DEFAULT:   |
|                |       foo: bar |
|                |                |
+----------------+----------------+
20190402 10:41:52.404 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 10:41:52.404 - INFO - +----- END KW: Utils.Run Command (1661)
20190402 10:41:52.405 - INFO - +---- END KW: Utils.Helm Override OpenStack (1662)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:41:52.405 - INFO - +---- START KW: Utils.System Application Apply [ stx-openstack ]
20190402 10:41:52.405 - INFO - +----- START KW: Utils.Run Command [ system application-apply ${application} | True ]
20190402 10:41:52.406 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:41:52.406 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (1)
20190402 10:41:52.406 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:41:52.406 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:41:52.407 - INFO - &{result_dict} = { stdout= }
20190402 10:41:52.407 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:41:52.407 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:41:52.407 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:52.407 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:41:52.408 - INFO - +------- END KW: Collections.Set To Dictionary (1)
20190402 10:41:52.408 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:41:52.408 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (2)
20190402 10:41:52.408 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 10:41:52.408 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:52.408 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 10:41:52.409 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:41:52.416 - INFO - system application-apply stx-openstack [A[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[Kk
20190402 10:41:52.416 - INFO - +------ END KW: SSHLibrary.Write (7)
20190402 10:41:52.416 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:41:53.858 - INFO - +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00.451151+00:00 |
| manifest_file | manifest.yaml                    |
| manifest_name | armada-manifest                  |
| name          | stx-openstack                    |
| progress      | None                             |
| status        | applying                         |
| updated_at    | 2019-04-02T16:30:31.913284+00:00 |
+---------------+----------------------------------+
Please use 'system application-list' or 'system application-show stx-openstack' to view the current progress.
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:53.858 - INFO - ${output} = +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00....
20190402 10:41:53.858 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (1442)
20190402 10:41:53.858 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:41:53.859 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:41:53.859 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:53.859 - INFO - +------- END KW: String.Get Line (0)
20190402 10:41:53.859 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:41:53.859 - INFO - ${clean_out} = +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00....
20190402 10:41:53.859 - INFO - +------- END KW: String.Remove String (0)
20190402 10:41:53.860 - INFO - ${output} = +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00....
20190402 10:41:53.860 - INFO - +------ END KW: Utils.Remove Prompt Line (2)
20190402 10:41:53.860 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 10:41:53.860 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:41:53.861 - INFO - echo $?
20190402 10:41:53.862 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 10:41:53.862 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:41:53.864 - INFO - 0
20190402 10:41:53.864 - INFO - ${rc} = 0
20190402 10:41:53.864 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (2)
20190402 10:41:53.864 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:41:53.864 - INFO - 0
20190402 10:41:53.864 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 10:41:53.864 - INFO - ${rc} = 0
20190402 10:41:53.864 - INFO - +------ END KW: Utils.Get Return Code (4)
20190402 10:41:53.864 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:41:53.865 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:41:53.865 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:53.865 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:53.865 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:41:53.865 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 10:41:53.866 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:41:53.866 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: +---------------+----------------------------------+
| Property      | Value                            |
+---------------+----------------------------------+
| created_at    | 2019-04-02T12:47:00.451151+00:00 |
| manifest_file | manifest.yaml                    |
| manifest_name | armada-manifest                  |
| name          | stx-openstack                    |
| progress      | None                             |
| status        | applying                         |
| updated_at    | 2019-04-02T16:30:31.913284+00:00 |
+---------------+----------------------------------+
Please use 'system application-list' or 'system application-show stx-openstack' to view the current progress.
20190402 10:41:53.866 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 10:41:53.866 - INFO - +----- END KW: Utils.Run Command (1461)
20190402 10:41:53.866 - INFO - +----- START KW: BuiltIn.Wait Until Keyword Succeeds [ 90 min | 5 sec | Check System Application Status | ${application} | applied ]
20190402 10:41:53.866 - INFO - +------ START KW: Utils.Check System Application Status [ ${application} | applied ]
20190402 10:41:53.867 - INFO - +------- START KW: BuiltIn.Catenate [ SEPARATOR=| | system application-list | grep ${application} | awk '{print $8}' ]
20190402 10:41:53.867 - INFO - ${cmd} = system application-list|grep stx-openstack|awk '{print $8}'
20190402 10:41:53.867 - INFO - +------- END KW: BuiltIn.Catenate (0)
20190402 10:41:53.867 - INFO - +------- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:41:53.867 - INFO - +-------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:41:53.868 - INFO - +-------- END KW: SSHLibrary.Set Client Configuration (1)
20190402 10:41:53.868 - INFO - +-------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:41:53.868 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:41:53.868 - INFO - &{result_dict} = { stdout= }
20190402 10:41:53.868 - INFO - +--------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:41:53.868 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:41:53.869 - INFO - +--------- END KW: Collections.Set To Dictionary (1)
20190402 10:41:53.869 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:41:53.869 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:53.869 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:41:53.869 - INFO - +-------- END KW: Utils.Create Empy Result Dictionary (1)
20190402 10:41:53.869 - INFO - +-------- START KW: SSHLibrary.Read [ ]
20190402 10:41:53.869 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:53.870 - INFO - +-------- END KW: SSHLibrary.Read (1)
20190402 10:41:53.870 - INFO - +-------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:41:53.879 - INFO - system application-list|grep stx-opens tack|awk '{print $8}'
20190402 10:41:53.879 - INFO - +-------- END KW: SSHLibrary.Write (9)
20190402 10:41:53.879 - INFO - +-------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:41:55.467 - INFO - applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:55.467 - INFO - ${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:55.467 - INFO - +-------- END KW: SSHLibrary.Read Until Prompt (1588)
20190402 10:41:55.467 - INFO - +-------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:41:55.468 - INFO - +--------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:41:55.468 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:41:55.468 - INFO - +--------- END KW: String.Get Line (0)
20190402 10:41:55.468 - INFO - +--------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:41:55.468 - INFO - ${clean_out} = applying
20190402 10:41:55.468 - INFO - +--------- END KW: String.Remove String (0)
20190402 10:41:55.469 - INFO - ${output} = applying
20190402 10:41:55.469 - INFO - +-------- END KW: Utils.Remove Prompt Line (2)
20190402 10:41:55.469 - INFO - +-------- START KW: Utils.Get Return Code [ ]
20190402 10:41:55.469 - INFO - +--------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:41:55.473 - INFO - echo $?
20190402 10:41:55.473 - INFO - +--------- END KW: SSHLibrary.Write (4)
20190402 10:41:55.473 - INFO - +--------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:41:55.478 - INFO - 0
20190402 10:41:55.478 - INFO - ${rc} = 0
20190402 10:41:55.478 - INFO - +--------- END KW: SSHLibrary.Read Until Regexp (5)
20190402 10:41:55.478 - INFO - +--------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:41:55.478 - INFO - 0
20190402 10:41:55.479 - INFO - +--------- END KW: BuiltIn.Log (0)
20190402 10:41:55.479 - INFO - ${rc} = 0
20190402 10:41:55.479 - INFO - +-------- END KW: Utils.Get Return Code (10)
20190402 10:41:55.479 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:41:55.479 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:41:55.479 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:55.479 - INFO - +-------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:41:55.480 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:41:55.480 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 10:41:55.480 - INFO - +-------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:41:55.480 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying
20190402 10:41:55.480 - INFO - +-------- END KW: Collections.Log Dictionary (0)
20190402 10:41:55.480 - INFO - &{result} = { stdout=applying | stderr= | rc=0 }
20190402 10:41:55.480 - INFO - +------- END KW: Utils.Run Command (1613)
20190402 10:41:55.481 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:41:55.481 - INFO - ${value} = applying
20190402 10:41:55.481 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:41:55.481 - INFO - +------- START KW: BuiltIn.Run Keyword If [ '${value}' == 'apply-failed' | System Application Apply | ${application} | ELSE | Should Be Equal As Strings | ${value} | ${status} ]
20190402 10:41:55.481 - INFO - +-------- START KW: BuiltIn.Should Be Equal As Strings [ ${value} | ${status} ]
20190402 10:41:55.481 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:41:55.481 - FAIL - applying != applied
20190402 10:41:55.481 - DEBUG - Traceback (most recent call last):
  None
20190402 10:41:55.482 - INFO - +-------- END KW: BuiltIn.Should Be Equal As Strings (1)
20190402 10:41:55.482 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:41:55.482 - INFO - +------ END KW: Utils.Check System Application Status (1616)
20190402 10:42:00.482 - INFO - +------ START KW: Utils.Check System Application Status [ ${application} | applied ]
20190402 10:42:00.484 - INFO - +------- START KW: BuiltIn.Catenate [ SEPARATOR=| | system application-list | grep ${application} | awk '{print $8}' ]
20190402 10:42:00.484 - INFO - ${cmd} = system application-list|grep stx-openstack|awk '{print $8}'
20190402 10:42:00.485 - INFO - +------- END KW: BuiltIn.Catenate (2)
20190402 10:42:00.485 - INFO - +------- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:42:00.486 - INFO - +-------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:42:00.487 - INFO - +-------- END KW: SSHLibrary.Set Client Configuration (1)
20190402 10:42:00.487 - INFO - +-------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:42:00.488 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:42:00.490 - INFO - &{result_dict} = { stdout= }
20190402 10:42:00.490 - INFO - +--------- END KW: BuiltIn.Create Dictionary (2)
20190402 10:42:00.490 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:42:00.491 - INFO - +--------- END KW: Collections.Set To Dictionary (1)
20190402 10:42:00.491 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:42:00.492 - INFO - +--------- END KW: Collections.Set To Dictionary (1)
20190402 10:42:00.493 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:42:00.493 - INFO - +-------- END KW: Utils.Create Empy Result Dictionary (6)
20190402 10:42:00.493 - INFO - +-------- START KW: SSHLibrary.Read [ ]
20190402 10:42:00.493 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:00.494 - INFO - +-------- END KW: SSHLibrary.Read (1)
20190402 10:42:00.494 - INFO - +-------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:42:00.517 - INFO - system application-list|grep stx-opens tack|awk '{print $8}'
20190402 10:42:00.517 - INFO - +-------- END KW: SSHLibrary.Write (23)
20190402 10:42:00.517 - INFO - +-------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:42:01.876 - INFO - applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:01.876 - INFO - ${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:01.876 - INFO - +-------- END KW: SSHLibrary.Read Until Prompt (1359)
20190402 10:42:01.876 - INFO - +-------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:42:01.877 - INFO - +--------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:42:01.877 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:01.877 - INFO - +--------- END KW: String.Get Line (0)
20190402 10:42:01.877 - INFO - +--------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:42:01.878 - INFO - ${clean_out} = applying
20190402 10:42:01.878 - INFO - +--------- END KW: String.Remove String (1)
20190402 10:42:01.878 - INFO - ${output} = applying
20190402 10:42:01.878 - INFO - +-------- END KW: Utils.Remove Prompt Line (2)
20190402 10:42:01.878 - INFO - +-------- START KW: Utils.Get Return Code [ ]
20190402 10:42:01.878 - INFO - +--------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:42:01.880 - INFO - echo $?
20190402 10:42:01.880 - INFO - +--------- END KW: SSHLibrary.Write (2)
20190402 10:42:01.880 - INFO - +--------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:42:01.881 - INFO - 0
20190402 10:42:01.881 - INFO - ${rc} = 0
20190402 10:42:01.881 - INFO - +--------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 10:42:01.882 - INFO - +--------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:42:01.882 - INFO - 0
20190402 10:42:01.882 - INFO - +--------- END KW: BuiltIn.Log (0)
20190402 10:42:01.882 - INFO - ${rc} = 0
20190402 10:42:01.882 - INFO - +-------- END KW: Utils.Get Return Code (4)
20190402 10:42:01.882 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:42:01.883 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:42:01.883 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:01.883 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:42:01.883 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:42:01.883 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:01.883 - INFO - +-------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:42:01.883 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying
20190402 10:42:01.884 - INFO - +-------- END KW: Collections.Log Dictionary (1)
20190402 10:42:01.884 - INFO - &{result} = { stdout=applying | stderr= | rc=0 }
20190402 10:42:01.884 - INFO - +------- END KW: Utils.Run Command (1399)
20190402 10:42:01.884 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:42:01.884 - INFO - ${value} = applying
20190402 10:42:01.884 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:42:01.884 - INFO - +------- START KW: BuiltIn.Run Keyword If [ '${value}' == 'apply-failed' | System Application Apply | ${application} | ELSE | Should Be Equal As Strings | ${value} | ${status} ]
20190402 10:42:01.885 - INFO - +-------- START KW: BuiltIn.Should Be Equal As Strings [ ${value} | ${status} ]
20190402 10:42:01.885 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:42:01.885 - FAIL - applying != applied
20190402 10:42:01.885 - DEBUG - Traceback (most recent call last):
  None
20190402 10:42:01.885 - INFO - +-------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:42:01.885 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:42:01.885 - INFO - +------ END KW: Utils.Check System Application Status (1403)
20190402 10:42:06.886 - INFO - +------ START KW: Utils.Check System Application Status [ ${application} | applied ]
20190402 10:42:06.887 - INFO - +------- START KW: BuiltIn.Catenate [ SEPARATOR=| | system application-list | grep ${application} | awk '{print $8}' ]
20190402 10:42:06.887 - INFO - ${cmd} = system application-list|grep stx-openstack|awk '{print $8}'
20190402 10:42:06.888 - INFO - +------- END KW: BuiltIn.Catenate (0)
20190402 10:42:06.888 - INFO - +------- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:42:06.889 - INFO - +-------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:42:06.890 - INFO - +-------- END KW: SSHLibrary.Set Client Configuration (1)
20190402 10:42:06.890 - INFO - +-------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:42:06.891 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:42:06.892 - INFO - &{result_dict} = { stdout= }
20190402 10:42:06.892 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:42:06.892 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:42:06.893 - INFO - +--------- END KW: Collections.Set To Dictionary (1)
20190402 10:42:06.893 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:42:06.894 - INFO - +--------- END KW: Collections.Set To Dictionary (1)
20190402 10:42:06.894 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:42:06.894 - INFO - +-------- END KW: Utils.Create Empy Result Dictionary (4)
20190402 10:42:06.895 - INFO - +-------- START KW: SSHLibrary.Read [ ]
20190402 10:42:06.895 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:06.895 - INFO - +-------- END KW: SSHLibrary.Read (0)
20190402 10:42:06.895 - INFO - +-------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:42:06.921 - INFO - system application-list|grep stx-opens tack|awk '{print $8}'
20190402 10:42:06.921 - INFO - +-------- END KW: SSHLibrary.Write (26)
20190402 10:42:06.922 - INFO - +-------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:42:08.561 - INFO - applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:08.562 - INFO - ${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:08.562 - INFO - +-------- END KW: SSHLibrary.Read Until Prompt (1640)
20190402 10:42:08.562 - INFO - +-------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:42:08.563 - INFO - +--------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:42:08.563 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:08.563 - INFO - +--------- END KW: String.Get Line (1)
20190402 10:42:08.563 - INFO - +--------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:42:08.563 - INFO - ${clean_out} = applying
20190402 10:42:08.563 - INFO - +--------- END KW: String.Remove String (0)
20190402 10:42:08.564 - INFO - ${output} = applying
20190402 10:42:08.564 - INFO - +-------- END KW: Utils.Remove Prompt Line (2)
20190402 10:42:08.564 - INFO - +-------- START KW: Utils.Get Return Code [ ]
20190402 10:42:08.564 - INFO - +--------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:42:08.566 - INFO - echo $?
20190402 10:42:08.566 - INFO - +--------- END KW: SSHLibrary.Write (2)
20190402 10:42:08.566 - INFO - +--------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:42:08.569 - INFO - 0
20190402 10:42:08.569 - INFO - ${rc} = 0
20190402 10:42:08.570 - INFO - +--------- END KW: SSHLibrary.Read Until Regexp (3)
20190402 10:42:08.570 - INFO - +--------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:42:08.570 - INFO - 0
20190402 10:42:08.570 - INFO - +--------- END KW: BuiltIn.Log (0)
20190402 10:42:08.570 - INFO - ${rc} = 0
20190402 10:42:08.570 - INFO - +-------- END KW: Utils.Get Return Code (6)
20190402 10:42:08.571 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:42:08.571 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:42:08.571 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:08.571 - INFO - +-------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:42:08.571 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:42:08.572 - INFO - +-------- END KW: Collections.Set To Dictionary (1)
20190402 10:42:08.572 - INFO - +-------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:42:08.572 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying
20190402 10:42:08.572 - INFO - +-------- END KW: Collections.Log Dictionary (0)
20190402 10:42:08.572 - INFO - &{result} = { stdout=applying | stderr= | rc=0 }
20190402 10:42:08.572 - INFO - +------- END KW: Utils.Run Command (1684)
20190402 10:42:08.572 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:42:08.572 - INFO - ${value} = applying
20190402 10:42:08.573 - INFO - +------- END KW: Collections.Get From Dictionary (1)
20190402 10:42:08.573 - INFO - +------- START KW: BuiltIn.Run Keyword If [ '${value}' == 'apply-failed' | System Application Apply | ${application} | ELSE | Should Be Equal As Strings | ${value} | ${status} ]
20190402 10:42:08.573 - INFO - +-------- START KW: BuiltIn.Should Be Equal As Strings [ ${value} | ${status} ]
20190402 10:42:08.573 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:42:08.573 - FAIL - applying != applied
20190402 10:42:08.573 - DEBUG - Traceback (most recent call last):
  None
20190402 10:42:08.573 - INFO - +-------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:42:08.573 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:42:08.573 - INFO - +------ END KW: Utils.Check System Application Status (1687)
20190402 10:42:13.574 - INFO - +------ START KW: Utils.Check System Application Status [ ${application} | applied ]
20190402 10:42:13.576 - INFO - +------- START KW: BuiltIn.Catenate [ SEPARATOR=| | system application-list | grep ${application} | awk '{print $8}' ]
20190402 10:42:13.576 - INFO - ${cmd} = system application-list|grep stx-openstack|awk '{print $8}'
20190402 10:42:13.577 - INFO - +------- END KW: BuiltIn.Catenate (1)
20190402 10:42:13.577 - INFO - +------- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:42:13.578 - INFO - +-------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:42:13.579 - INFO - +-------- END KW: SSHLibrary.Set Client Configuration (1)
20190402 10:42:13.579 - INFO - +-------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:42:13.580 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:42:13.581 - INFO - &{result_dict} = { stdout= }
20190402 10:42:13.581 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:42:13.582 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:42:13.582 - INFO - +--------- END KW: Collections.Set To Dictionary (1)
20190402 10:42:13.582 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:42:13.583 - INFO - +--------- END KW: Collections.Set To Dictionary (1)
20190402 10:42:13.584 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:42:13.584 - INFO - +-------- END KW: Utils.Create Empy Result Dictionary (5)
20190402 10:42:13.584 - INFO - +-------- START KW: SSHLibrary.Read [ ]
20190402 10:42:13.584 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:13.585 - INFO - +-------- END KW: SSHLibrary.Read (0)
20190402 10:42:13.585 - INFO - +-------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:42:13.612 - INFO - system application-list|grep stx-opens tack|awk '{print $8}'
20190402 10:42:13.613 - INFO - +-------- END KW: SSHLibrary.Write (28)
20190402 10:42:13.613 - INFO - +-------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:42:14.811 - INFO - applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:14.811 - INFO - ${output} = applying
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:14.811 - INFO - +-------- END KW: SSHLibrary.Read Until Prompt (1198)
20190402 10:42:14.811 - INFO - +-------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:42:14.812 - INFO - +--------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:42:14.812 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:14.812 - INFO - +--------- END KW: String.Get Line (0)
20190402 10:42:14.812 - INFO - +--------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:42:14.812 - INFO - ${clean_out} = applying
20190402 10:42:14.812 - INFO - +--------- END KW: String.Remove String (0)
20190402 10:42:14.812 - INFO - ${output} = applying
20190402 10:42:14.812 - INFO - +-------- END KW: Utils.Remove Prompt Line (1)
20190402 10:42:14.812 - INFO - +-------- START KW: Utils.Get Return Code [ ]
20190402 10:42:14.813 - INFO - +--------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:42:14.814 - INFO - echo $?
20190402 10:42:14.814 - INFO - +--------- END KW: SSHLibrary.Write (1)
20190402 10:42:14.814 - INFO - +--------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:42:14.814 - INFO - 0
20190402 10:42:14.815 - INFO - ${rc} = 0
20190402 10:42:14.815 - INFO - +--------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 10:42:14.815 - INFO - +--------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:42:14.815 - INFO - 0
20190402 10:42:14.815 - INFO - +--------- END KW: BuiltIn.Log (0)
20190402 10:42:14.815 - INFO - ${rc} = 0
20190402 10:42:14.815 - INFO - +-------- END KW: Utils.Get Return Code (3)
20190402 10:42:14.815 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:42:14.816 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:42:14.816 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:14.816 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:42:14.816 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:42:14.817 - INFO - +-------- END KW: Collections.Set To Dictionary (1)
20190402 10:42:14.817 - INFO - +-------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:42:14.817 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applying
20190402 10:42:14.817 - INFO - +-------- END KW: Collections.Log Dictionary (0)
20190402 10:42:14.817 - INFO - &{result} = { stdout=applying | stderr= | rc=0 }
20190402 10:42:14.817 - INFO - +------- END KW: Utils.Run Command (1240)
20190402 10:42:14.817 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:42:14.817 - INFO - ${value} = applying
20190402 10:42:14.818 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:42:14.818 - INFO - +------- START KW: BuiltIn.Run Keyword If [ '${value}' == 'apply-failed' | System Application Apply | ${application} | ELSE | Should Be Equal As Strings | ${value} | ${status} ]
20190402 10:42:14.818 - INFO - +-------- START KW: BuiltIn.Should Be Equal As Strings [ ${value} | ${status} ]
20190402 10:42:14.818 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:42:14.818 - FAIL - applying != applied
20190402 10:42:14.818 - DEBUG - Traceback (most recent call last):
  None
20190402 10:42:14.818 - INFO - +-------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:42:14.818 - INFO - +------- END KW: BuiltIn.Run Keyword If (0)
20190402 10:42:14.818 - INFO - +------ END KW: Utils.Check System Application Status (1244)
20190402 10:42:19.819 - INFO - +------ START KW: Utils.Check System Application Status [ ${application} | applied ]
20190402 10:42:19.820 - INFO - +------- START KW: BuiltIn.Catenate [ SEPARATOR=| | system application-list | grep ${application} | awk '{print $8}' ]
20190402 10:42:19.821 - INFO - ${cmd} = system application-list|grep stx-openstack|awk '{print $8}'
20190402 10:42:19.822 - INFO - +------- END KW: BuiltIn.Catenate (1)
20190402 10:42:19.822 - INFO - +------- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:42:19.824 - INFO - +-------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:42:19.825 - INFO - +-------- END KW: SSHLibrary.Set Client Configuration (1)
20190402 10:42:19.825 - INFO - +-------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:42:19.826 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:42:19.827 - INFO - &{result_dict} = { stdout= }
20190402 10:42:19.827 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:42:19.828 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:42:19.828 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:19.829 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:42:19.829 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:19.830 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:42:19.830 - INFO - +-------- END KW: Utils.Create Empy Result Dictionary (5)
20190402 10:42:19.830 - INFO - +-------- START KW: SSHLibrary.Read [ ]
20190402 10:42:19.831 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:19.831 - INFO - +-------- END KW: SSHLibrary.Read (1)
20190402 10:42:19.831 - INFO - +-------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:42:19.858 - INFO - system application-list|grep stx-opens tack|awk '{print $8}'
20190402 10:42:19.858 - INFO - +-------- END KW: SSHLibrary.Write (27)
20190402 10:42:19.858 - INFO - +-------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:42:21.244 - INFO - applied
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:21.244 - INFO - ${output} = applied
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:21.244 - INFO - +-------- END KW: SSHLibrary.Read Until Prompt (1386)
20190402 10:42:21.244 - INFO - +-------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:42:21.245 - INFO - +--------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:42:21.245 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:21.245 - INFO - +--------- END KW: String.Get Line (0)
20190402 10:42:21.245 - INFO - +--------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:42:21.245 - INFO - ${clean_out} = applied
20190402 10:42:21.245 - INFO - +--------- END KW: String.Remove String (0)
20190402 10:42:21.246 - INFO - ${output} = applied
20190402 10:42:21.246 - INFO - +-------- END KW: Utils.Remove Prompt Line (2)
20190402 10:42:21.246 - INFO - +-------- START KW: Utils.Get Return Code [ ]
20190402 10:42:21.246 - INFO - +--------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:42:21.247 - INFO - echo $?
20190402 10:42:21.247 - INFO - +--------- END KW: SSHLibrary.Write (1)
20190402 10:42:21.248 - INFO - +--------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:42:21.251 - INFO - 0
20190402 10:42:21.252 - INFO - ${rc} = 0
20190402 10:42:21.252 - INFO - +--------- END KW: SSHLibrary.Read Until Regexp (5)
20190402 10:42:21.252 - INFO - +--------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:42:21.252 - INFO - 0
20190402 10:42:21.252 - INFO - +--------- END KW: BuiltIn.Log (0)
20190402 10:42:21.252 - INFO - ${rc} = 0
20190402 10:42:21.252 - INFO - +-------- END KW: Utils.Get Return Code (6)
20190402 10:42:21.252 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:42:21.253 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:42:21.253 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:21.253 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:42:21.253 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:42:21.254 - INFO - +-------- END KW: Collections.Set To Dictionary (1)
20190402 10:42:21.254 - INFO - +-------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:42:21.254 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: applied
20190402 10:42:21.254 - INFO - +-------- END KW: Collections.Log Dictionary (0)
20190402 10:42:21.254 - INFO - &{result} = { stdout=applied | stderr= | rc=0 }
20190402 10:42:21.255 - INFO - +------- END KW: Utils.Run Command (1432)
20190402 10:42:21.255 - INFO - +------- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:42:21.255 - INFO - ${value} = applied
20190402 10:42:21.255 - INFO - +------- END KW: Collections.Get From Dictionary (0)
20190402 10:42:21.255 - INFO - +------- START KW: BuiltIn.Run Keyword If [ '${value}' == 'apply-failed' | System Application Apply | ${application} | ELSE | Should Be Equal As Strings | ${value} | ${status} ]
20190402 10:42:21.256 - INFO - +-------- START KW: BuiltIn.Should Be Equal As Strings [ ${value} | ${status} ]
20190402 10:42:21.256 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:42:21.256 - INFO - +-------- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:42:21.256 - INFO - +------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:42:21.256 - INFO - +------ END KW: Utils.Check System Application Status (1437)
20190402 10:42:21.256 - INFO - +----- END KW: BuiltIn.Wait Until Keyword Succeeds (27390)
20190402 10:42:21.256 - INFO - +---- END KW: Utils.System Application Apply (28851)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:42:21.256 - INFO - +---- START KW: Utils.Check Helm Override OpenStack [ ]
20190402 10:42:21.257 - INFO - +----- START KW: BuiltIn.Set Variable [ kubectl get pods --all-namespaces -o wide ]
20190402 10:42:21.257 - INFO - ${kubectl_cmd} = kubectl get pods --all-namespaces -o wide
20190402 10:42:21.257 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:42:21.257 - INFO - +----- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep nova-compute | awk '{print $2}' ]
20190402 10:42:21.257 - INFO - ${cmd} = kubectl get pods --all-namespaces -o wide|grep nova-compute|awk '{print $2}'
20190402 10:42:21.257 - INFO - +----- END KW: BuiltIn.Catenate (0)
20190402 10:42:21.257 - INFO - +----- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:42:21.258 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:42:21.258 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:42:21.258 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:42:21.258 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:42:21.259 - INFO - &{result_dict} = { stdout= }
20190402 10:42:21.259 - INFO - +------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:42:21.259 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:42:21.259 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:21.259 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:42:21.259 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:21.259 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:42:21.260 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (1)
20190402 10:42:21.260 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 10:42:21.260 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:21.260 - INFO - +------ END KW: SSHLibrary.Read (0)
20190402 10:42:21.260 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:42:21.272 - INFO - kubectl get pods --all-namespaces -o w ide|grep nova-compute|awk '{print $2}'
20190402 10:42:21.272 - INFO - +------ END KW: SSHLibrary.Write (12)
20190402 10:42:21.273 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:42:22.063 - INFO - nova-compute-controller-0-a762cb46-526sh
nova-compute-controller-1-347ae4cb-m4lxz
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:22.063 - INFO - ${output} = nova-compute-controller-0-a762cb46-526sh
nova-compute-controller-1-347ae4cb-m4lxz
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:22.063 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (790)
20190402 10:42:22.063 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:42:22.063 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:42:22.064 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:22.064 - INFO - +------- END KW: String.Get Line (1)
20190402 10:42:22.064 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:42:22.064 - INFO - ${clean_out} = nova-compute-controller-0-a762cb46-526sh
nova-compute-controller-1-347ae4cb-m4lxz
20190402 10:42:22.064 - INFO - +------- END KW: String.Remove String (0)
20190402 10:42:22.064 - INFO - ${output} = nova-compute-controller-0-a762cb46-526sh
nova-compute-controller-1-347ae4cb-m4lxz
20190402 10:42:22.064 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 10:42:22.064 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 10:42:22.064 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:42:22.066 - INFO - echo $?
20190402 10:42:22.066 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 10:42:22.066 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:42:22.066 - INFO - 0
20190402 10:42:22.067 - INFO - ${rc} = 0
20190402 10:42:22.067 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 10:42:22.067 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:42:22.067 - INFO - 0
20190402 10:42:22.067 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 10:42:22.067 - INFO - ${rc} = 0
20190402 10:42:22.067 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 10:42:22.067 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:42:22.068 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:42:22.068 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:22.068 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:42:22.068 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:42:22.068 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 10:42:22.069 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:42:22.069 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: nova-compute-controller-0-a762cb46-526sh
nova-compute-controller-1-347ae4cb-m4lxz
20190402 10:42:22.069 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 10:42:22.069 - INFO - &{result} = { stdout=nova-compute-controller-0-a762cb46-526sh
nova-compute-controller-1-347ae4cb-m4lxz | stderr= | rc=0 }
20190402 10:42:22.069 - INFO - +----- END KW: Utils.Run Command (812)
20190402 10:42:22.069 - INFO - +----- START KW: Utils.Convert Response To List [ ${result} ]
20190402 10:42:22.070 - INFO - +------ START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:42:22.070 - INFO - ${response} = nova-compute-controller-0-a762cb46-526sh
nova-compute-controller-1-347ae4cb-m4lxz
20190402 10:42:22.070 - INFO - +------ END KW: Collections.Get From Dictionary (0)
20190402 10:42:22.070 - INFO - +------ START KW: String.Split String [ ${response} ]
20190402 10:42:22.070 - INFO - @{res_in_list} = [ nova-compute-controller-0-a762cb46-526sh | nova-compute-controller-1-347ae4cb-m4lxz ]
20190402 10:42:22.070 - INFO - +------ END KW: String.Split String (0)
20190402 10:42:22.070 - INFO - @{nova_pod_list} = [ nova-compute-controller-0-a762cb46-526sh | nova-compute-controller-1-347ae4cb-m4lxz ]
20190402 10:42:22.071 - INFO - +----- END KW: Utils.Convert Response To List (1)
20190402 10:42:22.071 - INFO - +----- START KW: BuiltIn.Set Variable [ kubectl exec -n openstack -it ]
20190402 10:42:22.071 - INFO - ${kubectl_cmd} = kubectl exec -n openstack -it
20190402 10:42:22.071 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:42:22.071 - INFO - +----- START KW: ${nova_pod} IN [ @{nova_pod_list} ] [ ]
20190402 10:42:22.071 - INFO - +------ START KW: ${nova_pod} = nova-compute-controller-0-a762cb46-526sh [ ]
20190402 10:42:22.071 - INFO - +------- START KW: BuiltIn.Catenate [ ${kubectl_cmd} | ${nova_pod} | -- grep foo /etc/nova/nova.conf ]
20190402 10:42:22.071 - INFO - ${cmd} = kubectl exec -n openstack -it nova-compute-controller-0-a762cb46-526sh -- grep foo /etc/nova/nova.conf
20190402 10:42:22.072 - INFO - +------- END KW: BuiltIn.Catenate (1)
20190402 10:42:22.072 - INFO - +------- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:42:22.072 - INFO - +-------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:42:22.072 - INFO - +-------- END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:42:22.072 - INFO - +-------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:42:22.073 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:42:22.073 - INFO - &{result_dict} = { stdout= }
20190402 10:42:22.073 - INFO - +--------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:42:22.073 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:42:22.073 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:22.073 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:42:22.074 - INFO - +--------- END KW: Collections.Set To Dictionary (1)
20190402 10:42:22.074 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:42:22.074 - INFO - +-------- END KW: Utils.Create Empy Result Dictionary (2)
20190402 10:42:22.074 - INFO - +-------- START KW: SSHLibrary.Read [ ]
20190402 10:42:22.074 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:22.074 - INFO - +-------- END KW: SSHLibrary.Read (0)
20190402 10:42:22.074 - INFO - +-------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:42:22.090 - INFO - kubectl exec -n openstack -it nova-com pute-controller-0-a762cb46-526sh -- grep foo /etc/nova/nova.conf
20190402 10:42:22.090 - INFO - +-------- END KW: SSHLibrary.Write (16)
20190402 10:42:22.090 - INFO - +-------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:42:22.361 - INFO - Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-0-a762cb46-526sh -n openstack' to see all of the containers in this pod.
foo = bar
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:22.361 - INFO - ${output} = Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-0-a762cb46-526sh -n openstack' to see all of the containers in this pod.
foo = bar
[wrsroot@controller-0...
20190402 10:42:22.361 - INFO - +-------- END KW: SSHLibrary.Read Until Prompt (271)
20190402 10:42:22.361 - INFO - +-------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:42:22.362 - INFO - +--------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:42:22.362 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:22.362 - INFO - +--------- END KW: String.Get Line (0)
20190402 10:42:22.362 - INFO - +--------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:42:22.362 - INFO - ${clean_out} = Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-0-a762cb46-526sh -n openstack' to see all of the containers in this pod.
foo = bar
20190402 10:42:22.362 - INFO - +--------- END KW: String.Remove String (0)
20190402 10:42:22.362 - INFO - ${output} = Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-0-a762cb46-526sh -n openstack' to see all of the containers in this pod.
foo = bar
20190402 10:42:22.362 - INFO - +-------- END KW: Utils.Remove Prompt Line (1)
20190402 10:42:22.363 - INFO - +-------- START KW: Utils.Get Return Code [ ]
20190402 10:42:22.363 - INFO - +--------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:42:22.364 - INFO - echo $?
20190402 10:42:22.364 - INFO - +--------- END KW: SSHLibrary.Write (1)
20190402 10:42:22.365 - INFO - +--------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:42:22.365 - INFO - 0
20190402 10:42:22.365 - INFO - ${rc} = 0
20190402 10:42:22.365 - INFO - +--------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 10:42:22.365 - INFO - +--------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:42:22.365 - INFO - 0
20190402 10:42:22.365 - INFO - +--------- END KW: BuiltIn.Log (0)
20190402 10:42:22.365 - INFO - ${rc} = 0
20190402 10:42:22.365 - INFO - +-------- END KW: Utils.Get Return Code (2)
20190402 10:42:22.365 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:42:22.366 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:42:22.366 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:22.366 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:42:22.366 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:42:22.366 - INFO - +-------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:22.367 - INFO - +-------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:42:22.367 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-0-a762cb46-526sh -n openstack' to see all of the containers in this pod.
foo = bar
20190402 10:42:22.367 - INFO - +-------- END KW: Collections.Log Dictionary (0)
20190402 10:42:22.367 - INFO - &{result} = { stdout=Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-0-a762cb46-526sh -n openstack' to see all of the containers in this pod.
foo = bar | stderr= | r...
20190402 10:42:22.367 - INFO - +------- END KW: Utils.Run Command (295)
20190402 10:42:22.367 - INFO - +------- START KW: BuiltIn.Should Contain [ ${result.stdout} | foo = bar ]
20190402 10:42:22.367 - INFO - +------- END KW: BuiltIn.Should Contain (0)
20190402 10:42:22.367 - INFO - +------ END KW: ${nova_pod} = nova-compute-controller-0-a762cb46-526sh (296)
20190402 10:42:22.367 - INFO - +------ START KW: ${nova_pod} = nova-compute-controller-1-347ae4cb-m4lxz [ ]
20190402 10:42:22.368 - INFO - +------- START KW: BuiltIn.Catenate [ ${kubectl_cmd} | ${nova_pod} | -- grep foo /etc/nova/nova.conf ]
20190402 10:42:22.368 - INFO - ${cmd} = kubectl exec -n openstack -it nova-compute-controller-1-347ae4cb-m4lxz -- grep foo /etc/nova/nova.conf
20190402 10:42:22.368 - INFO - +------- END KW: BuiltIn.Catenate (0)
20190402 10:42:22.368 - INFO - +------- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:42:22.368 - INFO - +-------- START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:42:22.369 - INFO - +-------- END KW: SSHLibrary.Set Client Configuration (1)
20190402 10:42:22.369 - INFO - +-------- START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:42:22.369 - INFO - +--------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:42:22.370 - INFO - &{result_dict} = { stdout= }
20190402 10:42:22.370 - INFO - +--------- END KW: BuiltIn.Create Dictionary (1)
20190402 10:42:22.370 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:42:22.370 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:22.370 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:42:22.370 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:22.371 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:42:22.371 - INFO - +-------- END KW: Utils.Create Empy Result Dictionary (2)
20190402 10:42:22.371 - INFO - +-------- START KW: SSHLibrary.Read [ ]
20190402 10:42:22.371 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:22.371 - INFO - +-------- END KW: SSHLibrary.Read (0)
20190402 10:42:22.371 - INFO - +-------- START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:42:22.374 - INFO - kubectl exec -n openstack -it nova-com pute-controller-1-347ae4cb-m4lxz -- grep foo /etc/nova/nova.conf
20190402 10:42:22.374 - INFO - +-------- END KW: SSHLibrary.Write (3)
20190402 10:42:22.374 - INFO - +-------- START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:42:22.629 - INFO - Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-1-347ae4cb-m4lxz -n openstack' to see all of the containers in this pod.
foo = bar
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:22.630 - INFO - ${output} = Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-1-347ae4cb-m4lxz -n openstack' to see all of the containers in this pod.
foo = bar
[wrsroot@controller-0...
20190402 10:42:22.630 - INFO - +-------- END KW: SSHLibrary.Read Until Prompt (256)
20190402 10:42:22.630 - INFO - +-------- START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:42:22.630 - INFO - +--------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:42:22.630 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:22.630 - INFO - +--------- END KW: String.Get Line (0)
20190402 10:42:22.630 - INFO - +--------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:42:22.631 - INFO - ${clean_out} = Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-1-347ae4cb-m4lxz -n openstack' to see all of the containers in this pod.
foo = bar
20190402 10:42:22.631 - INFO - +--------- END KW: String.Remove String (1)
20190402 10:42:22.631 - INFO - ${output} = Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-1-347ae4cb-m4lxz -n openstack' to see all of the containers in this pod.
foo = bar
20190402 10:42:22.631 - INFO - +-------- END KW: Utils.Remove Prompt Line (1)
20190402 10:42:22.631 - INFO - +-------- START KW: Utils.Get Return Code [ ]
20190402 10:42:22.631 - INFO - +--------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:42:22.633 - INFO - echo $?
20190402 10:42:22.633 - INFO - +--------- END KW: SSHLibrary.Write (2)
20190402 10:42:22.633 - INFO - +--------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:42:22.634 - INFO - 0
20190402 10:42:22.634 - INFO - ${rc} = 0
20190402 10:42:22.634 - INFO - +--------- END KW: SSHLibrary.Read Until Regexp (1)
20190402 10:42:22.634 - INFO - +--------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:42:22.634 - INFO - 0
20190402 10:42:22.634 - INFO - +--------- END KW: BuiltIn.Log (0)
20190402 10:42:22.634 - INFO - ${rc} = 0
20190402 10:42:22.634 - INFO - +-------- END KW: Utils.Get Return Code (3)
20190402 10:42:22.634 - INFO - +-------- START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:42:22.635 - INFO - +--------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:42:22.635 - INFO - +--------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:22.635 - INFO - +-------- END KW: BuiltIn.Run Keyword If (1)
20190402 10:42:22.635 - INFO - +-------- START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:42:22.636 - INFO - +-------- END KW: Collections.Set To Dictionary (1)
20190402 10:42:22.636 - INFO - +-------- START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:42:22.636 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-1-347ae4cb-m4lxz -n openstack' to see all of the containers in this pod.
foo = bar
20190402 10:42:22.636 - INFO - +-------- END KW: Collections.Log Dictionary (0)
20190402 10:42:22.636 - INFO - &{result} = { stdout=Defaulting container name to nova-compute.
Use 'kubectl describe pod/nova-compute-controller-1-347ae4cb-m4lxz -n openstack' to see all of the containers in this pod.
foo = bar | stderr= | r...
20190402 10:42:22.636 - INFO - +------- END KW: Utils.Run Command (268)
20190402 10:42:22.636 - INFO - +------- START KW: BuiltIn.Should Contain [ ${result.stdout} | foo = bar ]
20190402 10:42:22.637 - INFO - +------- END KW: BuiltIn.Should Contain (1)
20190402 10:42:22.637 - INFO - +------ END KW: ${nova_pod} = nova-compute-controller-1-347ae4cb-m4lxz (270)
20190402 10:42:22.637 - INFO - +----- END KW: ${nova_pod} IN [ @{nova_pod_list} ] (566)
20190402 10:42:22.637 - INFO - +---- END KW: Utils.Check Helm Override OpenStack (1381)
------------------------------------------------------------------------------
20190402 10:42:22.637 - INFO - +--- END TEST: STX OpenStack Override Update Reset (31895)
------------------------------------------------------------------------------
20190402 10:42:22.638 - INFO - +--- START TEST: Kube System Services [ ]
------------------------------------------------------------------------------
20190402 10:42:22.638 - INFO - +---- START KW: Utils.Check PODs Health [ ]
20190402 10:42:22.638 - INFO - +----- START KW: BuiltIn.Set Variable [ kubectl get pods --all-namespaces -o wide ]
20190402 10:42:22.638 - INFO - ${kubectl_cmd} = kubectl get pods --all-namespaces -o wide
20190402 10:42:22.638 - INFO - +----- END KW: BuiltIn.Set Variable (0)
20190402 10:42:22.638 - INFO - +----- START KW: BuiltIn.Catenate [ SEPARATOR=| | ${kubectl_cmd} | grep -v NAMESPACE | grep -v Running | grep -v Completed ]
20190402 10:42:22.639 - INFO - ${cmd} = kubectl get pods --all-namespaces -o wide|grep -v NAMESPACE|grep -v Running|grep -v Completed
20190402 10:42:22.639 - INFO - +----- END KW: BuiltIn.Catenate (1)
20190402 10:42:22.639 - INFO - +----- START KW: Utils.Run Command [ ${cmd} ]
20190402 10:42:22.639 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:42:22.639 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:42:22.639 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:42:22.640 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:42:22.640 - INFO - &{result_dict} = { stdout= }
20190402 10:42:22.640 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:42:22.640 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:42:22.640 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:22.641 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:42:22.641 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:22.641 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:42:22.641 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (2)
20190402 10:42:22.641 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 10:42:22.641 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:22.642 - INFO - +------ END KW: SSHLibrary.Read (1)
20190402 10:42:22.642 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:42:22.655 - INFO - kubectl get pods --all-namespaces -o w ide|grep -v NAMESPACE|grep -v Running|grep -v Completed
20190402 10:42:22.655 - INFO - +------ END KW: SSHLibrary.Write (13)
20190402 10:42:22.655 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:42:22.879 - INFO - default       testpod                                                       0/1     ImagePullBackOff   0          4h23m   172.16.0.6     controller-0   <none>
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:22.880 - INFO - ${output} = default       testpod                                                       0/1     ImagePullBackOff   0          4h23m   172.16.0.6     controller-0   <none>
[wrsroot@controller-0 ~(keystone_admin)]...
20190402 10:42:22.880 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (225)
20190402 10:42:22.880 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:42:22.880 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:42:22.880 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:22.880 - INFO - +------- END KW: String.Get Line (0)
20190402 10:42:22.881 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:42:22.881 - INFO - ${clean_out} = default       testpod                                                       0/1     ImagePullBackOff   0          4h23m   172.16.0.6     controller-0   <none>
20190402 10:42:22.881 - INFO - +------- END KW: String.Remove String (0)
20190402 10:42:22.881 - INFO - ${output} = default       testpod                                                       0/1     ImagePullBackOff   0          4h23m   172.16.0.6     controller-0   <none>
20190402 10:42:22.881 - INFO - +------ END KW: Utils.Remove Prompt Line (1)
20190402 10:42:22.881 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 10:42:22.881 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:42:22.883 - INFO - echo $?
20190402 10:42:22.883 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 10:42:22.883 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:42:22.886 - INFO - 0
20190402 10:42:22.886 - INFO - ${rc} = 0
20190402 10:42:22.886 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (3)
20190402 10:42:22.886 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:42:22.886 - INFO - 0
20190402 10:42:22.886 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 10:42:22.886 - INFO - ${rc} = 0
20190402 10:42:22.887 - INFO - +------ END KW: Utils.Get Return Code (6)
20190402 10:42:22.887 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:42:22.887 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stdout=${output.strip()} ]
20190402 10:42:22.888 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:22.888 - INFO - +------ END KW: BuiltIn.Run Keyword If (1)
20190402 10:42:22.888 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:42:22.888 - INFO - +------ END KW: Collections.Set To Dictionary (0)
20190402 10:42:22.888 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:42:22.888 - INFO - Dictionary size is 3 and it contains following items:
rc: 0
stderr: 
stdout: default       testpod                                                       0/1     ImagePullBackOff   0          4h23m   172.16.0.6     controller-0   <none>
20190402 10:42:22.888 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 10:42:22.889 - INFO - &{result} = { stdout=default       testpod                                                       0/1     ImagePullBackOff   0          4h23m   172.16.0.6     controller-0   <none> | stderr= | rc=0 }
20190402 10:42:22.889 - INFO - +----- END KW: Utils.Run Command (250)
20190402 10:42:22.889 - INFO - +----- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:42:22.889 - INFO - ${value} = default       testpod                                                       0/1     ImagePullBackOff   0          4h23m   172.16.0.6     controller-0   <none>
20190402 10:42:22.889 - INFO - +----- END KW: Collections.Get From Dictionary (0)
20190402 10:42:22.889 - INFO - +----- START KW: BuiltIn.Should Be Empty [ ${value} ]
20190402 10:42:22.889 - INFO - Length is 158
20190402 10:42:22.889 - FAIL - 'default       testpod                                                       0/1     ImagePullBackOff   0          4h23m   172.16.0.6     controller-0   <none>' should be empty.
20190402 10:42:22.889 - DEBUG - Traceback (most recent call last):
  None
20190402 10:42:22.889 - INFO - +----- END KW: BuiltIn.Should Be Empty (0)
20190402 10:42:22.890 - INFO - +---- END KW: Utils.Check PODs Health (252)
------------------------------------------------------------------------------
20190402 10:42:22.890 - INFO - +--- END TEST: Kube System Services (253)
------------------------------------------------------------------------------
20190402 10:42:22.890 - INFO - +--- START TEST: Create Check Delete POD [ ]
------------------------------------------------------------------------------
20190402 10:42:22.890 - INFO - +---- START KW: SSHLibrary.Put File [ %{PYTHONPATH}/Utils/${pod_yml} | ${host_image_path}/${pod_yml} ]
20190402 10:42:22.901 - INFO - [chan 1] Opened sftp connection (server version 3)
20190402 10:42:22.909 - INFO - [chan 2] Opened sftp connection (server version 3)
20190402 10:42:22.913 - INFO - '/home/mgperezi/duplex/stx-test-suite/Utils/testpod.yaml' -> '/home/wrsroot//testpod.yaml'
20190402 10:42:22.913 - INFO - +---- END KW: SSHLibrary.Put File (23)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
20190402 10:42:22.913 - INFO - +---- START KW: Utils.Create POD [ ${pod_yml} | ${pod_name} ]
20190402 10:42:22.914 - INFO - +----- START KW: Utils.Run Command [ kubectl create -f ${pod_yml} ]
20190402 10:42:22.914 - INFO - +------ START KW: SSHLibrary.Set Client Configuration [ timeout=${timeout} | prompt=$ ]
20190402 10:42:22.914 - INFO - +------ END KW: SSHLibrary.Set Client Configuration (0)
20190402 10:42:22.915 - INFO - +------ START KW: Utils.Create Empy Result Dictionary [ ]
20190402 10:42:22.915 - INFO - +------- START KW: BuiltIn.Create Dictionary [ stdout=${EMPTY} ]
20190402 10:42:22.915 - INFO - &{result_dict} = { stdout= }
20190402 10:42:22.915 - INFO - +------- END KW: BuiltIn.Create Dictionary (0)
20190402 10:42:22.915 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | stderr=${EMPTY} ]
20190402 10:42:22.916 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:22.916 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result_dict} | rc=${EMPTY} ]
20190402 10:42:22.916 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:22.916 - INFO - &{result} = { stdout= | stderr= | rc= }
20190402 10:42:22.916 - INFO - +------ END KW: Utils.Create Empy Result Dictionary (1)
20190402 10:42:22.916 - INFO - +------ START KW: SSHLibrary.Read [ ]
20190402 10:42:22.917 - INFO - [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:22.917 - INFO - +------ END KW: SSHLibrary.Read (1)
20190402 10:42:22.917 - INFO - +------ START KW: SSHLibrary.Write [ ${cmd} ]
20190402 10:42:22.923 - INFO - kubectl create -f testpod.yaml
20190402 10:42:22.923 - INFO - +------ END KW: SSHLibrary.Write (6)
20190402 10:42:22.923 - INFO - +------ START KW: SSHLibrary.Read Until Prompt [ ]
20190402 10:42:23.277 - INFO - Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:23.277 - INFO - ${output} = Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
[wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:23.277 - INFO - +------ END KW: SSHLibrary.Read Until Prompt (354)
20190402 10:42:23.277 - INFO - +------ START KW: Utils.Remove Prompt Line [ ${output} ]
20190402 10:42:23.278 - INFO - +------- START KW: String.Get Line [ ${output} | -1 ]
20190402 10:42:23.278 - INFO - ${line_to_remove} = [wrsroot@controller-0 ~(keystone_admin)]$
20190402 10:42:23.278 - INFO - +------- END KW: String.Get Line (0)
20190402 10:42:23.278 - INFO - +------- START KW: String.Remove String [ ${output} | ${line_to_remove} ]
20190402 10:42:23.278 - INFO - ${clean_out} = Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
20190402 10:42:23.278 - INFO - +------- END KW: String.Remove String (0)
20190402 10:42:23.279 - INFO - ${output} = Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
20190402 10:42:23.279 - INFO - +------ END KW: Utils.Remove Prompt Line (2)
20190402 10:42:23.279 - INFO - +------ START KW: Utils.Get Return Code [ ]
20190402 10:42:23.279 - INFO - +------- START KW: SSHLibrary.Write [ echo $? ]
20190402 10:42:23.280 - INFO - echo $?
20190402 10:42:23.281 - INFO - +------- END KW: SSHLibrary.Write (2)
20190402 10:42:23.281 - INFO - +------- START KW: SSHLibrary.Read Until Regexp [ [0-9]+ ]
20190402 10:42:23.281 - INFO - 1
20190402 10:42:23.281 - INFO - ${rc} = 1
20190402 10:42:23.281 - INFO - +------- END KW: SSHLibrary.Read Until Regexp (0)
20190402 10:42:23.281 - INFO - +------- START KW: BuiltIn.Log [ ${rc} ]
20190402 10:42:23.281 - INFO - 1
20190402 10:42:23.281 - INFO - +------- END KW: BuiltIn.Log (0)
20190402 10:42:23.281 - INFO - ${rc} = 1
20190402 10:42:23.282 - INFO - +------ END KW: Utils.Get Return Code (3)
20190402 10:42:23.282 - INFO - +------ START KW: BuiltIn.Run Keyword If [ ${rc} == 0 | Set To Dictionary | ${result} | stdout=${output.strip()} | ELSE IF | ${fail_if_error} == True | FAIL | ${output} | ELSE | Set To Dictionary | ${result} | stderr=${output} ]
20190402 10:42:23.282 - INFO - +------- START KW: Collections.Set To Dictionary [ ${result} | stderr=${output} ]
20190402 10:42:23.282 - INFO - +------- END KW: Collections.Set To Dictionary (0)
20190402 10:42:23.282 - INFO - +------ END KW: BuiltIn.Run Keyword If (0)
20190402 10:42:23.282 - INFO - +------ START KW: Collections.Set To Dictionary [ ${result} | rc=${rc} ]
20190402 10:42:23.283 - INFO - +------ END KW: Collections.Set To Dictionary (1)
20190402 10:42:23.283 - INFO - +------ START KW: Collections.Log Dictionary [ ${result} ]
20190402 10:42:23.283 - INFO - Dictionary size is 3 and it contains following items:
rc: 1
stderr: Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists

stdout:
20190402 10:42:23.283 - INFO - +------ END KW: Collections.Log Dictionary (0)
20190402 10:42:23.283 - INFO - &{result} = { stdout= | stderr=Error from server (AlreadyExists): error when creating "testpod.yaml": pods "testpod" already exists
 | rc=1 }
20190402 10:42:23.283 - INFO - +----- END KW: Utils.Run Command (369)
20190402 10:42:23.283 - INFO - +----- START KW: Collections.Get From Dictionary [ ${result} | stdout ]
20190402 10:42:23.283 - INFO - ${value} =
20190402 10:42:23.284 - INFO - +----- END KW: Collections.Get From Dictionary (1)
20190402 10:42:23.284 - INFO - +----- START KW: BuiltIn.Should Be Equal As Strings [ ${value} | pod/${pod_name} created ]
20190402 10:42:23.284 - DEBUG - Argument types are:
<type 'unicode'>
<type 'unicode'>
20190402 10:42:23.284 - FAIL -  != pod/testpod created
20190402 10:42:23.284 - DEBUG - Traceback (most recent call last):
  None
20190402 10:42:23.284 - INFO - +----- END KW: BuiltIn.Should Be Equal As Strings (0)
20190402 10:42:23.284 - INFO - +---- END KW: Utils.Create POD (371)
------------------------------------------------------------------------------
20190402 10:42:23.284 - INFO - +--- END TEST: Create Check Delete POD (394)
------------------------------------------------------------------------------
20190402 10:42:23.285 - INFO - +--- START TEARDOWN: BuiltIn.Run Keywords [ Utils.Stx Suite TearDown ]
20190402 10:42:23.285 - INFO - +---- START KW: Utils.Stx Suite TearDown [ ]
20190402 10:42:23.286 - INFO - +----- START KW: SSHLibrary.Close All Connections [ ]
20190402 10:42:23.287 - INFO - +----- END KW: SSHLibrary.Close All Connections (1)
20190402 10:42:23.287 - INFO - +---- END KW: Utils.Stx Suite TearDown (2)
20190402 10:42:23.287 - INFO - +--- END TEARDOWN: BuiltIn.Run Keywords (2)
==============================================================================
20190402 10:42:23.289 - INFO - +-- END SUITE: Sanity-Test.Sanity-Platform.02-OpenStack-Pod-Healthy (65706)
==============================================================================
20190402 10:42:23.290 - INFO - +- END SUITE: Sanity-Test.Sanity-Platform (65708)
==============================================================================
20190402 10:42:23.302 - INFO - + END SUITE: Sanity-Test (1207983)
==============================================================================
